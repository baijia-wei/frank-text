/*! For license information please see example.js.LICENSE.txt */
(()=>{var e={11:(e,t,n)=>{var r={"./baidu.svg":1005,"./cuowu.svg":2516,"./qq.svg":4970,"./wechal.svg":6580,"./zhifubao.svg":4575};function a(e){var t=o(e);return n(t)}function o(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=o,e.exports=a,a.id=11},977:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,'*{margin:0;padding:0;box-sizing:border-box}*::before{box-sizing:border-box}*::after{box-sizing:border-box}ul,ol{list-style:none}h1,h2,h3,h4,h5,h6{font-weight:normal}a{text-decoration:none;color:inherit}pre{font-family:"Fira Code Medium", Consolas, monospace}body{font-size:16px;align-content:center}.site-page{background:#ffffff;min-height:100vh}.site-main{padding-top:16px}.site-header{display:flex;justify-content:space-between;align-items:center;background:#eee}.site-header .logo{padding:0 16px;display:flex;align-items:center}.site-header .logo>img{margin-right:8px}.site-header .logo>span{color:#00ADB5;font-size:32px}.site-header .git{margin-right:20px;font-size:15px}.site-aside{border-right:1px solid #EEEEEE;margin-right:16px}.site-aside .site-aside-lanzhou{padding-left:14px}.site-aside h2{padding:16px;font-size:18px}.site-aside ul{min-width:12em;font-size:14px}.site-aside ul>li a{color:#333;display:block;padding:8px 16px}.site-aside ul>li a:hover{color:#5cb2ff}.site-aside ul>li a.active{color:#5cb2ff;background:#e6f7ff}.site-footer{text-align:center;font-size:12px;color:#666;padding:16px 0;border-top:1px solid #eee}.example{padding:16px 0}.ands-head{width:600px}.ands-head .ands-lanzhou-img{display:flex}.ands-head .ands-lanzhou-img img{width:200px;height:200px}\n',""])},5314:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".tabs{display:flex;background-color:#f7f9fc;justify-content:space-around;width:500px;line-height:37px;color:#000;box-sizing:border-box;height:37px}.boxsw{color:#0879fa;box-sizing:border-box;border-bottom:3px solid #0879fa}.select{text-align:center;width:100px}.tabs-content{width:500px;height:600px;background-color:cyan}.none{display:none}\n",""])},9458:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".Action{position:relative}.Action .actionsheet{width:400px;display:flex;justify-content:space-between;align-items:center;padding:0.5rem 1rem;background:chartreuse}.Action .actionsheet-dialog{overflow:hidden;position:absolute;top:30px;width:400px;height:500px;display:flex;justify-content:flex-end;flex-direction:column;transition:all 0.5s ease-in-out}.Action .actionsheet-dialog .dialog-head{display:flex;flex-direction:column}.Action .actionsheet-dialog .dialog,.Action .actionsheet-dialog .dialog-qux{height:37px;text-align:center;line-height:37px;width:100%;background-color:cyan}.Action .actionsheet-dialog .dialog:nth-child(1){border-radius:10px 10px 0 0}.Action .actionsheet-dialog .dialog:hover{opacity:.5}.none{display:none}.dialog-z{transition:all 0.5s ease-in-out}\n",""])},297:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,'*{margin:0;padding:0;list-style:none;text-decoration:none}.luckyDraw{width:420px}.prize{font-size:30px}.lottery{width:240px;margin:30px auto;position:relative}.lottery li{width:80px;height:80px;border:1px solid #000;box-sizing:border-box;text-align:center;line-height:80px;position:absolute}.lottery li:nth-of-type(1){left:0;top:0}.lottery li:nth-of-type(2){left:80px;top:0}.lottery li:nth-of-type(3){left:160px;top:0}.lottery li:nth-of-type(4){left:160px;top:80px}.lottery li:nth-of-type(5){left:160px;top:160px}.lottery li:nth-of-type(6){left:80px;top:160px}.lottery li:nth-of-type(7){left:0;top:160px}.lottery li:nth-of-type(8){left:0;top:80px}.dox{width:80px;height:80px;border:1px solid #000;box-sizing:border-box;text-align:center;line-height:80px;position:absolute;left:80px;top:80px;cursor:pointer;background:gold}.actives:after{position:absolute;top:0;left:0;content:"";width:100%;height:100%;background:rgba(0,0,0,0.1)}\n',""])},6680:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".ands-header p{margin:2em 0;font-size:15px}.ands-header-content{padding:10px;display:flex}.ands-header-content .ands-content-left,.ands-header-content .ands-content-right{min-width:480px;margin-right:1em;padding:1em 1em;border:1px solid #cccccc;border-radius:5px}.ands-content-right:hover,.ands-content-left:hover{box-shadow:0px 1px 2px 0px #999}.ands-content-left-text{font-size:14px}.ands-content-left-text p{margin-top:20px;width:370px}\n",""])},2550:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".fui-button{outline:0;border:none;padding:4px 16px;line-height:22px;transition:all 250ms;cursor:pointer}.fui-button:focus{outline:none}.fui-button-normal{color:#333;border:1px solid #b3b3b3;background:white}.fui-button-red{color:#ffffff;background:red}.fui-button-important{color:white;border:1px solid #1890ff;background:#1890ff}.fui-button:active{opacity:0.5}\n",""])},2866:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".choice-body{margin-top:30px;width:500px;display:flex;align-items:center;justify-content:space-between}.choice-body .choice{width:70px;height:30px;color:#009bf5;border-radius:3px;border:1px solid #009bf5;text-align:center;line-height:30px}.choice-body .active{background:#fd7522;border:1px solid #fd7522;color:#fff}\n",""])},2710:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".fui-citySelect-body{overflow:hidden}.fui-citySelect-dialog{position:fixed;top:0;left:0;width:100%;height:100%;background:white}.fui-citySelect-dialog>header{background:#ffca00;display:flex;justify-content:center;align-items:center;font-size:16px;position:relative;line-height:50px;height:50px}.fui-citySelect-dialog>header>.icon{position:absolute;left:0}\n",""])},8582:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".fui-dialog{position:fixed;background:white;min-width:20em;z-index:2;border-radius:4px;top:50%;left:50%;transform:translate(-50%, -50%)}.fui-dialog-mask{position:fixed;top:0;left:0;width:100%;height:100%;background:rgba(0,0,0,0.5);z-index:1}.fui-dialog-header{font-size:14px;padding:8px 16px;border-bottom:1px solid grey}.fui-dialog-main{padding:8px 16px;min-height:6em}.fui-dialog-footer{padding:8px 16px;border-top:1px solid grey;display:flex;justify-content:flex-end}.fui-dialog-close{position:absolute;bottom:100%;left:100%;background:#1890ff;width:2em;height:2em;border-radius:50%;transform:translate(-50%, 50%);display:flex;justify-content:center;align-items:center;color:white}\n",""])},149:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".dragpull .dragpull-title{color:#6300e6;margin-bottom:5px}.list{height:300px;margin-top:40px;border-radius:3px;list-style:none;margin:0;position:relative}.wrapper{overflow:hidden;margin:100px auto;padding:10px}.item{width:110px;color:#a300ee;border:1px solid #0371ee;border-radius:3px;position:absolute;display:flex;justify-content:center;transition:all 0.5s ease-in-out}.draggingItem{transition:scale(1.06);opacity:0.7}.luxun-list{padding:10px;text-align:center;width:400px;margin-top:40px;border-radius:3px;border:1px solid cyan}.luxun-list li{color:#a300ee;padding:5px;height:35px;margin-bottom:5px;border:1px solid #0371ee;transition:all 0.5s ease-in-out;border-radius:3px}.luxun-list li:nth-child(1){color:#00f80c}.luxun-list li:nth-child(2){color:red}.luxun-list li:nth-child(3){color:#f0d}.luxun-list li:nth-child(4){color:#f90}\n",""])},4408:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".fui-form-table{border-collapse:collapse}.fui-form-label{line-height:32px}.fui-form-td{vertical-align:top;padding-top:0;padding-bottom:8px}.fui-form-tr:last-child .fui-form-td{padding-bottom:0}.fui-form-td+.fui-form-td{padding-left:16px}.fui-form-error{color:red;margin-top:4px;font-size:0.8em}\n",""])},4092:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".ands-header p{margin:2em 0;font-size:15px}.ands-header-content{height:500px;padding:10px;display:flex}.ands-header-content .ands-content-left,.ands-header-content .ands-content-right{min-width:480px;margin-right:1em;padding:1em 1em;border:1px solid #cccccc;border-radius:5px}.ands-header-content .ands-content-right{overflow-y:scroll}.ands-content-right:hover,.ands-content-left:hover{box-shadow:0px 1px 2px 0px #999}.ands-content-left-text{font-size:14px}.ands-content-left-text p{margin-top:20px;width:370px}\n",""])},5706:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".ands-guanwan{width:100%;height:50px;background-color:#dddddd;line-height:50px}p{margin:5px 0;font-size:14px}.critic{margin-top:20px}\n",""])},1828:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".fui-icon{width:1.4em;height:1.4em}\n",""])},4229:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,"[class^=fui-]{box-sizing:border-box}[class^=fui-]::after,[class^=fui-]::before{box-sizing:border-box}button{box-sizing:border-box;height:32px;margin:0 4px;border-radius:4px}button:first-child{margin-left:0}button:last-child{margin-right:0}\n",""])},7953:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".fui-input{border:1px solid #ddd;line-height:22px;padding:4px 8px;border-radius:4px;box-shadow:0 0 0 2px rgba(24,144,255,0);transition:box-shadow 250ms}.fui-input:focus{outline:none;border-color:#1890ff;box-shadow:0 0 0 2px rgba(24,144,255,0.5)}\n",""])},2935:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".ands-header p{margin:2em 0;font-size:15px}.ands-header-content{padding:10px;display:flex}.ands-header-content .ands-content-left,.ands-header-content .ands-content-right{min-width:480px;margin-right:1em;padding:1em 1em;border:1px solid #cccccc;border-radius:5px}.ands-content-right:hover,.ands-content-left:hover{box-shadow:0px 1px 2px 0px #999}.ands-content-left-text{font-size:14px}.ands-content-left-text p{margin-top:20px;width:370px}\n",""])},9031:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".x{height:40px;background:#4285f4;margin:4px 0;color:white}.y{background:#5a95f5;margin:4px 0;color:white}.z{background:#34a853;width:100px;margin:4px 0;color:white}.z+.y,.y+.z,.z+.gu-layout{margin-left:8px}\n",""])},9873:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".gu-layout{display:flex;flex-direction:column}.gu-layout-content{flex-grow:1}.gu-layout .gu-layout{flex-grow:1;flex-direction:row}.gu-layout-hasAside{flex-direction:row}.gu-layout-hasAside .gu-layout{flex-direction:column}\n",""])},8124:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".containers{height:100vh;overflow:scroll}.containers .items{height:30px;border:1px solid #eee;padding:6px 10px;cursor:pointer}.panel{border:1px solid red}\n",""])},4133:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".xue-radio{display:inline-flex;justify-content:flex-start;align-items:flex-start;color:rgba(0,0,0,0.65);font-size:14px;line-height:22px}.xue-radio.vertical{flex-direction:column}.xue-radio .xue-option{display:inline-flex;justify-content:flex-start;align-items:center;cursor:pointer}.xue-radio .xue-option>.label-dot{width:16px;height:16px;border-radius:50%;border:1px solid;border-color:rgba(0,0,0,0.15);display:flex;justify-content:center;align-content:center;position:relative;transition:all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86)}.xue-radio .xue-option>.label-dot::after{position:absolute;top:3px;left:3px;content:'';display:block;width:8px;height:8px;background-color:#1890ff;border-radius:50%;opacity:0;transform:scale(0);transition:all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86)}.xue-radio .xue-option:hover>.label-dot{border-color:#1890ff}.xue-radio .xue-option.checked .label-dot{border-color:#1890ff}.xue-radio .xue-option.checked .label-dot::after{opacity:1;transform:scale(1)}.xue-radio .xue-option>.label-text{padding:0 8px;background-color:#fff;transition:all 0.3s cubic-bezier(0.78, 0.14, 0.15, 0.86)}.xue-radio .xue-option.button-style>.label-text{padding:4px 15px;border:1px solid;border-color:rgba(0,0,0,0.15)}.xue-radio .xue-option.button-style>.label-text:hover{color:#1890ff}.xue-radio .xue-option.button-style:not(:first-child)>.label-text{margin-left:-1px}.xue-radio .xue-option.button-style:first-child>.label-text{border-top-left-radius:4px;border-bottom-left-radius:4px;border-top-right-radius:0;border-bottom-right-radius:0}.xue-radio .xue-option.button-style:last-child>.label-text{border-top-left-radius:0;border-bottom-left-radius:0;border-top-right-radius:4px;border-bottom-right-radius:4px}.xue-radio .xue-option.button-style.checked>.label-text{background-color:#1890ff;color:#fff;position:relative;z-index:1;border-color:#1890ff}.xue-radio .xue-option.button-style.checked>.label-text:hover{background-color:#40a9ff;border-color:#40a9ff}.xue-radio .xue-option.button-style.vertical>.label-text{margin-left:0;min-width:120px;text-align:center}.xue-radio .xue-option.button-style.vertical:not(:first-child)>.label-text{margin-top:-1px}.xue-radio .xue-option.button-style.vertical:first-child>.label-text{border-top-left-radius:4px;border-bottom-left-radius:0;border-top-right-radius:4px;border-bottom-right-radius:0}.xue-radio .xue-option.button-style.vertical:last-child>.label-text{border-top-left-radius:0;border-bottom-left-radius:4px;border-top-right-radius:0;border-bottom-right-radius:4px}.xue-radio .xue-option.disabled>.label-dot{cursor:not-allowed;border-color:#d9d9d9;background-color:#e6e6e6}.xue-radio .xue-option.disabled>.label-dot::after{background-color:rgba(0,0,0,0.35)}.xue-radio .xue-option.disabled>.label-text{cursor:not-allowed;color:rgba(0,0,0,0.25)}.xue-radio .xue-option.disabled>.label-text:hover{color:rgba(0,0,0,0.25)}.xue-radio .xue-option.disabled.button-style.checked>.label-text{background-color:#e6e6e6;border-color:#d9d9d9}.xue-radio .xue-option.disabled.button-style.checked>.label-text:hover{color:#fff}\n",""])},2566:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".fui-scroll{position:relative;overflow:hidden}.fui-scroll-inner{overflow:auto;position:absolute;top:0;bottom:0;left:0;right:0}.fui-scroll-track{width:8px;position:absolute;right:0;top:0;height:100%}.fui-scroll-bar{height:30px;background:rgba(128,128,128,0.8);position:absolute;top:0;left:0px;width:6px;border-radius:3px}\n",""])},2184:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".xue-switch{width:40px;height:22px;display:inline-flex;border-color:#1890ff;border-radius:11px;background-color:rgba(0,0,0,0.25);cursor:pointer;transition:all .2s linear;padding:2px;position:relative}.xue-switch>.xue-switch-core{width:18px;height:18px;border-radius:50%;background-color:#fff;transform:translateX(0);transition:all .2s linear}.xue-switch.checked{background-color:#1890ff}.xue-switch.checked>.xue-switch-core{transform:translateX(100%)}.xue-switch.disabled{cursor:not-allowed}.xue-switch.disabled::after{content:'';display:block;position:absolute;top:0;left:0;right:0;bottom:0;border-radius:inherit;background-color:#fff;opacity:0.4}.xue-switch.small{width:32px;height:18px;padding:2px}.xue-switch.small>.xue-switch-core{width:14px;height:14px}\n",""])},6988:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".tables{line-height:25px;text-align:center}.tables .table-th{width:120px}.none{visibility:hidden}.visible{visibility:visible}\n",""])},5198:(e,t,n)=>{(e.exports=n(3645)(!1)).push([e.id,".ands-tree-level-1{margin-left:0px}.ands-tree-level-2{margin-left:1em}.ands-tree-level-3{margin-left:1em}.ands-tree-level-4{margin-left:1em}.ands-tree-level-5{margin-left:1em}.ands-tree-level-6{margin-left:1em}\n",""])},3645:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n=function(e,t){var n,r=e[1]||"",a=e[3];if(!a)return r;if(t&&"function"==typeof btoa){var o=(n=a,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */"),i=a.sources.map((function(e){return"/*# sourceURL="+a.sourceRoot+e+" */"}));return[r].concat(i).concat([o]).join("\n")}return[r].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n})).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var r={},a=0;a<this.length;a++){var o=this[a][0];null!=o&&(r[o]=!0)}for(a=0;a<e.length;a++){var i=e[a];null!=i[0]&&r[i[0]]||(n&&!i[2]?i[2]=n:n&&(i[2]="("+i[2]+") and ("+n+")"),t.push(i))}},t}},8679:(e,t,n)=>{"use strict";var r=n(9864),a={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},l={};function u(e){return r.isMemo(e)?i:l[e.$$typeof]||a}l[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},l[r.Memo]=i;var s=Object.defineProperty,c=Object.getOwnPropertyNames,d=Object.getOwnPropertySymbols,f=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,m=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(m){var a=p(n);a&&a!==m&&e(t,a,r)}var i=c(n);d&&(i=i.concat(d(n)));for(var l=u(t),h=u(n),g=0;g<i.length;++g){var v=i[g];if(!(o[v]||r&&r[v]||h&&h[v]||l&&l[v])){var y=f(n,v);try{s(t,v,y)}catch(e){}}}}return t}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,o){for(var i,l,u=a(e),s=1;s<arguments.length;s++){for(var c in i=Object(arguments[s]))n.call(i,c)&&(u[c]=i[c]);if(t){l=t(i);for(var d=0;d<l.length;d++)r.call(i,l[d])&&(u[l[d]]=i[l[d]])}}return u}},2703:(e,t,n)=>{"use strict";var r=n(414);function a(){}function o(){}o.resetWarningCache=a,e.exports=function(){function e(e,t,n,a,o,i){if(i!==r){var l=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw l.name="Invariant Violation",l}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:a};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},7132:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r="import React from 'react';\r\nimport Buttonss from './button'\r\n\r\nconst ButtonAssembly3: React.FunctionComponent = () => {\r\n    return (\r\n        <div>\r\n                <Buttonss className=\"baijiawei\" disabled>\r\n                    Loading..\r\n                </Buttonss>\r\n\r\n        </div>\r\n    );\r\n};\r\nexport default ButtonAssembly3;"},3942:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r="import React from 'react';\r\nimport Buttonss from './button'\r\nconst ButtonAssembly1: React.FunctionComponent = () => {\r\n    return (\r\n        <div >\r\n            <div >\r\n                <Buttonss>默认按钮</Buttonss>\r\n                <Buttonss level=\"important\">蓝色按钮</Buttonss>\r\n                <Buttonss level=\"red\">红色</Buttonss>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default ButtonAssembly1;"},5790:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r="import React from 'react';\r\n\r\n\r\nconst ButtonAssembly2: React.FunctionComponent = () => {\r\n    return (\r\n        <div className=\"ands-header\">\r\n\r\n        </div>\r\n    );\r\n};\r\nexport default ButtonAssembly2;"},8215:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r="import React, {useState ,Fragment} from \"react\";\r\nimport Form,{FormValue} from \"./form\";\r\nimport Validator, {noError} from './validator';\r\nimport Buttonss from '../button/button';\r\n\r\n\r\nconst usernames = ['frank', 'jack', 'frankfrank', 'alice', 'bob'];\r\nconst checkUserName = (username: string, succeed: Function, fail: () => void) => {\r\n    setTimeout(() => {\r\n        console.log('我现在知道用户名是否存在');\r\n        if (usernames.indexOf(username) >= 0) {\r\n            fail();\r\n        } else {\r\n            succeed();\r\n        }\r\n    }, 2000);\r\n};\r\n\r\nconst FormExample: React.FunctionComponent = () =>{\r\n    const [formData, setFormData] = useState<FormValue>({\r\n        username: '',\r\n        password: ''\r\n    });\r\n    const [fields]=useState([\r\n\r\n        {name: 'username', label: '头像', input: {type: 'text'}},\r\n        {name: 'password', label: '密码', input: {type: 'password'}},\r\n    ]);\r\n    const [errors, setErrors] = useState({});\r\n    const validator = (username: string) => {\r\n        return new Promise<string>((resolve, reject) => {\r\n            checkUserName(username, resolve, () => reject('unique'));\r\n        });\r\n    };\r\n    const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        const rules = [\r\n            {key: 'username', required: true},\r\n            {key: 'username', minLength: 8, maxLength: 16},\r\n            {key: 'username', validator},\r\n            {key: 'username', validator},\r\n            {key: 'username', pattern: /^[A-Za-z0-9]+$/},\r\n            {key: 'password', required: true},\r\n            {key: 'password', validator},\r\n            {key: 'password', validator},\r\n        ];\r\n        Validator(formData, rules, (errors) => {\r\n            console.log(errors);\r\n            setErrors(errors);\r\n            if (noError(errors)) {\r\n              \r\n            }\r\n        });\r\n    };\r\n    const transformError = (message: string) => {\r\n        const map: any = {\r\n            unique: 'username is taken',\r\n            required: 'required',\r\n            minLength: 'too short',\r\n            maxLength: 'too long',\r\n        };\r\n        return map[message];\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Form value={formData}\r\n                  fields={fields}\r\n                  buttons={\r\n                      <Fragment>\r\n                          <Buttonss type=\"submit\" level=\"important\">提交</Buttonss>\r\n                          <Buttonss>返回</Buttonss>\r\n                      </Fragment>\r\n                  }\r\n                  errors={errors}\r\n                  transformError={transformError}\r\n                  onChange={(newValue) => setFormData(newValue)}\r\n                  onSubmit={onSubmit}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FormExample;"},8272:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r='import React from \'react\';\r\nimport Icon from "./icon";\r\n\r\n\r\nconst IconExample1: React.FunctionComponent = () => {\r\n    return (\r\n        <div>\r\n            <Icon name="qq"></Icon>\r\n            <Icon name="baidu"></Icon>\r\n            <Icon name="wechal"></Icon>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default IconExample1;'},1864:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r="import React from 'react';\r\n\r\nconst IconExample2: React.FunctionComponent = () => {\r\n    return (\r\n        <div>\r\n            example 2\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default IconExample2;"},2251:(e,t,n)=>{"use strict";n.d(t,{Z:()=>r});const r='import React, {useState} from "react";\r\nimport Input from "./input";\r\nconst InputExample: React.FunctionComponent = () => {\r\n    const [value, setvalue] = useState(\'你好\')\r\n    return (\r\n        <div>\r\n            <Input value={value} onChange={\r\n                (event: { target: { value: React.SetStateAction<string>; }; }) => {\r\n                setvalue(event.target.value)\r\n            }}/>\r\n            <div>{value}</div>\r\n        </div>\r\n    )\r\n}\r\nexport default InputExample;'},4448:(e,t,n)=>{"use strict";var r=n(7294),a=n(7418),o=n(4142);function i(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(i(227));var l=new Set,u={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,m={},h={};function g(e,t,n,r,a,o,i){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=i}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var y=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function E(e,t,n,r){var a=v.hasOwnProperty(t)?v[t]:null;(null!==a?0===a.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!p.call(h,e)||!p.call(m,e)&&(f.test(e)?h[e]=!0:(m[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(y,b);v[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(y,b);v[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(y,b);v[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=60103,k=60106,S=60107,_=60108,C=60114,N=60109,T=60110,A=60112,O=60113,R=60120,L=60115,P=60116,I=60121,F=60128,D=60129,M=60130,z=60131;if("function"==typeof Symbol&&Symbol.for){var B=Symbol.for;w=B("react.element"),k=B("react.portal"),S=B("react.fragment"),_=B("react.strict_mode"),C=B("react.profiler"),N=B("react.provider"),T=B("react.context"),A=B("react.forward_ref"),O=B("react.suspense"),R=B("react.suspense_list"),L=B("react.memo"),P=B("react.lazy"),I=B("react.block"),B("react.scope"),F=B("react.opaque.id"),D=B("react.debug_trace_mode"),M=B("react.offscreen"),z=B("react.legacy_hidden")}var j,$="function"==typeof Symbol&&Symbol.iterator;function U(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=$&&e[$]||e["@@iterator"])?e:null}function G(e){if(void 0===j)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);j=t&&t[1]||""}return"\n"+j+e}var H=!1;function q(e,t){if(!e||H)return"";H=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var a=e.stack.split("\n"),o=r.stack.split("\n"),i=a.length-1,l=o.length-1;1<=i&&0<=l&&a[i]!==o[l];)l--;for(;1<=i&&0<=l;i--,l--)if(a[i]!==o[l]){if(1!==i||1!==l)do{if(i--,0>--l||a[i]!==o[l])return"\n"+a[i].replace(" at new "," at ")}while(1<=i&&0<=l);break}}}finally{H=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?G(e):""}function V(e){switch(e.tag){case 5:return G(e.type);case 16:return G("Lazy");case 13:return G("Suspense");case 19:return G("SuspenseList");case 0:case 2:case 15:return q(e.type,!1);case 11:return q(e.type.render,!1);case 22:return q(e.type._render,!1);case 1:return q(e.type,!0);default:return""}}function W(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case S:return"Fragment";case k:return"Portal";case C:return"Profiler";case _:return"StrictMode";case O:return"Suspense";case R:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case T:return(e.displayName||"Context")+".Consumer";case N:return(e._context.displayName||"Context")+".Provider";case A:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case L:return W(e.type);case I:return W(e._render);case P:t=e._payload,e=e._init;try{return W(e(t))}catch(e){}}return null}function Y(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function K(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=K(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Z(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=K(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function X(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=Y(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&E(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=Y(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ae(e,t.type,n):t.hasOwnProperty("defaultValue")&&ae(e,t.type,Y(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ae(e,t,n){"number"===t&&X(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function oe(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ie(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+Y(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function le(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(i(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(i(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(i(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:Y(n)}}function se(e,t){var n=Y(t.value),r=Y(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de="http://www.w3.org/1999/xhtml";function fe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?fe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var me,he,ge=(he=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((me=me||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=me.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return he(e,t)}))}:he);function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ye={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function Ee(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ye.hasOwnProperty(e)&&ye[e]?(""+t).trim():t+"px"}function xe(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=Ee(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(ye).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ye[t]=ye[e]}))}));var we=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ke(e,t){if(t){if(we[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(i(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(i(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(i(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(i(62))}}function Se(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function _e(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Ne=null,Te=null;function Ae(e){if(e=na(e)){if("function"!=typeof Ce)throw Error(i(280));var t=e.stateNode;t&&(t=aa(t),Ce(e.stateNode,e.type,t))}}function Oe(e){Ne?Te?Te.push(e):Te=[e]:Ne=e}function Re(){if(Ne){var e=Ne,t=Te;if(Te=Ne=null,Ae(e),t)for(e=0;e<t.length;e++)Ae(t[e])}}function Le(e,t){return e(t)}function Pe(e,t,n,r,a){return e(t,n,r,a)}function Ie(){}var Fe=Le,De=!1,Me=!1;function ze(){null===Ne&&null===Te||(Ie(),Re())}function Be(e,t){var n=e.stateNode;if(null===n)return null;var r=aa(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(i(231,t,typeof n));return n}var je=!1;if(d)try{var $e={};Object.defineProperty($e,"passive",{get:function(){je=!0}}),window.addEventListener("test",$e,$e),window.removeEventListener("test",$e,$e)}catch(he){je=!1}function Ue(e,t,n,r,a,o,i,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Ge=!1,He=null,qe=!1,Ve=null,We={onError:function(e){Ge=!0,He=e}};function Ye(e,t,n,r,a,o,i,l,u){Ge=!1,He=null,Ue.apply(We,arguments)}function Ke(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ze(e){if(Ke(e)!==e)throw Error(i(188))}function Xe(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ke(e)))throw Error(i(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var o=a.alternate;if(null===o){if(null!==(r=a.return)){n=r;continue}break}if(a.child===o.child){for(o=a.child;o;){if(o===n)return Ze(a),e;if(o===r)return Ze(a),t;o=o.sibling}throw Error(i(188))}if(n.return!==r.return)n=a,r=o;else{for(var l=!1,u=a.child;u;){if(u===n){l=!0,n=a,r=o;break}if(u===r){l=!0,r=a,n=o;break}u=u.sibling}if(!l){for(u=o.child;u;){if(u===n){l=!0,n=o,r=a;break}if(u===r){l=!0,r=o,n=a;break}u=u.sibling}if(!l)throw Error(i(189))}}if(n.alternate!==r)throw Error(i(190))}if(3!==n.tag)throw Error(i(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,at=!1,ot=[],it=null,lt=null,ut=null,st=new Map,ct=new Map,dt=[],ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,a){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:a,targetContainers:[r]}}function mt(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":lt=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":st.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function ht(e,t,n,r,a,o){return null===e||e.nativeEvent!==o?(e=pt(t,n,r,a,o),null!==t&&null!==(t=na(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function gt(e){var t=ta(e.target);if(null!==t){var n=Ke(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Qe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){o.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=na(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){vt(e)&&n.delete(t)}function bt(){for(at=!1;0<ot.length;){var e=ot[0];if(null!==e.blockedOn){null!==(e=na(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Xt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&ot.shift()}null!==it&&vt(it)&&(it=null),null!==lt&&vt(lt)&&(lt=null),null!==ut&&vt(ut)&&(ut=null),st.forEach(yt),ct.forEach(yt)}function Et(e,t){e.blockedOn===t&&(e.blockedOn=null,at||(at=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,bt)))}function xt(e){function t(t){return Et(t,e)}if(0<ot.length){Et(ot[0],e);for(var n=1;n<ot.length;n++){var r=ot[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&Et(it,e),null!==lt&&Et(lt,e),null!==ut&&Et(ut,e),st.forEach(t),ct.forEach(t),n=0;n<dt.length;n++)(r=dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)gt(n),null===n.blockedOn&&dt.shift()}function wt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:wt("Animation","AnimationEnd"),animationiteration:wt("Animation","AnimationIteration"),animationstart:wt("Animation","AnimationStart"),transitionend:wt("Transition","TransitionEnd")},St={},_t={};function Ct(e){if(St[e])return St[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in _t)return St[e]=n[t];return e}d&&(_t=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var Nt=Ct("animationend"),Tt=Ct("animationiteration"),At=Ct("animationstart"),Ot=Ct("transitionend"),Rt=new Map,Lt=new Map,Pt=["abort","abort",Nt,"animationEnd",Tt,"animationIteration",At,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ot,"transitionEnd","waiting","waiting"];function It(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1];a="on"+(a[0].toUpperCase()+a.slice(1)),Lt.set(r,t),Rt.set(r,a),s(a,[r])}}(0,o.unstable_now)();var Ft=8;function Dt(e){if(0!=(1&e))return Ft=15,1;if(0!=(2&e))return Ft=14,2;if(0!=(4&e))return Ft=13,4;var t=24&e;return 0!==t?(Ft=12,t):0!=(32&e)?(Ft=11,32):0!=(t=192&e)?(Ft=10,t):0!=(256&e)?(Ft=9,256):0!=(t=3584&e)?(Ft=8,t):0!=(4096&e)?(Ft=7,4096):0!=(t=4186112&e)?(Ft=6,t):0!=(t=62914560&e)?(Ft=5,t):67108864&e?(Ft=4,67108864):0!=(134217728&e)?(Ft=3,134217728):0!=(t=805306368&e)?(Ft=2,t):0!=(1073741824&e)?(Ft=1,1073741824):(Ft=8,e)}function Mt(e,t){var n=e.pendingLanes;if(0===n)return Ft=0;var r=0,a=0,o=e.expiredLanes,i=e.suspendedLanes,l=e.pingedLanes;if(0!==o)r=o,a=Ft=15;else if(0!=(o=134217727&n)){var u=o&~i;0!==u?(r=Dt(u),a=Ft):0!=(l&=o)&&(r=Dt(l),a=Ft)}else 0!=(o=n&~i)?(r=Dt(o),a=Ft):0!==l&&(r=Dt(l),a=Ft);if(0===r)return 0;if(r=n&((0>(r=31-Gt(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&i)){if(Dt(t),a<=Ft)return t;Ft=a}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-Gt(t)),r|=e[n],t&=~a;return r}function zt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Bt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=jt(24&~t))?Bt(10,t):e;case 10:return 0===(e=jt(192&~t))?Bt(8,t):e;case 8:return 0===(e=jt(3584&~t))&&0===(e=jt(4186112&~t))&&(e=512),e;case 2:return 0===(t=jt(805306368&~t))&&(t=268435456),t}throw Error(i(358,e))}function jt(e){return e&-e}function $t(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ut(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Gt(t)]=n}var Gt=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Ht(e)/qt|0)|0},Ht=Math.log,qt=Math.LN2,Vt=o.unstable_UserBlockingPriority,Wt=o.unstable_runWithPriority,Yt=!0;function Kt(e,t,n,r){De||Ie();var a=Zt,o=De;De=!0;try{Pe(a,e,t,n,r)}finally{(De=o)||ze()}}function Qt(e,t,n,r){Wt(Vt,Zt.bind(null,e,t,n,r))}function Zt(e,t,n,r){var a;if(Yt)if((a=0==(4&t))&&0<ot.length&&-1<ft.indexOf(e))e=pt(null,e,t,n,r),ot.push(e);else{var o=Xt(e,t,n,r);if(null===o)a&&mt(e,r);else{if(a){if(-1<ft.indexOf(e))return e=pt(o,e,t,n,r),void ot.push(e);if(function(e,t,n,r,a){switch(t){case"focusin":return it=ht(it,e,t,n,r,a),!0;case"dragenter":return lt=ht(lt,e,t,n,r,a),!0;case"mouseover":return ut=ht(ut,e,t,n,r,a),!0;case"pointerover":var o=a.pointerId;return st.set(o,ht(st.get(o)||null,e,t,n,r,a)),!0;case"gotpointercapture":return o=a.pointerId,ct.set(o,ht(ct.get(o)||null,e,t,n,r,a)),!0}return!1}(o,e,t,n,r))return;mt(e,r)}Ir(e,t,r,null,n)}}}function Xt(e,t,n,r){var a=_e(r);if(null!==(a=ta(a))){var o=Ke(a);if(null===o)a=null;else{var i=o.tag;if(13===i){if(null!==(a=Qe(o)))return a;a=null}else if(3===i){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;a=null}else o!==a&&(a=null)}}return Ir(e,t,r,a,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,a="value"in Jt?Jt.value:Jt.textContent,o=a.length;for(e=0;e<r&&n[e]===a[e];e++);var i=r-e;for(t=1;t<=i&&n[r-t]===a[o-t];t++);return tn=a.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function an(){return!0}function on(){return!1}function ln(e){function t(t,n,r,a,o){for(var i in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(i)&&(t=e[i],this[i]=t?t(a):a[i]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?an:on,this.isPropagationStopped=on,this}return a(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=an)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=an)},persist:function(){},isPersistent:an}),t}var un,sn,cn,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=ln(dn),pn=a({},dn,{view:0,detail:0}),mn=ln(pn),hn=a({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Nn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(un=e.screenX-cn.screenX,sn=e.screenY-cn.screenY):sn=un=0,cn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),gn=ln(hn),vn=ln(a({},hn,{dataTransfer:0})),yn=ln(a({},pn,{relatedTarget:0})),bn=ln(a({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),En=a({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),xn=ln(En),wn=ln(a({},dn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Sn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},_n={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=_n[e])&&!!t[e]}function Nn(){return Cn}var Tn=a({},pn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Sn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Nn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),An=ln(Tn),On=ln(a({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Rn=ln(a({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Nn})),Ln=ln(a({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Pn=a({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),In=ln(Pn),Fn=[9,13,27,32],Dn=d&&"CompositionEvent"in window,Mn=null;d&&"documentMode"in document&&(Mn=document.documentMode);var zn=d&&"TextEvent"in window&&!Mn,Bn=d&&(!Dn||Mn&&8<Mn&&11>=Mn),jn=String.fromCharCode(32),$n=!1;function Un(e,t){switch(e){case"keyup":return-1!==Fn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Gn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Hn=!1,qn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!qn[e.type]:"textarea"===t}function Wn(e,t,n,r){Oe(r),0<(t=Dr(t,"onChange")).length&&(n=new fn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Yn=null,Kn=null;function Qn(e){Tr(e,0)}function Zn(e){if(Z(ra(e)))return e}function Xn(e,t){if("change"===e)return t}var Jn=!1;if(d){var er;if(d){var tr="oninput"in document;if(!tr){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),tr="function"==typeof nr.oninput}er=tr}else er=!1;Jn=er&&(!document.documentMode||9<document.documentMode)}function rr(){Yn&&(Yn.detachEvent("onpropertychange",ar),Kn=Yn=null)}function ar(e){if("value"===e.propertyName&&Zn(Kn)){var t=[];if(Wn(t,Kn,e,_e(e)),e=Qn,De)e(t);else{De=!0;try{Le(e,t)}finally{De=!1,ze()}}}}function or(e,t,n){"focusin"===e?(rr(),Kn=n,(Yn=t).attachEvent("onpropertychange",ar)):"focusout"===e&&rr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Zn(Kn)}function lr(e,t){if("click"===e)return Zn(t)}function ur(e,t){if("input"===e||"change"===e)return Zn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},cr=Object.prototype.hasOwnProperty;function dr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!cr.call(t,n[r])||!sr(e[n[r]],t[n[r]]))return!1;return!0}function fr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function pr(e,t){var n,r=fr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fr(r)}}function mr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?mr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function hr(){for(var e=window,t=X();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=X((e=t.contentWindow).document)}return t}function gr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var vr=d&&"documentMode"in document&&11>=document.documentMode,yr=null,br=null,Er=null,xr=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;xr||null==yr||yr!==X(r)||(r="selectionStart"in(r=yr)&&gr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},Er&&dr(Er,r)||(Er=r,0<(r=Dr(br,"onSelect")).length&&(t=new fn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=yr)))}It("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),It("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),It(Pt,2);for(var kr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Sr=0;Sr<kr.length;Sr++)Lt.set(kr[Sr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var _r="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Cr=new Set("cancel close invalid load scroll toggle".split(" ").concat(_r));function Nr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,o,l,u,s){if(Ye.apply(this,arguments),Ge){if(!Ge)throw Error(i(198));var c=He;Ge=!1,He=null,qe||(qe=!0,Ve=c)}}(r,t,void 0,e),e.currentTarget=null}function Tr(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var i=r.length-1;0<=i;i--){var l=r[i],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==o&&a.isPropagationStopped())break e;Nr(a,l,s),o=u}else for(i=0;i<r.length;i++){if(u=(l=r[i]).instance,s=l.currentTarget,l=l.listener,u!==o&&a.isPropagationStopped())break e;Nr(a,l,s),o=u}}}if(qe)throw e=Ve,qe=!1,Ve=null,e}function Ar(e,t){var n=oa(t),r=e+"__bubble";n.has(r)||(Pr(t,e,2,!1),n.add(r))}var Or="_reactListening"+Math.random().toString(36).slice(2);function Rr(e){e[Or]||(e[Or]=!0,l.forEach((function(t){Cr.has(t)||Lr(t,!1,e,null),Lr(t,!0,e,null)})))}function Lr(e,t,n,r){var a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===e&&9!==n.nodeType&&(o=n.ownerDocument),null!==r&&!t&&Cr.has(e)){if("scroll"!==e)return;a|=2,o=r}var i=oa(o),l=e+"__"+(t?"capture":"bubble");i.has(l)||(t&&(a|=4),Pr(o,e,a,t),i.add(l))}function Pr(e,t,n,r){var a=Lt.get(t);switch(void 0===a?2:a){case 0:a=Kt;break;case 1:a=Qt;break;default:a=Zt}n=a.bind(null,t,n,e),a=void 0,!je||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Ir(e,t,n,r,a){var o=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var i=r.tag;if(3===i||4===i){var l=r.stateNode.containerInfo;if(l===a||8===l.nodeType&&l.parentNode===a)break;if(4===i)for(i=r.return;null!==i;){var u=i.tag;if((3===u||4===u)&&((u=i.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;i=i.return}for(;null!==l;){if(null===(i=ta(l)))return;if(5===(u=i.tag)||6===u){r=o=i;continue e}l=l.parentNode}}r=r.return}!function(e,t,n){if(Me)return e();Me=!0;try{Fe(e,t,n)}finally{Me=!1,ze()}}((function(){var r=o,a=_e(n),i=[];e:{var l=Rt.get(e);if(void 0!==l){var u=fn,s=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":u=An;break;case"focusin":s="focus",u=yn;break;case"focusout":s="blur",u=yn;break;case"beforeblur":case"afterblur":u=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=gn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=Rn;break;case Nt:case Tt:case At:u=bn;break;case Ot:u=Ln;break;case"scroll":u=mn;break;case"wheel":u=In;break;case"copy":case"cut":case"paste":u=xn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=On}var c=0!=(4&t),d=!c&&"scroll"===e,f=c?null!==l?l+"Capture":null:l;c=[];for(var p,m=r;null!==m;){var h=(p=m).stateNode;if(5===p.tag&&null!==h&&(p=h,null!==f&&null!=(h=Be(m,f))&&c.push(Fr(m,h,p))),d)break;m=m.return}0<c.length&&(l=new u(l,s,null,n,a),i.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(s=n.relatedTarget||n.fromElement)||!ta(s)&&!s[Jr])&&(u||l)&&(l=a.window===a?a:(l=a.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?ta(s):null)&&(s!==(d=Ke(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=gn,h="onMouseLeave",f="onMouseEnter",m="mouse","pointerout"!==e&&"pointerover"!==e||(c=On,h="onPointerLeave",f="onPointerEnter",m="pointer"),d=null==u?l:ra(u),p=null==s?l:ra(s),(l=new c(h,m+"leave",u,n,a)).target=d,l.relatedTarget=p,h=null,ta(a)===r&&((c=new c(f,m+"enter",s,n,a)).target=p,c.relatedTarget=d,h=c),d=h,u&&s)e:{for(f=s,m=0,p=c=u;p;p=Mr(p))m++;for(p=0,h=f;h;h=Mr(h))p++;for(;0<m-p;)c=Mr(c),m--;for(;0<p-m;)f=Mr(f),p--;for(;m--;){if(c===f||null!==f&&c===f.alternate)break e;c=Mr(c),f=Mr(f)}c=null}else c=null;null!==u&&zr(i,l,u,c,!1),null!==s&&null!==d&&zr(i,d,s,c,!0)}if("select"===(u=(l=r?ra(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var g=Xn;else if(Vn(l))if(Jn)g=ur;else{g=ir;var v=or}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(g=lr);switch(g&&(g=g(e,r))?Wn(i,g,n,a):(v&&v(e,l,r),"focusout"===e&&(v=l._wrapperState)&&v.controlled&&"number"===l.type&&ae(l,"number",l.value)),v=r?ra(r):window,e){case"focusin":(Vn(v)||"true"===v.contentEditable)&&(yr=v,br=r,Er=null);break;case"focusout":Er=br=yr=null;break;case"mousedown":xr=!0;break;case"contextmenu":case"mouseup":case"dragend":xr=!1,wr(i,n,a);break;case"selectionchange":if(vr)break;case"keydown":case"keyup":wr(i,n,a)}var y;if(Dn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Hn?Un(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Bn&&"ko"!==n.locale&&(Hn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Hn&&(y=nn()):(en="value"in(Jt=a)?Jt.value:Jt.textContent,Hn=!0)),0<(v=Dr(r,b)).length&&(b=new wn(b,e,null,n,a),i.push({event:b,listeners:v}),(y||null!==(y=Gn(n)))&&(b.data=y))),(y=zn?function(e,t){switch(e){case"compositionend":return Gn(t);case"keypress":return 32!==t.which?null:($n=!0,jn);case"textInput":return(e=t.data)===jn&&$n?null:e;default:return null}}(e,n):function(e,t){if(Hn)return"compositionend"===e||!Dn&&Un(e,t)?(e=nn(),tn=en=Jt=null,Hn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Bn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Dr(r,"onBeforeInput")).length&&(a=new wn("onBeforeInput","beforeinput",null,n,a),i.push({event:a,listeners:r}),a.data=y)}Tr(i,t)}))}function Fr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Dr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,o=a.stateNode;5===a.tag&&null!==o&&(a=o,null!=(o=Be(e,n))&&r.unshift(Fr(e,o,a)),null!=(o=Be(e,t))&&r.push(Fr(e,o,a))),e=e.return}return r}function Mr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function zr(e,t,n,r,a){for(var o=t._reactName,i=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,a?null!=(u=Be(n,o))&&i.unshift(Fr(n,u,l)):a||null!=(u=Be(n,o))&&i.push(Fr(n,u,l))),n=n.return}0!==i.length&&e.push({event:t,listeners:i})}function Br(){}var jr=null,$r=null;function Ur(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Gr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Hr="function"==typeof setTimeout?setTimeout:void 0,qr="function"==typeof clearTimeout?clearTimeout:void 0;function Vr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Wr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Yr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Kr=0,Qr=Math.random().toString(36).slice(2),Zr="__reactFiber$"+Qr,Xr="__reactProps$"+Qr,Jr="__reactContainer$"+Qr,ea="__reactEvents$"+Qr;function ta(e){var t=e[Zr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Jr]||n[Zr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Yr(e);null!==e;){if(n=e[Zr])return n;e=Yr(e)}return t}n=(e=n).parentNode}return null}function na(e){return!(e=e[Zr]||e[Jr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ra(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(i(33))}function aa(e){return e[Xr]||null}function oa(e){var t=e[ea];return void 0===t&&(t=e[ea]=new Set),t}var ia=[],la=-1;function ua(e){return{current:e}}function sa(e){0>la||(e.current=ia[la],ia[la]=null,la--)}function ca(e,t){la++,ia[la]=e.current,e.current=t}var da={},fa=ua(da),pa=ua(!1),ma=da;function ha(e,t){var n=e.type.contextTypes;if(!n)return da;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,o={};for(a in n)o[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function ga(e){return null!=e.childContextTypes}function va(){sa(pa),sa(fa)}function ya(e,t,n){if(fa.current!==da)throw Error(i(168));ca(fa,t),ca(pa,n)}function ba(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(i(108,W(t)||"Unknown",o));return a({},n,r)}function Ea(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||da,ma=fa.current,ca(fa,e),ca(pa,pa.current),!0}function xa(e,t,n){var r=e.stateNode;if(!r)throw Error(i(169));n?(e=ba(e,t,ma),r.__reactInternalMemoizedMergedChildContext=e,sa(pa),sa(fa),ca(fa,e)):sa(pa),ca(pa,n)}var wa=null,ka=null,Sa=o.unstable_runWithPriority,_a=o.unstable_scheduleCallback,Ca=o.unstable_cancelCallback,Na=o.unstable_shouldYield,Ta=o.unstable_requestPaint,Aa=o.unstable_now,Oa=o.unstable_getCurrentPriorityLevel,Ra=o.unstable_ImmediatePriority,La=o.unstable_UserBlockingPriority,Pa=o.unstable_NormalPriority,Ia=o.unstable_LowPriority,Fa=o.unstable_IdlePriority,Da={},Ma=void 0!==Ta?Ta:function(){},za=null,Ba=null,ja=!1,$a=Aa(),Ua=1e4>$a?Aa:function(){return Aa()-$a};function Ga(){switch(Oa()){case Ra:return 99;case La:return 98;case Pa:return 97;case Ia:return 96;case Fa:return 95;default:throw Error(i(332))}}function Ha(e){switch(e){case 99:return Ra;case 98:return La;case 97:return Pa;case 96:return Ia;case 95:return Fa;default:throw Error(i(332))}}function qa(e,t){return e=Ha(e),Sa(e,t)}function Va(e,t,n){return e=Ha(e),_a(e,t,n)}function Wa(){if(null!==Ba){var e=Ba;Ba=null,Ca(e)}Ya()}function Ya(){if(!ja&&null!==za){ja=!0;var e=0;try{var t=za;qa(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),za=null}catch(t){throw null!==za&&(za=za.slice(e+1)),_a(Ra,Wa),t}finally{ja=!1}}}var Ka=x.ReactCurrentBatchConfig;function Qa(e,t){if(e&&e.defaultProps){for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Za=ua(null),Xa=null,Ja=null,eo=null;function to(){eo=Ja=Xa=null}function no(e){var t=Za.current;sa(Za),e.type._context._currentValue=t}function ro(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ao(e,t){Xa=e,eo=Ja=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Di=!0),e.firstContext=null)}function oo(e,t){if(eo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(eo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ja){if(null===Xa)throw Error(i(308));Ja=t,Xa.dependencies={lanes:0,firstContext:t,responders:null}}else Ja=Ja.next=t;return e._currentValue}var io=!1;function lo(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function uo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function so(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function co(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function fo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var i={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?a=o=i:o=o.next=i,n=n.next}while(null!==n);null===o?a=o=t:o=o.next=t}else a=o=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function po(e,t,n,r){var o=e.updateQueue;io=!1;var i=o.firstBaseUpdate,l=o.lastBaseUpdate,u=o.shared.pending;if(null!==u){o.shared.pending=null;var s=u,c=s.next;s.next=null,null===l?i=c:l.next=c,l=s;var d=e.alternate;if(null!==d){var f=(d=d.updateQueue).lastBaseUpdate;f!==l&&(null===f?d.firstBaseUpdate=c:f.next=c,d.lastBaseUpdate=s)}}if(null!==i){for(f=o.baseState,l=0,d=c=s=null;;){u=i.lane;var p=i.eventTime;if((r&u)===u){null!==d&&(d=d.next={eventTime:p,lane:0,tag:i.tag,payload:i.payload,callback:i.callback,next:null});e:{var m=e,h=i;switch(u=t,p=n,h.tag){case 1:if("function"==typeof(m=h.payload)){f=m.call(p,f,u);break e}f=m;break e;case 3:m.flags=-4097&m.flags|64;case 0:if(null==(u="function"==typeof(m=h.payload)?m.call(p,f,u):m))break e;f=a({},f,u);break e;case 2:io=!0}}null!==i.callback&&(e.flags|=32,null===(u=o.effects)?o.effects=[i]:u.push(i))}else p={eventTime:p,lane:u,tag:i.tag,payload:i.payload,callback:i.callback,next:null},null===d?(c=d=p,s=f):d=d.next=p,l|=u;if(null===(i=i.next)){if(null===(u=o.shared.pending))break;i=u.next,u.next=null,o.lastBaseUpdate=u,o.shared.pending=null}}null===d&&(s=f),o.baseState=s,o.firstBaseUpdate=c,o.lastBaseUpdate=d,zl|=l,e.lanes=l,e.memoizedState=f}}function mo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(i(191,a));a.call(r)}}}var ho=(new r.Component).refs;function go(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var vo={isMounted:function(e){return!!(e=e._reactInternals)&&Ke(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=su(),a=cu(e),o=so(r,a);o.payload=t,null!=n&&(o.callback=n),co(e,o),du(e,a,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=su(),a=cu(e),o=so(r,a);o.tag=1,o.payload=t,null!=n&&(o.callback=n),co(e,o),du(e,a,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=su(),r=cu(e),a=so(n,r);a.tag=2,null!=t&&(a.callback=t),co(e,a),du(e,r,n)}};function yo(e,t,n,r,a,o,i){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,i):!(t.prototype&&t.prototype.isPureReactComponent&&dr(n,r)&&dr(a,o))}function bo(e,t,n){var r=!1,a=da,o=t.contextType;return"object"==typeof o&&null!==o?o=oo(o):(a=ga(t)?ma:fa.current,o=(r=null!=(r=t.contextTypes))?ha(e,a):da),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=vo,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=o),t}function Eo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&vo.enqueueReplaceState(t,t.state,null)}function xo(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=ho,lo(e);var o=t.contextType;"object"==typeof o&&null!==o?a.context=oo(o):(o=ga(t)?ma:fa.current,a.context=ha(e,o)),po(e,n,a,r),a.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(go(e,t,o,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&vo.enqueueReplaceState(a,a.state,null),po(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4)}var wo=Array.isArray;function ko(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(i(309));var r=n.stateNode}if(!r)throw Error(i(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=r.refs;t===ho&&(t=r.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(i(284));if(!n._owner)throw Error(i(290,e))}return e}function So(e,t){if("textarea"!==e.type)throw Error(i(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function _o(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Gu(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function l(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Wu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function s(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=ko(e,t,n),r.return=e,r):((r=Hu(n.type,n.key,n.props,null,e.mode,r)).ref=ko(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Yu(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=qu(n,e.mode,r,o)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Wu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Hu(t.type,t.key,t.props,null,e.mode,n)).ref=ko(e,null,t),n.return=e,n;case k:return(t=Yu(t,e.mode,n)).return=e,t}if(wo(t)||U(t))return(t=qu(t,e.mode,n,null)).return=e,t;So(e,t)}return null}function p(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===a?n.type===S?d(e,t,n.props.children,r,a):s(e,t,n,r):null;case k:return n.key===a?c(e,t,n,r):null}if(wo(n)||U(n))return null!==a?null:d(e,t,n,r,null);So(e,n)}return null}function m(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return e=e.get(null===r.key?n:r.key)||null,r.type===S?d(t,e,r.props.children,a,r.key):s(t,e,r,a);case k:return c(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(wo(r)||U(r))return d(t,e=e.get(n)||null,r,a,null);So(t,r)}return null}function h(a,i,l,u){for(var s=null,c=null,d=i,h=i=0,g=null;null!==d&&h<l.length;h++){d.index>h?(g=d,d=null):g=d.sibling;var v=p(a,d,l[h],u);if(null===v){null===d&&(d=g);break}e&&d&&null===v.alternate&&t(a,d),i=o(v,i,h),null===c?s=v:c.sibling=v,c=v,d=g}if(h===l.length)return n(a,d),s;if(null===d){for(;h<l.length;h++)null!==(d=f(a,l[h],u))&&(i=o(d,i,h),null===c?s=d:c.sibling=d,c=d);return s}for(d=r(a,d);h<l.length;h++)null!==(g=m(d,a,h,l[h],u))&&(e&&null!==g.alternate&&d.delete(null===g.key?h:g.key),i=o(g,i,h),null===c?s=g:c.sibling=g,c=g);return e&&d.forEach((function(e){return t(a,e)})),s}function g(a,l,u,s){var c=U(u);if("function"!=typeof c)throw Error(i(150));if(null==(u=c.call(u)))throw Error(i(151));for(var d=c=null,h=l,g=l=0,v=null,y=u.next();null!==h&&!y.done;g++,y=u.next()){h.index>g?(v=h,h=null):v=h.sibling;var b=p(a,h,y.value,s);if(null===b){null===h&&(h=v);break}e&&h&&null===b.alternate&&t(a,h),l=o(b,l,g),null===d?c=b:d.sibling=b,d=b,h=v}if(y.done)return n(a,h),c;if(null===h){for(;!y.done;g++,y=u.next())null!==(y=f(a,y.value,s))&&(l=o(y,l,g),null===d?c=y:d.sibling=y,d=y);return c}for(h=r(a,h);!y.done;g++,y=u.next())null!==(y=m(h,a,g,y.value,s))&&(e&&null!==y.alternate&&h.delete(null===y.key?g:y.key),l=o(y,l,g),null===d?c=y:d.sibling=y,d=y);return e&&h.forEach((function(e){return t(a,e)})),c}return function(e,r,o,u){var s="object"==typeof o&&null!==o&&o.type===S&&null===o.key;s&&(o=o.props.children);var c="object"==typeof o&&null!==o;if(c)switch(o.$$typeof){case w:e:{for(c=o.key,s=r;null!==s;){if(s.key===c){if(7===s.tag){if(o.type===S){n(e,s.sibling),(r=a(s,o.props.children)).return=e,e=r;break e}}else if(s.elementType===o.type){n(e,s.sibling),(r=a(s,o.props)).ref=ko(e,s,o),r.return=e,e=r;break e}n(e,s);break}t(e,s),s=s.sibling}o.type===S?((r=qu(o.props.children,e.mode,u,o.key)).return=e,e=r):((u=Hu(o.type,o.key,o.props,null,e.mode,u)).ref=ko(e,r,o),u.return=e,e=u)}return l(e);case k:e:{for(s=o.key;null!==r;){if(r.key===s){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=a(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Yu(o,e.mode,u)).return=e,e=r}return l(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,o)).return=e,e=r):(n(e,r),(r=Wu(o,e.mode,u)).return=e,e=r),l(e);if(wo(o))return h(e,r,o,u);if(U(o))return g(e,r,o,u);if(c&&So(e,o),void 0===o&&!s)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(i(152,W(e.type)||"Component"))}return n(e,r)}}var Co=_o(!0),No=_o(!1),To={},Ao=ua(To),Oo=ua(To),Ro=ua(To);function Lo(e){if(e===To)throw Error(i(174));return e}function Po(e,t){switch(ca(Ro,t),ca(Oo,e),ca(Ao,To),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}sa(Ao),ca(Ao,t)}function Io(){sa(Ao),sa(Oo),sa(Ro)}function Fo(e){Lo(Ro.current);var t=Lo(Ao.current),n=pe(t,e.type);t!==n&&(ca(Oo,e),ca(Ao,n))}function Do(e){Oo.current===e&&(sa(Ao),sa(Oo))}var Mo=ua(0);function zo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Bo=null,jo=null,$o=!1;function Uo(e,t){var n=$u(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Go(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Ho(e){if($o){var t=jo;if(t){var n=t;if(!Go(e,t)){if(!(t=Wr(n.nextSibling))||!Go(e,t))return e.flags=-1025&e.flags|2,$o=!1,void(Bo=e);Uo(Bo,n)}Bo=e,jo=Wr(t.firstChild)}else e.flags=-1025&e.flags|2,$o=!1,Bo=e}}function qo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Bo=e}function Vo(e){if(e!==Bo)return!1;if(!$o)return qo(e),$o=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Gr(t,e.memoizedProps))for(t=jo;t;)Uo(e,t),t=Wr(t.nextSibling);if(qo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(i(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){jo=Wr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}jo=null}}else jo=Bo?Wr(e.stateNode.nextSibling):null;return!0}function Wo(){jo=Bo=null,$o=!1}var Yo=[];function Ko(){for(var e=0;e<Yo.length;e++)Yo[e]._workInProgressVersionPrimary=null;Yo.length=0}var Qo=x.ReactCurrentDispatcher,Zo=x.ReactCurrentBatchConfig,Xo=0,Jo=null,ei=null,ti=null,ni=!1,ri=!1;function ai(){throw Error(i(321))}function oi(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function ii(e,t,n,r,a,o){if(Xo=o,Jo=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Qo.current=null===e||null===e.memoizedState?Li:Pi,e=n(r,a),ri){o=0;do{if(ri=!1,!(25>o))throw Error(i(301));o+=1,ti=ei=null,t.updateQueue=null,Qo.current=Ii,e=n(r,a)}while(ri)}if(Qo.current=Ri,t=null!==ei&&null!==ei.next,Xo=0,ti=ei=Jo=null,ni=!1,t)throw Error(i(300));return e}function li(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ti?Jo.memoizedState=ti=e:ti=ti.next=e,ti}function ui(){if(null===ei){var e=Jo.alternate;e=null!==e?e.memoizedState:null}else e=ei.next;var t=null===ti?Jo.memoizedState:ti.next;if(null!==t)ti=t,ei=e;else{if(null===e)throw Error(i(310));e={memoizedState:(ei=e).memoizedState,baseState:ei.baseState,baseQueue:ei.baseQueue,queue:ei.queue,next:null},null===ti?Jo.memoizedState=ti=e:ti=ti.next=e}return ti}function si(e,t){return"function"==typeof t?t(e):t}function ci(e){var t=ui(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=ei,a=r.baseQueue,o=n.pending;if(null!==o){if(null!==a){var l=a.next;a.next=o.next,o.next=l}r.baseQueue=a=o,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var u=l=o=null,s=a;do{var c=s.lane;if((Xo&c)===c)null!==u&&(u=u.next={lane:0,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null}),r=s.eagerReducer===e?s.eagerState:e(r,s.action);else{var d={lane:c,action:s.action,eagerReducer:s.eagerReducer,eagerState:s.eagerState,next:null};null===u?(l=u=d,o=r):u=u.next=d,Jo.lanes|=c,zl|=c}s=s.next}while(null!==s&&s!==a);null===u?o=r:u.next=l,sr(r,t.memoizedState)||(Di=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function di(e){var t=ui(),n=t.queue;if(null===n)throw Error(i(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,o=t.memoizedState;if(null!==a){n.pending=null;var l=a=a.next;do{o=e(o,l.action),l=l.next}while(l!==a);sr(o,t.memoizedState)||(Di=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function fi(e,t,n){var r=t._getVersion;r=r(t._source);var a=t._workInProgressVersionPrimary;if(null!==a?e=a===r:(e=e.mutableReadLanes,(e=(Xo&e)===e)&&(t._workInProgressVersionPrimary=r,Yo.push(t))),e)return n(t._source);throw Yo.push(t),Error(i(350))}function pi(e,t,n,r){var a=Ol;if(null===a)throw Error(i(349));var o=t._getVersion,l=o(t._source),u=Qo.current,s=u.useState((function(){return fi(a,t,n)})),c=s[1],d=s[0];s=ti;var f=e.memoizedState,p=f.refs,m=p.getSnapshot,h=f.source;f=f.subscribe;var g=Jo;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=o(t._source);if(!sr(l,e)){e=n(t._source),sr(d,e)||(c(e),e=cu(g),a.mutableReadLanes|=e&a.pendingLanes),e=a.mutableReadLanes,a.entangledLanes|=e;for(var r=a.entanglements,i=e;0<i;){var u=31-Gt(i),s=1<<u;r[u]|=e,i&=~s}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=cu(g);a.mutableReadLanes|=r&a.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),sr(m,n)&&sr(h,t)&&sr(f,r)||((e={pending:null,dispatch:null,lastRenderedReducer:si,lastRenderedState:d}).dispatch=c=Oi.bind(null,Jo,e),s.queue=e,s.baseQueue=null,d=fi(a,t,n),s.memoizedState=s.baseState=d),d}function mi(e,t,n){return pi(ui(),e,t,n)}function hi(e){var t=li();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:si,lastRenderedState:e}).dispatch=Oi.bind(null,Jo,e),[t.memoizedState,e]}function gi(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Jo.updateQueue)?(t={lastEffect:null},Jo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function vi(e){return e={current:e},li().memoizedState=e}function yi(){return ui().memoizedState}function bi(e,t,n,r){var a=li();Jo.flags|=e,a.memoizedState=gi(1|t,n,void 0,void 0===r?null:r)}function Ei(e,t,n,r){var a=ui();r=void 0===r?null:r;var o=void 0;if(null!==ei){var i=ei.memoizedState;if(o=i.destroy,null!==r&&oi(r,i.deps))return void gi(t,n,o,r)}Jo.flags|=e,a.memoizedState=gi(1|t,n,o,r)}function xi(e,t){return bi(516,4,e,t)}function wi(e,t){return Ei(516,4,e,t)}function ki(e,t){return Ei(4,2,e,t)}function Si(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function _i(e,t,n){return n=null!=n?n.concat([e]):null,Ei(4,2,Si.bind(null,t,e),n)}function Ci(){}function Ni(e,t){var n=ui();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&oi(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ti(e,t){var n=ui();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&oi(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ai(e,t){var n=Ga();qa(98>n?98:n,(function(){e(!0)})),qa(97<n?97:n,(function(){var n=Zo.transition;Zo.transition=1;try{e(!1),t()}finally{Zo.transition=n}}))}function Oi(e,t,n){var r=su(),a=cu(e),o={lane:a,action:n,eagerReducer:null,eagerState:null,next:null},i=t.pending;if(null===i?o.next=o:(o.next=i.next,i.next=o),t.pending=o,i=e.alternate,e===Jo||null!==i&&i===Jo)ri=ni=!0;else{if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var l=t.lastRenderedState,u=i(l,n);if(o.eagerReducer=i,o.eagerState=u,sr(u,l))return}catch(e){}du(e,a,r)}}var Ri={readContext:oo,useCallback:ai,useContext:ai,useEffect:ai,useImperativeHandle:ai,useLayoutEffect:ai,useMemo:ai,useReducer:ai,useRef:ai,useState:ai,useDebugValue:ai,useDeferredValue:ai,useTransition:ai,useMutableSource:ai,useOpaqueIdentifier:ai,unstable_isNewReconciler:!1},Li={readContext:oo,useCallback:function(e,t){return li().memoizedState=[e,void 0===t?null:t],e},useContext:oo,useEffect:xi,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,bi(4,2,Si.bind(null,t,e),n)},useLayoutEffect:function(e,t){return bi(4,2,e,t)},useMemo:function(e,t){var n=li();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=li();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Oi.bind(null,Jo,e),[r.memoizedState,e]},useRef:vi,useState:hi,useDebugValue:Ci,useDeferredValue:function(e){var t=hi(e),n=t[0],r=t[1];return xi((function(){var t=Zo.transition;Zo.transition=1;try{r(e)}finally{Zo.transition=t}}),[e]),n},useTransition:function(){var e=hi(!1),t=e[0];return vi(e=Ai.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=li();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},pi(r,e,t,n)},useOpaqueIdentifier:function(){if($o){var e=!1,t=function(e){return{$$typeof:F,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Kr++).toString(36))),Error(i(355))})),n=hi(t)[1];return 0==(2&Jo.mode)&&(Jo.flags|=516,gi(5,(function(){n("r:"+(Kr++).toString(36))}),void 0,null)),t}return hi(t="r:"+(Kr++).toString(36)),t},unstable_isNewReconciler:!1},Pi={readContext:oo,useCallback:Ni,useContext:oo,useEffect:wi,useImperativeHandle:_i,useLayoutEffect:ki,useMemo:Ti,useReducer:ci,useRef:yi,useState:function(){return ci(si)},useDebugValue:Ci,useDeferredValue:function(e){var t=ci(si),n=t[0],r=t[1];return wi((function(){var t=Zo.transition;Zo.transition=1;try{r(e)}finally{Zo.transition=t}}),[e]),n},useTransition:function(){var e=ci(si)[0];return[yi().current,e]},useMutableSource:mi,useOpaqueIdentifier:function(){return ci(si)[0]},unstable_isNewReconciler:!1},Ii={readContext:oo,useCallback:Ni,useContext:oo,useEffect:wi,useImperativeHandle:_i,useLayoutEffect:ki,useMemo:Ti,useReducer:di,useRef:yi,useState:function(){return di(si)},useDebugValue:Ci,useDeferredValue:function(e){var t=di(si),n=t[0],r=t[1];return wi((function(){var t=Zo.transition;Zo.transition=1;try{r(e)}finally{Zo.transition=t}}),[e]),n},useTransition:function(){var e=di(si)[0];return[yi().current,e]},useMutableSource:mi,useOpaqueIdentifier:function(){return di(si)[0]},unstable_isNewReconciler:!1},Fi=x.ReactCurrentOwner,Di=!1;function Mi(e,t,n,r){t.child=null===e?No(t,null,n,r):Co(t,e.child,n,r)}function zi(e,t,n,r,a){n=n.render;var o=t.ref;return ao(t,a),r=ii(e,t,n,r,o,a),null===e||Di?(t.flags|=1,Mi(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,nl(e,t,a))}function Bi(e,t,n,r,a,o){if(null===e){var i=n.type;return"function"!=typeof i||Uu(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Hu(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,ji(e,t,i,r,a,o))}return i=e.child,0==(a&o)&&(a=i.memoizedProps,(n=null!==(n=n.compare)?n:dr)(a,r)&&e.ref===t.ref)?nl(e,t,o):(t.flags|=1,(e=Gu(i,r)).ref=t.ref,e.return=t,t.child=e)}function ji(e,t,n,r,a,o){if(null!==e&&dr(e.memoizedProps,r)&&e.ref===t.ref){if(Di=!1,0==(o&a))return t.lanes=e.lanes,nl(e,t,o);0!=(16384&e.flags)&&(Di=!0)}return Gi(e,t,n,r,o)}function $i(e,t,n){var r=t.pendingProps,a=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},bu(0,n);else{if(0==(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bu(0,e),null;t.memoizedState={baseLanes:0},bu(0,null!==o?o.baseLanes:n)}else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,bu(0,r);return Mi(e,t,a,n),t.child}function Ui(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Gi(e,t,n,r,a){var o=ga(n)?ma:fa.current;return o=ha(t,o),ao(t,a),n=ii(e,t,n,r,o,a),null===e||Di?(t.flags|=1,Mi(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,nl(e,t,a))}function Hi(e,t,n,r,a){if(ga(n)){var o=!0;Ea(t)}else o=!1;if(ao(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),bo(t,n,r),xo(t,n,r,a),r=!0;else if(null===e){var i=t.stateNode,l=t.memoizedProps;i.props=l;var u=i.context,s=n.contextType;s="object"==typeof s&&null!==s?oo(s):ha(t,s=ga(n)?ma:fa.current);var c=n.getDerivedStateFromProps,d="function"==typeof c||"function"==typeof i.getSnapshotBeforeUpdate;d||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==r||u!==s)&&Eo(t,i,r,s),io=!1;var f=t.memoizedState;i.state=f,po(t,r,i,a),u=t.memoizedState,l!==r||f!==u||pa.current||io?("function"==typeof c&&(go(t,n,c,r),u=t.memoizedState),(l=io||yo(t,n,l,r,f,u,s))?(d||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||("function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount()),"function"==typeof i.componentDidMount&&(t.flags|=4)):("function"==typeof i.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),i.props=r,i.state=u,i.context=s,r=l):("function"==typeof i.componentDidMount&&(t.flags|=4),r=!1)}else{i=t.stateNode,uo(e,t),l=t.memoizedProps,s=t.type===t.elementType?l:Qa(t.type,l),i.props=s,d=t.pendingProps,f=i.context,u="object"==typeof(u=n.contextType)&&null!==u?oo(u):ha(t,u=ga(n)?ma:fa.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof i.getSnapshotBeforeUpdate)||"function"!=typeof i.UNSAFE_componentWillReceiveProps&&"function"!=typeof i.componentWillReceiveProps||(l!==d||f!==u)&&Eo(t,i,r,u),io=!1,f=t.memoizedState,i.state=f,po(t,r,i,a);var m=t.memoizedState;l!==d||f!==m||pa.current||io?("function"==typeof p&&(go(t,n,p,r),m=t.memoizedState),(s=io||yo(t,n,s,r,f,m,u))?(c||"function"!=typeof i.UNSAFE_componentWillUpdate&&"function"!=typeof i.componentWillUpdate||("function"==typeof i.componentWillUpdate&&i.componentWillUpdate(r,m,u),"function"==typeof i.UNSAFE_componentWillUpdate&&i.UNSAFE_componentWillUpdate(r,m,u)),"function"==typeof i.componentDidUpdate&&(t.flags|=4),"function"==typeof i.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=m),i.props=r,i.state=m,i.context=u,r=s):("function"!=typeof i.componentDidUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof i.getSnapshotBeforeUpdate||l===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),r=!1)}return qi(e,t,n,r,o,a)}function qi(e,t,n,r,a,o){Ui(e,t);var i=0!=(64&t.flags);if(!r&&!i)return a&&xa(t,n,!1),nl(e,t,o);r=t.stateNode,Fi.current=t;var l=i&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&i?(t.child=Co(t,e.child,null,o),t.child=Co(t,null,l,o)):Mi(e,t,l,o),t.memoizedState=r.state,a&&xa(t,n,!0),t.child}function Vi(e){var t=e.stateNode;t.pendingContext?ya(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ya(0,t.context,!1),Po(e,t.containerInfo)}var Wi,Yi,Ki,Qi={dehydrated:null,retryLane:0};function Zi(e,t,n){var r,a=t.pendingProps,o=Mo.current,i=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&o)),r?(i=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(o|=1),ca(Mo,1&o),null===e?(void 0!==a.fallback&&Ho(t),e=a.children,o=a.fallback,i?(e=Xi(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qi,e):"number"==typeof a.unstable_expectedLoadTime?(e=Xi(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qi,t.lanes=33554432,e):((n=Vu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,i?(a=function(e,t,n,r,a){var o=t.mode,i=e.child;e=i.sibling;var l={mode:"hidden",children:n};return 0==(2&o)&&t.child!==i?((n=t.child).childLanes=0,n.pendingProps=l,null!==(i=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=i,i.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Gu(i,l),null!==e?r=Gu(e,r):(r=qu(r,o,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,a.children,a.fallback,n),i=t.child,o=e.child.memoizedState,i.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},i.childLanes=e.childLanes&~n,t.memoizedState=Qi,a):(n=function(e,t,n,r){var a=e.child;return e=a.sibling,n=Gu(a,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,a.children,n),t.memoizedState=null,n))}function Xi(e,t,n,r){var a=e.mode,o=e.child;return t={mode:"hidden",children:t},0==(2&a)&&null!==o?(o.childLanes=0,o.pendingProps=t):o=Vu(t,a,0,null),n=qu(n,a,r,null),o.return=e,n.return=e,o.sibling=n,e.child=o,n}function Ji(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ro(e.return,t)}function el(e,t,n,r,a,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a,lastEffect:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=a,i.lastEffect=o)}function tl(e,t,n){var r=t.pendingProps,a=r.revealOrder,o=r.tail;if(Mi(e,t,r.children,n),0!=(2&(r=Mo.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ji(e,n);else if(19===e.tag)Ji(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ca(Mo,r),0==(2&t.mode))t.memoizedState=null;else switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===zo(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),el(t,!1,a,n,o,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===zo(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}el(t,!0,n,null,o,t.lastEffect);break;case"together":el(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function nl(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),zl|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(i(153));if(null!==t.child){for(n=Gu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Gu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function rl(e,t){if(!$o)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function al(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return ga(t.type)&&va(),null;case 3:return Io(),sa(pa),sa(fa),Ko(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Vo(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Do(t);var o=Lo(Ro.current);if(n=t.type,null!==e&&null!=t.stateNode)Yi(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(i(166));return null}if(e=Lo(Ao.current),Vo(t)){r=t.stateNode,n=t.type;var l=t.memoizedProps;switch(r[Zr]=t,r[Xr]=l,n){case"dialog":Ar("cancel",r),Ar("close",r);break;case"iframe":case"object":case"embed":Ar("load",r);break;case"video":case"audio":for(e=0;e<_r.length;e++)Ar(_r[e],r);break;case"source":Ar("error",r);break;case"img":case"image":case"link":Ar("error",r),Ar("load",r);break;case"details":Ar("toggle",r);break;case"input":ee(r,l),Ar("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Ar("invalid",r);break;case"textarea":ue(r,l),Ar("invalid",r)}for(var s in ke(n,l),e=null,l)l.hasOwnProperty(s)&&(o=l[s],"children"===s?"string"==typeof o?r.textContent!==o&&(e=["children",o]):"number"==typeof o&&r.textContent!==""+o&&(e=["children",""+o]):u.hasOwnProperty(s)&&null!=o&&"onScroll"===s&&Ar("scroll",r));switch(n){case"input":Q(r),re(r,l,!0);break;case"textarea":Q(r),ce(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Br)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(s=9===o.nodeType?o:o.ownerDocument,e===de&&(e=fe(n)),e===de?"script"===n?((e=s.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=s.createElement(n,{is:r.is}):(e=s.createElement(n),"select"===n&&(s=e,r.multiple?s.multiple=!0:r.size&&(s.size=r.size))):e=s.createElementNS(e,n),e[Zr]=t,e[Xr]=r,Wi(e,t),t.stateNode=e,s=Se(n,r),n){case"dialog":Ar("cancel",e),Ar("close",e),o=r;break;case"iframe":case"object":case"embed":Ar("load",e),o=r;break;case"video":case"audio":for(o=0;o<_r.length;o++)Ar(_r[o],e);o=r;break;case"source":Ar("error",e),o=r;break;case"img":case"image":case"link":Ar("error",e),Ar("load",e),o=r;break;case"details":Ar("toggle",e),o=r;break;case"input":ee(e,r),o=J(e,r),Ar("invalid",e);break;case"option":o=oe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=a({},r,{value:void 0}),Ar("invalid",e);break;case"textarea":ue(e,r),o=le(e,r),Ar("invalid",e);break;default:o=r}ke(n,o);var c=o;for(l in c)if(c.hasOwnProperty(l)){var d=c[l];"style"===l?xe(e,d):"dangerouslySetInnerHTML"===l?null!=(d=d?d.__html:void 0)&&ge(e,d):"children"===l?"string"==typeof d?("textarea"!==n||""!==d)&&ve(e,d):"number"==typeof d&&ve(e,""+d):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(u.hasOwnProperty(l)?null!=d&&"onScroll"===l&&Ar("scroll",e):null!=d&&E(e,l,d,s))}switch(n){case"input":Q(e),re(e,r,!1);break;case"textarea":Q(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+Y(r.value));break;case"select":e.multiple=!!r.multiple,null!=(l=r.value)?ie(e,!!r.multiple,l,!1):null!=r.defaultValue&&ie(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Br)}Ur(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ki(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(i(166));n=Lo(Ro.current),Lo(Ao.current),Vo(t)?(r=t.stateNode,n=t.memoizedProps,r[Zr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Zr]=t,t.stateNode=r)}return null;case 13:return sa(Mo),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Vo(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Mo.current)?0===Fl&&(Fl=3):(0!==Fl&&3!==Fl||(Fl=4),null===Ol||0==(134217727&zl)&&0==(134217727&Bl)||hu(Ol,Ll))),(r||n)&&(t.flags|=4),null);case 4:return Io(),null===e&&Rr(t.stateNode.containerInfo),null;case 10:return no(t),null;case 19:if(sa(Mo),null===(r=t.memoizedState))return null;if(l=0!=(64&t.flags),null===(s=r.rendering))if(l)rl(r,!1);else{if(0!==Fl||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(s=zo(e))){for(t.flags|=64,rl(r,!1),null!==(l=s.updateQueue)&&(t.updateQueue=l,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(l=n).flags&=2,l.nextEffect=null,l.firstEffect=null,l.lastEffect=null,null===(s=l.alternate)?(l.childLanes=0,l.lanes=e,l.child=null,l.memoizedProps=null,l.memoizedState=null,l.updateQueue=null,l.dependencies=null,l.stateNode=null):(l.childLanes=s.childLanes,l.lanes=s.lanes,l.child=s.child,l.memoizedProps=s.memoizedProps,l.memoizedState=s.memoizedState,l.updateQueue=s.updateQueue,l.type=s.type,e=s.dependencies,l.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ca(Mo,1&Mo.current|2),t.child}e=e.sibling}null!==r.tail&&Ua()>Gl&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432)}else{if(!l)if(null!==(e=zo(s))){if(t.flags|=64,l=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),rl(r,!0),null===r.tail&&"hidden"===r.tailMode&&!s.alternate&&!$o)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Ua()-r.renderingStartTime>Gl&&1073741824!==n&&(t.flags|=64,l=!0,rl(r,!1),t.lanes=33554432);r.isBackwards?(s.sibling=t.child,t.child=s):(null!==(n=r.last)?n.sibling=s:t.child=s,r.last=s)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Ua(),n.sibling=null,t=Mo.current,ca(Mo,l?1&t|2:1&t),n):null;case 23:case 24:return Eu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(i(156,t.tag))}function ol(e){switch(e.tag){case 1:ga(e.type)&&va();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Io(),sa(pa),sa(fa),Ko(),0!=(64&(t=e.flags)))throw Error(i(285));return e.flags=-4097&t|64,e;case 5:return Do(e),null;case 13:return sa(Mo),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return sa(Mo),null;case 4:return Io(),null;case 10:return no(e),null;case 23:case 24:return Eu(),null;default:return null}}function il(e,t){try{var n="",r=t;do{n+=V(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function ll(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Wi=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Yi=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,Lo(Ao.current);var i,l=null;switch(n){case"input":o=J(e,o),r=J(e,r),l=[];break;case"option":o=oe(e,o),r=oe(e,r),l=[];break;case"select":o=a({},o,{value:void 0}),r=a({},r,{value:void 0}),l=[];break;case"textarea":o=le(e,o),r=le(e,r),l=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Br)}for(d in ke(n,r),n=null,o)if(!r.hasOwnProperty(d)&&o.hasOwnProperty(d)&&null!=o[d])if("style"===d){var s=o[d];for(i in s)s.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(u.hasOwnProperty(d)?l||(l=[]):(l=l||[]).push(d,null));for(d in r){var c=r[d];if(s=null!=o?o[d]:void 0,r.hasOwnProperty(d)&&c!==s&&(null!=c||null!=s))if("style"===d)if(s){for(i in s)!s.hasOwnProperty(i)||c&&c.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in c)c.hasOwnProperty(i)&&s[i]!==c[i]&&(n||(n={}),n[i]=c[i])}else n||(l||(l=[]),l.push(d,n)),n=c;else"dangerouslySetInnerHTML"===d?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(l=l||[]).push(d,c)):"children"===d?"string"!=typeof c&&"number"!=typeof c||(l=l||[]).push(d,""+c):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(u.hasOwnProperty(d)?(null!=c&&"onScroll"===d&&Ar("scroll",e),l||s===c||(l=[])):"object"==typeof c&&null!==c&&c.$$typeof===F?c.toString():(l=l||[]).push(d,c))}n&&(l=l||[]).push("style",n);var d=l;(t.updateQueue=d)&&(t.flags|=4)}},Ki=function(e,t,n,r){n!==r&&(t.flags|=4)};var ul="function"==typeof WeakMap?WeakMap:Map;function sl(e,t,n){(n=so(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Wl||(Wl=!0,Yl=r),ll(0,t)},n}function cl(e,t,n){(n=so(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return ll(0,t),r(a)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Kl?Kl=new Set([this]):Kl.add(this),ll(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var dl="function"==typeof WeakSet?WeakSet:Set;function fl(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Mu(e,t)}else t.current=null}function pl(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Qa(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Vr(t.stateNode.containerInfo))}throw Error(i(163))}function ml(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var a=e;r=a.next,0!=(4&(a=a.tag))&&0!=(1&a)&&(Iu(n,e),Pu(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Qa(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&mo(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}mo(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Ur(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&xt(n)))))}throw Error(i(163))}function hl(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var a=n.memoizedProps.style;a=null!=a&&a.hasOwnProperty("display")?a.display:null,r.style.display=Ee("display",a)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function gl(e,t){if(ka&&"function"==typeof ka.onCommitFiberUnmount)try{ka.onCommitFiberUnmount(wa,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,a=r.destroy;if(r=r.tag,void 0!==a)if(0!=(4&r))Iu(t,n);else{r=t;try{a()}catch(e){Mu(r,e)}}n=n.next}while(n!==e)}break;case 1:if(fl(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Mu(t,e)}break;case 5:fl(t);break;case 4:wl(e,t)}}function vl(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function yl(e){return 5===e.tag||3===e.tag||4===e.tag}function bl(e){e:{for(var t=e.return;null!==t;){if(yl(t))break e;t=t.return}throw Error(i(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(i(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||yl(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?El(e,n,t):xl(e,n,t)}function El(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Br));else if(4!==r&&null!==(e=e.child))for(El(e,t,n),e=e.sibling;null!==e;)El(e,t,n),e=e.sibling}function xl(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(xl(e,t,n),e=e.sibling;null!==e;)xl(e,t,n),e=e.sibling}function wl(e,t){for(var n,r,a=t,o=!1;;){if(!o){o=a.return;e:for(;;){if(null===o)throw Error(i(160));switch(n=o.stateNode,o.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}o=o.return}o=!0}if(5===a.tag||6===a.tag){e:for(var l=e,u=a,s=u;;)if(gl(l,s),null!==s.child&&4!==s.tag)s.child.return=s,s=s.child;else{if(s===u)break e;for(;null===s.sibling;){if(null===s.return||s.return===u)break e;s=s.return}s.sibling.return=s.return,s=s.sibling}r?(l=n,u=a.stateNode,8===l.nodeType?l.parentNode.removeChild(u):l.removeChild(u)):n.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){n=a.stateNode.containerInfo,r=!0,a.child.return=a,a=a.child;continue}}else if(gl(e,a),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(o=!1)}a.sibling.return=a.return,a=a.sibling}}function kl(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var a=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Xr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Se(e,a),t=Se(e,r),a=0;a<o.length;a+=2){var l=o[a],u=o[a+1];"style"===l?xe(n,u):"dangerouslySetInnerHTML"===l?ge(n,u):"children"===l?ve(n,u):E(n,l,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":se(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(o=r.value)?ie(n,!!r.multiple,o,!1):e!==!!r.multiple&&(null!=r.defaultValue?ie(n,!!r.multiple,r.defaultValue,!0):ie(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(i(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,xt(n.containerInfo)));case 13:return null!==t.memoizedState&&(Ul=Ua(),hl(t.child,!0)),void Sl(t);case 19:return void Sl(t);case 23:case 24:return void hl(t,null!==t.memoizedState)}throw Error(i(163))}function Sl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new dl),t.forEach((function(t){var r=Bu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function _l(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Cl=Math.ceil,Nl=x.ReactCurrentDispatcher,Tl=x.ReactCurrentOwner,Al=0,Ol=null,Rl=null,Ll=0,Pl=0,Il=ua(0),Fl=0,Dl=null,Ml=0,zl=0,Bl=0,jl=0,$l=null,Ul=0,Gl=1/0;function Hl(){Gl=Ua()+500}var ql,Vl=null,Wl=!1,Yl=null,Kl=null,Ql=!1,Zl=null,Xl=90,Jl=[],eu=[],tu=null,nu=0,ru=null,au=-1,ou=0,iu=0,lu=null,uu=!1;function su(){return 0!=(48&Al)?Ua():-1!==au?au:au=Ua()}function cu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Ga()?1:2;if(0===ou&&(ou=Ml),0!==Ka.transition){0!==iu&&(iu=null!==$l?$l.pendingLanes:0),e=ou;var t=4186112&~iu;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Ga(),e=Bt(0!=(4&Al)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),ou)}function du(e,t,n){if(50<nu)throw nu=0,ru=null,Error(i(185));if(null===(e=fu(e,t)))return null;Ut(e,t,n),e===Ol&&(Bl|=t,4===Fl&&hu(e,Ll));var r=Ga();1===t?0!=(8&Al)&&0==(48&Al)?gu(e):(pu(e,n),0===Al&&(Hl(),Wa())):(0==(4&Al)||98!==r&&99!==r||(null===tu?tu=new Set([e]):tu.add(e)),pu(e,n)),$l=e}function fu(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function pu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,a=e.pingedLanes,o=e.expirationTimes,l=e.pendingLanes;0<l;){var u=31-Gt(l),s=1<<u,c=o[u];if(-1===c){if(0==(s&r)||0!=(s&a)){c=t,Dt(s);var d=Ft;o[u]=10<=d?c+250:6<=d?c+5e3:-1}}else c<=t&&(e.expiredLanes|=s);l&=~s}if(r=Mt(e,e===Ol?Ll:0),t=Ft,0===r)null!==n&&(n!==Da&&Ca(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Da&&Ca(n)}15===t?(n=gu.bind(null,e),null===za?(za=[n],Ba=_a(Ra,Ya)):za.push(n),n=Da):14===t?n=Va(99,gu.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(i(358,e))}}(t),n=Va(n,mu.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function mu(e){if(au=-1,iu=ou=0,0!=(48&Al))throw Error(i(327));var t=e.callbackNode;if(Lu()&&e.callbackNode!==t)return null;var n=Mt(e,e===Ol?Ll:0);if(0===n)return null;var r=n,a=Al;Al|=16;var o=ku();for(Ol===e&&Ll===r||(Hl(),xu(e,r));;)try{Cu();break}catch(t){wu(e,t)}if(to(),Nl.current=o,Al=a,null!==Rl?r=0:(Ol=null,Ll=0,r=Fl),0!=(Ml&Bl))xu(e,0);else if(0!==r){if(2===r&&(Al|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(n=zt(e))&&(r=Su(e,n))),1===r)throw t=Dl,xu(e,0),hu(e,n),pu(e,Ua()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(i(345));case 2:case 5:Au(e);break;case 3:if(hu(e,n),(62914560&n)===n&&10<(r=Ul+500-Ua())){if(0!==Mt(e,0))break;if(((a=e.suspendedLanes)&n)!==n){su(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=Hr(Au.bind(null,e),r);break}Au(e);break;case 4:if(hu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,a=-1;0<n;){var l=31-Gt(n);o=1<<l,(l=r[l])>a&&(a=l),n&=~o}if(n=a,10<(n=(120>(n=Ua()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Cl(n/1960))-n)){e.timeoutHandle=Hr(Au.bind(null,e),n);break}Au(e);break;default:throw Error(i(329))}}return pu(e,Ua()),e.callbackNode===t?mu.bind(null,e):null}function hu(e,t){for(t&=~jl,t&=~Bl,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Gt(t),r=1<<n;e[n]=-1,t&=~r}}function gu(e){if(0!=(48&Al))throw Error(i(327));if(Lu(),e===Ol&&0!=(e.expiredLanes&Ll)){var t=Ll,n=Su(e,t);0!=(Ml&Bl)&&(n=Su(e,t=Mt(e,t)))}else n=Su(e,t=Mt(e,0));if(0!==e.tag&&2===n&&(Al|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(t=zt(e))&&(n=Su(e,t))),1===n)throw n=Dl,xu(e,0),hu(e,t),pu(e,Ua()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Au(e),pu(e,Ua()),null}function vu(e,t){var n=Al;Al|=1;try{return e(t)}finally{0===(Al=n)&&(Hl(),Wa())}}function yu(e,t){var n=Al;Al&=-2,Al|=8;try{return e(t)}finally{0===(Al=n)&&(Hl(),Wa())}}function bu(e,t){ca(Il,Pl),Pl|=t,Ml|=t}function Eu(){Pl=Il.current,sa(Il)}function xu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,qr(n)),null!==Rl)for(n=Rl.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&va();break;case 3:Io(),sa(pa),sa(fa),Ko();break;case 5:Do(r);break;case 4:Io();break;case 13:case 19:sa(Mo);break;case 10:no(r);break;case 23:case 24:Eu()}n=n.return}Ol=e,Rl=Gu(e.current,null),Ll=Pl=Ml=t,Fl=0,Dl=null,jl=Bl=zl=0}function wu(e,t){for(;;){var n=Rl;try{if(to(),Qo.current=Ri,ni){for(var r=Jo.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}ni=!1}if(Xo=0,ti=ei=Jo=null,ri=!1,Tl.current=null,null===n||null===n.return){Fl=1,Dl=t,Rl=null;break}e:{var o=e,i=n.return,l=n,u=t;if(t=Ll,l.flags|=2048,l.firstEffect=l.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var s=u;if(0==(2&l.mode)){var c=l.alternate;c?(l.updateQueue=c.updateQueue,l.memoizedState=c.memoizedState,l.lanes=c.lanes):(l.updateQueue=null,l.memoizedState=null)}var d=0!=(1&Mo.current),f=i;do{var p;if(p=13===f.tag){var m=f.memoizedState;if(null!==m)p=null!==m.dehydrated;else{var h=f.memoizedProps;p=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!d)}}if(p){var g=f.updateQueue;if(null===g){var v=new Set;v.add(s),f.updateQueue=v}else g.add(s);if(0==(2&f.mode)){if(f.flags|=64,l.flags|=16384,l.flags&=-2981,1===l.tag)if(null===l.alternate)l.tag=17;else{var y=so(-1,1);y.tag=2,co(l,y)}l.lanes|=1;break e}u=void 0,l=t;var b=o.pingCache;if(null===b?(b=o.pingCache=new ul,u=new Set,b.set(s,u)):void 0===(u=b.get(s))&&(u=new Set,b.set(s,u)),!u.has(l)){u.add(l);var E=zu.bind(null,o,s,l);s.then(E,E)}f.flags|=4096,f.lanes=t;break e}f=f.return}while(null!==f);u=Error((W(l.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Fl&&(Fl=2),u=il(u,l),f=i;do{switch(f.tag){case 3:o=u,f.flags|=4096,t&=-t,f.lanes|=t,fo(f,sl(0,o,t));break e;case 1:o=u;var x=f.type,w=f.stateNode;if(0==(64&f.flags)&&("function"==typeof x.getDerivedStateFromError||null!==w&&"function"==typeof w.componentDidCatch&&(null===Kl||!Kl.has(w)))){f.flags|=4096,t&=-t,f.lanes|=t,fo(f,cl(f,o,t));break e}}f=f.return}while(null!==f)}Tu(n)}catch(e){t=e,Rl===n&&null!==n&&(Rl=n=n.return);continue}break}}function ku(){var e=Nl.current;return Nl.current=Ri,null===e?Ri:e}function Su(e,t){var n=Al;Al|=16;var r=ku();for(Ol===e&&Ll===t||xu(e,t);;)try{_u();break}catch(t){wu(e,t)}if(to(),Al=n,Nl.current=r,null!==Rl)throw Error(i(261));return Ol=null,Ll=0,Fl}function _u(){for(;null!==Rl;)Nu(Rl)}function Cu(){for(;null!==Rl&&!Na();)Nu(Rl)}function Nu(e){var t=ql(e.alternate,e,Pl);e.memoizedProps=e.pendingProps,null===t?Tu(e):Rl=t,Tl.current=null}function Tu(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=al(n,t,Pl)))return void(Rl=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&Pl)||0==(4&n.mode)){for(var r=0,a=n.child;null!==a;)r|=a.lanes|a.childLanes,a=a.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=ol(t)))return n.flags&=2047,void(Rl=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(Rl=t);Rl=t=e}while(null!==t);0===Fl&&(Fl=5)}function Au(e){var t=Ga();return qa(99,Ou.bind(null,e,t)),null}function Ou(e,t){do{Lu()}while(null!==Zl);if(0!=(48&Al))throw Error(i(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(i(177));e.callbackNode=null;var r=n.lanes|n.childLanes,a=r,o=e.pendingLanes&~a;e.pendingLanes=a,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=a,e.mutableReadLanes&=a,e.entangledLanes&=a,a=e.entanglements;for(var l=e.eventTimes,u=e.expirationTimes;0<o;){var s=31-Gt(o),c=1<<s;a[s]=0,l[s]=-1,u[s]=-1,o&=~c}if(null!==tu&&0==(24&r)&&tu.has(e)&&tu.delete(e),e===Ol&&(Rl=Ol=null,Ll=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(a=Al,Al|=32,Tl.current=null,jr=Yt,gr(l=hr())){if("selectionStart"in l)u={start:l.selectionStart,end:l.selectionEnd};else e:if(u=(u=l.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,o=c.anchorOffset,s=c.focusNode,c=c.focusOffset;try{u.nodeType,s.nodeType}catch(e){u=null;break e}var d=0,f=-1,p=-1,m=0,h=0,g=l,v=null;t:for(;;){for(var y;g!==u||0!==o&&3!==g.nodeType||(f=d+o),g!==s||0!==c&&3!==g.nodeType||(p=d+c),3===g.nodeType&&(d+=g.nodeValue.length),null!==(y=g.firstChild);)v=g,g=y;for(;;){if(g===l)break t;if(v===u&&++m===o&&(f=d),v===s&&++h===c&&(p=d),null!==(y=g.nextSibling))break;v=(g=v).parentNode}g=y}u=-1===f||-1===p?null:{start:f,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;$r={focusedElem:l,selectionRange:u},Yt=!1,lu=null,uu=!1,Vl=r;do{try{Ru()}catch(e){if(null===Vl)throw Error(i(330));Mu(Vl,e),Vl=Vl.nextEffect}}while(null!==Vl);lu=null,Vl=r;do{try{for(l=e;null!==Vl;){var b=Vl.flags;if(16&b&&ve(Vl.stateNode,""),128&b){var E=Vl.alternate;if(null!==E){var x=E.ref;null!==x&&("function"==typeof x?x(null):x.current=null)}}switch(1038&b){case 2:bl(Vl),Vl.flags&=-3;break;case 6:bl(Vl),Vl.flags&=-3,kl(Vl.alternate,Vl);break;case 1024:Vl.flags&=-1025;break;case 1028:Vl.flags&=-1025,kl(Vl.alternate,Vl);break;case 4:kl(Vl.alternate,Vl);break;case 8:wl(l,u=Vl);var w=u.alternate;vl(u),null!==w&&vl(w)}Vl=Vl.nextEffect}}catch(e){if(null===Vl)throw Error(i(330));Mu(Vl,e),Vl=Vl.nextEffect}}while(null!==Vl);if(x=$r,E=hr(),b=x.focusedElem,l=x.selectionRange,E!==b&&b&&b.ownerDocument&&mr(b.ownerDocument.documentElement,b)){null!==l&&gr(b)&&(E=l.start,void 0===(x=l.end)&&(x=E),"selectionStart"in b?(b.selectionStart=E,b.selectionEnd=Math.min(x,b.value.length)):(x=(E=b.ownerDocument||document)&&E.defaultView||window).getSelection&&(x=x.getSelection(),u=b.textContent.length,w=Math.min(l.start,u),l=void 0===l.end?w:Math.min(l.end,u),!x.extend&&w>l&&(u=l,l=w,w=u),u=pr(b,w),o=pr(b,l),u&&o&&(1!==x.rangeCount||x.anchorNode!==u.node||x.anchorOffset!==u.offset||x.focusNode!==o.node||x.focusOffset!==o.offset)&&((E=E.createRange()).setStart(u.node,u.offset),x.removeAllRanges(),w>l?(x.addRange(E),x.extend(o.node,o.offset)):(E.setEnd(o.node,o.offset),x.addRange(E))))),E=[];for(x=b;x=x.parentNode;)1===x.nodeType&&E.push({element:x,left:x.scrollLeft,top:x.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<E.length;b++)(x=E[b]).element.scrollLeft=x.left,x.element.scrollTop=x.top}Yt=!!jr,$r=jr=null,e.current=n,Vl=r;do{try{for(b=e;null!==Vl;){var k=Vl.flags;if(36&k&&ml(b,Vl.alternate,Vl),128&k){E=void 0;var S=Vl.ref;if(null!==S){var _=Vl.stateNode;Vl.tag,E=_,"function"==typeof S?S(E):S.current=E}}Vl=Vl.nextEffect}}catch(e){if(null===Vl)throw Error(i(330));Mu(Vl,e),Vl=Vl.nextEffect}}while(null!==Vl);Vl=null,Ma(),Al=a}else e.current=n;if(Ql)Ql=!1,Zl=e,Xl=t;else for(Vl=r;null!==Vl;)t=Vl.nextEffect,Vl.nextEffect=null,8&Vl.flags&&((k=Vl).sibling=null,k.stateNode=null),Vl=t;if(0===(r=e.pendingLanes)&&(Kl=null),1===r?e===ru?nu++:(nu=0,ru=e):nu=0,n=n.stateNode,ka&&"function"==typeof ka.onCommitFiberRoot)try{ka.onCommitFiberRoot(wa,n,void 0,64==(64&n.current.flags))}catch(e){}if(pu(e,Ua()),Wl)throw Wl=!1,e=Yl,Yl=null,e;return 0!=(8&Al)||Wa(),null}function Ru(){for(;null!==Vl;){var e=Vl.alternate;uu||null===lu||(0!=(8&Vl.flags)?Je(Vl,lu)&&(uu=!0):13===Vl.tag&&_l(e,Vl)&&Je(Vl,lu)&&(uu=!0));var t=Vl.flags;0!=(256&t)&&pl(e,Vl),0==(512&t)||Ql||(Ql=!0,Va(97,(function(){return Lu(),null}))),Vl=Vl.nextEffect}}function Lu(){if(90!==Xl){var e=97<Xl?97:Xl;return Xl=90,qa(e,Fu)}return!1}function Pu(e,t){Jl.push(t,e),Ql||(Ql=!0,Va(97,(function(){return Lu(),null})))}function Iu(e,t){eu.push(t,e),Ql||(Ql=!0,Va(97,(function(){return Lu(),null})))}function Fu(){if(null===Zl)return!1;var e=Zl;if(Zl=null,0!=(48&Al))throw Error(i(331));var t=Al;Al|=32;var n=eu;eu=[];for(var r=0;r<n.length;r+=2){var a=n[r],o=n[r+1],l=a.destroy;if(a.destroy=void 0,"function"==typeof l)try{l()}catch(e){if(null===o)throw Error(i(330));Mu(o,e)}}for(n=Jl,Jl=[],r=0;r<n.length;r+=2){a=n[r],o=n[r+1];try{var u=a.create;a.destroy=u()}catch(e){if(null===o)throw Error(i(330));Mu(o,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Al=t,Wa(),!0}function Du(e,t,n){co(e,t=sl(0,t=il(n,t),1)),t=su(),null!==(e=fu(e,1))&&(Ut(e,1,t),pu(e,t))}function Mu(e,t){if(3===e.tag)Du(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Du(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Kl||!Kl.has(r))){var a=cl(n,e=il(t,e),1);if(co(n,a),a=su(),null!==(n=fu(n,1)))Ut(n,1,a),pu(n,a);else if("function"==typeof r.componentDidCatch&&(null===Kl||!Kl.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function zu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=su(),e.pingedLanes|=e.suspendedLanes&n,Ol===e&&(Ll&n)===n&&(4===Fl||3===Fl&&(62914560&Ll)===Ll&&500>Ua()-Ul?xu(e,0):jl|=n),pu(e,t)}function Bu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Ga()?1:2:(0===ou&&(ou=Ml),0===(t=jt(62914560&~ou))&&(t=4194304))),n=su(),null!==(e=fu(e,t))&&(Ut(e,t,n),pu(e,n))}function ju(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function $u(e,t,n,r){return new ju(e,t,n,r)}function Uu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Gu(e,t){var n=e.alternate;return null===n?((n=$u(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Hu(e,t,n,r,a,o){var l=2;if(r=e,"function"==typeof e)Uu(e)&&(l=1);else if("string"==typeof e)l=5;else e:switch(e){case S:return qu(n.children,a,o,t);case D:l=8,a|=16;break;case _:l=8,a|=1;break;case C:return(e=$u(12,n,t,8|a)).elementType=C,e.type=C,e.lanes=o,e;case O:return(e=$u(13,n,t,a)).type=O,e.elementType=O,e.lanes=o,e;case R:return(e=$u(19,n,t,a)).elementType=R,e.lanes=o,e;case M:return Vu(n,a,o,t);case z:return(e=$u(24,n,t,a)).elementType=z,e.lanes=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case N:l=10;break e;case T:l=9;break e;case A:l=11;break e;case L:l=14;break e;case P:l=16,r=null;break e;case I:l=22;break e}throw Error(i(130,null==e?e:typeof e,""))}return(t=$u(l,n,t,a)).elementType=e,t.type=r,t.lanes=o,t}function qu(e,t,n,r){return(e=$u(7,e,r,t)).lanes=n,e}function Vu(e,t,n,r){return(e=$u(23,e,r,t)).elementType=M,e.lanes=n,e}function Wu(e,t,n){return(e=$u(6,e,null,t)).lanes=n,e}function Yu(e,t,n){return(t=$u(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ku(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=$t(0),this.expirationTimes=$t(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=$t(0),this.mutableSourceEagerHydrationData=null}function Qu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Zu(e,t,n,r){var a=t.current,o=su(),l=cu(a);e:if(n){t:{if(Ke(n=n._reactInternals)!==n||1!==n.tag)throw Error(i(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(ga(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(i(171))}if(1===n.tag){var s=n.type;if(ga(s)){n=ba(n,s,u);break e}}n=u}else n=da;return null===t.context?t.context=n:t.pendingContext=n,(t=so(o,l)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),co(a,t),du(a,l,o),l}function Xu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Ju(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function es(e,t){Ju(e,t),(e=e.alternate)&&Ju(e,t)}function ts(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Ku(e,t,null!=n&&!0===n.hydrate),t=$u(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,lo(t),e[Jr]=n.current,Rr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var a=(t=r[e])._getVersion;a=a(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,a]:n.mutableSourceEagerHydrationData.push(t,a)}this._internalRoot=n}function ns(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function rs(e,t,n,r,a){var o=n._reactRootContainer;if(o){var i=o._internalRoot;if("function"==typeof a){var l=a;a=function(){var e=Xu(i);l.call(e)}}Zu(t,i,e,a)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new ts(e,0,t?{hydrate:!0}:void 0)}(n,r),i=o._internalRoot,"function"==typeof a){var u=a;a=function(){var e=Xu(i);u.call(e)}}yu((function(){Zu(t,i,e,a)}))}return Xu(i)}function as(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!ns(t))throw Error(i(200));return Qu(e,t,null,n)}ql=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||pa.current)Di=!0;else{if(0==(n&r)){switch(Di=!1,t.tag){case 3:Vi(t),Wo();break;case 5:Fo(t);break;case 1:ga(t.type)&&Ea(t);break;case 4:Po(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var a=t.type._context;ca(Za,a._currentValue),a._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Zi(e,t,n):(ca(Mo,1&Mo.current),null!==(t=nl(e,t,n))?t.sibling:null);ca(Mo,1&Mo.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return tl(e,t,n);t.flags|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),ca(Mo,Mo.current),r)break;return null;case 23:case 24:return t.lanes=0,$i(e,t,n)}return nl(e,t,n)}Di=0!=(16384&e.flags)}else Di=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=ha(t,fa.current),ao(t,n),a=ii(null,t,r,e,a,n),t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ga(r)){var o=!0;Ea(t)}else o=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,lo(t);var l=r.getDerivedStateFromProps;"function"==typeof l&&go(t,r,l,e),a.updater=vo,t.stateNode=a,a._reactInternals=t,xo(t,r,e,n),t=qi(null,t,r,!0,o,n)}else t.tag=0,Mi(null,t,a,n),t=t.child;return t;case 16:a=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=(o=a._init)(a._payload),t.type=a,o=t.tag=function(e){if("function"==typeof e)return Uu(e)?1:0;if(null!=e){if((e=e.$$typeof)===A)return 11;if(e===L)return 14}return 2}(a),e=Qa(a,e),o){case 0:t=Gi(null,t,a,e,n);break e;case 1:t=Hi(null,t,a,e,n);break e;case 11:t=zi(null,t,a,e,n);break e;case 14:t=Bi(null,t,a,Qa(a.type,e),r,n);break e}throw Error(i(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,Gi(e,t,r,a=t.elementType===r?a:Qa(r,a),n);case 1:return r=t.type,a=t.pendingProps,Hi(e,t,r,a=t.elementType===r?a:Qa(r,a),n);case 3:if(Vi(t),r=t.updateQueue,null===e||null===r)throw Error(i(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,uo(e,t),po(t,r,null,n),(r=t.memoizedState.element)===a)Wo(),t=nl(e,t,n);else{if((o=(a=t.stateNode).hydrate)&&(jo=Wr(t.stateNode.containerInfo.firstChild),Bo=t,o=$o=!0),o){if(null!=(e=a.mutableSourceEagerHydrationData))for(a=0;a<e.length;a+=2)(o=e[a])._workInProgressVersionPrimary=e[a+1],Yo.push(o);for(n=No(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Mi(e,t,r,n),Wo();t=t.child}return t;case 5:return Fo(t),null===e&&Ho(t),r=t.type,a=t.pendingProps,o=null!==e?e.memoizedProps:null,l=a.children,Gr(r,a)?l=null:null!==o&&Gr(r,o)&&(t.flags|=16),Ui(e,t),Mi(e,t,l,n),t.child;case 6:return null===e&&Ho(t),null;case 13:return Zi(e,t,n);case 4:return Po(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Co(t,null,r,n):Mi(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,zi(e,t,r,a=t.elementType===r?a:Qa(r,a),n);case 7:return Mi(e,t,t.pendingProps,n),t.child;case 8:case 12:return Mi(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,a=t.pendingProps,l=t.memoizedProps,o=a.value;var u=t.type._context;if(ca(Za,u._currentValue),u._currentValue=o,null!==l)if(u=l.value,0==(o=sr(u,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,o):1073741823))){if(l.children===a.children&&!pa.current){t=nl(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var s=u.dependencies;if(null!==s){l=u.child;for(var c=s.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&o)){1===u.tag&&((c=so(-1,n&-n)).tag=2,co(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),ro(u.return,n),s.lanes|=n;break}c=c.next}}else l=10===u.tag&&u.type===t.type?null:u.child;if(null!==l)l.return=u;else for(l=u;null!==l;){if(l===t){l=null;break}if(null!==(u=l.sibling)){u.return=l.return,l=u;break}l=l.return}u=l}Mi(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(o=t.pendingProps).children,ao(t,n),r=r(a=oo(a,o.unstable_observedBits)),t.flags|=1,Mi(e,t,r,n),t.child;case 14:return o=Qa(a=t.type,t.pendingProps),Bi(e,t,a,o=Qa(a.type,o),r,n);case 15:return ji(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:Qa(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,ga(r)?(e=!0,Ea(t)):e=!1,ao(t,n),bo(t,r,a),xo(t,r,a,n),qi(null,t,r,!0,e,n);case 19:return tl(e,t,n);case 23:case 24:return $i(e,t,n)}throw Error(i(156,t.tag))},ts.prototype.render=function(e){Zu(e,this._internalRoot,null,null)},ts.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Zu(null,e,null,(function(){t[Jr]=null}))},et=function(e){13===e.tag&&(du(e,4,su()),es(e,4))},tt=function(e){13===e.tag&&(du(e,67108864,su()),es(e,67108864))},nt=function(e){if(13===e.tag){var t=su(),n=cu(e);du(e,n,t),es(e,n)}},rt=function(e,t){return t()},Ce=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=aa(r);if(!a)throw Error(i(90));Z(r),ne(r,a)}}}break;case"textarea":se(e,n);break;case"select":null!=(t=n.value)&&ie(e,!!n.multiple,t,!1)}},Le=vu,Pe=function(e,t,n,r,a){var o=Al;Al|=4;try{return qa(98,e.bind(null,t,n,r,a))}finally{0===(Al=o)&&(Hl(),Wa())}},Ie=function(){0==(49&Al)&&(function(){if(null!==tu){var e=tu;tu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pu(e,Ua())}))}Wa()}(),Lu())},Fe=function(e,t){var n=Al;Al|=2;try{return e(t)}finally{0===(Al=n)&&(Hl(),Wa())}};var os={Events:[na,ra,aa,Oe,Re,Lu,{current:!1}]},is={findFiberByHostInstance:ta,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},ls={bundleType:is.bundleType,version:is.version,rendererPackageName:is.rendererPackageName,rendererConfig:is.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Xe(e))?null:e.stateNode},findFiberByHostInstance:is.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var us=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!us.isDisabled&&us.supportsFiber)try{wa=us.inject(ls),ka=us}catch(he){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=os,t.createPortal=as,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(i(188));throw Error(i(268,Object.keys(e)))}return null===(e=Xe(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Al;if(0!=(48&n))return e(t);Al|=1;try{if(e)return qa(99,e.bind(null,t))}finally{Al=n,Wa()}},t.hydrate=function(e,t,n){if(!ns(t))throw Error(i(200));return rs(null,e,t,!0,n)},t.render=function(e,t,n){if(!ns(t))throw Error(i(200));return rs(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!ns(e))throw Error(i(40));return!!e._reactRootContainer&&(yu((function(){rs(null,null,e,!1,(function(){e._reactRootContainer=null,e[Jr]=null}))})),!0)},t.unstable_batchedUpdates=vu,t.unstable_createPortal=function(e,t){return as(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!ns(n))throw Error(i(200));if(null==e||void 0===e._reactInternals)throw Error(i(38));return rs(e,t,n,!1,r)},t.version="17.0.2"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},4203:(e,t)=>{"use strict";var n,r,a,o;if("object"==typeof performance&&"function"==typeof performance.now){var i=performance;t.unstable_now=function(){return i.now()}}else{var l=Date,u=l.now();t.unstable_now=function(){return l.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var s=null,c=null,d=function(){if(null!==s)try{var e=t.unstable_now();s(!0,e),s=null}catch(e){throw setTimeout(d,0),e}};n=function(e){null!==s?setTimeout(n,0,e):(s=e,setTimeout(d,0))},r=function(e,t){c=setTimeout(e,t)},a=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},o=t.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var h=!1,g=null,v=-1,y=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},o=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):y=0<e?Math.floor(1e3/e):5};var E=new MessageChannel,x=E.port2;E.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();b=e+y;try{g(!0,e)?x.postMessage(null):(h=!1,g=null)}catch(e){throw x.postMessage(null),e}}else h=!1},n=function(e){g=e,h||(h=!0,x.postMessage(null))},r=function(e,n){v=f((function(){e(t.unstable_now())}),n)},a=function(){p(v),v=-1}}function w(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&0<_(a,t)))break e;e[r]=t,e[n]=a,n=r}}function k(e){return void 0===(e=e[0])?null:e}function S(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var o=2*(r+1)-1,i=e[o],l=o+1,u=e[l];if(void 0!==i&&0>_(i,n))void 0!==u&&0>_(u,i)?(e[r]=u,e[l]=n,r=l):(e[r]=i,e[o]=n,r=o);else{if(!(void 0!==u&&0>_(u,n)))break e;e[r]=u,e[l]=n,r=l}}}return t}return null}function _(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],N=[],T=1,A=null,O=3,R=!1,L=!1,P=!1;function I(e){for(var t=k(N);null!==t;){if(null===t.callback)S(N);else{if(!(t.startTime<=e))break;S(N),t.sortIndex=t.expirationTime,w(C,t)}t=k(N)}}function F(e){if(P=!1,I(e),!L)if(null!==k(C))L=!0,n(D);else{var t=k(N);null!==t&&r(F,t.startTime-e)}}function D(e,n){L=!1,P&&(P=!1,a()),R=!0;var o=O;try{for(I(n),A=k(C);null!==A&&(!(A.expirationTime>n)||e&&!t.unstable_shouldYield());){var i=A.callback;if("function"==typeof i){A.callback=null,O=A.priorityLevel;var l=i(A.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?A.callback=l:A===k(C)&&S(C),I(n)}else S(C);A=k(C)}if(null!==A)var u=!0;else{var s=k(N);null!==s&&r(F,s.startTime-n),u=!1}return u}finally{A=null,O=o,R=!1}}var M=o;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){L||R||(L=!0,n(D))},t.unstable_getCurrentPriorityLevel=function(){return O},t.unstable_getFirstCallbackNode=function(){return k(C)},t.unstable_next=function(e){switch(O){case 1:case 2:case 3:var t=3;break;default:t=O}var n=O;O=t;try{return e()}finally{O=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=M,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=O;O=e;try{return t()}finally{O=n}},t.unstable_scheduleCallback=function(e,o,i){var l=t.unstable_now();switch(i="object"==typeof i&&null!==i&&"number"==typeof(i=i.delay)&&0<i?l+i:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:T++,callback:o,priorityLevel:e,startTime:i,expirationTime:u=i+u,sortIndex:-1},i>l?(e.sortIndex=i,w(N,e),null===k(C)&&e===k(N)&&(P?a():P=!0,r(F,i-l))):(e.sortIndex=u,w(C,e),L||R||(L=!0,n(D))),e},t.unstable_wrapCallback=function(e){var t=O;return function(){var n=O;O=t;try{return e.apply(this,arguments)}finally{O=n}}}},4142:(e,t,n)=>{"use strict";e.exports=n(4203)},9921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,a=n?Symbol.for("react.portal"):60106,o=n?Symbol.for("react.fragment"):60107,i=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,s=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,d=n?Symbol.for("react.concurrent_mode"):60111,f=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,m=n?Symbol.for("react.suspense_list"):60120,h=n?Symbol.for("react.memo"):60115,g=n?Symbol.for("react.lazy"):60116,v=n?Symbol.for("react.block"):60121,y=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,E=n?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case d:case o:case l:case i:case p:return e;default:switch(e=e&&e.$$typeof){case s:case f:case g:case h:case u:return e;default:return t}}case a:return t}}}function w(e){return x(e)===d}t.AsyncMode=c,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=u,t.Element=r,t.ForwardRef=f,t.Fragment=o,t.Lazy=g,t.Memo=h,t.Portal=a,t.Profiler=l,t.StrictMode=i,t.Suspense=p,t.isAsyncMode=function(e){return w(e)||x(e)===c},t.isConcurrentMode=w,t.isContextConsumer=function(e){return x(e)===s},t.isContextProvider=function(e){return x(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return x(e)===f},t.isFragment=function(e){return x(e)===o},t.isLazy=function(e){return x(e)===g},t.isMemo=function(e){return x(e)===h},t.isPortal=function(e){return x(e)===a},t.isProfiler=function(e){return x(e)===l},t.isStrictMode=function(e){return x(e)===i},t.isSuspense=function(e){return x(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===o||e===d||e===l||e===i||e===p||e===m||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===h||e.$$typeof===u||e.$$typeof===s||e.$$typeof===f||e.$$typeof===y||e.$$typeof===b||e.$$typeof===E||e.$$typeof===v)},t.typeOf=x},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},6585:e=>{e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},9658:(e,t,n)=>{var r=n(6585);e.exports=function e(t,n,a){return r(n)||(a=n||a,n=[]),a=a||{},t instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(t,n):r(t)?function(t,n,r){for(var a=[],o=0;o<t.length;o++)a.push(e(t[o],n,r).source);return c(new RegExp("(?:"+a.join("|")+")",d(r)),n)}(t,n,a):function(e,t,n){return f(o(e,n),t,n)}(t,n,a)},e.exports.parse=o,e.exports.compile=function(e,t){return l(o(e,t),t)},e.exports.tokensToFunction=l,e.exports.tokensToRegExp=f;var a=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function o(e,t){for(var n,r=[],o=0,i=0,l="",c=t&&t.delimiter||"/";null!=(n=a.exec(e));){var d=n[0],f=n[1],p=n.index;if(l+=e.slice(i,p),i=p+d.length,f)l+=f[1];else{var m=e[i],h=n[2],g=n[3],v=n[4],y=n[5],b=n[6],E=n[7];l&&(r.push(l),l="");var x=null!=h&&null!=m&&m!==h,w="+"===b||"*"===b,k="?"===b||"*"===b,S=n[2]||c,_=v||y;r.push({name:g||o++,prefix:h||"",delimiter:S,optional:k,repeat:w,partial:x,asterisk:!!E,pattern:_?s(_):E?".*":"[^"+u(S)+"]+?"})}}return i<e.length&&(l+=e.substr(i)),l&&r.push(l),r}function i(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function l(e,t){for(var n=new Array(e.length),a=0;a<e.length;a++)"object"==typeof e[a]&&(n[a]=new RegExp("^(?:"+e[a].pattern+")$",d(t)));return function(t,a){for(var o="",l=t||{},u=(a||{}).pretty?i:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var d,f=l[c.name];if(null==f){if(c.optional){c.partial&&(o+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(f)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(f)+"`");if(0===f.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<f.length;p++){if(d=u(f[p]),!n[s].test(d))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(d)+"`");o+=(0===p?c.prefix:c.delimiter)+d}}else{if(d=c.asterisk?encodeURI(f).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(f),!n[s].test(d))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+d+'"');o+=c.prefix+d}}else o+=c}return o}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function d(e){return e&&e.sensitive?"":"i"}function f(e,t,n){r(t)||(n=t||n,t=[]);for(var a=(n=n||{}).strict,o=!1!==n.end,i="",l=0;l<e.length;l++){var s=e[l];if("string"==typeof s)i+=u(s);else{var f=u(s.prefix),p="(?:"+s.pattern+")";t.push(s),s.repeat&&(p+="(?:"+f+p+")*"),i+=p=s.optional?s.partial?f+"("+p+")?":"(?:"+f+"("+p+"))?":f+"("+p+")"}}var m=u(n.delimiter||"/"),h=i.slice(-m.length)===m;return a||(i=(h?i.slice(0,-m.length):i)+"(?:"+m+"(?=$))?"),i+=o?"$":a&&h?"":"(?="+m+"|$)",c(new RegExp("^"+i,d(n)),t)}},2408:(e,t,n)=>{"use strict";var r=n(7418),a=60103,o=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var i=60109,l=60110,u=60112;t.Suspense=60113;var s=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;a=d("react.element"),o=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),i=d("react.provider"),l=d("react.context"),u=d("react.forward_ref"),t.Suspense=d("react.suspense"),s=d("react.memo"),c=d("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h={};function g(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||m}function v(){}function y(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||m}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=g.prototype;var b=y.prototype=new v;b.constructor=y,r(b,g.prototype),b.isPureReactComponent=!0;var E={current:null},x=Object.prototype.hasOwnProperty,w={key:!0,ref:!0,__self:!0,__source:!0};function k(e,t,n){var r,o={},i=null,l=null;if(null!=t)for(r in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(i=""+t.key),t)x.call(t,r)&&!w.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:a,type:e,key:i,ref:l,props:o,_owner:E.current}}function S(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var _=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function N(e,t,n,r,i){var l=typeof e;"undefined"!==l&&"boolean"!==l||(e=null);var u=!1;if(null===e)u=!0;else switch(l){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case a:case o:u=!0}}if(u)return i=i(u=e),e=""===r?"."+C(u,0):r,Array.isArray(i)?(n="",null!=e&&(n=e.replace(_,"$&/")+"/"),N(i,t,n,"",(function(e){return e}))):null!=i&&(S(i)&&(i=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(i,n+(!i.key||u&&u.key===i.key?"":(""+i.key).replace(_,"$&/")+"/")+e)),t.push(i)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var s=0;s<e.length;s++){var c=r+C(l=e[s],s);u+=N(l,t,n,c,i)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),s=0;!(l=e.next()).done;)u+=N(l=l.value,t,n,c=r+C(l,s++),i);else if("object"===l)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function T(e,t,n){if(null==e)return e;var r=[],a=0;return N(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function A(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var O={current:null};function R(){var e=O.current;if(null===e)throw Error(p(321));return e}var L={ReactCurrentDispatcher:O,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:E,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!S(e))throw Error(p(143));return e}},t.Component=g,t.PureComponent=y,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=L,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var o=r({},e.props),i=e.key,l=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(l=t.ref,u=E.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var s=e.type.defaultProps;for(c in t)x.call(t,c)&&!w.hasOwnProperty(c)&&(o[c]=void 0===t[c]&&void 0!==s?s[c]:t[c])}var c=arguments.length-2;if(1===c)o.children=n;else if(1<c){s=Array(c);for(var d=0;d<c;d++)s[d]=arguments[d+2];o.children=s}return{$$typeof:a,type:e.type,key:i,ref:l,props:o,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:i,_context:e},e.Consumer=e},t.createElement=k,t.createFactory=function(e){var t=k.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=S,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:A}},t.memo=function(e,t){return{$$typeof:s,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return R().useCallback(e,t)},t.useContext=function(e,t){return R().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return R().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return R().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return R().useLayoutEffect(e,t)},t.useMemo=function(e,t){return R().useMemo(e,t)},t.useReducer=function(e,t,n){return R().useReducer(e,t,n)},t.useRef=function(e){return R().useRef(e)},t.useState=function(e){return R().useState(e)},t.version="17.0.2"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},1711:(e,t,n)=>{var r=n(977);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},5165:(e,t,n)=>{var r=n(5314);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},4046:(e,t,n)=>{var r=n(9458);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},9321:(e,t,n)=>{var r=n(297);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},2749:(e,t,n)=>{var r=n(6680);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},4243:(e,t,n)=>{var r=n(2550);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},2826:(e,t,n)=>{var r=n(2866);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},8643:(e,t,n)=>{var r=n(2710);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},3448:(e,t,n)=>{var r=n(8582);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},92:(e,t,n)=>{var r=n(149);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},4204:(e,t,n)=>{var r=n(4408);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},1117:(e,t,n)=>{var r=n(4092);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},7512:(e,t,n)=>{var r=n(5706);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},1601:(e,t,n)=>{var r=n(1828);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},2256:(e,t,n)=>{var r=n(4229);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},9959:(e,t,n)=>{var r=n(7953);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},949:(e,t,n)=>{var r=n(2935);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},944:(e,t,n)=>{var r=n(9031);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},9807:(e,t,n)=>{var r=n(9873);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},6534:(e,t,n)=>{var r=n(8124);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},8398:(e,t,n)=>{var r=n(4133);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},4430:(e,t,n)=>{var r=n(2566);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},3967:(e,t,n)=>{var r=n(2184);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},8710:(e,t,n)=>{var r=n(6988);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},6860:(e,t,n)=>{var r=n(5198);"string"==typeof r&&(r=[[e.id,r,""]]);n(6723)(r,{hmr:!0,transform:void 0,insertInto:void 0}),r.locals&&(e.exports=r.locals)},6723:(e,t,n)=>{var r,a,o={},i=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===a&&(a=r.apply(this,arguments)),a}),l=function(e,t){return t?t.querySelector(e):document.querySelector(e)},u=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var r=l.call(this,e,n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}t[e]=r}return t[e]}}(),s=null,c=0,d=[],f=n(1947);function p(e,t){for(var n=0;n<e.length;n++){var r=e[n],a=o[r.id];if(a){a.refs++;for(var i=0;i<a.parts.length;i++)a.parts[i](r.parts[i]);for(;i<r.parts.length;i++)a.parts.push(b(r.parts[i],t))}else{var l=[];for(i=0;i<r.parts.length;i++)l.push(b(r.parts[i],t));o[r.id]={id:r.id,refs:1,parts:l}}}}function m(e,t){for(var n=[],r={},a=0;a<e.length;a++){var o=e[a],i=t.base?o[0]+t.base:o[0],l={css:o[1],media:o[2],sourceMap:o[3]};r[i]?r[i].parts.push(l):n.push(r[i]={id:i,parts:[l]})}return n}function h(e,t){var n=u(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=d[d.length-1];if("top"===e.insertAt)r?r.nextSibling?n.insertBefore(t,r.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),d.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var a=u(e.insertAt.before,n);n.insertBefore(t,a)}}function g(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=d.indexOf(e);t>=0&&d.splice(t,1)}function v(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var r=n.nc;r&&(e.attrs.nonce=r)}return y(t,e.attrs),h(e,t),t}function y(e,t){Object.keys(t).forEach((function(n){e.setAttribute(n,t[n])}))}function b(e,t){var n,r,a,o;if(t.transform&&e.css){if(!(o="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=o}if(t.singleton){var i=c++;n=s||(s=v(t)),r=w.bind(null,n,i,!1),a=w.bind(null,n,i,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",y(t,e.attrs),h(e,t),t}(t),r=S.bind(null,n,t),a=function(){g(n),n.href&&URL.revokeObjectURL(n.href)}):(n=v(t),r=k.bind(null,n),a=function(){g(n)});return r(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;r(e=t)}else a()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=i()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=m(e,t);return p(n,t),function(e){for(var r=[],a=0;a<n.length;a++){var i=n[a];(l=o[i.id]).refs--,r.push(l)}for(e&&p(m(e,t),t),a=0;a<r.length;a++){var l;if(0===(l=r[a]).refs){for(var u=0;u<l.parts.length;u++)l.parts[u]();delete o[l.id]}}}};var E,x=(E=[],function(e,t){return E[e]=t,E.filter(Boolean).join("\n")});function w(e,t,n,r){var a=n?"":r.css;if(e.styleSheet)e.styleSheet.cssText=x(t,a);else{var o=document.createTextNode(a),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(o,i[t]):e.appendChild(o)}}function k(e,t){var n=t.css,r=t.media;if(r&&e.setAttribute("media",r),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}function S(e,t,n){var r=n.css,a=n.sourceMap,o=void 0===t.convertToAbsoluteUrls&&a;(t.convertToAbsoluteUrls||o)&&(r=f(r)),a&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */");var i=new Blob([r],{type:"text/css"}),l=e.href;e.href=URL.createObjectURL(i),l&&URL.revokeObjectURL(l)}},1947:e=>{e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,r=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,(function(e,t){var a,o=t.trim().replace(/^"(.*)"$/,(function(e,t){return t})).replace(/^'(.*)'$/,(function(e,t){return t}));return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(o)?e:(a=0===o.indexOf("//")?o:0===o.indexOf("/")?n+o:r+o.replace(/^\.\//,""),"url("+JSON.stringify(a)+")")}))}},7854:function(e,t,n){e.exports=function(){"use strict";var e=function(e){var t=e.id,n=e.viewBox,r=e.content;this.id=t,this.viewBox=n,this.content=r};e.prototype.stringify=function(){return this.content},e.prototype.toString=function(){return this.stringify()},e.prototype.destroy=function(){var e=this;["id","viewBox","content"].forEach((function(t){return delete e[t]}))};function t(e,t){return e(t={exports:{}},t.exports),t.exports}"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self&&self;var r=t((function(e,t){e.exports=function(){function e(e){return e&&"object"==typeof e&&"[object RegExp]"!==Object.prototype.toString.call(e)&&"[object Date]"!==Object.prototype.toString.call(e)}function t(e){return Array.isArray(e)?[]:{}}function n(n,r){return r&&!0===r.clone&&e(n)?o(t(n),n,r):n}function r(t,r,a){var i=t.slice();return r.forEach((function(r,l){void 0===i[l]?i[l]=n(r,a):e(r)?i[l]=o(t[l],r,a):-1===t.indexOf(r)&&i.push(n(r,a))})),i}function a(t,r,a){var i={};return e(t)&&Object.keys(t).forEach((function(e){i[e]=n(t[e],a)})),Object.keys(r).forEach((function(l){e(r[l])&&t[l]?i[l]=o(t[l],r[l],a):i[l]=n(r[l],a)})),i}function o(e,t,o){var i=Array.isArray(t),l=(o||{arrayMerge:r}).arrayMerge||r;return i?Array.isArray(e)?l(e,t,o):n(t,o):a(e,t,o)}return o.all=function(e,t){if(!Array.isArray(e)||e.length<2)throw new Error("first argument should be an array with at least two elements");return e.reduce((function(e,n){return o(e,n,t)}))},o}()})),a=t((function(e,t){t.default={svg:{name:"xmlns",uri:"http://www.w3.org/2000/svg"},xlink:{name:"xmlns:xlink",uri:"http://www.w3.org/1999/xlink"}},e.exports=t.default})),o=a.svg,i=a.xlink,l={};l[o.name]=o.uri,l[i.name]=i.uri;var u=function(e,t){return void 0===e&&(e=""),"<svg "+function(e){return Object.keys(e).map((function(t){return t+'="'+e[t].toString().replace(/"/g,"&quot;")+'"'})).join(" ")}(r(l,t||{}))+">"+e+"</svg>"},s=function(e){function t(){e.apply(this,arguments)}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var n={isMounted:{}};return n.isMounted.get=function(){return!!this.node},t.createFromExistingNode=function(e){return new t({id:e.getAttribute("id"),viewBox:e.getAttribute("viewBox"),content:e.outerHTML})},t.prototype.destroy=function(){this.isMounted&&this.unmount(),e.prototype.destroy.call(this)},t.prototype.mount=function(e){if(this.isMounted)return this.node;var t="string"==typeof e?document.querySelector(e):e,n=this.render();return this.node=n,t.appendChild(n),n},t.prototype.render=function(){var e=this.stringify();return function(e){var t=!!document.importNode,n=(new DOMParser).parseFromString(e,"image/svg+xml").documentElement;return t?document.importNode(n,!0):n}(u(e)).childNodes[0]},t.prototype.unmount=function(){this.node.parentNode.removeChild(this.node)},Object.defineProperties(t.prototype,n),t}(e);return s}()},1005:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var r=n(7854),a=n.n(r),o=n(5348),i=n.n(o),l=new(a())({id:"baidu",use:"baidu-usage",viewBox:"0 0 1024 1024",content:'<symbol class="icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="baidu"><defs><style type="text/css"></style></defs><path d="M345.706 297.423c15.35 12.792 35.817 20.467 53.726 17.908 20.467 0 38.375-10.233 53.725-23.025 17.91-15.35 30.7-35.817 40.934-58.842C512 189.97 512 136.245 496.65 90.194c-10.234-30.7-28.142-58.842-53.726-76.75C427.574 3.21 404.548-1.906 384.081 0.652c-12.791 2.558-25.583 7.675-38.375 15.35-23.025 15.35-38.376 40.934-48.61 66.518-12.791 46.05-15.35 92.101-2.557 138.152 10.233 28.142 25.583 56.284 51.167 76.75z m255.837 2.558c17.909 15.35 40.934 25.584 63.96 25.584 20.466 2.558 38.375-2.558 56.283-12.792 17.909-10.233 33.26-25.584 43.493-43.492 12.792-20.467 23.025-40.934 30.7-63.96 5.117-17.908 7.675-38.375 5.117-58.842-2.559-28.142-15.35-53.726-33.259-76.751-12.792-15.35-28.142-30.7-46.05-38.376-12.792-5.116-28.143-10.233-40.935-7.675-17.908 2.559-33.258 12.792-46.05 23.026-17.909 15.35-33.259 33.258-43.493 53.725-10.233 17.909-20.466 38.376-23.025 61.401-2.558 25.584-2.558 51.168 2.559 74.193 5.116 23.025 12.791 46.05 30.7 63.96zM245.929 509.768c17.91-15.35 28.143-35.818 35.818-56.285 10.233-33.258 10.233-66.517 7.675-99.776 0-12.792-5.117-25.584-10.234-38.376-12.792-28.142-35.817-53.725-63.959-69.076-23.025-10.233-46.05-15.35-66.518-10.233-25.583 2.558-46.05 20.467-61.4 40.934-20.467 28.142-30.7 63.96-35.818 97.218-2.558 20.467 0 40.934 5.117 61.4 7.675 30.701 23.025 58.843 46.05 79.31 17.91 15.35 40.935 23.026 63.96 23.026 28.142 0 56.284-7.675 79.31-28.142z m736.811-76.752c-2.558-20.467-7.675-38.375-17.908-56.284-10.234-20.467-28.143-40.934-48.61-51.167-23.025-12.792-51.167-15.35-76.75-12.792-12.792 2.558-28.143 5.117-40.935 12.792-17.908 10.233-30.7 28.142-40.933 48.609-10.234 25.584-15.35 53.726-15.35 81.868 0 25.583 0 53.726 7.674 79.31 5.117 17.908 15.35 38.375 33.26 48.608 17.908 15.35 40.933 20.467 63.959 23.026 17.908 2.558 38.375 2.558 56.284-2.559 17.908-5.116 35.817-15.35 46.05-30.7 12.792-15.35 20.467-35.817 23.026-53.726 12.792-30.7 10.233-58.842 10.233-86.985zM911.106 819.33c-2.559-35.817-20.467-71.634-46.05-99.776-5.118-5.117-10.234-10.234-17.91-15.35-33.258-28.142-66.517-58.843-99.776-89.543-33.259-33.26-63.96-69.076-92.101-107.452-20.467-33.259-48.61-63.96-86.985-81.868-23.025-10.233-51.167-15.35-76.751-12.792-46.05 5.117-86.985 30.7-115.127 66.518-7.675 7.675-12.791 17.909-17.908 28.142-20.467 30.7-46.05 61.401-74.193 86.985-15.35 15.35-30.7 28.142-46.05 40.934-7.676 7.675-17.91 15.35-25.584 23.025-30.7 23.025-61.401 53.726-79.31 86.985-12.792 23.025-20.467 48.609-23.025 76.75 0 23.026 2.558 46.051 10.233 66.518 7.675 23.026 17.909 46.051 33.26 63.96 25.583 30.7 63.958 51.167 102.334 53.725 48.609 2.559 97.218 0 143.269-7.675 20.467-2.558 40.934-10.233 63.959-12.792 46.05-5.116 92.101-2.558 135.594 10.234 35.817 12.792 74.192 17.909 112.568 20.467 38.375 2.558 79.31-2.558 115.127-23.025 25.583-12.792 46.05-35.818 58.842-61.401 20.467-33.26 30.7-71.635 25.584-112.569zM481.3 924.224H363.615c-12.792 0-25.584 0-38.376-2.559-25.584-5.117-48.61-20.467-63.96-43.492-12.791-15.35-20.466-33.259-23.025-53.726a246.563 246.563 0 0 1 0-61.4c5.117-23.026 17.909-43.493 33.26-58.843 12.791-12.792 30.7-23.026 48.608-30.7 7.675-2.56 15.35-5.117 23.026-5.117h69.076v-97.219h66.517c2.559 120.244 2.559 237.929 2.559 353.056z m263.512 0H583.634c-17.908-2.559-33.258-7.676-46.05-17.909-15.35-12.792-23.026-33.259-23.026-51.167v-173.97h66.518v161.178c0 7.675 2.558 12.792 7.675 17.908 5.117 5.117 12.792 7.675 20.467 7.675h69.076V678.62h66.518v245.604z" fill="#306CFF" p-id="3127" /><path d="M340.59 734.904c-12.793 5.117-25.585 15.35-33.26 30.7-5.116 12.792-7.675 25.584-7.675 38.376 0 15.35 5.117 30.7 12.792 43.492 10.234 15.35 28.142 25.584 46.05 23.026h53.727V732.346H353.38c-2.558-2.559-7.675 0-12.792 2.558z" fill="#306CFF" p-id="3128" /></symbol>'});i().add(l);const u=l},2516:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var r=n(7854),a=n.n(r),o=n(5348),i=n.n(o),l=new(a())({id:"cuowu",use:"cuowu-usage",viewBox:"0 0 1024 1024",content:'<symbol class="icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="cuowu"><defs><style type="text/css"></style></defs><path d="M169.444811 740.975033c-4.473054 4.473762-4.897693 11.303404-0.945964 15.255133l99.271341 99.270633c3.951375 3.951375 10.781371 3.528152 15.254779-0.944548L854.555189 283.025321c4.474116-4.474116 4.897339-11.304112 0.945964-15.255133l-99.271341-99.270987c-3.951375-3.951729-10.780308-3.528152-15.255133 0.945964L169.444811 740.975033z" fill="#4b4c4d" p-id="1989" /><path d="M283.024967 169.444457c-4.473762-4.473054-11.303404-4.897693-15.255133-0.945964l-99.270633 99.271341c-3.951375 3.951375-3.528152 10.781371 0.944548 15.254779L740.974679 854.555189c4.474116 4.474116 11.304466 4.897339 15.255133 0.945964l99.271341-99.271341c3.951375-3.951375 3.527798-10.780308-0.946318-15.255133L283.024967 169.444457z" fill="#4b4c4d" p-id="1990" /></symbol>'});i().add(l);const u=l},4970:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var r=n(7854),a=n.n(r),o=n(5348),i=n.n(o),l=new(a())({id:"qq",use:"qq-usage",viewBox:"0 0 1024 1024",content:'<symbol class="icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="qq"><defs><style type="text/css"></style></defs><path d="M511.09761 957.257c-80.159 0-153.737-25.019-201.11-62.386-24.057 6.702-54.831 17.489-74.252 30.864-16.617 11.439-14.546 23.106-11.55 27.816 13.15 20.689 225.583 13.211 286.912 6.767v-3.061z" fill="#FAAD08" p-id="4207" /><path d="M496.65061 957.257c80.157 0 153.737-25.019 201.11-62.386 24.057 6.702 54.83 17.489 74.253 30.864 16.616 11.439 14.543 23.106 11.55 27.816-13.15 20.689-225.584 13.211-286.914 6.767v-3.061z" fill="#FAAD08" p-id="4208" /><path d="M497.12861 474.524c131.934-0.876 237.669-25.783 273.497-35.34 8.541-2.28 13.11-6.364 13.11-6.364 0.03-1.172 0.542-20.952 0.542-31.155C784.27761 229.833 701.12561 57.173 496.64061 57.162 292.15661 57.173 209.00061 229.832 209.00061 401.665c0 10.203 0.516 29.983 0.547 31.155 0 0 3.717 3.821 10.529 5.67 33.078 8.98 140.803 35.139 276.08 36.034h0.972z" fill="#000000" p-id="4209" /><path d="M860.28261 619.782c-8.12-26.086-19.204-56.506-30.427-85.72 0 0-6.456-0.795-9.718 0.148-100.71 29.205-222.773 47.818-315.792 46.695h-0.962C410.88561 582.017 289.65061 563.617 189.27961 534.698 185.44461 533.595 177.87261 534.063 177.87261 534.063 166.64961 563.276 155.56661 593.696 147.44761 619.782 108.72961 744.168 121.27261 795.644 130.82461 796.798c20.496 2.474 79.78-93.637 79.78-93.637 0 97.66 88.324 247.617 290.576 248.996a718.01 718.01 0 0 1 5.367 0C708.80161 950.778 797.12261 800.822 797.12261 703.162c0 0 59.284 96.111 79.783 93.637 9.55-1.154 22.093-52.63-16.623-177.017" fill="#000000" p-id="4210" /><path d="M434.38261 316.917c-27.9 1.24-51.745-30.106-53.24-69.956-1.518-39.877 19.858-73.207 47.764-74.454 27.875-1.224 51.703 30.109 53.218 69.974 1.527 39.877-19.853 73.2-47.742 74.436m206.67-69.956c-1.494 39.85-25.34 71.194-53.24 69.956-27.888-1.238-49.269-34.559-47.742-74.435 1.513-39.868 25.341-71.201 53.216-69.974 27.909 1.247 49.285 34.576 47.767 74.453" fill="#FFFFFF" p-id="4211" /><path d="M683.94261 368.627c-7.323-17.609-81.062-37.227-172.353-37.227h-0.98c-91.29 0-165.031 19.618-172.352 37.227a6.244 6.244 0 0 0-0.535 2.505c0 1.269 0.393 2.414 1.006 3.386 6.168 9.765 88.054 58.018 171.882 58.018h0.98c83.827 0 165.71-48.25 171.881-58.016a6.352 6.352 0 0 0 1.002-3.395c0-0.897-0.2-1.736-0.531-2.498" fill="#FAAD08" p-id="4212" /><path d="M467.63161 256.377c1.26 15.886-7.377 30-19.266 31.542-11.907 1.544-22.569-10.083-23.836-25.978-1.243-15.895 7.381-30.008 19.25-31.538 11.927-1.549 22.607 10.088 23.852 25.974m73.097 7.935c2.533-4.118 19.827-25.77 55.62-17.886 9.401 2.07 13.75 5.116 14.668 6.316 1.355 1.77 1.726 4.29 0.352 7.684-2.722 6.725-8.338 6.542-11.454 5.226-2.01-0.85-26.94-15.889-49.905 6.553-1.579 1.545-4.405 2.074-7.085 0.242-2.678-1.834-3.786-5.553-2.196-8.135" fill="#000000" p-id="4213" /><path d="M504.33261 584.495h-0.967c-63.568 0.752-140.646-7.504-215.286-21.92-6.391 36.262-10.25 81.838-6.936 136.196 8.37 137.384 91.62 223.736 220.118 224.996H506.48461c128.498-1.26 211.748-87.612 220.12-224.996 3.314-54.362-0.547-99.938-6.94-136.203-74.654 14.423-151.745 22.684-215.332 21.927" fill="#FFFFFF" p-id="4214" /><path d="M323.27461 577.016v137.468s64.957 12.705 130.031 3.91V591.59c-41.225-2.262-85.688-7.304-130.031-14.574" fill="#EB1C26" p-id="4215" /><path d="M788.09761 432.536s-121.98 40.387-283.743 41.539h-0.962c-161.497-1.147-283.328-41.401-283.744-41.539l-40.854 106.952c102.186 32.31 228.837 53.135 324.598 51.926l0.96-0.002c95.768 1.216 222.4-19.61 324.6-51.924l-40.855-106.952z" fill="#EB1C26" p-id="4216" /></symbol>'});i().add(l);const u=l},6580:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var r=n(7854),a=n.n(r),o=n(5348),i=n.n(o),l=new(a())({id:"wechal",use:"wechal-usage",viewBox:"0 0 1024 1024",content:'<symbol class="icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="wechal"><defs><style type="text/css"></style></defs><path d="M512 1.896C229.452 1.896 0 229.452 0 512s229.452 510.104 512 510.104S1022.104 794.548 1022.104 512 794.548 1.896 512 1.896z m-91.022 629.57c-26.548 0-49.304-5.688-75.852-11.377l-75.852 37.926 22.756-66.37c-54.993-37.926-87.23-87.23-87.23-147.912 0-104.296 98.607-185.837 218.074-185.837 108.089 0 201.007 64.474 219.97 153.6-7.585 0-13.274-1.896-20.859-1.896-104.296 0-185.837 77.748-185.837 172.563 0 15.17 1.896 30.34 7.585 45.511-7.585 3.793-15.17 3.793-22.755 3.793z m322.37 77.749l17.067 54.992-58.785-34.133c-22.756 5.689-43.615 11.378-66.37 11.378-104.297 0-185.838-70.163-185.838-157.393S530.963 424.77 635.26 424.77c98.608 0 185.837 70.163 185.837 159.29 0 47.407-32.237 91.021-77.748 125.155z" fill="#46BB36" p-id="2191" /><path d="M318.578 379.26c0 17.066 13.274 30.34 30.34 30.34s30.341-13.274 30.341-30.34-13.274-30.341-30.34-30.341-30.341 13.274-30.341 30.34z m235.14 159.288c0 13.274 11.378 24.652 24.652 24.652 13.274 0 24.652-11.378 24.652-24.652 0-13.274-11.378-24.652-24.652-24.652-13.274-1.896-24.651 9.482-24.651 24.652z m-81.54-159.289c0 17.067 13.274 30.341 30.34 30.341 17.067 0 30.341-13.274 30.341-30.34 0-17.067-13.274-30.341-30.34-30.341-17.067 0-30.341 13.274-30.341 30.34zM675.08 538.55c0 13.273 11.378 24.651 24.652 24.651 13.274 0 24.652-11.378 24.652-24.652 0-13.274-11.378-24.652-24.652-24.652-13.274-1.896-24.652 9.482-24.652 24.652z" fill="#46BB36" p-id="2192" /></symbol>'});i().add(l);const u=l},4575:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>u});var r=n(7854),a=n.n(r),o=n(5348),i=n.n(o),l=new(a())({id:"zhifubao",use:"zhifubao-usage",viewBox:"0 0 1024 1024",content:'<symbol class="icon" viewBox="0 0 1024 1024" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" id="zhifubao"><defs><style type="text/css"></style></defs><path d="M230.4 576.512c-12.288 9.728-25.088 24.064-28.672 41.984-5.12 24.576-1.024 55.296 22.528 79.872 28.672 29.184 72.704 37.376 91.648 38.912 51.2 3.584 105.984-22.016 147.456-50.688 16.384-11.264 44.032-34.304 70.144-69.632-59.392-30.72-133.632-64.512-212.48-61.44-40.448 1.536-69.632 9.728-90.624 20.992z m752.64 135.68c26.112-61.44 40.96-129.024 40.96-200.192C1024 229.888 794.112 0 512 0S0 229.888 0 512s229.888 512 512 512c170.496 0 321.536-83.968 414.72-211.968-88.064-43.52-232.96-115.712-322.56-159.232-42.496 48.64-105.472 97.28-176.64 118.272-44.544 13.312-84.992 18.432-126.976 9.728-41.984-8.704-72.704-28.16-90.624-47.616-9.216-10.24-19.456-22.528-27.136-37.888 0.512 1.024 1.024 2.048 1.024 3.072 0 0-4.608-7.68-7.68-19.456-1.536-6.144-3.072-11.776-3.584-17.92-0.512-4.096-0.512-8.704 0-12.8-0.512-7.68 0-15.872 1.536-24.064 4.096-20.48 12.8-44.032 35.328-65.536 49.152-48.128 114.688-50.688 148.992-50.176 50.176 0.512 138.24 22.528 211.968 48.64 20.48-43.52 33.792-90.112 41.984-121.344h-307.2v-33.28h157.696v-66.56H272.384V302.08h190.464V235.52c0-9.216 2.048-16.384 16.384-16.384h74.752V302.08h207.36v33.28h-207.36v66.56h165.888s-16.896 92.672-68.608 184.32c115.2 40.96 278.016 104.448 331.776 125.952z" fill="#06B4FD" p-id="2787" /></symbol>'});i().add(l);const u=l},5348:function(e,t,n){e.exports=function(){"use strict";function e(e,t){return e(t={exports:{}},t.exports),t.exports}"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self&&self;var t=e((function(e,t){e.exports=function(){function e(e){return e&&"object"==typeof e&&"[object RegExp]"!==Object.prototype.toString.call(e)&&"[object Date]"!==Object.prototype.toString.call(e)}function t(e){return Array.isArray(e)?[]:{}}function n(n,r){return r&&!0===r.clone&&e(n)?o(t(n),n,r):n}function r(t,r,a){var i=t.slice();return r.forEach((function(r,l){void 0===i[l]?i[l]=n(r,a):e(r)?i[l]=o(t[l],r,a):-1===t.indexOf(r)&&i.push(n(r,a))})),i}function a(t,r,a){var i={};return e(t)&&Object.keys(t).forEach((function(e){i[e]=n(t[e],a)})),Object.keys(r).forEach((function(l){e(r[l])&&t[l]?i[l]=o(t[l],r[l],a):i[l]=n(r[l],a)})),i}function o(e,t,o){var i=Array.isArray(t),l=(o||{arrayMerge:r}).arrayMerge||r;return i?Array.isArray(e)?l(e,t,o):n(t,o):a(e,t,o)}return o.all=function(e,t){if(!Array.isArray(e)||e.length<2)throw new Error("first argument should be an array with at least two elements");return e.reduce((function(e,n){return o(e,n,t)}))},o}()}));var r=e((function(e,t){t.default={svg:{name:"xmlns",uri:"http://www.w3.org/2000/svg"},xlink:{name:"xmlns:xlink",uri:"http://www.w3.org/1999/xlink"}},e.exports=t.default})),a=r.svg,o=r.xlink,i={};i[a.name]=a.uri,i[o.name]=o.uri;var l,u=function(e,n){return void 0===e&&(e=""),"<svg "+function(e){return Object.keys(e).map((function(t){return t+'="'+e[t].toString().replace(/"/g,"&quot;")+'"'})).join(" ")}(t(i,n||{}))+">"+e+"</svg>"},s=r.svg,c=r.xlink,d={attrs:(l={style:["position: absolute","width: 0","height: 0"].join("; "),"aria-hidden":"true"},l[s.name]=s.uri,l[c.name]=c.uri,l)},f=function(e){this.config=t(d,e||{}),this.symbols=[]};f.prototype.add=function(e){var t=this.symbols,n=this.find(e.id);return n?(t[t.indexOf(n)]=e,!1):(t.push(e),!0)},f.prototype.remove=function(e){var t=this.symbols,n=this.find(e);return!!n&&(t.splice(t.indexOf(n),1),n.destroy(),!0)},f.prototype.find=function(e){return this.symbols.filter((function(t){return t.id===e}))[0]||null},f.prototype.has=function(e){return null!==this.find(e)},f.prototype.stringify=function(){var e=this.config.attrs,t=this.symbols.map((function(e){return e.stringify()})).join("");return u(t,e)},f.prototype.toString=function(){return this.stringify()},f.prototype.destroy=function(){this.symbols.forEach((function(e){return e.destroy()}))};var p=function(e){var t=e.id,n=e.viewBox,r=e.content;this.id=t,this.viewBox=n,this.content=r};p.prototype.stringify=function(){return this.content},p.prototype.toString=function(){return this.stringify()},p.prototype.destroy=function(){var e=this;["id","viewBox","content"].forEach((function(t){return delete e[t]}))};var m=function(e){var t=!!document.importNode,n=(new DOMParser).parseFromString(e,"image/svg+xml").documentElement;return t?document.importNode(n,!0):n},h=function(e){function t(){e.apply(this,arguments)}e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t;var n={isMounted:{}};return n.isMounted.get=function(){return!!this.node},t.createFromExistingNode=function(e){return new t({id:e.getAttribute("id"),viewBox:e.getAttribute("viewBox"),content:e.outerHTML})},t.prototype.destroy=function(){this.isMounted&&this.unmount(),e.prototype.destroy.call(this)},t.prototype.mount=function(e){if(this.isMounted)return this.node;var t="string"==typeof e?document.querySelector(e):e,n=this.render();return this.node=n,t.appendChild(n),n},t.prototype.render=function(){var e=this.stringify();return m(u(e)).childNodes[0]},t.prototype.unmount=function(){this.node.parentNode.removeChild(this.node)},Object.defineProperties(t.prototype,n),t}(p),g={autoConfigure:!0,mountTo:"body",syncUrlsWithBaseTag:!1,listenLocationChangeEvent:!0,locationChangeEvent:"locationChange",locationChangeAngularEmitter:!1,usagesToUpdate:"use[*|href]",moveGradientsOutsideSymbol:!1},v=function(e){return Array.prototype.slice.call(e,0)},y=function(){return/firefox/i.test(navigator.userAgent)},b=function(){return/msie/i.test(navigator.userAgent)||/trident/i.test(navigator.userAgent)},E=function(){return/edge/i.test(navigator.userAgent)},x=function(e){return(e||window.location.href).split("#")[0]},w=function(e){angular.module("ng").run(["$rootScope",function(t){t.$on("$locationChangeSuccess",(function(t,n,r){var a,o,i;a=e,o={oldUrl:r,newUrl:n},(i=document.createEvent("CustomEvent")).initCustomEvent(a,!1,!1,o),window.dispatchEvent(i)}))}])},k=function(e,t){return void 0===t&&(t="linearGradient, radialGradient, pattern, mask, clipPath"),v(e.querySelectorAll("symbol")).forEach((function(e){v(e.querySelectorAll(t)).forEach((function(t){e.parentNode.insertBefore(t,e)}))})),e};var S=r.xlink.uri,_="xlink:href",C=/[{}|\\\^\[\]`"<>]/g;function N(e){return e.replace(C,(function(e){return"%"+e[0].charCodeAt(0).toString(16).toUpperCase()}))}var T,A=["clipPath","colorProfile","src","cursor","fill","filter","marker","markerStart","markerMid","markerEnd","mask","stroke","style"],O=A.map((function(e){return"["+e+"]"})).join(","),R=function(e,t,n,r){var a,o,i=N(n),l=N(r);(a=e.querySelectorAll(O),o=function(e){var t=e.localName,n=e.value;return-1!==A.indexOf(t)&&-1!==n.indexOf("url("+i)},v(a).reduce((function(e,t){if(!t.attributes)return e;var n=v(t.attributes),r=o?n.filter(o):n;return e.concat(r)}),[])).forEach((function(e){return e.value=e.value.replace(new RegExp(i.replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),"g"),l)})),function(e,t,n){v(e).forEach((function(e){var r=e.getAttribute(_);if(r&&0===r.indexOf(t)){var a=r.replace(t,n);e.setAttributeNS(S,_,a)}}))}(t,i,l)},L="mount",P="symbol_mount",I=function(e){function n(n){var r=this;void 0===n&&(n={}),e.call(this,t(g,n));var a,o=(a=a||Object.create(null),{on:function(e,t){(a[e]||(a[e]=[])).push(t)},off:function(e,t){a[e]&&a[e].splice(a[e].indexOf(t)>>>0,1)},emit:function(e,t){(a[e]||[]).map((function(e){e(t)})),(a["*"]||[]).map((function(n){n(e,t)}))}});this._emitter=o,this.node=null;var i=this.config;if(i.autoConfigure&&this._autoConfigure(n),i.syncUrlsWithBaseTag){var l=document.getElementsByTagName("base")[0].getAttribute("href");o.on(L,(function(){return r.updateUrls("#",l)}))}var u=this._handleLocationChange.bind(this);this._handleLocationChange=u,i.listenLocationChangeEvent&&window.addEventListener(i.locationChangeEvent,u),i.locationChangeAngularEmitter&&w(i.locationChangeEvent),o.on(L,(function(e){i.moveGradientsOutsideSymbol&&k(e)})),o.on(P,(function(e){var t;i.moveGradientsOutsideSymbol&&k(e.parentNode),(b()||E())&&(t=[],v(e.querySelectorAll("style")).forEach((function(e){e.textContent+="",t.push(e)})))}))}e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n;var r={isMounted:{}};return r.isMounted.get=function(){return!!this.node},n.prototype._autoConfigure=function(e){var t=this.config;void 0===e.syncUrlsWithBaseTag&&(t.syncUrlsWithBaseTag=void 0!==document.getElementsByTagName("base")[0]),void 0===e.locationChangeAngularEmitter&&(t.locationChangeAngularEmitter=void 0!==window.angular),void 0===e.moveGradientsOutsideSymbol&&(t.moveGradientsOutsideSymbol=y())},n.prototype._handleLocationChange=function(e){var t=e.detail,n=t.oldUrl,r=t.newUrl;this.updateUrls(n,r)},n.prototype.add=function(t){var n=e.prototype.add.call(this,t);return this.isMounted&&n&&(t.mount(this.node),this._emitter.emit(P,t.node)),n},n.prototype.attach=function(e){var t=this,n=this;if(n.isMounted)return n.node;var r="string"==typeof e?document.querySelector(e):e;return n.node=r,this.symbols.forEach((function(e){e.mount(n.node),t._emitter.emit(P,e.node)})),v(r.querySelectorAll("symbol")).forEach((function(e){var t=h.createFromExistingNode(e);t.node=e,n.add(t)})),this._emitter.emit(L,r),r},n.prototype.destroy=function(){var e=this,t=e.config,n=e.symbols,r=e._emitter;n.forEach((function(e){return e.destroy()})),r.off("*"),window.removeEventListener(t.locationChangeEvent,this._handleLocationChange),this.isMounted&&this.unmount()},n.prototype.mount=function(e,t){void 0===e&&(e=this.config.mountTo),void 0===t&&(t=!1);var n=this;if(n.isMounted)return n.node;var r="string"==typeof e?document.querySelector(e):e,a=n.render();return this.node=a,t&&r.childNodes[0]?r.insertBefore(a,r.childNodes[0]):r.appendChild(a),this._emitter.emit(L,a),a},n.prototype.render=function(){return m(this.stringify())},n.prototype.unmount=function(){this.node.parentNode.removeChild(this.node)},n.prototype.updateUrls=function(e,t){if(!this.isMounted)return!1;var n=document.querySelectorAll(this.config.usagesToUpdate);return R(this.node,n,x(e)+"#",x(t)+"#"),!0},Object.defineProperties(n.prototype,r),n}(f),F=e((function(e){var t;t=function(){var e,t=[],n=document,r=n.documentElement.doScroll,a="DOMContentLoaded",o=(r?/^loaded|^c/:/^loaded|^i|^c/).test(n.readyState);return o||n.addEventListener(a,e=function(){for(n.removeEventListener(a,e),o=1;e=t.shift();)e()}),function(e){o?setTimeout(e,0):t.push(e)}},e.exports=t()})),D="__SVG_SPRITE_NODE__";window.__SVG_SPRITE__?T=window.__SVG_SPRITE__:(T=new I({attrs:{id:D,"aria-hidden":"true"}}),window.__SVG_SPRITE__=T);var M=function(){var e=document.getElementById(D);e?T.attach(e):T.mount(document.body,!0)};return document.body?M():F(M),T}()},5530:(e,t,n)=>{var r;try{(r=n(11)).keys().forEach(r)}catch(e){}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var o=t[r]={id:r,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=n(7294),t=n(3935);function r(e,t){return r=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},r(e,t)}function a(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,r(e,t)}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o.apply(this,arguments)}function i(e){return"/"===e.charAt(0)}function l(e,t){for(var n=t,r=n+1,a=e.length;r<a;n+=1,r+=1)e[n]=e[r];e.pop()}function u(e,t){if(!e)throw new Error("Invariant failed")}function s(e){return"/"===e.charAt(0)?e:"/"+e}function c(e){return"/"===e.charAt(0)?e.substr(1):e}function d(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function f(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function p(e){var t=e.pathname,n=e.search,r=e.hash,a=t||"/";return n&&"?"!==n&&(a+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(a+="#"===r.charAt(0)?r:"#"+r),a}function m(e,t,n,r){var a;"string"==typeof e?(a=function(e){var t=e||"/",n="",r="",a=t.indexOf("#");-1!==a&&(r=t.substr(a),t=t.substr(0,a));var o=t.indexOf("?");return-1!==o&&(n=t.substr(o),t=t.substr(0,o)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e),a.state=t):(void 0===(a=o({},e)).pathname&&(a.pathname=""),a.search?"?"!==a.search.charAt(0)&&(a.search="?"+a.search):a.search="",a.hash?"#"!==a.hash.charAt(0)&&(a.hash="#"+a.hash):a.hash="",void 0!==t&&void 0===a.state&&(a.state=t));try{a.pathname=decodeURI(a.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+a.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(a.key=n),r?a.pathname?"/"!==a.pathname.charAt(0)&&(a.pathname=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],a=t&&t.split("/")||[],o=e&&i(e),u=t&&i(t),s=o||u;if(e&&i(e)?a=r:r.length&&(a.pop(),a=a.concat(r)),!a.length)return"/";if(a.length){var c=a[a.length-1];n="."===c||".."===c||""===c}else n=!1;for(var d=0,f=a.length;f>=0;f--){var p=a[f];"."===p?l(a,f):".."===p?(l(a,f),d++):d&&(l(a,f),d--)}if(!s)for(;d--;d)a.unshift("..");!s||""===a[0]||a[0]&&i(a[0])||a.unshift("");var m=a.join("/");return n&&"/"!==m.substr(-1)&&(m+="/"),m}(a.pathname,r.pathname)):a.pathname=r.pathname:a.pathname||(a.pathname="/"),a}function h(){var e=null,t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,a){if(null!=e){var o="function"==typeof e?e(t,n):e;"string"==typeof o?"function"==typeof r?r(o,a):a(!0):a(!1!==o)}else a(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var g=!("undefined"==typeof window||!window.document||!window.document.createElement);function v(e,t){t(window.confirm(e))}var y="hashchange",b={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+c(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:c,decodePath:s},slash:{encodePath:s,decodePath:s}};function E(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function x(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function w(e){window.location.replace(E(window.location.href)+"#"+e)}function k(e){void 0===e&&(e={}),g||u(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,a=void 0===r?v:r,i=n.hashType,l=void 0===i?"slash":i,c=e.basename?f(s(e.basename)):"",k=b[l],S=k.encodePath,_=k.decodePath;function C(){var e=_(x());return c&&(e=d(e,c)),m(e)}var N=h();function T(e){o(j,e),j.length=t.length,N.notifyListeners(j.location,j.action)}var A=!1,O=null;function R(){var e,t,n=x(),r=S(n);if(n!==r)w(r);else{var o=C(),i=j.location;if(!A&&(t=o,(e=i).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(O===p(o))return;O=null,function(e){if(A)A=!1,T();else{N.confirmTransitionTo(e,"POP",a,(function(t){t?T({action:"POP",location:e}):function(e){var t=j.location,n=F.lastIndexOf(p(t));-1===n&&(n=0);var r=F.lastIndexOf(p(e));-1===r&&(r=0);var a=n-r;a&&(A=!0,D(a))}(e)}))}}(o)}}var L=x(),P=S(L);L!==P&&w(P);var I=C(),F=[p(I)];function D(e){t.go(e)}var M=0;function z(e){1===(M+=e)&&1===e?window.addEventListener(y,R):0===M&&window.removeEventListener(y,R)}var B=!1,j={length:t.length,action:"POP",location:I,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=E(window.location.href)),n+"#"+S(c+p(e))},push:function(e,t){var n="PUSH",r=m(e,void 0,void 0,j.location);N.confirmTransitionTo(r,n,a,(function(e){if(e){var t=p(r),a=S(c+t);if(x()!==a){O=t,function(e){window.location.hash=e}(a);var o=F.lastIndexOf(p(j.location)),i=F.slice(0,o+1);i.push(t),F=i,T({action:n,location:r})}else T()}}))},replace:function(e,t){var n="REPLACE",r=m(e,void 0,void 0,j.location);N.confirmTransitionTo(r,n,a,(function(e){if(e){var t=p(r),a=S(c+t);x()!==a&&(O=t,w(a));var o=F.indexOf(p(j.location));-1!==o&&(F[o]=t),T({action:n,location:r})}}))},go:D,goBack:function(){D(-1)},goForward:function(){D(1)},block:function(e){void 0===e&&(e=!1);var t=N.setPrompt(e);return B||(z(1),B=!0),function(){return B&&(B=!1,z(-1)),t()}},listen:function(e){var t=N.appendListener(e);return z(1),function(){z(-1),t()}}};return j}var S=n(5697),_=n.n(S),C=1073741823,N="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:{};function T(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}const A=e.createContext||function(t,n){var r,o,i,l="__create-react-context-"+((N[i="__global_unique_id__"]=(N[i]||0)+1)+"__"),u=function(e){function t(){var t;return(t=e.apply(this,arguments)||this).emitter=T(t.props.value),t}a(t,e);var r=t.prototype;return r.getChildContext=function(){var e;return(e={})[l]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var t,r=this.props.value,a=e.value;((o=r)===(i=a)?0!==o||1/o==1/i:o!=o&&i!=i)?t=0:(t="function"==typeof n?n(r,a):C,0!=(t|=0)&&this.emitter.set(e.value,t))}var o,i},r.render=function(){return this.props.children},t}(e.Component);u.childContextTypes=((r={})[l]=_().object.isRequired,r);var s=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).state={value:t.getValue()},t.onUpdate=function(e,n){0!=((0|t.observedBits)&n)&&t.setState({value:t.getValue()})},t}a(n,e);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?C:t},r.componentDidMount=function(){this.context[l]&&this.context[l].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?C:e},r.componentWillUnmount=function(){this.context[l]&&this.context[l].off(this.onUpdate)},r.getValue=function(){return this.context[l]?this.context[l].get():t},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(e.Component);return s.contextTypes=((o={})[l]=_().object,o),{Provider:u,Consumer:s}};var O=n(9658),R=n.n(O);function L(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}n(9864),n(8679);var P=function(e){var t=A();return t.displayName=e,t},I=P("Router-History"),F=P("Router"),D=function(t){function n(e){var n;return(n=t.call(this,e)||this).state={location:e.history.location},n._isMounted=!1,n._pendingLocation=null,e.staticContext||(n.unlisten=e.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}a(n,t),n.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var r=n.prototype;return r.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},r.componentWillUnmount=function(){this.unlisten&&(this.unlisten(),this._isMounted=!1,this._pendingLocation=null)},r.render=function(){return e.createElement(F.Provider,{value:{history:this.props.history,location:this.state.location,match:n.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},e.createElement(I.Provider,{children:this.props.children||null,value:this.props.history}))},n}(e.Component);e.Component,e.Component;var M={},z=0;function B(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,a=n.exact,o=void 0!==a&&a,i=n.strict,l=void 0!==i&&i,u=n.sensitive,s=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=M[n]||(M[n]={});if(r[e])return r[e];var a=[],o={regexp:R()(e,a,t),keys:a};return z<1e4&&(r[e]=o,z++),o}(n,{end:o,strict:l,sensitive:s}),a=r.regexp,i=r.keys,u=a.exec(e);if(!u)return null;var c=u[0],d=u.slice(1),f=e===c;return o&&!f?null:{path:n,url:"/"===n&&""===c?"/":c,isExact:f,params:i.reduce((function(e,t,n){return e[t.name]=d[n],e}),{})}}),null)}var j=function(t){function n(){return t.apply(this,arguments)||this}return a(n,t),n.prototype.render=function(){var t=this;return e.createElement(F.Consumer,null,(function(n){n||u(!1);var r=t.props.location||n.location,a=o({},n,{location:r,match:t.props.computedMatch?t.props.computedMatch:t.props.path?B(r.pathname,t.props):n.match}),i=t.props,l=i.children,s=i.component,c=i.render;return Array.isArray(l)&&function(t){return 0===e.Children.count(t)}(l)&&(l=null),e.createElement(F.Provider,{value:a},a.match?l?"function"==typeof l?l(a):l:s?e.createElement(s,a):c?c(a):null:"function"==typeof l?l(a):null)}))},n}(e.Component);e.Component,e.Component,e.useContext,e.Component;var $=function(t){function n(){for(var e,n=arguments.length,r=new Array(n),a=0;a<n;a++)r[a]=arguments[a];return(e=t.call.apply(t,[this].concat(r))||this).history=k(e.props),e}return a(n,t),n.prototype.render=function(){return e.createElement(D,{history:this.history,children:this.props.children})},n}(e.Component),U=function(e,t){return"function"==typeof e?e(t):e},G=function(e,t){return"string"==typeof e?m(e,null,null,t):e},H=function(e){return e},q=e.forwardRef;void 0===q&&(q=H);var V=q((function(t,n){var r=t.innerRef,a=t.navigate,i=t.onClick,l=L(t,["innerRef","navigate","onClick"]),u=l.target,s=o({},l,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||u&&"_self"!==u||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),a())}});return s.ref=H!==q&&n||r,e.createElement("a",s)})),W=q((function(t,n){var r=t.component,a=void 0===r?V:r,i=t.replace,l=t.to,s=t.innerRef,c=L(t,["component","replace","to","innerRef"]);return e.createElement(F.Consumer,null,(function(t){t||u(!1);var r=t.history,d=G(U(l,t.location),t.location),f=d?r.createHref(d):"",m=o({},c,{href:f,navigate:function(){var e=U(l,t.location),n=p(t.location)===p(G(e));(i||n?r.replace:r.push)(e)}});return H!==q?m.ref=n||s:m.innerRef=s,e.createElement(a,m)}))})),Y=function(e){return e},K=e.forwardRef;void 0===K&&(K=Y);var Q=K((function(t,n){var r=t["aria-current"],a=void 0===r?"page":r,i=t.activeClassName,l=void 0===i?"active":i,s=t.activeStyle,c=t.className,d=t.exact,f=t.isActive,p=t.location,m=t.sensitive,h=t.strict,g=t.style,v=t.to,y=t.innerRef,b=L(t,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return e.createElement(F.Consumer,null,(function(t){t||u(!1);var r=p||t.location,i=G(U(v,r),r),E=i.pathname,x=E&&E.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),w=x?B(r.pathname,{path:x,exact:d,sensitive:m,strict:h}):null,k=!!(f?f(w,r):w),S="function"==typeof c?c(k):c,_="function"==typeof g?g(k):g;k&&(S=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(S,l),_=o({},_,s));var C=o({"aria-current":k&&a||null,className:S,style:_,to:i},b);return Y!==K?C.ref=n||y:C.innerRef=y,e.createElement(W,C)}))})),Z=function(){return Z=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},Z.apply(this,arguments)};function X(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var a=0;for(r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]])}return n}function J(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,a,o=n.call(e),i=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)i.push(r.value)}catch(e){a={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(a)throw a.error}}return i}function ee(e,t,n){if(n||2===arguments.length)for(var r,a=0,o=t.length;a<o;a++)!r&&a in t||(r||(r=Array.prototype.slice.call(t,0,a)),r[a]=t[a]);return e.concat(r||Array.prototype.slice.call(t))}Object.create,Object.create,n(3448),n(5530),n(1601);const te=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return e.filter(Boolean).join(" ")};var ne=function(e){return function(t,n){var r;return Object.entries(t instanceof Object?t:(r={},r[t]=t,r)).filter((function(e){return!1!==e[1]})).map((function(e){return e[0]})).map((function(t){return[e,t].filter(Boolean).join("-")})).concat(n&&n.extra||[]).join(" ")}};const re=function(t){var n=t.className,r=t.name,a=X(t,["className","name"]);return e.createElement("svg",Z({className:te("fui-icon",n)},a),e.createElement("use",{xlinkHref:"#".concat(r)}))};n(2256),n(4243);var ae=function(t){var n=t.className,r=t.children,a=t.level,o=X(t,["className","children","level"]);return e.createElement("button",Z({type:"button",className:te("fui-button","fui-button-".concat(a),n)},o),r)};ae.defaultProps={level:"normal"};const oe=ae;var ie=ne("fui-dialog"),le=function(n){var r=n.visible&&e.createElement(e.Fragment,null,e.createElement("div",{className:ie("mask"),onClick:function(e){n.closeOnClickMask&&n.onClose(e)}}),e.createElement("div",{className:ie("")},e.createElement("div",{className:ie("close"),onClick:function(e){n.onClose(e)}},e.createElement(re,{name:"cuowu"})),e.createElement("header",{className:ie("header")},"提示"),e.createElement("main",{className:ie("main")},n.children),n.buttons&&n.buttons.length>0&&e.createElement("footer",{className:ie("footer")},n.buttons&&n.buttons.map((function(t,n){return e.cloneElement(t,{key:n})})))));return t.createPortal(r,document.body)};le.defaultProps={closeOnClickMask:!1};var ue=function(n,r,a){var o=function(){t.render(e.cloneElement(i,{visible:!1}),l),t.unmountComponentAtNode(l),l.remove()},i=e.createElement(le,{visible:!0,buttons:r,onClose:function(){o(),a&&a()}},n),l=document.createElement("div");return document.body.append(l),t.render(i,l),o};const se=le,ce=function(){return e.createElement("div",null,e.createElement("div",null,e.createElement(oe,null,"默认按钮"),e.createElement(oe,{level:"important"},"蓝色按钮"),e.createElement(oe,{level:"red"},"红色")))};n(2749);var de=function(){var e=/(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i,t=0,n={},r={util:{encode:function e(t){return t instanceof a?new a(t.type,e(t.content),t.alias):Array.isArray(t)?t.map(e):t.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/\u00a0/g," ")},type:function(e){return Object.prototype.toString.call(e).slice(8,-1)},objId:function(e){return e.__id||Object.defineProperty(e,"__id",{value:++t}),e.__id},clone:function e(t,n){var a,o;switch(n=n||{},r.util.type(t)){case"Object":if(o=r.util.objId(t),n[o])return n[o];for(var i in a={},n[o]=a,t)t.hasOwnProperty(i)&&(a[i]=e(t[i],n));return a;case"Array":return o=r.util.objId(t),n[o]?n[o]:(a=[],n[o]=a,t.forEach((function(t,r){a[r]=e(t,n)})),a);default:return t}},getLanguage:function(t){for(;t;){var n=e.exec(t.className);if(n)return n[1].toLowerCase();t=t.parentElement}return"none"},setLanguage:function(t,n){t.className=t.className.replace(RegExp(e,"gi"),""),t.classList.add("language-"+n)},isActive:function(e,t,n){for(var r="no-"+t;e;){var a=e.classList;if(a.contains(t))return!0;if(a.contains(r))return!1;e=e.parentElement}return!!n}},languages:{plain:n,plaintext:n,text:n,txt:n,extend:function(e,t){var n=r.util.clone(r.languages[e]);for(var a in t)n[a]=t[a];return n},insertBefore:function(e,t,n,a){var o=(a=a||r.languages)[e],i={};for(var l in o)if(o.hasOwnProperty(l)){if(l==t)for(var u in n)n.hasOwnProperty(u)&&(i[u]=n[u]);n.hasOwnProperty(l)||(i[l]=o[l])}var s=a[e];return a[e]=i,r.languages.DFS(r.languages,(function(t,n){n===s&&t!=e&&(this[t]=i)})),i},DFS:function e(t,n,a,o){o=o||{};var i=r.util.objId;for(var l in t)if(t.hasOwnProperty(l)){n.call(t,l,t[l],a||l);var u=t[l],s=r.util.type(u);"Object"!==s||o[i(u)]?"Array"!==s||o[i(u)]||(o[i(u)]=!0,e(u,n,l,o)):(o[i(u)]=!0,e(u,n,null,o))}}},plugins:{},highlight:function(e,t,n){var o={code:e,grammar:t,language:n};return r.hooks.run("before-tokenize",o),o.tokens=r.tokenize(o.code,o.grammar),r.hooks.run("after-tokenize",o),a.stringify(r.util.encode(o.tokens),o.language)},tokenize:function(e,t){var n=t.rest;if(n){for(var r in n)t[r]=n[r];delete t.rest}var a=new l;return u(a,a.head,e),i(e,a,t,a.head,0),function(e){for(var t=[],n=e.head.next;n!==e.tail;)t.push(n.value),n=n.next;return t}(a)},hooks:{all:{},add:function(e,t){var n=r.hooks.all;n[e]=n[e]||[],n[e].push(t)},run:function(e,t){var n=r.hooks.all[e];if(n&&n.length)for(var a,o=0;a=n[o++];)a(t)}},Token:a};function a(e,t,n,r){this.type=e,this.content=t,this.alias=n,this.length=0|(r||"").length}function o(e,t,n,r){e.lastIndex=t;var a=e.exec(n);if(a&&r&&a[1]){var o=a[1].length;a.index+=o,a[0]=a[0].slice(o)}return a}function i(e,t,n,l,c,d){for(var f in n)if(n.hasOwnProperty(f)&&n[f]){var p=n[f];p=Array.isArray(p)?p:[p];for(var m=0;m<p.length;++m){if(d&&d.cause==f+","+m)return;var h=p[m],g=h.inside,v=!!h.lookbehind,y=!!h.greedy,b=h.alias;if(y&&!h.pattern.global){var E=h.pattern.toString().match(/[imsuy]*$/)[0];h.pattern=RegExp(h.pattern.source,E+"g")}for(var x=h.pattern||h,w=l.next,k=c;w!==t.tail&&!(d&&k>=d.reach);k+=w.value.length,w=w.next){var S=w.value;if(t.length>e.length)return;if(!(S instanceof a)){var _,C=1;if(y){if(!(_=o(x,k,e,v))||_.index>=e.length)break;var N=_.index,T=_.index+_[0].length,A=k;for(A+=w.value.length;N>=A;)A+=(w=w.next).value.length;if(k=A-=w.value.length,w.value instanceof a)continue;for(var O=w;O!==t.tail&&(A<T||"string"==typeof O.value);O=O.next)C++,A+=O.value.length;C--,S=e.slice(k,A),_.index-=k}else if(!(_=o(x,0,S,v)))continue;N=_.index;var R=_[0],L=S.slice(0,N),P=S.slice(N+R.length),I=k+S.length;d&&I>d.reach&&(d.reach=I);var F=w.prev;if(L&&(F=u(t,F,L),k+=L.length),s(t,F,C),w=u(t,F,new a(f,g?r.tokenize(R,g):R,b,R)),P&&u(t,w,P),C>1){var D={cause:f+","+m,reach:I};i(e,t,n,w.prev,k,D),d&&D.reach>d.reach&&(d.reach=D.reach)}}}}}}function l(){var e={value:null,prev:null,next:null},t={value:null,prev:e,next:null};e.next=t,this.head=e,this.tail=t,this.length=0}function u(e,t,n){var r=t.next,a={value:n,prev:t,next:r};return t.next=a,r.prev=a,e.length++,a}function s(e,t,n){for(var r=t.next,a=0;a<n&&r!==e.tail;a++)r=r.next;t.next=r,r.prev=t,e.length-=a}return a.stringify=function e(t,n){if("string"==typeof t)return t;if(Array.isArray(t)){var a="";return t.forEach((function(t){a+=e(t,n)})),a}var o={type:t.type,content:e(t.content,n),tag:"span",classes:["token",t.type],attributes:{},language:n},i=t.alias;i&&(Array.isArray(i)?Array.prototype.push.apply(o.classes,i):o.classes.push(i)),r.hooks.run("wrap",o);var l="";for(var u in o.attributes)l+=" "+u+'="'+(o.attributes[u]||"").replace(/"/g,"&quot;")+'"';return"<"+o.tag+' class="'+o.classes.join(" ")+'"'+l+">"+o.content+"</"+o.tag+">"},r}(),fe=de;de.default=de,fe.languages.markup={comment:{pattern:/<!--(?:(?!<!--)[\s\S])*?-->/,greedy:!0},prolog:{pattern:/<\?[\s\S]+?\?>/,greedy:!0},doctype:{pattern:/<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,greedy:!0,inside:{"internal-subset":{pattern:/(^[^\[]*\[)[\s\S]+(?=\]>$)/,lookbehind:!0,greedy:!0,inside:null},string:{pattern:/"[^"]*"|'[^']*'/,greedy:!0},punctuation:/^<!|>$|[[\]]/,"doctype-tag":/^DOCTYPE/i,name:/[^\s<>'"]+/}},cdata:{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,greedy:!0},tag:{pattern:/<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,greedy:!0,inside:{tag:{pattern:/^<\/?[^\s>\/]+/,inside:{punctuation:/^<\/?/,namespace:/^[^\s>\/:]+:/}},"special-attr":[],"attr-value":{pattern:/=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,inside:{punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}},punctuation:/\/?>/,"attr-name":{pattern:/[^\s>\/]+/,inside:{namespace:/^[^\s>\/:]+:/}}}},entity:[{pattern:/&[\da-z]{1,8};/i,alias:"named-entity"},/&#x?[\da-f]{1,8};/i]},fe.languages.markup.tag.inside["attr-value"].inside.entity=fe.languages.markup.entity,fe.languages.markup.doctype.inside["internal-subset"].inside=fe.languages.markup,fe.hooks.add("wrap",(function(e){"entity"===e.type&&(e.attributes.title=e.content.replace(/&amp;/,"&"))})),Object.defineProperty(fe.languages.markup.tag,"addInlined",{value:function(e,t){var n={};n["language-"+t]={pattern:/(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,lookbehind:!0,inside:fe.languages[t]},n.cdata=/^<!\[CDATA\[|\]\]>$/i;var r={"included-cdata":{pattern:/<!\[CDATA\[[\s\S]*?\]\]>/i,inside:n}};r["language-"+t]={pattern:/[\s\S]+/,inside:fe.languages[t]};var a={};a[e]={pattern:RegExp(/(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(/__/g,(function(){return e})),"i"),lookbehind:!0,greedy:!0,inside:r},fe.languages.insertBefore("markup","cdata",a)}}),Object.defineProperty(fe.languages.markup.tag,"addAttribute",{value:function(e,t){fe.languages.markup.tag.inside["special-attr"].push({pattern:RegExp(/(^|["'\s])/.source+"(?:"+e+")"+/\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,"i"),lookbehind:!0,inside:{"attr-name":/^[^\s=]+/,"attr-value":{pattern:/=[\s\S]+/,inside:{value:{pattern:/(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,lookbehind:!0,alias:[t,"language-"+t],inside:fe.languages[t]},punctuation:[{pattern:/^=/,alias:"attr-equals"},/"|'/]}}}})}}),fe.languages.html=fe.languages.markup,fe.languages.mathml=fe.languages.markup,fe.languages.svg=fe.languages.markup,fe.languages.xml=fe.languages.extend("markup",{}),fe.languages.ssml=fe.languages.xml,fe.languages.atom=fe.languages.xml,fe.languages.rss=fe.languages.xml,function(e){var t="\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b",n={pattern:/(^(["']?)\w+\2)[ \t]+\S.*/,lookbehind:!0,alias:"punctuation",inside:null},r={bash:n,environment:{pattern:RegExp("\\$"+t),alias:"constant"},variable:[{pattern:/\$?\(\([\s\S]+?\)\)/,greedy:!0,inside:{variable:[{pattern:/(^\$\(\([\s\S]+)\)\)/,lookbehind:!0},/^\$\(\(/],number:/\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,operator:/--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,punctuation:/\(\(?|\)\)?|,|;/}},{pattern:/\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,greedy:!0,inside:{variable:/^\$\(|^`|\)$|`$/}},{pattern:/\$\{[^}]+\}/,greedy:!0,inside:{operator:/:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,punctuation:/[\[\]]/,environment:{pattern:RegExp("(\\{)"+t),lookbehind:!0,alias:"constant"}}},/\$(?:\w+|[#?*!@$])/],entity:/\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/};e.languages.bash={shebang:{pattern:/^#!\s*\/.*/,alias:"important"},comment:{pattern:/(^|[^"{\\$])#.*/,lookbehind:!0},"function-name":[{pattern:/(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,lookbehind:!0,alias:"function"},{pattern:/\b[\w-]+(?=\s*\(\s*\)\s*\{)/,alias:"function"}],"for-or-select":{pattern:/(\b(?:for|select)\s+)\w+(?=\s+in\s)/,alias:"variable",lookbehind:!0},"assign-left":{pattern:/(^|[\s;|&]|[<>]\()\w+(?=\+?=)/,inside:{environment:{pattern:RegExp("(^|[\\s;|&]|[<>]\\()"+t),lookbehind:!0,alias:"constant"}},alias:"variable",lookbehind:!0},string:[{pattern:/((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,lookbehind:!0,greedy:!0,inside:r},{pattern:/((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,lookbehind:!0,greedy:!0,inside:{bash:n}},{pattern:/(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,lookbehind:!0,greedy:!0,inside:r},{pattern:/(^|[^$\\])'[^']*'/,lookbehind:!0,greedy:!0},{pattern:/\$'(?:[^'\\]|\\[\s\S])*'/,greedy:!0,inside:{entity:r.entity}}],environment:{pattern:RegExp("\\$?"+t),alias:"constant"},variable:r.variable,function:{pattern:/(^|[\s;|&]|[<>]\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,lookbehind:!0},keyword:{pattern:/(^|[\s;|&]|[<>]\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\s;|&])/,lookbehind:!0},builtin:{pattern:/(^|[\s;|&]|[<>]\()(?:\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\s;|&])/,lookbehind:!0,alias:"class-name"},boolean:{pattern:/(^|[\s;|&]|[<>]\()(?:false|true)(?=$|[)\s;|&])/,lookbehind:!0},"file-descriptor":{pattern:/\B&\d\b/,alias:"important"},operator:{pattern:/\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,inside:{"file-descriptor":{pattern:/^\d/,alias:"important"}}},punctuation:/\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,number:{pattern:/(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,lookbehind:!0}},n.inside=e.languages.bash;for(var a=["comment","function-name","for-or-select","assign-left","string","environment","function","keyword","builtin","boolean","file-descriptor","operator","punctuation","number"],o=r.variable[1].inside,i=0;i<a.length;i++)o[a[i]]=e.languages.bash[a[i]];e.languages.shell=e.languages.bash}(fe),fe.languages.clike={comment:[{pattern:/(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,lookbehind:!0,greedy:!0},{pattern:/(^|[^\\:])\/\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"class-name":{pattern:/(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\]/}},keyword:/\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,boolean:/\b(?:false|true)\b/,function:/\b\w+(?=\()/,number:/\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,operator:/[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,punctuation:/[{}[\];(),.:]/},fe.languages.c=fe.languages.extend("clike",{comment:{pattern:/\/\/(?:[^\r\n\\]|\\(?:\r\n?|\n|(?![\r\n])))*|\/\*[\s\S]*?(?:\*\/|$)/,greedy:!0},string:{pattern:/"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,greedy:!0},"class-name":{pattern:/(\b(?:enum|struct)\s+(?:__attribute__\s*\(\([\s\S]*?\)\)\s*)?)\w+|\b[a-z]\w*_t\b/,lookbehind:!0},keyword:/\b(?:_Alignas|_Alignof|_Atomic|_Bool|_Complex|_Generic|_Imaginary|_Noreturn|_Static_assert|_Thread_local|__attribute__|asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|inline|int|long|register|return|short|signed|sizeof|static|struct|switch|typedef|typeof|union|unsigned|void|volatile|while)\b/,function:/\b[a-z_]\w*(?=\s*\()/i,number:/(?:\b0x(?:[\da-f]+(?:\.[\da-f]*)?|\.[\da-f]+)(?:p[+-]?\d+)?|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?)[ful]{0,4}/i,operator:/>>=?|<<=?|->|([-+&|:])\1|[?:~]|[-+*/%&|^!=<>]=?/}),fe.languages.insertBefore("c","string",{char:{pattern:/'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n]){0,32}'/,greedy:!0}}),fe.languages.insertBefore("c","string",{macro:{pattern:/(^[\t ]*)#\s*[a-z](?:[^\r\n\\/]|\/(?!\*)|\/\*(?:[^*]|\*(?!\/))*\*\/|\\(?:\r\n|[\s\S]))*/im,lookbehind:!0,greedy:!0,alias:"property",inside:{string:[{pattern:/^(#\s*include\s*)<[^>]+>/,lookbehind:!0},fe.languages.c.string],char:fe.languages.c.char,comment:fe.languages.c.comment,"macro-name":[{pattern:/(^#\s*define\s+)\w+\b(?!\()/i,lookbehind:!0},{pattern:/(^#\s*define\s+)\w+\b(?=\()/i,lookbehind:!0,alias:"function"}],directive:{pattern:/^(#\s*)[a-z]+/,lookbehind:!0,alias:"keyword"},"directive-hash":/^#/,punctuation:/##|\\(?=[\r\n])/,expression:{pattern:/\S[\s\S]*/,inside:fe.languages.c}}}}),fe.languages.insertBefore("c","function",{constant:/\b(?:EOF|NULL|SEEK_CUR|SEEK_END|SEEK_SET|__DATE__|__FILE__|__LINE__|__TIMESTAMP__|__TIME__|__func__|stderr|stdin|stdout)\b/}),delete fe.languages.c.boolean,function(e){var t=/\b(?:alignas|alignof|asm|auto|bool|break|case|catch|char|char16_t|char32_t|char8_t|class|co_await|co_return|co_yield|compl|concept|const|const_cast|consteval|constexpr|constinit|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|final|float|for|friend|goto|if|import|inline|int|int16_t|int32_t|int64_t|int8_t|long|module|mutable|namespace|new|noexcept|nullptr|operator|override|private|protected|public|register|reinterpret_cast|requires|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|try|typedef|typeid|typename|uint16_t|uint32_t|uint64_t|uint8_t|union|unsigned|using|virtual|void|volatile|wchar_t|while)\b/,n=/\b(?!<keyword>)\w+(?:\s*\.\s*\w+)*\b/.source.replace(/<keyword>/g,(function(){return t.source}));e.languages.cpp=e.languages.extend("c",{"class-name":[{pattern:RegExp(/(\b(?:class|concept|enum|struct|typename)\s+)(?!<keyword>)\w+/.source.replace(/<keyword>/g,(function(){return t.source}))),lookbehind:!0},/\b[A-Z]\w*(?=\s*::\s*\w+\s*\()/,/\b[A-Z_]\w*(?=\s*::\s*~\w+\s*\()/i,/\b\w+(?=\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>\s*::\s*\w+\s*\()/],keyword:t,number:{pattern:/(?:\b0b[01']+|\b0x(?:[\da-f']+(?:\.[\da-f']*)?|\.[\da-f']+)(?:p[+-]?[\d']+)?|(?:\b[\d']+(?:\.[\d']*)?|\B\.[\d']+)(?:e[+-]?[\d']+)?)[ful]{0,4}/i,greedy:!0},operator:/>>=?|<<=?|->|--|\+\+|&&|\|\||[?:~]|<=>|[-+*/%&|^!=<>]=?|\b(?:and|and_eq|bitand|bitor|not|not_eq|or|or_eq|xor|xor_eq)\b/,boolean:/\b(?:false|true)\b/}),e.languages.insertBefore("cpp","string",{module:{pattern:RegExp(/(\b(?:import|module)\s+)/.source+"(?:"+/"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|<[^<>\r\n]*>/.source+"|"+/<mod-name>(?:\s*:\s*<mod-name>)?|:\s*<mod-name>/.source.replace(/<mod-name>/g,(function(){return n}))+")"),lookbehind:!0,greedy:!0,inside:{string:/^[<"][\s\S]+/,operator:/:/,punctuation:/\./}},"raw-string":{pattern:/R"([^()\\ ]{0,16})\([\s\S]*?\)\1"/,alias:"string",greedy:!0}}),e.languages.insertBefore("cpp","keyword",{"generic-function":{pattern:/\b(?!operator\b)[a-z_]\w*\s*<(?:[^<>]|<[^<>]*>)*>(?=\s*\()/i,inside:{function:/^\w+/,generic:{pattern:/<[\s\S]+/,alias:"class-name",inside:e.languages.cpp}}}}),e.languages.insertBefore("cpp","operator",{"double-colon":{pattern:/::/,alias:"punctuation"}}),e.languages.insertBefore("cpp","class-name",{"base-clause":{pattern:/(\b(?:class|struct)\s+\w+\s*:\s*)[^;{}"'\s]+(?:\s+[^;{}"'\s]+)*(?=\s*[;{])/,lookbehind:!0,greedy:!0,inside:e.languages.extend("cpp",{})}}),e.languages.insertBefore("inside","double-colon",{"class-name":/\b[a-z_]\w*\b(?!\s*::)/i},e.languages.cpp["base-clause"])}(fe),function(e){var t=/(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;e.languages.css={comment:/\/\*[\s\S]*?\*\//,atrule:{pattern:/@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,inside:{rule:/^@[\w-]+/,"selector-function-argument":{pattern:/(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,lookbehind:!0,alias:"selector"},keyword:{pattern:/(^|[^\w-])(?:and|not|only|or)(?![\w-])/,lookbehind:!0}}},url:{pattern:RegExp("\\burl\\((?:"+t.source+"|"+/(?:[^\\\r\n()"']|\\[\s\S])*/.source+")\\)","i"),greedy:!0,inside:{function:/^url/i,punctuation:/^\(|\)$/,string:{pattern:RegExp("^"+t.source+"$"),alias:"url"}}},selector:{pattern:RegExp("(^|[{}\\s])[^{}\\s](?:[^{};\"'\\s]|\\s+(?![\\s{])|"+t.source+")*(?=\\s*\\{)"),lookbehind:!0},string:{pattern:t,greedy:!0},property:{pattern:/(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,lookbehind:!0},important:/!important\b/i,function:{pattern:/(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,lookbehind:!0},punctuation:/[(){};:,]/},e.languages.css.atrule.inside.rest=e.languages.css;var n=e.languages.markup;n&&(n.tag.addInlined("style","css"),n.tag.addAttribute("style","css"))}(fe),function(e){var t,n=/("|')(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/;e.languages.css.selector={pattern:e.languages.css.selector.pattern,lookbehind:!0,inside:t={"pseudo-element":/:(?:after|before|first-letter|first-line|selection)|::[-\w]+/,"pseudo-class":/:[-\w]+/,class:/\.[-\w]+/,id:/#[-\w]+/,attribute:{pattern:RegExp("\\[(?:[^[\\]\"']|"+n.source+")*\\]"),greedy:!0,inside:{punctuation:/^\[|\]$/,"case-sensitivity":{pattern:/(\s)[si]$/i,lookbehind:!0,alias:"keyword"},namespace:{pattern:/^(\s*)(?:(?!\s)[-*\w\xA0-\uFFFF])*\|(?!=)/,lookbehind:!0,inside:{punctuation:/\|$/}},"attr-name":{pattern:/^(\s*)(?:(?!\s)[-\w\xA0-\uFFFF])+/,lookbehind:!0},"attr-value":[n,{pattern:/(=\s*)(?:(?!\s)[-\w\xA0-\uFFFF])+(?=\s*$)/,lookbehind:!0}],operator:/[|~*^$]?=/}},"n-th":[{pattern:/(\(\s*)[+-]?\d*[\dn](?:\s*[+-]\s*\d+)?(?=\s*\))/,lookbehind:!0,inside:{number:/[\dn]+/,operator:/[+-]/}},{pattern:/(\(\s*)(?:even|odd)(?=\s*\))/i,lookbehind:!0}],combinator:/>|\+|~|\|\|/,punctuation:/[(),]/}},e.languages.css.atrule.inside["selector-function-argument"].inside=t,e.languages.insertBefore("css","property",{variable:{pattern:/(^|[^-\w\xA0-\uFFFF])--(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*/i,lookbehind:!0}});var r={pattern:/(\b\d+)(?:%|[a-z]+(?![\w-]))/,lookbehind:!0},a={pattern:/(^|[^\w.-])-?(?:\d+(?:\.\d+)?|\.\d+)/,lookbehind:!0};e.languages.insertBefore("css","function",{operator:{pattern:/(\s)[+\-*\/](?=\s)/,lookbehind:!0},hexcode:{pattern:/\B#[\da-f]{3,8}\b/i,alias:"color"},color:[{pattern:/(^|[^\w-])(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)(?![\w-])/i,lookbehind:!0},{pattern:/\b(?:hsl|rgb)\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*\)\B|\b(?:hsl|rgb)a\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*,\s*(?:0|0?\.\d+|1)\s*\)\B/i,inside:{unit:r,number:a,function:/[\w-]+(?=\()/,punctuation:/[(),]/}}],entity:/\\[\da-f]{1,8}/i,unit:r,number:a})}(fe),fe.languages.javascript=fe.languages.extend("clike",{"class-name":[fe.languages.clike["class-name"],{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,lookbehind:!0}],keyword:[{pattern:/((?:^|\})\s*)catch\b/,lookbehind:!0},{pattern:/(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,lookbehind:!0}],function:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,number:{pattern:RegExp(/(^|[^\w$])/.source+"(?:"+/NaN|Infinity/.source+"|"+/0[bB][01]+(?:_[01]+)*n?/.source+"|"+/0[oO][0-7]+(?:_[0-7]+)*n?/.source+"|"+/0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source+"|"+/\d+(?:_\d+)*n/.source+"|"+/(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source+")"+/(?![\w$])/.source),lookbehind:!0},operator:/--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/}),fe.languages.javascript["class-name"][0].pattern=/(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/,fe.languages.insertBefore("javascript","keyword",{regex:{pattern:/((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,lookbehind:!0,greedy:!0,inside:{"regex-source":{pattern:/^(\/)[\s\S]+(?=\/[a-z]*$)/,lookbehind:!0,alias:"language-regex",inside:fe.languages.regex},"regex-delimiter":/^\/|\/$/,"regex-flags":/^[a-z]+$/}},"function-variable":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,alias:"function"},parameter:[{pattern:/(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,lookbehind:!0,inside:fe.languages.javascript},{pattern:/(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,lookbehind:!0,inside:fe.languages.javascript},{pattern:/(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,lookbehind:!0,inside:fe.languages.javascript},{pattern:/((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,lookbehind:!0,inside:fe.languages.javascript}],constant:/\b[A-Z](?:[A-Z_]|\dx?)*\b/}),fe.languages.insertBefore("javascript","string",{hashbang:{pattern:/^#!.*/,greedy:!0,alias:"comment"},"template-string":{pattern:/`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},interpolation:{pattern:/((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,lookbehind:!0,inside:{"interpolation-punctuation":{pattern:/^\$\{|\}$/,alias:"punctuation"},rest:fe.languages.javascript}},string:/[\s\S]+/}},"string-property":{pattern:/((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,lookbehind:!0,greedy:!0,alias:"property"}}),fe.languages.insertBefore("javascript","operator",{"literal-property":{pattern:/((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,lookbehind:!0,alias:"property"}}),fe.languages.markup&&(fe.languages.markup.tag.addInlined("script","javascript"),fe.languages.markup.tag.addAttribute(/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,"javascript")),fe.languages.js=fe.languages.javascript,function(e){var t=e.util.clone(e.languages.javascript),n=/(?:\s|\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))\*\/)/.source,r=/(?:\{(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])*\})/.source,a=/(?:\{<S>*\.{3}(?:[^{}]|<BRACES>)*\})/.source;function o(e,t){return e=e.replace(/<S>/g,(function(){return n})).replace(/<BRACES>/g,(function(){return r})).replace(/<SPREAD>/g,(function(){return a})),RegExp(e,t)}a=o(a).source,e.languages.jsx=e.languages.extend("markup",t),e.languages.jsx.tag.pattern=o(/<\/?(?:[\w.:-]+(?:<S>+(?:[\w.:$-]+(?:=(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\/?)?>/.source),e.languages.jsx.tag.inside.tag.pattern=/^<\/?[^\s>\/]*/,e.languages.jsx.tag.inside["attr-value"].pattern=/=(?!\{)(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s'">]+)/,e.languages.jsx.tag.inside.tag.inside["class-name"]=/^[A-Z]\w*(?:\.[A-Z]\w*)*$/,e.languages.jsx.tag.inside.comment=t.comment,e.languages.insertBefore("inside","attr-name",{spread:{pattern:o(/<SPREAD>/.source),inside:e.languages.jsx}},e.languages.jsx.tag),e.languages.insertBefore("inside","special-attr",{script:{pattern:o(/=<BRACES>/.source),alias:"language-javascript",inside:{"script-punctuation":{pattern:/^=(?=\{)/,alias:"punctuation"},rest:e.languages.jsx}}},e.languages.jsx.tag);var i=function(e){return e?"string"==typeof e?e:"string"==typeof e.content?e.content:e.content.map(i).join(""):""},l=function(t){for(var n=[],r=0;r<t.length;r++){var a=t[r],o=!1;if("string"!=typeof a&&("tag"===a.type&&a.content[0]&&"tag"===a.content[0].type?"</"===a.content[0].content[0].content?n.length>0&&n[n.length-1].tagName===i(a.content[0].content[1])&&n.pop():"/>"===a.content[a.content.length-1].content||n.push({tagName:i(a.content[0].content[1]),openedBraces:0}):n.length>0&&"punctuation"===a.type&&"{"===a.content?n[n.length-1].openedBraces++:n.length>0&&n[n.length-1].openedBraces>0&&"punctuation"===a.type&&"}"===a.content?n[n.length-1].openedBraces--:o=!0),(o||"string"==typeof a)&&n.length>0&&0===n[n.length-1].openedBraces){var u=i(a);r<t.length-1&&("string"==typeof t[r+1]||"plain-text"===t[r+1].type)&&(u+=i(t[r+1]),t.splice(r+1,1)),r>0&&("string"==typeof t[r-1]||"plain-text"===t[r-1].type)&&(u=i(t[r-1])+u,t.splice(r-1,1),r--),t[r]=new e.Token("plain-text",u,null,u)}a.content&&"string"!=typeof a.content&&l(a.content)}};e.hooks.add("after-tokenize",(function(e){"jsx"!==e.language&&"tsx"!==e.language||l(e.tokens)}))}(fe),function(e){function t(e,t){return RegExp(e.replace(/<ID>/g,(function(){return/(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/.source})),t)}e.languages.insertBefore("javascript","function-variable",{"method-variable":{pattern:RegExp("(\\.\\s*)"+e.languages.javascript["function-variable"].pattern.source),lookbehind:!0,alias:["function-variable","method","function","property-access"]}}),e.languages.insertBefore("javascript","function",{method:{pattern:RegExp("(\\.\\s*)"+e.languages.javascript.function.source),lookbehind:!0,alias:["function","property-access"]}}),e.languages.insertBefore("javascript","constant",{"known-class-name":[{pattern:/\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\b/,alias:"class-name"},{pattern:/\b(?:[A-Z]\w*)Error\b/,alias:"class-name"}]}),e.languages.insertBefore("javascript","keyword",{imports:{pattern:t(/(\bimport\b\s*)(?:<ID>(?:\s*,\s*(?:\*\s*as\s+<ID>|\{[^{}]*\}))?|\*\s*as\s+<ID>|\{[^{}]*\})(?=\s*\bfrom\b)/.source),lookbehind:!0,inside:e.languages.javascript},exports:{pattern:t(/(\bexport\b\s*)(?:\*(?:\s*as\s+<ID>)?(?=\s*\bfrom\b)|\{[^{}]*\})/.source),lookbehind:!0,inside:e.languages.javascript}}),e.languages.javascript.keyword.unshift({pattern:/\b(?:as|default|export|from|import)\b/,alias:"module"},{pattern:/\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\b/,alias:"control-flow"},{pattern:/\bnull\b/,alias:["null","nil"]},{pattern:/\bundefined\b/,alias:"nil"}),e.languages.insertBefore("javascript","operator",{spread:{pattern:/\.{3}/,alias:"operator"},arrow:{pattern:/=>/,alias:"operator"}}),e.languages.insertBefore("javascript","punctuation",{"property-access":{pattern:t(/(\.\s*)#?<ID>/.source),lookbehind:!0},"maybe-class-name":{pattern:/(^|[^$\w\xA0-\uFFFF])[A-Z][$\w\xA0-\uFFFF]+/,lookbehind:!0},dom:{pattern:/\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\b/,alias:"variable"},console:{pattern:/\bconsole(?=\s*\.)/,alias:"class-name"}});for(var n=["function","function-variable","method","method-variable","property-access"],r=0;r<n.length;r++){var a=n[r],o=e.languages.javascript[a];"RegExp"===e.util.type(o)&&(o=e.languages.javascript[a]={pattern:o});var i=o.inside||{};o.inside=i,i["maybe-class-name"]=/^[A-Z][\s\S]*/}}(fe),function(e){var t=e.languages.javascript["template-string"],n=t.pattern.source,r=t.inside.interpolation,a=r.inside["interpolation-punctuation"],o=r.pattern.source;function i(t,r){if(e.languages[t])return{pattern:RegExp("((?:"+r+")\\s*)"+n),lookbehind:!0,greedy:!0,inside:{"template-punctuation":{pattern:/^`|`$/,alias:"string"},"embedded-code":{pattern:/[\s\S]+/,alias:t}}}}function l(e,t){return"___"+t.toUpperCase()+"_"+e+"___"}function u(t,n,r){var a={code:t,grammar:n,language:r};return e.hooks.run("before-tokenize",a),a.tokens=e.tokenize(a.code,a.grammar),e.hooks.run("after-tokenize",a),a.tokens}function s(t){var n={};n["interpolation-punctuation"]=a;var o=e.tokenize(t,n);if(3===o.length){var i=[1,1];i.push.apply(i,u(o[1],e.languages.javascript,"javascript")),o.splice.apply(o,i)}return new e.Token("interpolation",o,r.alias,t)}function c(t,n,r){var a=e.tokenize(t,{interpolation:{pattern:RegExp(o),lookbehind:!0}}),i=0,c={},d=u(a.map((function(e){if("string"==typeof e)return e;for(var n,a=e.content;-1!==t.indexOf(n=l(i++,r)););return c[n]=a,n})).join(""),n,r),f=Object.keys(c);return i=0,function e(t){for(var n=0;n<t.length;n++){if(i>=f.length)return;var r=t[n];if("string"==typeof r||"string"==typeof r.content){var a=f[i],o="string"==typeof r?r:r.content,l=o.indexOf(a);if(-1!==l){++i;var u=o.substring(0,l),d=s(c[a]),p=o.substring(l+a.length),m=[];if(u&&m.push(u),m.push(d),p){var h=[p];e(h),m.push.apply(m,h)}"string"==typeof r?(t.splice.apply(t,[n,1].concat(m)),n+=m.length-1):r.content=m}}else{var g=r.content;Array.isArray(g)?e(g):e([g])}}}(d),new e.Token(r,d,"language-"+r,t)}e.languages.javascript["template-string"]=[i("css",/\b(?:styled(?:\([^)]*\))?(?:\s*\.\s*\w+(?:\([^)]*\))*)*|css(?:\s*\.\s*(?:global|resolve))?|createGlobalStyle|keyframes)/.source),i("html",/\bhtml|\.\s*(?:inner|outer)HTML\s*\+?=/.source),i("svg",/\bsvg/.source),i("markdown",/\b(?:markdown|md)/.source),i("graphql",/\b(?:gql|graphql(?:\s*\.\s*experimental)?)/.source),i("sql",/\bsql/.source),t].filter(Boolean);var d={javascript:!0,js:!0,typescript:!0,ts:!0,jsx:!0,tsx:!0};function f(e){return"string"==typeof e?e:Array.isArray(e)?e.map(f).join(""):f(e.content)}e.hooks.add("after-tokenize",(function(t){t.language in d&&function t(n){for(var r=0,a=n.length;r<a;r++){var o=n[r];if("string"!=typeof o){var i=o.content;if(Array.isArray(i))if("template-string"===o.type){var l=i[1];if(3===i.length&&"string"!=typeof l&&"embedded-code"===l.type){var u=f(l),s=l.alias,d=Array.isArray(s)?s[0]:s,p=e.languages[d];if(!p)continue;i[1]=c(u,p,d)}}else t(i);else"string"!=typeof i&&t([i])}}}(t.tokens)}))}(fe),function(e){var t=/#(?!\{).+/,n={pattern:/#\{[^}]+\}/,alias:"variable"};e.languages.coffeescript=e.languages.extend("javascript",{comment:t,string:[{pattern:/'(?:\\[\s\S]|[^\\'])*'/,greedy:!0},{pattern:/"(?:\\[\s\S]|[^\\"])*"/,greedy:!0,inside:{interpolation:n}}],keyword:/\b(?:and|break|by|catch|class|continue|debugger|delete|do|each|else|extend|extends|false|finally|for|if|in|instanceof|is|isnt|let|loop|namespace|new|no|not|null|of|off|on|or|own|return|super|switch|then|this|throw|true|try|typeof|undefined|unless|until|when|while|window|with|yes|yield)\b/,"class-member":{pattern:/@(?!\d)\w+/,alias:"variable"}}),e.languages.insertBefore("coffeescript","comment",{"multiline-comment":{pattern:/###[\s\S]+?###/,alias:"comment"},"block-regex":{pattern:/\/{3}[\s\S]*?\/{3}/,alias:"regex",inside:{comment:t,interpolation:n}}}),e.languages.insertBefore("coffeescript","string",{"inline-javascript":{pattern:/`(?:\\[\s\S]|[^\\`])*`/,inside:{delimiter:{pattern:/^`|`$/,alias:"punctuation"},script:{pattern:/[\s\S]+/,alias:"language-javascript",inside:e.languages.javascript}}},"multiline-string":[{pattern:/'''[\s\S]*?'''/,greedy:!0,alias:"string"},{pattern:/"""[\s\S]*?"""/,greedy:!0,alias:"string",inside:{interpolation:n}}]}),e.languages.insertBefore("coffeescript","keyword",{property:/(?!\d)\w+(?=\s*:(?!:))/}),delete e.languages.coffeescript["template-string"],e.languages.coffee=e.languages.coffeescript}(fe),function(e){e.languages.diff={coord:[/^(?:\*{3}|-{3}|\+{3}).*$/m,/^@@.*@@$/m,/^\d.*$/m]};var t={"deleted-sign":"-","deleted-arrow":"<","inserted-sign":"+","inserted-arrow":">",unchanged:" ",diff:"!"};Object.keys(t).forEach((function(n){var r=t[n],a=[];/^\w+$/.test(n)||a.push(/\w+/.exec(n)[0]),"diff"===n&&a.push("bold"),e.languages.diff[n]={pattern:RegExp("^(?:["+r+"].*(?:\r\n?|\n|(?![\\s\\S])))+","m"),alias:a,inside:{line:{pattern:/(.)(?=[\s\S]).*(?:\r\n?|\n)?/,lookbehind:!0},prefix:{pattern:/[\s\S]/,alias:/\w+/.exec(n)[0]}}}})),Object.defineProperty(e.languages.diff,"PREFIXES",{value:t})}(fe),fe.languages.git={comment:/^#.*/m,deleted:/^[-–].*/m,inserted:/^\+.*/m,string:/("|')(?:\\.|(?!\1)[^\\\r\n])*\1/,command:{pattern:/^.*\$ git .*$/m,inside:{parameter:/\s--?\w+/}},coord:/^@@.*@@$/m,"commit-sha1":/^commit \w{40}$/m},fe.languages.go=fe.languages.extend("clike",{string:{pattern:/(^|[^\\])"(?:\\.|[^"\\\r\n])*"|`[^`]*`/,lookbehind:!0,greedy:!0},keyword:/\b(?:break|case|chan|const|continue|default|defer|else|fallthrough|for|func|go(?:to)?|if|import|interface|map|package|range|return|select|struct|switch|type|var)\b/,boolean:/\b(?:_|false|iota|nil|true)\b/,number:[/\b0(?:b[01_]+|o[0-7_]+)i?\b/i,/\b0x(?:[a-f\d_]+(?:\.[a-f\d_]*)?|\.[a-f\d_]+)(?:p[+-]?\d+(?:_\d+)*)?i?(?!\w)/i,/(?:\b\d[\d_]*(?:\.[\d_]*)?|\B\.\d[\d_]*)(?:e[+-]?[\d_]+)?i?(?!\w)/i],operator:/[*\/%^!=]=?|\+[=+]?|-[=-]?|\|[=|]?|&(?:=|&|\^=?)?|>(?:>=?|=)?|<(?:<=?|=|-)?|:=|\.\.\./,builtin:/\b(?:append|bool|byte|cap|close|complex|complex(?:64|128)|copy|delete|error|float(?:32|64)|u?int(?:8|16|32|64)?|imag|len|make|new|panic|print(?:ln)?|real|recover|rune|string|uintptr)\b/}),fe.languages.insertBefore("go","string",{char:{pattern:/'(?:\\.|[^'\\\r\n]){0,10}'/,greedy:!0}}),delete fe.languages.go["class-name"],fe.languages.graphql={comment:/#.*/,description:{pattern:/(?:"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*")(?=\s*[a-z_])/i,greedy:!0,alias:"string",inside:{"language-markdown":{pattern:/(^"(?:"")?)(?!\1)[\s\S]+(?=\1$)/,lookbehind:!0,inside:fe.languages.markdown}}},string:{pattern:/"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*"/,greedy:!0},number:/(?:\B-|\b)\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,boolean:/\b(?:false|true)\b/,variable:/\$[a-z_]\w*/i,directive:{pattern:/@[a-z_]\w*/i,alias:"function"},"attr-name":{pattern:/\b[a-z_]\w*(?=\s*(?:\((?:[^()"]|"(?:\\.|[^\\"\r\n])*")*\))?:)/i,greedy:!0},"atom-input":{pattern:/\b[A-Z]\w*Input\b/,alias:"class-name"},scalar:/\b(?:Boolean|Float|ID|Int|String)\b/,constant:/\b[A-Z][A-Z_\d]*\b/,"class-name":{pattern:/(\b(?:enum|implements|interface|on|scalar|type|union)\s+|&\s*|:\s*|\[)[A-Z_]\w*/,lookbehind:!0},fragment:{pattern:/(\bfragment\s+|\.{3}\s*(?!on\b))[a-zA-Z_]\w*/,lookbehind:!0,alias:"function"},"definition-mutation":{pattern:/(\bmutation\s+)[a-zA-Z_]\w*/,lookbehind:!0,alias:"function"},"definition-query":{pattern:/(\bquery\s+)[a-zA-Z_]\w*/,lookbehind:!0,alias:"function"},keyword:/\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\b/,operator:/[!=|&]|\.{3}/,"property-query":/\w+(?=\s*\()/,object:/\w+(?=\s*\{)/,punctuation:/[!(){}\[\]:=,]/,property:/\w+/},fe.hooks.add("after-tokenize",(function(e){if("graphql"===e.language)for(var t=e.tokens.filter((function(e){return"string"!=typeof e&&"comment"!==e.type&&"scalar"!==e.type})),n=0;n<t.length;){var r=t[n++];if("keyword"===r.type&&"mutation"===r.content){var a=[];if(d(["definition-mutation","punctuation"])&&"("===c(1).content){n+=2;var o=f(/^\($/,/^\)$/);if(-1===o)continue;for(;n<o;n++){var i=c(0);"variable"===i.type&&(p(i,"variable-input"),a.push(i.content))}n=o+1}if(d(["punctuation","property-query"])&&"{"===c(0).content&&(n++,p(c(0),"property-mutation"),a.length>0)){var l=f(/^\{$/,/^\}$/);if(-1===l)continue;for(var u=n;u<l;u++){var s=t[u];"variable"===s.type&&a.indexOf(s.content)>=0&&p(s,"variable-input")}}}}function c(e){return t[n+e]}function d(e,t){t=t||0;for(var n=0;n<e.length;n++){var r=c(n+t);if(!r||r.type!==e[n])return!1}return!0}function f(e,r){for(var a=1,o=n;o<t.length;o++){var i=t[o],l=i.content;if("punctuation"===i.type&&"string"==typeof l)if(e.test(l))a++;else if(r.test(l)&&0==--a)return o}return-1}function p(e,t){var n=e.alias;n?Array.isArray(n)||(e.alias=n=[n]):e.alias=n=[],n.push(t)}})),function(e){function t(e,t){return"___"+e.toUpperCase()+t+"___"}Object.defineProperties(e.languages["markup-templating"]={},{buildPlaceholders:{value:function(n,r,a,o){if(n.language===r){var i=n.tokenStack=[];n.code=n.code.replace(a,(function(e){if("function"==typeof o&&!o(e))return e;for(var a,l=i.length;-1!==n.code.indexOf(a=t(r,l));)++l;return i[l]=e,a})),n.grammar=e.languages.markup}}},tokenizePlaceholders:{value:function(n,r){if(n.language===r&&n.tokenStack){n.grammar=e.languages[r];var a=0,o=Object.keys(n.tokenStack);!function i(l){for(var u=0;u<l.length&&!(a>=o.length);u++){var s=l[u];if("string"==typeof s||s.content&&"string"==typeof s.content){var c=o[a],d=n.tokenStack[c],f="string"==typeof s?s:s.content,p=t(r,c),m=f.indexOf(p);if(m>-1){++a;var h=f.substring(0,m),g=new e.Token(r,e.tokenize(d,n.grammar),"language-"+r,d),v=f.substring(m+p.length),y=[];h&&y.push.apply(y,i([h])),y.push(g),v&&y.push.apply(y,i([v])),"string"==typeof s?l.splice.apply(l,[u,1].concat(y)):s.content=y}}else s.content&&i(s.content)}return l}(n.tokens)}}}})}(fe),function(e){e.languages.handlebars={comment:/\{\{![\s\S]*?\}\}/,delimiter:{pattern:/^\{\{\{?|\}\}\}?$/,alias:"punctuation"},string:/(["'])(?:\\.|(?!\1)[^\\\r\n])*\1/,number:/\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee][+-]?\d+)?/,boolean:/\b(?:false|true)\b/,block:{pattern:/^(\s*(?:~\s*)?)[#\/]\S+?(?=\s*(?:~\s*)?$|\s)/,lookbehind:!0,alias:"keyword"},brackets:{pattern:/\[[^\]]+\]/,inside:{punctuation:/\[|\]/,variable:/[\s\S]+/}},punctuation:/[!"#%&':()*+,.\/;<=>@\[\\\]^`{|}~]/,variable:/[^!"#%&'()*+,\/;<=>@\[\\\]^`{|}~\s]+/},e.hooks.add("before-tokenize",(function(t){e.languages["markup-templating"].buildPlaceholders(t,"handlebars",/\{\{\{[\s\S]+?\}\}\}|\{\{[\s\S]+?\}\}/g)})),e.hooks.add("after-tokenize",(function(t){e.languages["markup-templating"].tokenizePlaceholders(t,"handlebars")})),e.languages.hbs=e.languages.handlebars}(fe),fe.languages.json={property:{pattern:/(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,lookbehind:!0,greedy:!0},string:{pattern:/(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,lookbehind:!0,greedy:!0},comment:{pattern:/\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,greedy:!0},number:/-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,punctuation:/[{}[\],]/,operator:/:/,boolean:/\b(?:false|true)\b/,null:{pattern:/\bnull\b/,alias:"keyword"}},fe.languages.webmanifest=fe.languages.json,fe.languages.less=fe.languages.extend("css",{comment:[/\/\*[\s\S]*?\*\//,{pattern:/(^|[^\\])\/\/.*/,lookbehind:!0}],atrule:{pattern:/@[\w-](?:\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};\s]|\s+(?!\s))*?(?=\s*\{)/,inside:{punctuation:/[:()]/}},selector:{pattern:/(?:@\{[\w-]+\}|[^{};\s@])(?:@\{[\w-]+\}|\((?:[^(){}]|\([^(){}]*\))*\)|[^(){};@\s]|\s+(?!\s))*?(?=\s*\{)/,inside:{variable:/@+[\w-]+/}},property:/(?:@\{[\w-]+\}|[\w-])+(?:\+_?)?(?=\s*:)/,operator:/[+\-*\/]/}),fe.languages.insertBefore("less","property",{variable:[{pattern:/@[\w-]+\s*:/,inside:{punctuation:/:/}},/@@?[\w-]+/],"mixin-usage":{pattern:/([{;]\s*)[.#](?!\d)[\w-].*?(?=[(;])/,lookbehind:!0,alias:"function"}}),fe.languages.makefile={comment:{pattern:/(^|[^\\])#(?:\\(?:\r\n|[\s\S])|[^\\\r\n])*/,lookbehind:!0},string:{pattern:/(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,greedy:!0},"builtin-target":{pattern:/\.[A-Z][^:#=\s]+(?=\s*:(?!=))/,alias:"builtin"},target:{pattern:/^(?:[^:=\s]|[ \t]+(?![\s:]))+(?=\s*:(?!=))/m,alias:"symbol",inside:{variable:/\$+(?:(?!\$)[^(){}:#=\s]+|(?=[({]))/}},variable:/\$+(?:(?!\$)[^(){}:#=\s]+|\([@*%<^+?][DF]\)|(?=[({]))/,keyword:/-include\b|\b(?:define|else|endef|endif|export|ifn?def|ifn?eq|include|override|private|sinclude|undefine|unexport|vpath)\b/,function:{pattern:/(\()(?:abspath|addsuffix|and|basename|call|dir|error|eval|file|filter(?:-out)?|findstring|firstword|flavor|foreach|guile|if|info|join|lastword|load|notdir|or|origin|patsubst|realpath|shell|sort|strip|subst|suffix|value|warning|wildcard|word(?:list|s)?)(?=[ \t])/,lookbehind:!0},operator:/(?:::|[?:+!])?=|[|@]/,punctuation:/[:;(){}]/},function(e){var t=/(?:\\.|[^\\\n\r]|(?:\n|\r\n?)(?![\r\n]))/.source;function n(e){return e=e.replace(/<inner>/g,(function(){return t})),RegExp(/((?:^|[^\\])(?:\\{2})*)/.source+"(?:"+e+")")}var r=/(?:\\.|``(?:[^`\r\n]|`(?!`))+``|`[^`\r\n]+`|[^\\|\r\n`])+/.source,a=/\|?__(?:\|__)+\|?(?:(?:\n|\r\n?)|(?![\s\S]))/.source.replace(/__/g,(function(){return r})),o=/\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\n|\r\n?)/.source;e.languages.markdown=e.languages.extend("markup",{}),e.languages.insertBefore("markdown","prolog",{"front-matter-block":{pattern:/(^(?:\s*[\r\n])?)---(?!.)[\s\S]*?[\r\n]---(?!.)/,lookbehind:!0,greedy:!0,inside:{punctuation:/^---|---$/,"front-matter":{pattern:/\S+(?:\s+\S+)*/,alias:["yaml","language-yaml"],inside:e.languages.yaml}}},blockquote:{pattern:/^>(?:[\t ]*>)*/m,alias:"punctuation"},table:{pattern:RegExp("^"+a+o+"(?:"+a+")*","m"),inside:{"table-data-rows":{pattern:RegExp("^("+a+o+")(?:"+a+")*$"),lookbehind:!0,inside:{"table-data":{pattern:RegExp(r),inside:e.languages.markdown},punctuation:/\|/}},"table-line":{pattern:RegExp("^("+a+")"+o+"$"),lookbehind:!0,inside:{punctuation:/\||:?-{3,}:?/}},"table-header-row":{pattern:RegExp("^"+a+"$"),inside:{"table-header":{pattern:RegExp(r),alias:"important",inside:e.languages.markdown},punctuation:/\|/}}}},code:[{pattern:/((?:^|\n)[ \t]*\n|(?:^|\r\n?)[ \t]*\r\n?)(?: {4}|\t).+(?:(?:\n|\r\n?)(?: {4}|\t).+)*/,lookbehind:!0,alias:"keyword"},{pattern:/^```[\s\S]*?^```$/m,greedy:!0,inside:{"code-block":{pattern:/^(```.*(?:\n|\r\n?))[\s\S]+?(?=(?:\n|\r\n?)^```$)/m,lookbehind:!0},"code-language":{pattern:/^(```).+/,lookbehind:!0},punctuation:/```/}}],title:[{pattern:/\S.*(?:\n|\r\n?)(?:==+|--+)(?=[ \t]*$)/m,alias:"important",inside:{punctuation:/==+$|--+$/}},{pattern:/(^\s*)#.+/m,lookbehind:!0,alias:"important",inside:{punctuation:/^#+|#+$/}}],hr:{pattern:/(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,lookbehind:!0,alias:"punctuation"},list:{pattern:/(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,lookbehind:!0,alias:"punctuation"},"url-reference":{pattern:/!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,inside:{variable:{pattern:/^(!?\[)[^\]]+/,lookbehind:!0},string:/(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,punctuation:/^[\[\]!:]|[<>]/},alias:"url"},bold:{pattern:n(/\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\b|\*\*(?:(?!\*)<inner>|\*(?:(?!\*)<inner>)+\*)+\*\*/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^..)[\s\S]+(?=..$)/,lookbehind:!0,inside:{}},punctuation:/\*\*|__/}},italic:{pattern:n(/\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\b|\*(?:(?!\*)<inner>|\*\*(?:(?!\*)<inner>)+\*\*)+\*/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^.)[\s\S]+(?=.$)/,lookbehind:!0,inside:{}},punctuation:/[*_]/}},strike:{pattern:n(/(~~?)(?:(?!~)<inner>)+\2/.source),lookbehind:!0,greedy:!0,inside:{content:{pattern:/(^~~?)[\s\S]+(?=\1$)/,lookbehind:!0,inside:{}},punctuation:/~~?/}},"code-snippet":{pattern:/(^|[^\\`])(?:``[^`\r\n]+(?:`[^`\r\n]+)*``(?!`)|`[^`\r\n]+`(?!`))/,lookbehind:!0,greedy:!0,alias:["code","keyword"]},url:{pattern:n(/!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)|[ \t]?\[(?:(?!\])<inner>)+\])/.source),lookbehind:!0,greedy:!0,inside:{operator:/^!/,content:{pattern:/(^\[)[^\]]+(?=\])/,lookbehind:!0,inside:{}},variable:{pattern:/(^\][ \t]?\[)[^\]]+(?=\]$)/,lookbehind:!0},url:{pattern:/(^\]\()[^\s)]+/,lookbehind:!0},string:{pattern:/(^[ \t]+)"(?:\\.|[^"\\])*"(?=\)$)/,lookbehind:!0}}}}),["url","bold","italic","strike"].forEach((function(t){["url","bold","italic","strike","code-snippet"].forEach((function(n){t!==n&&(e.languages.markdown[t].inside.content.inside[n]=e.languages.markdown[n])}))})),e.hooks.add("after-tokenize",(function(e){"markdown"!==e.language&&"md"!==e.language||function e(t){if(t&&"string"!=typeof t)for(var n=0,r=t.length;n<r;n++){var a=t[n];if("code"===a.type){var o=a.content[1],i=a.content[3];if(o&&i&&"code-language"===o.type&&"code-block"===i.type&&"string"==typeof o.content){var l=o.content.replace(/\b#/g,"sharp").replace(/\b\+\+/g,"pp"),u="language-"+(l=(/[a-z][\w-]*/i.exec(l)||[""])[0].toLowerCase());i.alias?"string"==typeof i.alias?i.alias=[i.alias,u]:i.alias.push(u):i.alias=[u]}}else e(a.content)}}(e.tokens)})),e.hooks.add("wrap",(function(t){if("code-block"===t.type){for(var n="",r=0,a=t.classes.length;r<a;r++){var o=t.classes[r],s=/language-(.+)/.exec(o);if(s){n=s[1];break}}var c=e.languages[n];if(c)t.content=e.highlight(t.content.replace(i,"").replace(/&(\w{1,8}|#x?[\da-f]{1,8});/gi,(function(e,t){var n;return"#"===(t=t.toLowerCase())[0]?(n="x"===t[1]?parseInt(t.slice(2),16):Number(t.slice(1)),u(n)):l[t]||e})),c,n);else if(n&&"none"!==n&&e.plugins.autoloader){var d="md-"+(new Date).valueOf()+"-"+Math.floor(1e16*Math.random());t.attributes.id=d,e.plugins.autoloader.loadLanguages(n,(function(){var t=document.getElementById(d);t&&(t.innerHTML=e.highlight(t.textContent,e.languages[n],n))}))}}}));var i=RegExp(e.languages.markup.tag.pattern.source,"gi"),l={amp:"&",lt:"<",gt:">",quot:'"'},u=String.fromCodePoint||String.fromCharCode;e.languages.md=e.languages.markdown}(fe),fe.languages.objectivec=fe.languages.extend("c",{string:{pattern:/@?"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"/,greedy:!0},keyword:/\b(?:asm|auto|break|case|char|const|continue|default|do|double|else|enum|extern|float|for|goto|if|in|inline|int|long|register|return|self|short|signed|sizeof|static|struct|super|switch|typedef|typeof|union|unsigned|void|volatile|while)\b|(?:@interface|@end|@implementation|@protocol|@class|@public|@protected|@private|@property|@try|@catch|@finally|@throw|@synthesize|@dynamic|@selector)\b/,operator:/-[->]?|\+\+?|!=?|<<?=?|>>?=?|==?|&&?|\|\|?|[~^%?*\/@]/}),delete fe.languages.objectivec["class-name"],fe.languages.objc=fe.languages.objectivec,fe.languages.ocaml={comment:{pattern:/\(\*[\s\S]*?\*\)/,greedy:!0},char:{pattern:/'(?:[^\\\r\n']|\\(?:.|[ox]?[0-9a-f]{1,3}))'/i,greedy:!0},string:[{pattern:/"(?:\\(?:[\s\S]|\r\n)|[^\\\r\n"])*"/,greedy:!0},{pattern:/\{([a-z_]*)\|[\s\S]*?\|\1\}/,greedy:!0}],number:[/\b(?:0b[01][01_]*|0o[0-7][0-7_]*)\b/i,/\b0x[a-f0-9][a-f0-9_]*(?:\.[a-f0-9_]*)?(?:p[+-]?\d[\d_]*)?(?!\w)/i,/\b\d[\d_]*(?:\.[\d_]*)?(?:e[+-]?\d[\d_]*)?(?!\w)/i],directive:{pattern:/\B#\w+/,alias:"property"},label:{pattern:/\B~\w+/,alias:"property"},"type-variable":{pattern:/\B'\w+/,alias:"function"},variant:{pattern:/`\w+/,alias:"symbol"},keyword:/\b(?:as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|match|method|module|mutable|new|nonrec|object|of|open|private|rec|sig|struct|then|to|try|type|val|value|virtual|when|where|while|with)\b/,boolean:/\b(?:false|true)\b/,"operator-like-punctuation":{pattern:/\[[<>|]|[>|]\]|\{<|>\}/,alias:"punctuation"},operator:/\.[.~]|:[=>]|[=<>@^|&+\-*\/$%!?~][!$%&*+\-.\/:<=>?@^|~]*|\b(?:and|asr|land|lor|lsl|lsr|lxor|mod|or)\b/,punctuation:/;;|::|[(){}\[\].,:;#]|\b_\b/},fe.languages.python={comment:{pattern:/(^|[^\\])#.*/,lookbehind:!0,greedy:!0},"string-interpolation":{pattern:/(?:f|fr|rf)(?:("""|''')[\s\S]*?\1|("|')(?:\\.|(?!\2)[^\\\r\n])*\2)/i,greedy:!0,inside:{interpolation:{pattern:/((?:^|[^{])(?:\{\{)*)\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}]|\{(?!\{)(?:[^{}])+\})+\})+\}/,lookbehind:!0,inside:{"format-spec":{pattern:/(:)[^:(){}]+(?=\}$)/,lookbehind:!0},"conversion-option":{pattern:/![sra](?=[:}]$)/,alias:"punctuation"},rest:null}},string:/[\s\S]+/}},"triple-quoted-string":{pattern:/(?:[rub]|br|rb)?("""|''')[\s\S]*?\1/i,greedy:!0,alias:"string"},string:{pattern:/(?:[rub]|br|rb)?("|')(?:\\.|(?!\1)[^\\\r\n])*\1/i,greedy:!0},function:{pattern:/((?:^|\s)def[ \t]+)[a-zA-Z_]\w*(?=\s*\()/g,lookbehind:!0},"class-name":{pattern:/(\bclass\s+)\w+/i,lookbehind:!0},decorator:{pattern:/(^[\t ]*)@\w+(?:\.\w+)*/m,lookbehind:!0,alias:["annotation","punctuation"],inside:{punctuation:/\./}},keyword:/\b(?:_(?=\s*:)|and|as|assert|async|await|break|case|class|continue|def|del|elif|else|except|exec|finally|for|from|global|if|import|in|is|lambda|match|nonlocal|not|or|pass|print|raise|return|try|while|with|yield)\b/,builtin:/\b(?:__import__|abs|all|any|apply|ascii|basestring|bin|bool|buffer|bytearray|bytes|callable|chr|classmethod|cmp|coerce|compile|complex|delattr|dict|dir|divmod|enumerate|eval|execfile|file|filter|float|format|frozenset|getattr|globals|hasattr|hash|help|hex|id|input|int|intern|isinstance|issubclass|iter|len|list|locals|long|map|max|memoryview|min|next|object|oct|open|ord|pow|property|range|raw_input|reduce|reload|repr|reversed|round|set|setattr|slice|sorted|staticmethod|str|sum|super|tuple|type|unichr|unicode|vars|xrange|zip)\b/,boolean:/\b(?:False|None|True)\b/,number:/\b0(?:b(?:_?[01])+|o(?:_?[0-7])+|x(?:_?[a-f0-9])+)\b|(?:\b\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\B\.\d+(?:_\d+)*)(?:e[+-]?\d+(?:_\d+)*)?j?(?!\w)/i,operator:/[-+%=]=?|!=|:=|\*\*?=?|\/\/?=?|<[<=>]?|>[=>]?|[&|^~]/,punctuation:/[{}[\];(),.:]/},fe.languages.python["string-interpolation"].inside.interpolation.inside.rest=fe.languages.python,fe.languages.py=fe.languages.python,fe.languages.reason=fe.languages.extend("clike",{string:{pattern:/"(?:\\(?:\r\n|[\s\S])|[^\\\r\n"])*"/,greedy:!0},"class-name":/\b[A-Z]\w*/,keyword:/\b(?:and|as|assert|begin|class|constraint|do|done|downto|else|end|exception|external|for|fun|function|functor|if|in|include|inherit|initializer|lazy|let|method|module|mutable|new|nonrec|object|of|open|or|private|rec|sig|struct|switch|then|to|try|type|val|virtual|when|while|with)\b/,operator:/\.{3}|:[:=]|\|>|->|=(?:==?|>)?|<=?|>=?|[|^?'#!~`]|[+\-*\/]\.?|\b(?:asr|land|lor|lsl|lsr|lxor|mod)\b/}),fe.languages.insertBefore("reason","class-name",{char:{pattern:/'(?:\\x[\da-f]{2}|\\o[0-3][0-7][0-7]|\\\d{3}|\\.|[^'\\\r\n])'/,greedy:!0},constructor:/\b[A-Z]\w*\b(?!\s*\.)/,label:{pattern:/\b[a-z]\w*(?=::)/,alias:"symbol"}}),delete fe.languages.reason.function,function(e){e.languages.sass=e.languages.extend("css",{comment:{pattern:/^([ \t]*)\/[\/*].*(?:(?:\r?\n|\r)\1[ \t].+)*/m,lookbehind:!0,greedy:!0}}),e.languages.insertBefore("sass","atrule",{"atrule-line":{pattern:/^(?:[ \t]*)[@+=].+/m,greedy:!0,inside:{atrule:/(?:@[\w-]+|[+=])/}}}),delete e.languages.sass.atrule;var t=/\$[-\w]+|#\{\$[-\w]+\}/,n=[/[+*\/%]|[=!]=|<=?|>=?|\b(?:and|not|or)\b/,{pattern:/(\s)-(?=\s)/,lookbehind:!0}];e.languages.insertBefore("sass","property",{"variable-line":{pattern:/^[ \t]*\$.+/m,greedy:!0,inside:{punctuation:/:/,variable:t,operator:n}},"property-line":{pattern:/^[ \t]*(?:[^:\s]+ *:.*|:[^:\s].*)/m,greedy:!0,inside:{property:[/[^:\s]+(?=\s*:)/,{pattern:/(:)[^:\s]+/,lookbehind:!0}],punctuation:/:/,variable:t,operator:n,important:e.languages.sass.important}}}),delete e.languages.sass.property,delete e.languages.sass.important,e.languages.insertBefore("sass","punctuation",{selector:{pattern:/^([ \t]*)\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*(?:,(?:\r?\n|\r)\1[ \t]+\S(?:,[^,\r\n]+|[^,\r\n]*)(?:,[^,\r\n]+)*)*/m,lookbehind:!0,greedy:!0}})}(fe),fe.languages.scss=fe.languages.extend("css",{comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,lookbehind:!0},atrule:{pattern:/@[\w-](?:\([^()]+\)|[^()\s]|\s+(?!\s))*?(?=\s+[{;])/,inside:{rule:/@[\w-]+/}},url:/(?:[-a-z]+-)?url(?=\()/i,selector:{pattern:/(?=\S)[^@;{}()]?(?:[^@;{}()\s]|\s+(?!\s)|#\{\$[-\w]+\})+(?=\s*\{(?:\}|\s|[^}][^:{}]*[:{][^}]))/,inside:{parent:{pattern:/&/,alias:"important"},placeholder:/%[-\w]+/,variable:/\$[-\w]+|#\{\$[-\w]+\}/}},property:{pattern:/(?:[-\w]|\$[-\w]|#\{\$[-\w]+\})+(?=\s*:)/,inside:{variable:/\$[-\w]+|#\{\$[-\w]+\}/}}}),fe.languages.insertBefore("scss","atrule",{keyword:[/@(?:content|debug|each|else(?: if)?|extend|for|forward|function|if|import|include|mixin|return|use|warn|while)\b/i,{pattern:/( )(?:from|through)(?= )/,lookbehind:!0}]}),fe.languages.insertBefore("scss","important",{variable:/\$[-\w]+|#\{\$[-\w]+\}/}),fe.languages.insertBefore("scss","function",{"module-modifier":{pattern:/\b(?:as|hide|show|with)\b/i,alias:"keyword"},placeholder:{pattern:/%[-\w]+/,alias:"selector"},statement:{pattern:/\B!(?:default|optional)\b/i,alias:"keyword"},boolean:/\b(?:false|true)\b/,null:{pattern:/\bnull\b/,alias:"keyword"},operator:{pattern:/(\s)(?:[-+*\/%]|[=!]=|<=?|>=?|and|not|or)(?=\s)/,lookbehind:!0}}),fe.languages.scss.atrule.inside.rest=fe.languages.scss,fe.languages.sql={comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|(?:--|\/\/|#).*)/,lookbehind:!0},variable:[{pattern:/@(["'`])(?:\\[\s\S]|(?!\1)[^\\])+\1/,greedy:!0},/@[\w.$]+/],string:{pattern:/(^|[^@\\])("|')(?:\\[\s\S]|(?!\2)[^\\]|\2\2)*\2/,greedy:!0,lookbehind:!0},identifier:{pattern:/(^|[^@\\])`(?:\\[\s\S]|[^`\\]|``)*`/,greedy:!0,lookbehind:!0,inside:{punctuation:/^`|`$/}},function:/\b(?:AVG|COUNT|FIRST|FORMAT|LAST|LCASE|LEN|MAX|MID|MIN|MOD|NOW|ROUND|SUM|UCASE)(?=\s*\()/i,keyword:/\b(?:ACTION|ADD|AFTER|ALGORITHM|ALL|ALTER|ANALYZE|ANY|APPLY|AS|ASC|AUTHORIZATION|AUTO_INCREMENT|BACKUP|BDB|BEGIN|BERKELEYDB|BIGINT|BINARY|BIT|BLOB|BOOL|BOOLEAN|BREAK|BROWSE|BTREE|BULK|BY|CALL|CASCADED?|CASE|CHAIN|CHAR(?:ACTER|SET)?|CHECK(?:POINT)?|CLOSE|CLUSTERED|COALESCE|COLLATE|COLUMNS?|COMMENT|COMMIT(?:TED)?|COMPUTE|CONNECT|CONSISTENT|CONSTRAINT|CONTAINS(?:TABLE)?|CONTINUE|CONVERT|CREATE|CROSS|CURRENT(?:_DATE|_TIME|_TIMESTAMP|_USER)?|CURSOR|CYCLE|DATA(?:BASES?)?|DATE(?:TIME)?|DAY|DBCC|DEALLOCATE|DEC|DECIMAL|DECLARE|DEFAULT|DEFINER|DELAYED|DELETE|DELIMITERS?|DENY|DESC|DESCRIBE|DETERMINISTIC|DISABLE|DISCARD|DISK|DISTINCT|DISTINCTROW|DISTRIBUTED|DO|DOUBLE|DROP|DUMMY|DUMP(?:FILE)?|DUPLICATE|ELSE(?:IF)?|ENABLE|ENCLOSED|END|ENGINE|ENUM|ERRLVL|ERRORS|ESCAPED?|EXCEPT|EXEC(?:UTE)?|EXISTS|EXIT|EXPLAIN|EXTENDED|FETCH|FIELDS|FILE|FILLFACTOR|FIRST|FIXED|FLOAT|FOLLOWING|FOR(?: EACH ROW)?|FORCE|FOREIGN|FREETEXT(?:TABLE)?|FROM|FULL|FUNCTION|GEOMETRY(?:COLLECTION)?|GLOBAL|GOTO|GRANT|GROUP|HANDLER|HASH|HAVING|HOLDLOCK|HOUR|IDENTITY(?:COL|_INSERT)?|IF|IGNORE|IMPORT|INDEX|INFILE|INNER|INNODB|INOUT|INSERT|INT|INTEGER|INTERSECT|INTERVAL|INTO|INVOKER|ISOLATION|ITERATE|JOIN|KEYS?|KILL|LANGUAGE|LAST|LEAVE|LEFT|LEVEL|LIMIT|LINENO|LINES|LINESTRING|LOAD|LOCAL|LOCK|LONG(?:BLOB|TEXT)|LOOP|MATCH(?:ED)?|MEDIUM(?:BLOB|INT|TEXT)|MERGE|MIDDLEINT|MINUTE|MODE|MODIFIES|MODIFY|MONTH|MULTI(?:LINESTRING|POINT|POLYGON)|NATIONAL|NATURAL|NCHAR|NEXT|NO|NONCLUSTERED|NULLIF|NUMERIC|OFF?|OFFSETS?|ON|OPEN(?:DATASOURCE|QUERY|ROWSET)?|OPTIMIZE|OPTION(?:ALLY)?|ORDER|OUT(?:ER|FILE)?|OVER|PARTIAL|PARTITION|PERCENT|PIVOT|PLAN|POINT|POLYGON|PRECEDING|PRECISION|PREPARE|PREV|PRIMARY|PRINT|PRIVILEGES|PROC(?:EDURE)?|PUBLIC|PURGE|QUICK|RAISERROR|READS?|REAL|RECONFIGURE|REFERENCES|RELEASE|RENAME|REPEAT(?:ABLE)?|REPLACE|REPLICATION|REQUIRE|RESIGNAL|RESTORE|RESTRICT|RETURN(?:ING|S)?|REVOKE|RIGHT|ROLLBACK|ROUTINE|ROW(?:COUNT|GUIDCOL|S)?|RTREE|RULE|SAVE(?:POINT)?|SCHEMA|SECOND|SELECT|SERIAL(?:IZABLE)?|SESSION(?:_USER)?|SET(?:USER)?|SHARE|SHOW|SHUTDOWN|SIMPLE|SMALLINT|SNAPSHOT|SOME|SONAME|SQL|START(?:ING)?|STATISTICS|STATUS|STRIPED|SYSTEM_USER|TABLES?|TABLESPACE|TEMP(?:ORARY|TABLE)?|TERMINATED|TEXT(?:SIZE)?|THEN|TIME(?:STAMP)?|TINY(?:BLOB|INT|TEXT)|TOP?|TRAN(?:SACTIONS?)?|TRIGGER|TRUNCATE|TSEQUAL|TYPES?|UNBOUNDED|UNCOMMITTED|UNDEFINED|UNION|UNIQUE|UNLOCK|UNPIVOT|UNSIGNED|UPDATE(?:TEXT)?|USAGE|USE|USER|USING|VALUES?|VAR(?:BINARY|CHAR|CHARACTER|YING)|VIEW|WAITFOR|WARNINGS|WHEN|WHERE|WHILE|WITH(?: ROLLUP|IN)?|WORK|WRITE(?:TEXT)?|YEAR)\b/i,boolean:/\b(?:FALSE|NULL|TRUE)\b/i,number:/\b0x[\da-f]+\b|\b\d+(?:\.\d*)?|\B\.\d+\b/i,operator:/[-+*\/=%^~]|&&?|\|\|?|!=?|<(?:=>?|<|>)?|>[>=]?|\b(?:AND|BETWEEN|DIV|ILIKE|IN|IS|LIKE|NOT|OR|REGEXP|RLIKE|SOUNDS LIKE|XOR)\b/i,punctuation:/[;[\]()`,.]/},function(e){var t={pattern:/(\b\d+)(?:%|[a-z]+)/,lookbehind:!0},n={pattern:/(^|[^\w.-])-?(?:\d+(?:\.\d+)?|\.\d+)/,lookbehind:!0},r={comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,lookbehind:!0},url:{pattern:/\burl\((["']?).*?\1\)/i,greedy:!0},string:{pattern:/("|')(?:(?!\1)[^\\\r\n]|\\(?:\r\n|[\s\S]))*\1/,greedy:!0},interpolation:null,func:null,important:/\B!(?:important|optional)\b/i,keyword:{pattern:/(^|\s+)(?:(?:else|for|if|return|unless)(?=\s|$)|@[\w-]+)/,lookbehind:!0},hexcode:/#[\da-f]{3,6}/i,color:[/\b(?:AliceBlue|AntiqueWhite|Aqua|Aquamarine|Azure|Beige|Bisque|Black|BlanchedAlmond|Blue|BlueViolet|Brown|BurlyWood|CadetBlue|Chartreuse|Chocolate|Coral|CornflowerBlue|Cornsilk|Crimson|Cyan|DarkBlue|DarkCyan|DarkGoldenRod|DarkGr[ae]y|DarkGreen|DarkKhaki|DarkMagenta|DarkOliveGreen|DarkOrange|DarkOrchid|DarkRed|DarkSalmon|DarkSeaGreen|DarkSlateBlue|DarkSlateGr[ae]y|DarkTurquoise|DarkViolet|DeepPink|DeepSkyBlue|DimGr[ae]y|DodgerBlue|FireBrick|FloralWhite|ForestGreen|Fuchsia|Gainsboro|GhostWhite|Gold|GoldenRod|Gr[ae]y|Green|GreenYellow|HoneyDew|HotPink|IndianRed|Indigo|Ivory|Khaki|Lavender|LavenderBlush|LawnGreen|LemonChiffon|LightBlue|LightCoral|LightCyan|LightGoldenRodYellow|LightGr[ae]y|LightGreen|LightPink|LightSalmon|LightSeaGreen|LightSkyBlue|LightSlateGr[ae]y|LightSteelBlue|LightYellow|Lime|LimeGreen|Linen|Magenta|Maroon|MediumAquaMarine|MediumBlue|MediumOrchid|MediumPurple|MediumSeaGreen|MediumSlateBlue|MediumSpringGreen|MediumTurquoise|MediumVioletRed|MidnightBlue|MintCream|MistyRose|Moccasin|NavajoWhite|Navy|OldLace|Olive|OliveDrab|Orange|OrangeRed|Orchid|PaleGoldenRod|PaleGreen|PaleTurquoise|PaleVioletRed|PapayaWhip|PeachPuff|Peru|Pink|Plum|PowderBlue|Purple|Red|RosyBrown|RoyalBlue|SaddleBrown|Salmon|SandyBrown|SeaGreen|SeaShell|Sienna|Silver|SkyBlue|SlateBlue|SlateGr[ae]y|Snow|SpringGreen|SteelBlue|Tan|Teal|Thistle|Tomato|Transparent|Turquoise|Violet|Wheat|White|WhiteSmoke|Yellow|YellowGreen)\b/i,{pattern:/\b(?:hsl|rgb)\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*\)\B|\b(?:hsl|rgb)a\(\s*\d{1,3}\s*,\s*\d{1,3}%?\s*,\s*\d{1,3}%?\s*,\s*(?:0|0?\.\d+|1)\s*\)\B/i,inside:{unit:t,number:n,function:/[\w-]+(?=\()/,punctuation:/[(),]/}}],entity:/\\[\da-f]{1,8}/i,unit:t,boolean:/\b(?:false|true)\b/,operator:[/~|[+!\/%<>?=]=?|[-:]=|\*[*=]?|\.{2,3}|&&|\|\||\B-\B|\b(?:and|in|is(?: a| defined| not|nt)?|not|or)\b/],number:n,punctuation:/[{}()\[\];:,]/};r.interpolation={pattern:/\{[^\r\n}:]+\}/,alias:"variable",inside:{delimiter:{pattern:/^\{|\}$/,alias:"punctuation"},rest:r}},r.func={pattern:/[\w-]+\([^)]*\).*/,inside:{function:/^[^(]+/,rest:r}},e.languages.stylus={"atrule-declaration":{pattern:/(^[ \t]*)@.+/m,lookbehind:!0,inside:{atrule:/^@[\w-]+/,rest:r}},"variable-declaration":{pattern:/(^[ \t]*)[\w$-]+\s*.?=[ \t]*(?:\{[^{}]*\}|\S.*|$)/m,lookbehind:!0,inside:{variable:/^\S+/,rest:r}},statement:{pattern:/(^[ \t]*)(?:else|for|if|return|unless)[ \t].+/m,lookbehind:!0,inside:{keyword:/^\S+/,rest:r}},"property-declaration":{pattern:/((?:^|\{)([ \t]*))(?:[\w-]|\{[^}\r\n]+\})+(?:\s*:\s*|[ \t]+)(?!\s)[^{\r\n]*(?:;|[^{\r\n,]$(?!(?:\r?\n|\r)(?:\{|\2[ \t])))/m,lookbehind:!0,inside:{property:{pattern:/^[^\s:]+/,inside:{interpolation:r.interpolation}},rest:r}},selector:{pattern:/(^[ \t]*)(?:(?=\S)(?:[^{}\r\n:()]|::?[\w-]+(?:\([^)\r\n]*\)|(?![\w-]))|\{[^}\r\n]+\})+)(?:(?:\r?\n|\r)(?:\1(?:(?=\S)(?:[^{}\r\n:()]|::?[\w-]+(?:\([^)\r\n]*\)|(?![\w-]))|\{[^}\r\n]+\})+)))*(?:,$|\{|(?=(?:\r?\n|\r)(?:\{|\1[ \t])))/m,lookbehind:!0,inside:{interpolation:r.interpolation,comment:r.comment,punctuation:/[{},]/}},func:r.func,string:r.string,comment:{pattern:/(^|[^\\])(?:\/\*[\s\S]*?\*\/|\/\/.*)/,lookbehind:!0,greedy:!0},interpolation:r.interpolation,punctuation:/[{}()\[\];:.]/}}(fe),function(e){e.languages.typescript=e.languages.extend("javascript",{"class-name":{pattern:/(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,lookbehind:!0,greedy:!0,inside:null},builtin:/\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\b/}),e.languages.typescript.keyword.push(/\b(?:abstract|declare|is|keyof|readonly|require)\b/,/\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,/\btype\b(?=\s*(?:[\{*]|$))/),delete e.languages.typescript.parameter,delete e.languages.typescript["literal-property"];var t=e.languages.extend("typescript",{});delete t["class-name"],e.languages.typescript["class-name"].inside=t,e.languages.insertBefore("typescript","function",{decorator:{pattern:/@[$\w\xA0-\uFFFF]+/,inside:{at:{pattern:/^@/,alias:"operator"},function:/^[\s\S]+/}},"generic-function":{pattern:/#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,greedy:!0,inside:{function:/^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,generic:{pattern:/<[\s\S]+/,alias:"class-name",inside:t}}}}),e.languages.ts=e.languages.typescript}(fe),function(e){var t=e.util.clone(e.languages.typescript);e.languages.tsx=e.languages.extend("jsx",t),delete e.languages.tsx.parameter,delete e.languages.tsx["literal-property"];var n=e.languages.tsx.tag;n.pattern=RegExp(/(^|[^\w$]|(?=<\/))/.source+"(?:"+n.pattern.source+")",n.pattern.flags),n.lookbehind=!0}(fe),fe.languages.wasm={comment:[/\(;[\s\S]*?;\)/,{pattern:/;;.*/,greedy:!0}],string:{pattern:/"(?:\\[\s\S]|[^"\\])*"/,greedy:!0},keyword:[{pattern:/\b(?:align|offset)=/,inside:{operator:/=/}},{pattern:/\b(?:(?:f32|f64|i32|i64)(?:\.(?:abs|add|and|ceil|clz|const|convert_[su]\/i(?:32|64)|copysign|ctz|demote\/f64|div(?:_[su])?|eqz?|extend_[su]\/i32|floor|ge(?:_[su])?|gt(?:_[su])?|le(?:_[su])?|load(?:(?:8|16|32)_[su])?|lt(?:_[su])?|max|min|mul|neg?|nearest|or|popcnt|promote\/f32|reinterpret\/[fi](?:32|64)|rem_[su]|rot[lr]|shl|shr_[su]|sqrt|store(?:8|16|32)?|sub|trunc(?:_[su]\/f(?:32|64))?|wrap\/i64|xor))?|memory\.(?:grow|size))\b/,inside:{punctuation:/\./}},/\b(?:anyfunc|block|br(?:_if|_table)?|call(?:_indirect)?|data|drop|elem|else|end|export|func|get_(?:global|local)|global|if|import|local|loop|memory|module|mut|nop|offset|param|result|return|select|set_(?:global|local)|start|table|tee_local|then|type|unreachable)\b/],variable:/\$[\w!#$%&'*+\-./:<=>?@\\^`|~]+/,number:/[+-]?\b(?:\d(?:_?\d)*(?:\.\d(?:_?\d)*)?(?:[eE][+-]?\d(?:_?\d)*)?|0x[\da-fA-F](?:_?[\da-fA-F])*(?:\.[\da-fA-F](?:_?[\da-fA-D])*)?(?:[pP][+-]?\d(?:_?\d)*)?)\b|\binf\b|\bnan(?::0x[\da-fA-F](?:_?[\da-fA-D])*)?\b/,punctuation:/[()]/},function(e){var t=/[*&][^\s[\]{},]+/,n=/!(?:<[\w\-%#;/?:@&=+$,.!~*'()[\]]+>|(?:[a-zA-Z\d-]*!)?[\w\-%#;/?:@&=+$.~*'()]+)?/,r="(?:"+n.source+"(?:[ \t]+"+t.source+")?|"+t.source+"(?:[ \t]+"+n.source+")?)",a=/(?:[^\s\x00-\x08\x0e-\x1f!"#%&'*,\-:>?@[\]`{|}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]|[?:-]<PLAIN>)(?:[ \t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(/<PLAIN>/g,(function(){return/[^\s\x00-\x08\x0e-\x1f,[\]{}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]/.source})),o=/"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'/.source;function i(e,t){t=(t||"").replace(/m/g,"")+"m";var n=/([:\-,[{]\s*(?:\s<<prop>>[ \t]+)?)(?:<<value>>)(?=[ \t]*(?:$|,|\]|\}|(?:[\r\n]\s*)?#))/.source.replace(/<<prop>>/g,(function(){return r})).replace(/<<value>>/g,(function(){return e}));return RegExp(n,t)}e.languages.yaml={scalar:{pattern:RegExp(/([\-:]\s*(?:\s<<prop>>[ \t]+)?[|>])[ \t]*(?:((?:\r?\n|\r)[ \t]+)\S[^\r\n]*(?:\2[^\r\n]+)*)/.source.replace(/<<prop>>/g,(function(){return r}))),lookbehind:!0,alias:"string"},comment:/#.*/,key:{pattern:RegExp(/((?:^|[:\-,[{\r\n?])[ \t]*(?:<<prop>>[ \t]+)?)<<key>>(?=\s*:\s)/.source.replace(/<<prop>>/g,(function(){return r})).replace(/<<key>>/g,(function(){return"(?:"+a+"|"+o+")"}))),lookbehind:!0,greedy:!0,alias:"atrule"},directive:{pattern:/(^[ \t]*)%.+/m,lookbehind:!0,alias:"important"},datetime:{pattern:i(/\d{4}-\d\d?-\d\d?(?:[tT]|[ \t]+)\d\d?:\d{2}:\d{2}(?:\.\d*)?(?:[ \t]*(?:Z|[-+]\d\d?(?::\d{2})?))?|\d{4}-\d{2}-\d{2}|\d\d?:\d{2}(?::\d{2}(?:\.\d*)?)?/.source),lookbehind:!0,alias:"number"},boolean:{pattern:i(/false|true/.source,"i"),lookbehind:!0,alias:"important"},null:{pattern:i(/null|~/.source,"i"),lookbehind:!0,alias:"important"},string:{pattern:i(o),lookbehind:!0,greedy:!0},number:{pattern:i(/[+-]?(?:0x[\da-f]+|0o[0-7]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|\.inf|\.nan)/.source,"i"),lookbehind:!0},tag:n,important:t,punctuation:/---|[:[\]{}\-,|>?]|\.\.\./},e.languages.yml=e.languages.yaml}(fe);var pe={Prism:fe,theme:{plain:{backgroundColor:"#2a2734",color:"#9a86fd"},styles:[{types:["comment","prolog","doctype","cdata","punctuation"],style:{color:"#6c6783"}},{types:["namespace"],style:{opacity:.7}},{types:["tag","operator","number"],style:{color:"#e09142"}},{types:["property","function"],style:{color:"#9a86fd"}},{types:["tag-id","selector","atrule-id"],style:{color:"#eeebff"}},{types:["attr-name"],style:{color:"#c4b9fe"}},{types:["boolean","string","entity","url","attr-value","keyword","control","directive","unit","statement","regex","at-rule","placeholder","variable"],style:{color:"#ffcc99"}},{types:["deleted"],style:{textDecorationLine:"line-through"}},{types:["inserted"],style:{textDecorationLine:"underline"}},{types:["italic"],style:{fontStyle:"italic"}},{types:["important","bold"],style:{fontWeight:"bold"}},{types:["important"],style:{color:"#c4b9fe"}}]}};function me(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function he(){return he=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},he.apply(this,arguments)}var ge=/\r\n|\r|\n/,ve=function(e){0===e.length?e.push({types:["plain"],content:"\n",empty:!0}):1===e.length&&""===e[0].content&&(e[0].content="\n",e[0].empty=!0)},ye=function(e,t){var n=e.length;return n>0&&e[n-1]===t?e:e.concat(t)},be=function(e,t){var n=e.plain,r=Object.create(null),a=e.styles.reduce((function(e,n){var r=n.languages,a=n.style;return r&&!r.includes(t)||n.types.forEach((function(t){var n=he({},e[t],a);e[t]=n})),e}),r);return a.root=n,a.plain=he({},n,{backgroundColor:null}),a};function Ee(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&-1===t.indexOf(r)&&(n[r]=e[r]);return n}var xe=function(e){function t(){for(var t=this,n=[],r=arguments.length;r--;)n[r]=arguments[r];e.apply(this,n),me(this,"getThemeDict",(function(e){if(void 0!==t.themeDict&&e.theme===t.prevTheme&&e.language===t.prevLanguage)return t.themeDict;t.prevTheme=e.theme,t.prevLanguage=e.language;var n=e.theme?be(e.theme,e.language):void 0;return t.themeDict=n})),me(this,"getLineProps",(function(e){var n=e.key,r=e.className,a=e.style,o=he({},Ee(e,["key","className","style","line"]),{className:"token-line",style:void 0,key:void 0}),i=t.getThemeDict(t.props);return void 0!==i&&(o.style=i.plain),void 0!==a&&(o.style=void 0!==o.style?he({},o.style,a):a),void 0!==n&&(o.key=n),r&&(o.className+=" "+r),o})),me(this,"getStyleForToken",(function(e){var n=e.types,r=e.empty,a=n.length,o=t.getThemeDict(t.props);if(void 0!==o){if(1===a&&"plain"===n[0])return r?{display:"inline-block"}:void 0;if(1===a&&!r)return o[n[0]];var i=r?{display:"inline-block"}:{},l=n.map((function(e){return o[e]}));return Object.assign.apply(Object,[i].concat(l))}})),me(this,"getTokenProps",(function(e){var n=e.key,r=e.className,a=e.style,o=e.token,i=he({},Ee(e,["key","className","style","token"]),{className:"token "+o.types.join(" "),children:o.content,style:t.getStyleForToken(o),key:void 0});return void 0!==a&&(i.style=void 0!==i.style?he({},i.style,a):a),void 0!==n&&(i.key=n),r&&(i.className+=" "+r),i})),me(this,"tokenize",(function(e,t,n,r){var a={code:t,grammar:n,language:r,tokens:[]};e.hooks.run("before-tokenize",a);var o=a.tokens=e.tokenize(a.code,a.grammar,a.language);return e.hooks.run("after-tokenize",a),o}))}return e&&(t.__proto__=e),t.prototype=Object.create(e&&e.prototype),t.prototype.constructor=t,t.prototype.render=function(){var e=this.props,t=e.Prism,n=e.language,r=e.code,a=e.children,o=this.getThemeDict(this.props),i=t.languages[n],l=function(e){for(var t=[[]],n=[e],r=[0],a=[e.length],o=0,i=0,l=[],u=[l];i>-1;){for(;(o=r[i]++)<a[i];){var s=void 0,c=t[i],d=n[i][o];if("string"==typeof d?(c=i>0?c:["plain"],s=d):(c=ye(c,d.type),d.alias&&(c=ye(c,d.alias)),s=d.content),"string"==typeof s){var f=s.split(ge),p=f.length;l.push({types:c,content:f[0]});for(var m=1;m<p;m++)ve(l),u.push(l=[]),l.push({types:c,content:f[m]})}else i++,t.push(c),n.push(s),r.push(0),a.push(s.length)}i--,t.pop(),n.pop(),r.pop(),a.pop()}return ve(l),u}(void 0!==i?this.tokenize(t,r,i,n):[r]);return a({tokens:l,className:"prism-code language-"+n,style:void 0!==o?o.root:{},getLineProps:this.getLineProps,getTokenProps:this.getTokenProps})},t}(e.Component);const we=xe,ke=function(t){var n=e.createElement(we,Z({},pe,{code:t.code,language:"jsx"}),(function(t){var n=t.className,r=t.style,a=t.tokens,o=t.getLineProps,i=t.getTokenProps;return e.createElement("pre",{className:n,style:r},a.map((function(t,n){return e.createElement("div",Z({},o({line:t,key:n})),t.map((function(t,n){return e.createElement("span",Z({},i({token:t,key:n})))})))})))}));return e.createElement("div",null,e.createElement("div",{className:"example"},t.children),e.createElement("div",null,n))};var Se=function(){return e.createElement(e.Fragment,null,e.createElement(ke,{code:n(3942).Z}))};n(9807);var _e=ne("gu-layout");const Ce=function(t){var n=t.className,r=X(t,["className"]);return e.createElement("div",Z({className:_e("aside",{extra:n})},r),t.children)};var Ne=ne("gu-layout");const Te=function(t){var n=t.className,r=X(t,["className"]);return e.createElement("div",Z({className:Ne("header",{extra:n})},r),t.children)};var Ae=ne("gu-layout");const Oe=function(t){var n=t.className,r=X(t,["className"]);return e.createElement("div",Z({className:Ae("content",{extra:n})},r),t.children)};var Re=ne("gu-layout");const Le=function(t){var n=t.className,r=X(t,["className"]);return e.createElement("div",Z({className:Re("footer",{extra:n})},r),t.children)};var Pe=ne("gu-layout"),Ie=function(t){var n=t.className,r=X(t,["className"]),a=t.children,o="length"in a&&a.reduce((function(e,t){return e||t.type===Ce}),!1);return e.createElement("div",Z({className:Pe({"":!0,hasAside:o},{extra:n})},r),t.children)};const Fe=Ie;n(944),n(1711);const De=function(){return e.createElement("div",null,e.createElement(re,{name:"qq"}),e.createElement(re,{name:"baidu"}),e.createElement(re,{name:"wechal"}))},Me=function(){return e.createElement("div",null,"example 2")};n(7512);n(1117),n(9959);const ze=function(t){var n=t.className,r=X(t,["className"]);return e.createElement("input",Z({className:te("fui-input",n)},r))};n(4204);var Be=function(t){var n=t.value,r=function(e){return t.transformError&&t.transformError(e)||{required:"必填",minLength:"太短",maxLength:"太长"}[e]||"未知错误"};return e.createElement("form",{onSubmit:function(e){e.preventDefault(),t.onSubmit(e)}},e.createElement("table",{className:"fui-form-table"},e.createElement("tbody",null,t.fields.map((function(a){return e.createElement("tr",{className:te("fui-form-tr"),key:a.name},e.createElement("td",{className:"fui-form-td"},e.createElement("span",{className:"fui-form-label"},a.label)),e.createElement("td",{className:"fui-form-td"},e.createElement(ze,{className:"fui-form-input",type:a.input.type,value:n[a.name]||"",onChange:function(e){return r=a.name,o=e.target.value,l=Z(Z({},n),((i={})[r]=o,i)),void t.onChange(l);var r,o,i,l}}),e.createElement("div",{className:"fui-form-error"},t.errors[a.name]?"first"===t.errorsDisplayMode?r(t.errors[a.name][0]):t.errors[a.name].map(r).join():e.createElement("span",null," ")," ")))})),e.createElement("tr",{className:"fui-form-tr"},e.createElement("td",{className:"fui-form-td"}),e.createElement("td",{className:"fui-form-td"},t.buttons)))))};Be.defaultProps={errorsDisplayMode:"first"};const je=Be;function $e(e){return null==e||""===e}var Ue=["frank","jack","frankfrank","alice","bob"];const Ge=function(){var t=J((0,e.useState)({username:"",password:""}),2),n=t[0],r=t[1],a=J((0,e.useState)([{name:"username",label:"头像",input:{type:"text"}},{name:"password",label:"密码",input:{type:"password"}}]),1)[0],o=J((0,e.useState)({}),2),i=o[0],l=o[1],u=function(e){return new Promise((function(t,n){!function(e,t,r){setTimeout((function(){console.log("我现在知道用户名是否存在"),Ue.indexOf(e)>=0?n("unique"):t()}),2e3)}(e,t)}))};return e.createElement("div",null,e.createElement(je,{value:n,fields:a,buttons:e.createElement(e.Fragment,null,e.createElement(oe,{type:"submit",level:"important"},"提交"),e.createElement(oe,null,"返回")),errors:i,transformError:function(e){return{unique:"username is taken",required:"required",minLength:"too short",maxLength:"too long"}[e]},onChange:function(e){return r(e)},onSubmit:function(e){!function(e,t,n){var r={},a=function(e,t){void 0===r[e]&&(r[e]=[]),r[e].push(t)};function o(e){return"string"==typeof e[1]}t.map((function(t){var n=e[t.key];if(t.validator){var r=t.validator(n);a(t.key,r)}t.required&&$e(n)&&a(t.key,"required"),t.minLength&&!$e(n)&&n.length<t.minLength&&a(t.key,"minLength"),t.maxLength&&!$e(n)&&n.length>t.maxLength&&a(t.key,"maxLength"),t.pattern&&(t.pattern.test(n)||a(t.key,"pattern"))}));var i=function(e){for(var t=[],n=0;n<e.length;n++)e[n]instanceof Array?t.push.apply(t,ee([],J(e[n]),!1)):t.push(e[n]);return t}(Object.keys(r).map((function(e){return r[e].map((function(t){return[e,t]}))}))).map((function(e){var t=J(e,2),n=t[0],r=t[1];return(r instanceof Promise?r:Promise.reject(r)).then((function(){return[n,void 0]}),(function(e){return[n,e]}))}));Promise.all(i).then((function(e){var t,r;n((t=e.filter(o),r={},t.map((function(e){var t=J(e,2),n=t[0],a=t[1];r[n]=r[n]||[],r[n].push(a)})),r))}))}(n,[{key:"username",required:!0},{key:"username",minLength:8,maxLength:16},{key:"username",validator:u},{key:"username",validator:u},{key:"username",pattern:/^[A-Za-z0-9]+$/},{key:"password",required:!0},{key:"password",validator:u},{key:"password",validator:u}],(function(e){console.log(e),l(e),function(e){Object.keys(e).length}(e)}))}}))},He=function(){return e.createElement(e.Fragment,null,e.createElement(ke,{code:n(8215).Z}))};n(949);const qe=function(){var t=J((0,e.useState)("你好"),2),n=t[0],r=t[1];return e.createElement("div",null,e.createElement(ze,{value:n,onChange:function(e){r(e.target.value)}}),e.createElement("div",null,n))};var Ve=function(){return e.createElement(e.Fragment,null,e.createElement(ke,{code:n(2251).Z}))};var We,Ye=(We=function(t){return e.createElement("div",null,t.name,"-----",t.stage)},function(t){return e.createElement(We,Z({},t,{name:"高阶组件"}))});n(6860);var Ke=ne("ands-tree");const Qe=function(t){var n,r=function(t,n,a,o){var i,l;void 0===o&&(o=1);var u=((i={})["level-"+o]=!0,i.item=!0,i);return e.createElement("div",{key:t.value,className:Ke(u)},e.createElement("div",null,e.createElement("label",{htmlFor:"",className:Ke("text")},e.createElement("input",{type:"checkbox",onChange:function(e){return a(t,e.target.checked)},checked:n.indexOf(t.value)>=0})),t.text),null===(l=t.children)||void 0===l?void 0:l.map((function(e){return r(e,n,a,o+1)})))};return t.multiple?e.createElement("div",null,null===(n=t.sourceData)||void 0===n?void 0:n.map((function(e,n){return r(e,t.selected,t.onChange)}))):e.createElement("div",null,"未完成")};n(4430);const Ze=function(){var e=document.createElement("div");e.style.position="absolute",e.style.top=e.style.left="-999px",e.style.width=e.style.height="100px",e.style.overflow="scroll",document.body.appendChild(e);var t=e.offsetWidth-e.clientWidth;return document.body.removeChild(e),t},Xe=function(t){var n=t.children,r=X(t,["children"]),a=J((0,e.useState)(0),2),o=a[0],i=a[1],l=J((0,e.useState)(0),2),u=l[0],s=l[1],c=J((0,e.useState)(0),2),d=c[0],f=c[1],p=(0,e.useRef)(0),m=(0,e.useRef)(0),h=(0,e.useRef)(!1),g=(0,e.useRef)(0),v=function(e){if(!(e<0)){var t=y.current,n=t.scrollHeight,r=t.getBoundingClientRect().height;e>(n-r)*r/n||s(e)}},y=(0,e.useRef)(null);(0,e.useEffect)((function(){var e=y.current.scrollHeight,t=y.current.getBoundingClientRect().height;i(t*t/e)}),[]);var b=function(e){h.current&&e.preventDefault()};(0,e.useEffect)((function(){return document.addEventListener("mousemove",x),document.addEventListener("mouseup",E),document.addEventListener("selectstart",b),function(){document.removeEventListener("mousemove",x),document.removeEventListener("mouseup",E),document.removeEventListener("selectstart",b)}}),[]);var E=function(){h.current=!1},x=function(e){if(h.current){var t=e.clientY-p.current,n=m.current+t;v(n);var r=y.current.scrollHeight,a=y.current.getBoundingClientRect().height;y.current.scrollTop=n*r/a}};return e.createElement("div",Z({className:"fui-scroll"},r),e.createElement("div",{className:"fui-scroll-inner",style:{right:-Ze()},ref:y,onTouchMove:function(e){var t=e.touches[0].clientY-g.current;t>0&&f(d+t),g.current=e.touches[0].clientY},onTouchStart:function(e){g.current=e.touches[0].clientY},onScroll:function(e){var t=y.current,n=t.scrollHeight,r=t.getBoundingClientRect().height,a=t.scrollTop;v(a*r/n)},onTouchEnd:function(){f(0)}}," ",n),e.createElement("div",{className:"fui-scroll-track"},e.createElement("div",{className:"fui-scroll-bar",style:{height:o,top:u},onMouseDown:function(e){h.current=!0,p.current=e.clientY,m.current=u}})))};n(2826);const Je=function(t){return e.createElement("div",{className:"choice-body"},t.choicedata.map((function(n,r){return t.bool?function(n,r){return e.createElement("div",{key:r,className:-1!==t.visible.indexOf(n)?"choice active":"choice ",onClick:function(){return t.onClicksw(function(e){var n=ee([],J(t.visible),!1);if(-1==n.indexOf(e)){if(t.visible.length>2)return[];n.push(e)}else n.splice(n.indexOf(e),1);return n}(n))}},n)}(n,r):function(n,r){return e.createElement("div",{key:r,className:n===t.visible[0]?"choice active":"choice",onClick:function(){return t.onClicksw(function(e){return t.visible[0]===e?[]:[e]}(n))}},n)}(n,r)})))};n(92);const et=function(){var t=(0,e.useRef)(),n=(0,e.useRef)(null),r=J((0,e.useState)([{id:1,title:"床前明月光",username:"0000ff",point:10},{id:2,title:"疑是地上霜",username:"cc00cc",point:20},{id:3,title:"举头望明月",username:"9900ff",point:30},{id:4,title:"低头思故乡",username:"ff0033",point:40},{id:5,title:"李白",username:"ff00cc",point:40}]),2),a=r[0],o=r[1],i=(0,e.useMemo)((function(){return a.slice().sort((function(e,t){return e.id-t.id}))}),[a]),l=(0,e.useMemo)((function(){var e=a.length;return 30*Math.ceil(e/1)}),[a]),u=(0,e.useCallback)((function(e,r){var i,l,u,s,c,d=null===(i=n.current)||void 0===i?void 0:i.getBoundingClientRect();if(d){var f=e-d.left,p=r-d.top,m=t.current;if(!m||f<0||f>d.width||p<0||p>d.height)return;var h=Math.floor(f/110),g=1*Math.floor(p/30)+h;a.indexOf(m)<g&&g++;var v=a[g],y=function(e,t,n){var r=ee([],J(e),!1),a=r.indexOf(t);if(t===n)return r;r.splice(a,1);var o=n?r.indexOf(n):-1;return n&&o>=0?r.splice(o,0,t):r.push(t),r}(a,m,v);if(l=a,u=y.map((function(e){return e.id})),s=l.map((function(e){return e.id})),c=!0,u.forEach((function(e,t){e!==s[t]&&(c=!1)})),c)return;o(y)}}),[a]),s=(0,e.useCallback)((function(e){e.preventDefault(),u(e.clientX,e.clientY)}),[u]),c=(0,e.useCallback)((function(){var e,r=t.current;if(r){var a=null===(e=n.current)||void 0===e?void 0:e.querySelector('[data-id="'.concat(r.id,'"]'));a&&a.classList.remove("draggingItem"),t.current=void 0}}),[]);return e.createElement("div",{className:"dragpull",ref:n,style:{width:110},onDragEnd:c,onDragOver:s},e.createElement("ul",{className:"list",style:{height:l}},i.map((function(r){var o=a.findIndex((function(e){return e===r})),i=Math.floor(o/1),l=o%1;return e.createElement("li",{className:"item",key:r.id,draggable:!0,style:{height:30,left:110*l,top:30*i,padding:"0 ".concat(0,"px")},"data-id":r.id,onDragStart:function(e){return function(e,r){var a;t.current=r;var o=null===(a=n.current)||void 0===a?void 0:a.querySelector('[data-id="'.concat(r.id,'"]'));o&&o.classList.add("draggingItem")}(0,r)}},r.title)}))))},tt=function(){var t=J((0,e.useState)([{id:1,title:"运交华盖欲何求，未敢翻身已碰头。",username:"家玮",point:10},{id:2,title:"破帽遮颜过闹市，漏船载酒泛中流。",username:"家玮",point:20},{id:2,title:"横眉冷对千夫指，俯首甘为孺子牛。",username:"家玮",point:20},{id:2,title:"躲进小楼成一统，管他冬夏与春秋。",username:"家玮",point:20}]),2),n=t[0],r=(t[1],J((0,e.useState)([{id:1,title:"其实地上本没有路，走的人多了，也便成了路。",username:"家玮",point:60},{id:2,title:"我家门前有两棵树，一棵是枣树，另一棵也是枣树。",username:"家玮",point:80}]),2)),a=r[0],o=(r[1],(0,e.useCallback)((function(e,t){}),[n])),i=(0,e.useCallback)((function(e){}),[o]);return e.createElement("div",null,e.createElement("ul",{className:"luxun-list",onDrop:function(e){e.preventDefault(),console.log(e,"拖动过程中，释放鼠标触发事件")},onDragOver:i},e.createElement("div",{className:"dragpull-title"},"鲁迅"),n.map((function(t,n){return e.createElement("li",{draggable:"true",id:"".concat(t.id),className:"dragpull-li",onDragStart:function(e){},key:n},t.title)}))),e.createElement("ul",{className:"luxun-list",onDragEnter:function(){}},e.createElement("div",{className:"dragpull-title"},"周树人"),a.map((function(t,n){return e.createElement("li",{className:"dragpull-title",draggable:"true",key:n},t.title)}))))};n(8643);const nt=function(t){var n=J((0,e.useState)(!1),2),r=n[0],a=n[1];return e.createElement("div",null,e.createElement("div",{onClick:function(){a(!0)}},t.children),r&&e.createElement(rt,{onClose:function(){a(!1)}}))};var rt=function(n){return t.createPortal(e.createElement("div",{className:"fui-citySelect-dialog",onClick:n.onClose},e.createElement("header",null,e.createElement("span",{className:"icon"},"<"),e.createElement("span",null,"选择城市")),e.createElement(at,null),e.createElement("h2",null,"全部城市"),e.createElement("div",{className:"cityIndex"},"Abcd"),e.createElement("div",{className:"cityList"},"所有城市")),document.body)},at=function(){var t=J((0,e.useState)("加载中..."),2),n=t[0],r=t[1];return(0,e.useEffect)((function(){var e=new XMLHttpRequest;e.open("get","http://ip-api.com/json/?lang=zh-CN"),e.onload=function(){var t=e.responseText,n=JSON.parse(t).city;r(n)},e.onerror=function(){r("未知")},e.send()}),[]),e.createElement("div",{className:"currentCity"},"当前城市:",n)};const ot=function(t){var n=J((0,e.useState)(!1),2),r=n[0],a=n[1],o=J((0,e.useState)(["第一","第二","dishan"]),2),i=o[0],l=(o[1],(0,e.useRef)(null)),u=(0,e.useRef)(null);return function(t,n){var a=J((0,e.useState)(0),2),o=a[0],i=a[1];(0,e.useEffect)((function(){i((function(e){return e+1}))}),[t]),(0,e.useEffect)((function(){o>1&&function(){if(r){if(console.log("打开"),!l.current||!u.current)return;u.current.style.backgroundColor="rgba(216, 216, 216, 0)",l.current.style.height="auto",u.current.getBoundingClientRect();var e=l.current.getBoundingClientRect().height;l.current.style.height="0px",l.current.getBoundingClientRect(),l.current.style.height=e+"px",u.current.style.backgroundColor="rgba(216, 216, 216, .5)"}else{if(console.log("关闭"),!l.current||!u.current)return;e=l.current.getBoundingClientRect().height,l.current.style.height=e+"px",l.current.getBoundingClientRect(),l.current.style.height="0px",u.current.style.backgroundColor="rgba(216, 216, 216, .5)",u.current.getBoundingClientRect(),u.current.style.backgroundColor="rgba(216, 216, 216, 0)"}}()}),[o])}(r),e.createElement("div",{className:"Action"},e.createElement("h2",null,"第一个例子"),e.createElement("div",{className:"actionsheet",onClick:function(){return a(!0)}},e.createElement("div",null,"基础用发"),e.createElement("div",null,"》")),e.createElement("div",{ref:u,className:r?"actionsheet-dialog":"none",onClick:function(){return a(!1)}},e.createElement("div",{className:"dialog-z",ref:l},e.createElement("div",{className:"dialog-head"},i.map((function(t){return e.createElement("div",{className:"dialog",key:t,onClick:function(){!function(e){console.log(e)}(t)}}," ",t)}))),e.createElement("div",{className:"dialog-qux",onClick:function(){return a(!1)}},"取消"))))};n(4046);n(5165);var it=function(t){console.log(t);var n=J((0,e.useState)(0),2),r=n[0],a=n[1];return e.createElement("div",null,e.createElement("div",{className:"tabs"},e.Children.map(t.children,(function(t,n){return e.createElement("div",{onClick:function(){a(n)},className:r===n?"select boxsw":" select "},null==t?void 0:t.props.title)}))),e.createElement("div",{className:"tabs-content"},e.Children.map(t.children,(function(t,n){return e.createElement("div",{onClick:function(){a(n)},className:r===n?"tabs-content-select":"none"},t)}))))};it.TabPane=function(t){return console.log(t),e.createElement("div",null,t)};const lt=it;n(8710);const ut=function(){return e.createElement("div",{className:"tables"},e.createElement("div",null))};var st={user:"",books:"",movies:""},ct=function(e,t){switch(t.type){case"setUser":return Z(Z({},e),{user:t.user});case"setBook":return Z(Z({},e),{books:t.books});default:throw new Error}},dt=(0,e.createContext)({}),ft=function(){var t=(0,e.useContext)(dt),n=t.state,r=t.dispatch;return e.createElement("div",null,e.createElement("h1",{onClick:function(){r({type:"setUser",user:"baijiawei"})}},"我的信息"),e.createElement("h1",null,"name:",null==n?void 0:n.user))},pt=function(){return e.createElement("div",null,e.createElement("h1",null,"我的书籍"))},mt=function(){return e.createElement("div",null,e.createElement("h1",null,"我的电影"))};const ht=function(t){var n=J((0,e.useState)(t.defaultValue),2),r=n[0],a=n[1],o=function(e,n){e!==r&&(a(e),t.onChange&&t.onChange(e,n))};return e.createElement("div",{className:"xue-radio "+[t.className],style:t.style},function(){var n=t.radioStyle,a=void 0===n?"radio":n,i=t.vertical,l=void 0!==i&&i,u=t.children;return e.Children.map(u,(function(t){return e.cloneElement(t,{onClick:o,checkedValue:r,radioStyle:a,vertical:l})}))}())};n(8398);const gt=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=new Array;return t.forEach((function(t){if("string"==typeof t)r.push("".concat("xue","-").concat(e.toLowerCase()).concat(t&&"-"+t));else if(t instanceof Array)t.forEach((function(e){return"string"==typeof e&&r.push(e)}));else if("object"==typeof t&&!(t instanceof Array))for(var n in t)t.hasOwnProperty(n)&&t[n]&&r.push(n)})),r.filter((function(e){return e})).join(" ")},vt=function(t){S.any.isRequired,S.any,S.func,S.oneOf(["radio","button"]),S.bool,S.bool;var n=t.checkedValue,r=t.radioStyle,a=t.disabled,o=t.vertical,i=t.value,l=t.children,u=function(e){var n=t.value,r=t.onClick;!t.disabled&&r&&r(n,e)},s=gt("Option","",[r+"-style"],{checked:i===n,disabled:a,vertical:o});return"radio"===r?e.createElement("label",{className:s,onClick:u},e.createElement("span",{className:"label-dot"}),e.createElement("div",{className:"label-text"},l)):e.createElement("label",{className:s,onClick:u},e.createElement("div",{className:"label-text"},l))};n(9321);n(6534);n(3967);const yt=function(t){var n=t.size,r=t.disabled,a=t.style,o=t.className,i=t.onChange,l=J((0,e.useState)(t.defaultChecked),2),u=l[0],s=l[1],c=gt("Switch","",[o,n],{checked:u,disabled:r});return e.createElement("div",null,e.createElement("span",{className:c,onClick:function(e){r||(s(!u),i&&i(!u,e))},style:a},e.createElement("span",{className:gt("Switch","core")})))};t.render(e.createElement($,null,e.createElement(Ie,{className:"site-page"},e.createElement(Te,{className:"site-header"},e.createElement("div",{className:"logo"},e.createElement("img",{src:"logo.png",width:"48",height:"48",alt:"logo"}),e.createElement("span",null,"Ands")),e.createElement("div",{className:"git"},e.createElement("a",{href:"https://github.com/baijia-wei/frank-text"},e.createElement("img",{src:"./lib/icons/GitHub.png",width:"20",height:"20",alt:"github"}),"GitHub"))),e.createElement(Ie,null,e.createElement(Ce,{className:"site-aside"},e.createElement("ul",null,e.createElement("li",null,e.createElement(Q,{to:"/ganging"},"安装")),e.createElement("li",null,e.createElement(Q,{to:"/updated"},"更新日志")),e.createElement("li",{className:"site-aside-lanzhou"})),e.createElement("h2",null,"组件"),e.createElement("ul",null,e.createElement("li",null,e.createElement(Q,{to:"/icon"},"Icon")),e.createElement("li",null,e.createElement(Q,{to:"/button"},"Button 按钮")),e.createElement("li",null,e.createElement(Q,{to:"/dialog"},"对话框")),e.createElement("li",null,e.createElement(Q,{to:"/layout"},"布局")),e.createElement("li",null,e.createElement(Q,{to:"/form"},"表单")),e.createElement("li",null,e.createElement(Q,{to:"/tree"},"树形组件")),e.createElement("li",null,e.createElement(Q,{to:"/input"},"输入框")),e.createElement("li",null,e.createElement(Q,{to:"/scroll"},"滚动条")),e.createElement("li",null,e.createElement(Q,{to:"/choice"},"选择器")),e.createElement("li",null,e.createElement(Q,{to:"/hoc"},"草稿练习")),e.createElement("li",null,e.createElement(Q,{to:"/dragpull"},"拖拽")),e.createElement("li",null,e.createElement(Q,{to:"/cityselect"},"城市组件")),e.createElement("li",null,e.createElement(Q,{to:"/actionsheet"},"动作面板")),e.createElement("li",null,e.createElement(Q,{to:"/tabexample"},"Tabs")),e.createElement("li",null,e.createElement(Q,{to:"/tables"},"Tables 表格")),e.createElement("li",null,e.createElement(Q,{to:"/redux"},"Redux")),e.createElement("li",null,e.createElement(Q,{to:"/radio"},"Radio")),e.createElement("li",null,e.createElement(Q,{to:"/switch"},"Switch")),e.createElement("li",null,e.createElement(Q,{to:"/activity"},"活动")),e.createElement("li",null,e.createElement(Q,{to:"/longList"},"Long list")))),e.createElement(Oe,null,e.createElement(j,{path:"/icon",component:function(){return e.createElement(e.Fragment,null,e.createElement(ke,{code:n(8272).Z},e.createElement(De,null)),e.createElement(ke,{code:n(1864).Z},e.createElement(Me,null)))}}),e.createElement(j,{path:"/button",component:function(){return e.createElement("div",null,e.createElement("div",{className:"ands-header"},e.createElement("h1",null,"Button按钮"),e.createElement("p",null,"按钮用于开始一个即时操作"),e.createElement("h2",null,"何时使用"),e.createElement("p",null,"标记了一个（或封装一组）操作命令，响应用户点击行为，触发相应的业务逻辑")),e.createElement("div",{className:"ands-header-content"},e.createElement("div",{className:"ands-content-left"},e.createElement(ce,null),e.createElement("div",{className:"ands-content-left-text"},e.createElement("p",null))),e.createElement("div",{className:"ands-content-right"},e.createElement(Se,null))))}}),e.createElement(j,{path:"/dialog",component:function(){var t=J((0,e.useState)(!1),2),n=t[0],r=t[1],a=J((0,e.useState)(!1),2),o=a[0],i=a[1];return e.createElement("div",null,e.createElement("div",null,e.createElement("div",null,"基础用法"),e.createElement(oe,{onClick:function(){var t=ue(e.createElement("h1",null,"弹窗内容",e.createElement(oe,{onClick:function(){return t()}},"默认关闭")))}},"提示")),e.createElement("div",null,e.createElement("div",null,"基础用法2"),e.createElement(oe,{onClick:function(){return t=e.createElement(oe,{onClick:function(){return n()}},"OK"),void(n=ue("1",[t]));var t,n}},"弹窗"),e.createElement(oe,{onClick:function(){return t=function(){console.log("你点击了yes")},n=function(){console.log("你点击了no")},r=[e.createElement(oe,{onClick:function(){a(),t&&t()},level:"important"},"yes"),e.createElement(oe,{onClick:function(){a(),n&&n()}},"no")],void(a=ue("1",r,n));var t,n,r,a}},"确定取消")),e.createElement("div",null,e.createElement("div",null,"基础用法3"),e.createElement(oe,{onClick:function(){return r(!n)}},"click"),e.createElement(se,{visible:n,buttons:[e.createElement(oe,{onClick:function(){r(!1)},level:"important"},"确定"),e.createElement(oe,{onClick:function(){r(!1)}},"取消")],onClose:function(){r(!1)}},e.createElement("strong",null,"hi"))),e.createElement("div",{style:{position:"relative",zIndex:9}},e.createElement("div",null,"遮罩层点击关闭"),e.createElement(oe,{onClick:function(){return i(!o)}},"click"),e.createElement(se,{visible:o,closeOnClickMask:!0,buttons:[e.createElement(oe,{onClick:function(){i(!1)}},"取消"),e.createElement(oe,{level:"important",onClick:function(){i(!1)}},"确定")],onClose:function(){i(!1)}},e.createElement("strong",null,"hi"))))}}),e.createElement(j,{path:"/layout",component:function(){return e.createElement("div",null,e.createElement("div",null,e.createElement("h1",null,"第一个例子"),e.createElement(Fe,{style:{height:500,width:500},className:"hi"},e.createElement(Te,{className:"x"},"header"),e.createElement(Oe,{className:"y"},"content"),e.createElement(Le,{className:"x"},"footer"))),e.createElement("div",null,e.createElement("h1",null,"第二个例子"),e.createElement(Fe,{style:{height:500,width:500},className:"hi"},e.createElement(Te,{className:"x"},"header"),e.createElement(Fe,null,e.createElement(Ce,{className:"z"},"aside"),e.createElement(Oe,{className:"y"},"content")),e.createElement(Le,{className:"x"},"footer"))),e.createElement("div",null,e.createElement("h1",null,"第三个例子"),e.createElement(Fe,{style:{height:500,width:500},className:"hi"},e.createElement(Te,{className:"x"},"header"),e.createElement(Fe,null,e.createElement(Oe,{className:"y"},"content"),e.createElement(Ce,{className:"z"},"aside")),e.createElement(Le,{className:"x"},"footer"))),e.createElement("div",null,e.createElement("h1",null,"第四个例子"),e.createElement(Fe,{style:{height:500,width:500},className:"hi"},e.createElement(Ce,{className:"z"},"aside"),e.createElement(Fe,null,e.createElement(Te,{className:"x"},"header"),e.createElement(Oe,{className:"y"},"content"),e.createElement(Le,{className:"x"},"footer")))))}}),e.createElement(j,{path:"/ganging",component:function(){return e.createElement("div",null,e.createElement("div",null,e.createElement("h2",null,"NPM安装"),e.createElement("p",null,"推荐使用 npm 来安装，享受生态圈和工具带来的便利，更好地和 webpack 配合使用，当然，我们也推荐使用 ES2015。"),e.createElement("pre",{className:"ands-guanwan"},"$ npm install ands-jiawei --save"),e.createElement("p",null,"如果您使用了 NPM 安装，并使用 webpack 作为构建工具，请继续阅读快速上手章节。")))}}),e.createElement(j,{path:"/updated",component:function(){return e.createElement("div",null,e.createElement("div",null,e.createElement("h2",null,"更新日志"),e.createElement("h3",null,"1.0.2.6"),e.createElement("div",null,"2021/3/20",e.createElement("ul",null,e.createElement("li",null,"表单验证完成待优化"),e.createElement("li",null,"修复 布局组件的报错。")))),e.createElement("div",{className:"critic"},e.createElement("h2",null,"更新日志"),e.createElement("h3",null,"1.0.2.5"),e.createElement("div",null,"2021/3/15",e.createElement("ul",null,e.createElement("li",null,"新增doc配置文件"),e.createElement("li",null,"按钮样式编写"),e.createElement("li",null,"打包部署完成"),e.createElement("li",null,"修复 布局组件的报错。")))))}}),e.createElement(j,{path:"/form",component:function(){return e.createElement("div",null,e.createElement("div",{className:"ands-header"},e.createElement("h2",null,"基本使用"),e.createElement("p",null,"传入校验规则。")),e.createElement("div",{className:"ands-header-content"},e.createElement("div",{className:"ands-content-left"},e.createElement(Ge,null),e.createElement("div",{className:"ands-content-left-text"},e.createElement("p",null))),e.createElement("div",{className:"ands-content-right"},e.createElement(He,null))))}}),e.createElement(j,{path:"/input",component:function(){return e.createElement("div",null,e.createElement("div",{className:"ands-header"},e.createElement("h2",null,"基本使用"),e.createElement("p",null,"通过鼠标或键盘输入内容，是最基础的表单域的包装。")),e.createElement("div",{className:"ands-header-content"},e.createElement("div",{className:"ands-content-left"},e.createElement(qe,null),e.createElement("div",{className:"ands-content-left-text"},e.createElement("p",null))),e.createElement("div",{className:"ands-content-right"},e.createElement(Ve,null))))}}),e.createElement(j,{path:"/hoc",component:function(t){return e.createElement("div",null,e.createElement(Ye,{stage:"react"}))}}),e.createElement(j,{path:"/tree",component:function(){var t=J((0,e.useState)([{text:"一职中",value:"1",children:[{text:"一直用1.1",value:"1.1",children:[{text:"一直用1.1.1",value:"1.1.1"},{text:"一直用1.1.2",value:"1.1.2"},{text:"一直用1.1.3",value:"1.1.3"},{text:"一直用1.1.4",value:"1.1.4"}]},{text:"一直用1.2",value:"1.2"},{text:"一直用1.3",value:"1.3"},{text:"一直用1.4",value:"1.4",children:[{text:"一直用1.4.1",value:"1.4.1"},{text:"一直用1.4.2",value:"1.4.2"},{text:"一直用1.4.3",value:"1.4.3"},{text:"一直用1.4.4",value:"1.4.4",children:[{text:"一直用1.4.4.1",value:"1.4.4.1"},{text:"一直用1.4.4.2",value:"1.4.4.2"},{text:"一直用1.4.4.3",value:"1.4.4.3"},{text:"一直用1.4.4.4",value:"1.4.4.4"}]}]}]},{text:"二职中",value:"2",children:[{text:"二直用1",value:"2.1",children:[{text:"二直用2.1.1",value:"2.1.1",children:[{text:"二直用2.1.1",value:"2.1.1"}]}]},{text:"二直用2",value:"2.2",children:[{text:"二直用2.2.1",value:"2.2.1"}]},{text:"二直用3",value:"2.3",children:[{text:"二直用2.3.1",value:"2.3.1"}]},{text:"二直用4",value:"2.4",children:[{text:"二直用2.4.1",value:"2.4.1"}]}]}]),2),n=t[0],r=(t[1],J((0,e.useState)([]),2)),a=r[0],o=r[1];return e.createElement("div",null,e.createElement("h1",null,"展示数据"),e.createElement(Qe,{multiple:!0,sourceData:n,onChange:function(e,t){o(!0===t?ee(ee([],J(a),!1),[e.value],!1):a.filter((function(t){return t!=e.value})))},selected:a}))}}),e.createElement(j,{path:"/scroll",component:function(){return e.createElement("div",null,e.createElement("h2",null,"第一个例子"),e.createElement(Xe,{style:{height:400}},e.createElement("p",null,"1"),e.createElement("p",null,"2"),e.createElement("p",null,"1"),e.createElement("p",null,"1"),e.createElement("p",null,"3"),e.createElement("p",null,"4"),e.createElement("p",null,"5"),e.createElement("p",null,"6"),e.createElement("p",null,"7"),e.createElement("p",null,"1"),e.createElement("p",null,"2"),e.createElement("p",null,"3"),e.createElement("p",null,"15"),e.createElement("p",null,"11"),e.createElement("p",null,"31"),e.createElement("p",null,"13"),e.createElement("p",null,"14"),e.createElement("p",null,"16"),e.createElement("p",null,"17"),e.createElement("p",null,"18"),e.createElement("p",null,"14"),e.createElement("p",null,"11"),e.createElement("p",null,"12")))}}),e.createElement(j,{path:"/choice",component:function(){var t=J((0,e.useState)(["钟离"]),2),n=t[0],r=t[1],a=J((0,e.useState)(["神子","将军","心海","钟离","公子","胡桃"]),1)[0],o=J((0,e.useState)([]),2),i=o[0],l=o[1],u=J((0,e.useState)(["神子","将军","公子","胡桃","心海","钟离"]),1)[0];return e.createElement("div",null,e.createElement("div",null,"单选"),e.createElement(Je,{visible:n,choicedata:a,bool:!1,onClicksw:function(e){r(e)}}),e.createElement("div",null,"多选"),e.createElement(Je,{visible:i,choicedata:u,bool:!0,onClicksw:function(e){l(e)}}))}}),e.createElement(j,{path:"/dragpull",component:function(){return e.createElement("div",null,e.createElement(et,null),e.createElement("div",null,"滑动"),e.createElement(tt,null))}}),e.createElement(j,{path:"/cityselect",component:function(t){return e.createElement("div",null,e.createElement("div",null,e.createElement("h2",null,"第一个例子"),e.createElement(nt,null,"选择城市")))}}),e.createElement(j,{path:"/actionsheet",component:function(t){return e.createElement(e.Fragment,null,e.createElement(ot,null))}}),e.createElement(j,{path:"/tabexample",component:function(){return e.createElement("div",null,"第一个例子",e.createElement(lt,null,e.createElement("div",{title:"水果"},"菠萝"),e.createElement("div",{title:"蔬菜"},"黄瓜"),e.createElement("div",{title:"家具"},"椅子")))}}),e.createElement(j,{path:"/tables",component:function(){return e.createElement(e.Fragment,null,e.createElement("div",null,"第一个例子"),e.createElement(ut,{dome:function(){return e.createElement("div",null,e.createElement(re,{name:"qq"}),e.createElement(re,{name:"baidu"}),e.createElement(re,{name:"wechal"}))},dataSourcew:[{key:1,name:"三上悠亚",age:32,addres:"西湖区湖底公园1号",cis:10,baxodi:18,baodi:100,sad:"展开"},{key:2,name:"桥本有菜",age:42,addres:"西湖区湖底公园2号",cis:10,baodi:230,baxodi:18,sad:"展开"},{key:3,name:"波多野结衣",age:32,addres:"西湖区湖底公园5号",cis:10,baodi:130,baxodi:18,sad:"展开"},{key:4,name:"花泽香菜",age:32,addres:"西湖区湖底公园6号",cis:16,baodi:190,baxodi:18,sad:"展开"}],columns:[{title:"时间",dataIndex:"name",key:"name"},{title:"名称",dataIndex:"namex",key:"name"},{title:"类别",dataIndex:"age",key:"age"},{title:"星级",dataIndex:"zhuzhi",key:"zhuzhi"},{title:"总次数",dataIndex:"zhankai",key:"zhankai"},{title:"保底次数",dataIndex:"zhankai",key:"zhankai"},{title:"展开",dataIndex:"zhankai",key:"zhankaiX"}]}))}}),e.createElement(j,{path:"/redux",component:function(){var t=J((0,e.useReducer)(ct,st),2),n=t[0],r=t[1];return e.createElement(dt.Provider,{value:{state:n,dispatch:r}},e.createElement(ft,null),e.createElement(pt,null),e.createElement(mt,null))}}),e.createElement(j,{path:"/Radio",component:function(){return e.createElement("div",null,e.createElement("h1",null,"我的信息"),e.createElement(ht,{defaultValue:"apple",onChange:function(e){return function(e){console.log(e+"1")}(e)}},e.createElement(vt,{value:"apple"},"Apple"),e.createElement(vt,{value:"orange"},"Orange"),e.createElement(vt,{value:"pear"},"Pear"),e.createElement(vt,{value:"disabled",disabled:!0},"Disabled")))}}),e.createElement(j,{path:"/switch",component:function(){var t=function(e){console.log(e)};return e.createElement("div",null,e.createElement("h1",null,"我的信息开关"),e.createElement(yt,{onChange:function(e){return t(e)},size:"small"}),e.createElement(yt,{disabled:!0}),e.createElement(yt,{onChange:function(e){return t(e)},disabled:!0}),e.createElement(yt,{onChange:function(e){return t(e)},disabled:!0,defaultChecked:!0}))}}),e.createElement(j,{path:"/activity",component:function(){var t,n=0,r=1e3,a=J((0,e.useState)(!0),2),o=a[0],i=a[1],l=null,u=0;(0,e.useEffect)((function(){var e=document.querySelector(".lottery");l=null==e?void 0:e.querySelectorAll("li")}),[]);var s=function(){(r-=100)<=100&&(r=100);for(var e=0;e<l.length;e++)l[e].classList.remove("actives");++u===l.length&&(u=0,n++),l[u].classList.add("actives"),n>=7&&3===u?(clearTimeout(t),i(!0),r=500):(console.log(r,n),t=setTimeout(s,r),(n>=6||r<=100)&&(r+=300))};return e.createElement("div",null,e.createElement("h1",null,"我的活动"),e.createElement("div",{className:"luckyDraw"},e.createElement("ul",{className:"lottery"},e.createElement("li",{className:"actives"},"1"),e.createElement("li",null,"2"),e.createElement("li",null,"3"),e.createElement("li",null,"4"),e.createElement("li",null,"5"),e.createElement("li",null,"6"),e.createElement("li",null,"7"),e.createElement("li",null,"8"),e.createElement("div",{className:"dox",onClick:function(){o&&(n=0,s()),console.log("开始抽奖")}},"点击抽奖"))))}}),e.createElement(j,{path:"/longList",component:function(){var t=Array.from({length:100},(function(e,t){return t})),n=((0,e.useRef)(),(0,e.useRef)());return(0,e.useEffect)((function(){}),[]),e.createElement("div",null,e.createElement("h1",null,"我的信息开关"),e.createElement("div",{className:"containers",onScroll:function(e){},ref:n},t.map((function(t,n){return e.createElement("div",{className:"items",key:n},n)}))))}}))),e.createElement(Le,{className:"site-footer"},"© 白家玮"))),document.querySelector("#root"))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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Q3RDLElBQU1rcEUsRUFBY3g3RCxNQUFNbkwsS0FBSyxDQUFFaEUsT0FBUSxNQUFPLFNBQUMrckIsRUFBR2xnQixHQUFNLE9BQUFBLEtBTXREKytELElBRGEsSUFBQXh0QyxXQUNJLElBQUFBLFdBU3JCLE9BSEEsSUFBQTdCLFlBQVUsY0FFUCxJQUNJLDJCQUNILG9DQUNBLHVCQUFLa3hCLFVBQVUsYUFBYXNXLFNBVGYsU0FBQ2psRSxLQVNrQ200QixJQUFLMjBDLEdBRTVDRCxFQUFZcHRFLEtBQUksU0FBQ29CLEVBQVc4M0IsR0FDekIsT0FBTyx1QkFBS2cyQixVQUFVLFFBQVE5cEQsSUFBSzh6QixHQUFRQSxhbkJxSm5ELGdCQUFDLEdBQU0sQ0FBQ2cyQixVQUFVLGVBQWEsV0FLckNsbEQsU0FBU3N0QyxjQUFjIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvaWNvbnN8c3luY3wvLnN2ZyQiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9leGFtcGxlLnNjc3MiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvVGFiL3RhYi5zY3NzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2FjdGlvblNoZWV0L2FjdGlvblNoZWV0LnNjc3MiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvYWN0aXZpdHkvYWN0aXZpdHkuc2NzcyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9idXR0b24vYnV0dG9uLmV4YW1wbGUuc2NzcyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9idXR0b24vYnV0dG9uLnNjc3MiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvY2hvaWNlL2Nob2ljZS5zY3NzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2NpdHlTZWxlY3QvY2l0eVNlbGVjdC5zY3NzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2RpYWxvZy9kaWFsb2cuc2NzcyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9kcmFnUHVsbC9kcmFncHVsbC5zY3NzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2Zvcm0vZm9ybS5zY3NzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2Zvcm0vaW5wdXRhc3NlbWJseTEuc2NzcyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9ndWFudy9ndWFud2FuZy5zY3NzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2ljb24vaWNvbi5zY3NzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvaW5wdXQvaW5wdXQuc2NzcyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9pbnB1dC9pbnB1dGFzc2VtYmx5MS5zY3NzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2xheW91dC9sYXlvdXQuZXhhbXBsZS5zY3NzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2xheW91dC9sYXlvdXQuc2NzcyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9sb25nTGlzdC9sb25nTGlzdC5zY3NzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL3JhZGlvL1N0eWxlL2luZGV4LnNjc3MiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvc2Nyb2xsL3Njcm9sbC5zY3NzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL3N3aXRjaC9zdHlsZS9zd2l0Y2guc2NzcyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi90YWJsZS90YWJsZS5zY3NzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL3RyZWUvdHJlZS5zY3NzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL25vZGVfbW9kdWxlcy9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy9kaXN0L2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzLmNqcy5qcyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvYnV0dG9uL2J1dHRvbi5hc3NlbWJseS50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvYnV0dG9uL2J1dHRvbi5hc3NlbWJseTEudHN4PzQyODEiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvYnV0dG9uL2J1dHRvbi5hc3NlbWJseTIudHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2Zvcm0vZm9ybS5leGFtcGxlLnRzeD80YjRmIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2ljb24vaWNvbi5leGFtcGxlLjEudHN4P2ViMTUiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvaWNvbi9pY29uLmV4YW1wbGUuMi50c3g/ZjNmNCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9pbnB1dC9pbnB1dC5leGFtcGxlLnRzeD9kNjgwIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL25vZGVfbW9kdWxlcy9wYXRoLXRvLXJlZ2V4cC9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9leGFtcGxlLnNjc3M/MGI5YiIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9UYWIvdGFiLnNjc3M/NThjNSIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9hY3Rpb25TaGVldC9hY3Rpb25TaGVldC5zY3NzPzA2NjUiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvYWN0aXZpdHkvYWN0aXZpdHkuc2Nzcz80NzY3Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2J1dHRvbi9idXR0b24uZXhhbXBsZS5zY3NzP2VmYjkiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvYnV0dG9uL2J1dHRvbi5zY3NzPzRhOGQiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvY2hvaWNlL2Nob2ljZS5zY3NzPzM0NGMiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvY2l0eVNlbGVjdC9jaXR5U2VsZWN0LnNjc3M/NTcyMiIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9kaWFsb2cvZGlhbG9nLnNjc3M/Y2ZhYiIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9kcmFnUHVsbC9kcmFncHVsbC5zY3NzPzY5NWEiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvZm9ybS9mb3JtLnNjc3M/OTc2YiIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9mb3JtL2lucHV0YXNzZW1ibHkxLnNjc3M/ZjE3OSIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9ndWFudy9ndWFud2FuZy5zY3NzPzBjZTAiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvaWNvbi9pY29uLnNjc3M/MGFmZSIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9pbmRleC5zY3NzPzBhZmEiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvaW5wdXQvaW5wdXQuc2Nzcz80OTQzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2lucHV0L2lucHV0YXNzZW1ibHkxLnNjc3M/MzhjMiIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9sYXlvdXQvbGF5b3V0LmV4YW1wbGUuc2Nzcz84MDMxIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2xheW91dC9sYXlvdXQuc2Nzcz80ZjNjIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2xvbmdMaXN0L2xvbmdMaXN0LnNjc3M/MzY4NSIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9yYWRpby9TdHlsZS9pbmRleC5zY3NzP2U2NTEiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvc2Nyb2xsL3Njcm9sbC5zY3NzP2JmYzgiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvc3dpdGNoL3N0eWxlL3N3aXRjaC5zY3NzPzgyYzEiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvdGFibGUvdGFibGUuc2Nzcz8yYTQ2Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL3RyZWUvdHJlZS5zY3NzPzY1NzciLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbm9kZV9tb2R1bGVzL3N2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sLmpzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2ljb25zL2JhaWR1LnN2ZyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9pY29ucy9jdW93dS5zdmciLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvaWNvbnMvcXEuc3ZnIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2ljb25zL3dlY2hhbC5zdmciLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvaWNvbnMvemhpZnViYW8uc3ZnIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbm9kZV9tb2R1bGVzL3N2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGQuanMiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvaWNvbi9pbXBvcnRpY29ucy50cyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS93ZWJwYWNrL3J1bnRpbWUvY29tcGF0IGdldCBkZWZhdWx0IGV4cG9ydCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL2FuZHMtamlhd2VpL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vc2V0UHJvdG90eXBlT2YuanMiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZS5qcyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvZXNtL3Jlc29sdmUtcGF0aG5hbWUuanMiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9ub2RlX21vZHVsZXMvdGlueS1pbnZhcmlhbnQvZGlzdC90aW55LWludmFyaWFudC5lc20uanMiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL25vZGVfbW9kdWxlcy9taW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0L2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzbS9yZWFjdC1yb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lc20vcmVhY3Qtcm91dGVyLWRvbS5qcyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvaGVscGVycy9jbGFzc2VzLnRzeCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9pY29uL2ljb24udHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2J1dHRvbi9idXR0b24udHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2RpYWxvZy9kaWFsb2cudHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2J1dHRvbi9idXR0b24uYXNzZW1ibHkxLnRzeCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL25vZGVfbW9kdWxlcy9wcmlzbS1yZWFjdC1yZW5kZXJlci9wcmlzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL25vZGVfbW9kdWxlcy9wcmlzbS1yZWFjdC1yZW5kZXJlci9kaXN0L2luZGV4LmpzIiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbm9kZV9tb2R1bGVzL3ByaXNtLXJlYWN0LXJlbmRlcmVyL3RoZW1lcy9kdW90b25lRGFyay9pbmRleC5qcyIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2RlbW8udHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2J1dHRvbi9idXR0b24uZGVtby50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvbGF5b3V0L2FzaWRlLnRzeCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9sYXlvdXQvaGVhZGVyLnRzeCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9sYXlvdXQvY29udGVudC50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvbGF5b3V0L2Zvb3Rlci50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvbGF5b3V0L2xheW91dC50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvaWNvbi9pY29uLmV4YW1wbGUuMS50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvaWNvbi9pY29uLmV4YW1wbGUuMi50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvaW5wdXQvaW5wdXQudHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2Zvcm0vZm9ybS50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvZm9ybS92YWxpZGF0b3IudHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2Zvcm0vZm9ybS5leGFtcGxlLnRzeCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9mb3JtL2Zvcm0uZGVtby50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvaW5wdXQvaW5wdXQuZXhhbXBsZS50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvaW5wdXQvaW5wdXQuZGVtby50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvZ3VhbncvSE9DLnRzeCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi90cmVlL3RyZWUudHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL3Njcm9sbC9zY3JvbGxiYXItd2lkdGgudHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL3Njcm9sbC9zY3JvbGwudHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2Nob2ljZS9jaG9pY2UudHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2RyYWdQdWxsL2RyYWdwdWxsLnRzeCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9kcmFnUHVsbC9kcmFnU2xpZGUudHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2NpdHlTZWxlY3QvY2l0eVNlbGVjdC50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvY2l0eVNlbGVjdC9jaXR5U2VsZWN0LmV4YW1waWUudHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2FjdGlvblNoZWV0L2FjdGlvblNoZWV0LnRzeCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9UYWIvdGFiLnRzeCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi90YWJsZS90YWJsZS50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvUmVkdXgvaW5kZXgudHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL3JhZGlvL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi91dGlscy9jbGFzc1N5bGUudHMiLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvcmFkaW8vT3B0aW9uLnRzeCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9zd2l0Y2gvc3dpdGNoLnRzeCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2V4YW1wbGUudHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2ljb24vaWNvbi5kZW1vLnRzeCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9idXR0b24vYnV0dG9uLmV4YW1wbGUudHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2RpYWxvZy9kaWFsb2cuZXhhbXBsZS50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvbGF5b3V0L2xheW91dC5leGFtcGxlLnRzeCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9ndWFudy9ndWFud2FuZy50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvZ3VhbncvVXBkYXRlTG9nLnRzeCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9mb3JtL2Zvcm0uYXNzZW1ibHkudHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2lucHV0L2lucHV0IGFzc2VtYmx5MS50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvdHJlZS90cmVlLmV4YW1wbGUudHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL3Njcm9sbC9zY3JvbGwuZXhhbXBsZS50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvY2hvaWNlL2Nob2ljZS5leGFtcGxlLnRzeCIsIndlYnBhY2s6Ly9hbmRzLWppYXdlaS8uL2xpYi9kcmFnUHVsbC9kcmFnLmV4YW1wbGUudHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2FjdGlvblNoZWV0L2FjdGlvbnNoZWV0LmV4YW1wbGUudHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL1RhYi90YWIuZXhhbXBsZS50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvdGFibGUvdGFibGUuZXhhbXBsZS50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvcmFkaW8vcmFkaW8udHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL3N3aXRjaC9zd2l0Y2guZXhhbXBsZS50c3giLCJ3ZWJwYWNrOi8vYW5kcy1qaWF3ZWkvLi9saWIvYWN0aXZpdHkvYWN0aXZpdHkudHN4Iiwid2VicGFjazovL2FuZHMtamlhd2VpLy4vbGliL2xvbmdMaXN0L2xvbmdMaXN0LmV4YW1wbGUudHN4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBtYXAgPSB7XG5cdFwiLi9iYWlkdS5zdmdcIjogMTAwNSxcblx0XCIuL2N1b3d1LnN2Z1wiOiAyNTE2LFxuXHRcIi4vcXEuc3ZnXCI6IDQ5NzAsXG5cdFwiLi93ZWNoYWwuc3ZnXCI6IDY1ODAsXG5cdFwiLi96aGlmdWJhby5zdmdcIjogNDU3NVxufTtcblxuXG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0dmFyIGlkID0gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSk7XG5cdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKGlkKTtcbn1cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhtYXAsIHJlcSkpIHtcblx0XHR2YXIgZSA9IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIgKyByZXEgKyBcIidcIik7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIG1hcFtyZXFdO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDExOyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIqe21hcmdpbjowO3BhZGRpbmc6MDtib3gtc2l6aW5nOmJvcmRlci1ib3h9Kjo6YmVmb3Jle2JveC1zaXppbmc6Ym9yZGVyLWJveH0qOjphZnRlcntib3gtc2l6aW5nOmJvcmRlci1ib3h9dWwsb2x7bGlzdC1zdHlsZTpub25lfWgxLGgyLGgzLGg0LGg1LGg2e2ZvbnQtd2VpZ2h0Om5vcm1hbH1he3RleHQtZGVjb3JhdGlvbjpub25lO2NvbG9yOmluaGVyaXR9cHJle2ZvbnQtZmFtaWx5OlxcXCJGaXJhIENvZGUgTWVkaXVtXFxcIiwgQ29uc29sYXMsIG1vbm9zcGFjZX1ib2R5e2ZvbnQtc2l6ZToxNnB4O2FsaWduLWNvbnRlbnQ6Y2VudGVyfS5zaXRlLXBhZ2V7YmFja2dyb3VuZDojZmZmZmZmO21pbi1oZWlnaHQ6MTAwdmh9LnNpdGUtbWFpbntwYWRkaW5nLXRvcDoxNnB4fS5zaXRlLWhlYWRlcntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47YWxpZ24taXRlbXM6Y2VudGVyO2JhY2tncm91bmQ6I2VlZX0uc2l0ZS1oZWFkZXIgLmxvZ297cGFkZGluZzowIDE2cHg7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcn0uc2l0ZS1oZWFkZXIgLmxvZ28+aW1ne21hcmdpbi1yaWdodDo4cHh9LnNpdGUtaGVhZGVyIC5sb2dvPnNwYW57Y29sb3I6IzAwQURCNTtmb250LXNpemU6MzJweH0uc2l0ZS1oZWFkZXIgLmdpdHttYXJnaW4tcmlnaHQ6MjBweDtmb250LXNpemU6MTVweH0uc2l0ZS1hc2lkZXtib3JkZXItcmlnaHQ6MXB4IHNvbGlkICNFRUVFRUU7bWFyZ2luLXJpZ2h0OjE2cHh9LnNpdGUtYXNpZGUgLnNpdGUtYXNpZGUtbGFuemhvdXtwYWRkaW5nLWxlZnQ6MTRweH0uc2l0ZS1hc2lkZSBoMntwYWRkaW5nOjE2cHg7Zm9udC1zaXplOjE4cHh9LnNpdGUtYXNpZGUgdWx7bWluLXdpZHRoOjEyZW07Zm9udC1zaXplOjE0cHh9LnNpdGUtYXNpZGUgdWw+bGkgYXtjb2xvcjojMzMzO2Rpc3BsYXk6YmxvY2s7cGFkZGluZzo4cHggMTZweH0uc2l0ZS1hc2lkZSB1bD5saSBhOmhvdmVye2NvbG9yOiM1Y2IyZmZ9LnNpdGUtYXNpZGUgdWw+bGkgYS5hY3RpdmV7Y29sb3I6IzVjYjJmZjtiYWNrZ3JvdW5kOiNlNmY3ZmZ9LnNpdGUtZm9vdGVye3RleHQtYWxpZ246Y2VudGVyO2ZvbnQtc2l6ZToxMnB4O2NvbG9yOiM2NjY7cGFkZGluZzoxNnB4IDA7Ym9yZGVyLXRvcDoxcHggc29saWQgI2VlZX0uZXhhbXBsZXtwYWRkaW5nOjE2cHggMH0uYW5kcy1oZWFke3dpZHRoOjYwMHB4fS5hbmRzLWhlYWQgLmFuZHMtbGFuemhvdS1pbWd7ZGlzcGxheTpmbGV4fS5hbmRzLWhlYWQgLmFuZHMtbGFuemhvdS1pbWcgaW1ne3dpZHRoOjIwMHB4O2hlaWdodDoyMDBweH1cXG5cIiwgXCJcIl0pO1xuXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi50YWJze2Rpc3BsYXk6ZmxleDtiYWNrZ3JvdW5kLWNvbG9yOiNmN2Y5ZmM7anVzdGlmeS1jb250ZW50OnNwYWNlLWFyb3VuZDt3aWR0aDo1MDBweDtsaW5lLWhlaWdodDozN3B4O2NvbG9yOiMwMDA7Ym94LXNpemluZzpib3JkZXItYm94O2hlaWdodDozN3B4fS5ib3hzd3tjb2xvcjojMDg3OWZhO2JveC1zaXppbmc6Ym9yZGVyLWJveDtib3JkZXItYm90dG9tOjNweCBzb2xpZCAjMDg3OWZhfS5zZWxlY3R7dGV4dC1hbGlnbjpjZW50ZXI7d2lkdGg6MTAwcHh9LnRhYnMtY29udGVudHt3aWR0aDo1MDBweDtoZWlnaHQ6NjAwcHg7YmFja2dyb3VuZC1jb2xvcjpjeWFufS5ub25le2Rpc3BsYXk6bm9uZX1cXG5cIiwgXCJcIl0pO1xuXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5BY3Rpb257cG9zaXRpb246cmVsYXRpdmV9LkFjdGlvbiAuYWN0aW9uc2hlZXR7d2lkdGg6NDAwcHg7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2FsaWduLWl0ZW1zOmNlbnRlcjtwYWRkaW5nOjAuNXJlbSAxcmVtO2JhY2tncm91bmQ6Y2hhcnRyZXVzZX0uQWN0aW9uIC5hY3Rpb25zaGVldC1kaWFsb2d7b3ZlcmZsb3c6aGlkZGVuO3Bvc2l0aW9uOmFic29sdXRlO3RvcDozMHB4O3dpZHRoOjQwMHB4O2hlaWdodDo1MDBweDtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmZsZXgtZW5kO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjt0cmFuc2l0aW9uOmFsbCAwLjVzIGVhc2UtaW4tb3V0fS5BY3Rpb24gLmFjdGlvbnNoZWV0LWRpYWxvZyAuZGlhbG9nLWhlYWR7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn0uQWN0aW9uIC5hY3Rpb25zaGVldC1kaWFsb2cgLmRpYWxvZywuQWN0aW9uIC5hY3Rpb25zaGVldC1kaWFsb2cgLmRpYWxvZy1xdXh7aGVpZ2h0OjM3cHg7dGV4dC1hbGlnbjpjZW50ZXI7bGluZS1oZWlnaHQ6MzdweDt3aWR0aDoxMDAlO2JhY2tncm91bmQtY29sb3I6Y3lhbn0uQWN0aW9uIC5hY3Rpb25zaGVldC1kaWFsb2cgLmRpYWxvZzpudGgtY2hpbGQoMSl7Ym9yZGVyLXJhZGl1czoxMHB4IDEwcHggMCAwfS5BY3Rpb24gLmFjdGlvbnNoZWV0LWRpYWxvZyAuZGlhbG9nOmhvdmVye29wYWNpdHk6LjV9Lm5vbmV7ZGlzcGxheTpub25lfS5kaWFsb2ctent0cmFuc2l0aW9uOmFsbCAwLjVzIGVhc2UtaW4tb3V0fVxcblwiLCBcIlwiXSk7XG5cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiKnttYXJnaW46MDtwYWRkaW5nOjA7bGlzdC1zdHlsZTpub25lO3RleHQtZGVjb3JhdGlvbjpub25lfS5sdWNreURyYXd7d2lkdGg6NDIwcHh9LnByaXple2ZvbnQtc2l6ZTozMHB4fS5sb3R0ZXJ5e3dpZHRoOjI0MHB4O21hcmdpbjozMHB4IGF1dG87cG9zaXRpb246cmVsYXRpdmV9LmxvdHRlcnkgbGl7d2lkdGg6ODBweDtoZWlnaHQ6ODBweDtib3JkZXI6MXB4IHNvbGlkICMwMDA7Ym94LXNpemluZzpib3JkZXItYm94O3RleHQtYWxpZ246Y2VudGVyO2xpbmUtaGVpZ2h0OjgwcHg7cG9zaXRpb246YWJzb2x1dGV9LmxvdHRlcnkgbGk6bnRoLW9mLXR5cGUoMSl7bGVmdDowO3RvcDowfS5sb3R0ZXJ5IGxpOm50aC1vZi10eXBlKDIpe2xlZnQ6ODBweDt0b3A6MH0ubG90dGVyeSBsaTpudGgtb2YtdHlwZSgzKXtsZWZ0OjE2MHB4O3RvcDowfS5sb3R0ZXJ5IGxpOm50aC1vZi10eXBlKDQpe2xlZnQ6MTYwcHg7dG9wOjgwcHh9LmxvdHRlcnkgbGk6bnRoLW9mLXR5cGUoNSl7bGVmdDoxNjBweDt0b3A6MTYwcHh9LmxvdHRlcnkgbGk6bnRoLW9mLXR5cGUoNil7bGVmdDo4MHB4O3RvcDoxNjBweH0ubG90dGVyeSBsaTpudGgtb2YtdHlwZSg3KXtsZWZ0OjA7dG9wOjE2MHB4fS5sb3R0ZXJ5IGxpOm50aC1vZi10eXBlKDgpe2xlZnQ6MDt0b3A6ODBweH0uZG94e3dpZHRoOjgwcHg7aGVpZ2h0OjgwcHg7Ym9yZGVyOjFweCBzb2xpZCAjMDAwO2JveC1zaXppbmc6Ym9yZGVyLWJveDt0ZXh0LWFsaWduOmNlbnRlcjtsaW5lLWhlaWdodDo4MHB4O3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6ODBweDt0b3A6ODBweDtjdXJzb3I6cG9pbnRlcjtiYWNrZ3JvdW5kOmdvbGR9LmFjdGl2ZXM6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowO2NvbnRlbnQ6XFxcIlxcXCI7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtiYWNrZ3JvdW5kOnJnYmEoMCwwLDAsMC4xKX1cXG5cIiwgXCJcIl0pO1xuXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5hbmRzLWhlYWRlciBwe21hcmdpbjoyZW0gMDtmb250LXNpemU6MTVweH0uYW5kcy1oZWFkZXItY29udGVudHtwYWRkaW5nOjEwcHg7ZGlzcGxheTpmbGV4fS5hbmRzLWhlYWRlci1jb250ZW50IC5hbmRzLWNvbnRlbnQtbGVmdCwuYW5kcy1oZWFkZXItY29udGVudCAuYW5kcy1jb250ZW50LXJpZ2h0e21pbi13aWR0aDo0ODBweDttYXJnaW4tcmlnaHQ6MWVtO3BhZGRpbmc6MWVtIDFlbTtib3JkZXI6MXB4IHNvbGlkICNjY2NjY2M7Ym9yZGVyLXJhZGl1czo1cHh9LmFuZHMtY29udGVudC1yaWdodDpob3ZlciwuYW5kcy1jb250ZW50LWxlZnQ6aG92ZXJ7Ym94LXNoYWRvdzowcHggMXB4IDJweCAwcHggIzk5OX0uYW5kcy1jb250ZW50LWxlZnQtdGV4dHtmb250LXNpemU6MTRweH0uYW5kcy1jb250ZW50LWxlZnQtdGV4dCBwe21hcmdpbi10b3A6MjBweDt3aWR0aDozNzBweH1cXG5cIiwgXCJcIl0pO1xuXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5mdWktYnV0dG9ue291dGxpbmU6MDtib3JkZXI6bm9uZTtwYWRkaW5nOjRweCAxNnB4O2xpbmUtaGVpZ2h0OjIycHg7dHJhbnNpdGlvbjphbGwgMjUwbXM7Y3Vyc29yOnBvaW50ZXJ9LmZ1aS1idXR0b246Zm9jdXN7b3V0bGluZTpub25lfS5mdWktYnV0dG9uLW5vcm1hbHtjb2xvcjojMzMzO2JvcmRlcjoxcHggc29saWQgI2IzYjNiMztiYWNrZ3JvdW5kOndoaXRlfS5mdWktYnV0dG9uLXJlZHtjb2xvcjojZmZmZmZmO2JhY2tncm91bmQ6cmVkfS5mdWktYnV0dG9uLWltcG9ydGFudHtjb2xvcjp3aGl0ZTtib3JkZXI6MXB4IHNvbGlkICMxODkwZmY7YmFja2dyb3VuZDojMTg5MGZmfS5mdWktYnV0dG9uOmFjdGl2ZXtvcGFjaXR5OjAuNX1cXG5cIiwgXCJcIl0pO1xuXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5jaG9pY2UtYm9keXttYXJnaW4tdG9wOjMwcHg7d2lkdGg6NTAwcHg7ZGlzcGxheTpmbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYmV0d2Vlbn0uY2hvaWNlLWJvZHkgLmNob2ljZXt3aWR0aDo3MHB4O2hlaWdodDozMHB4O2NvbG9yOiMwMDliZjU7Ym9yZGVyLXJhZGl1czozcHg7Ym9yZGVyOjFweCBzb2xpZCAjMDA5YmY1O3RleHQtYWxpZ246Y2VudGVyO2xpbmUtaGVpZ2h0OjMwcHh9LmNob2ljZS1ib2R5IC5hY3RpdmV7YmFja2dyb3VuZDojZmQ3NTIyO2JvcmRlcjoxcHggc29saWQgI2ZkNzUyMjtjb2xvcjojZmZmfVxcblwiLCBcIlwiXSk7XG5cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmZ1aS1jaXR5U2VsZWN0LWJvZHl7b3ZlcmZsb3c6aGlkZGVufS5mdWktY2l0eVNlbGVjdC1kaWFsb2d7cG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7YmFja2dyb3VuZDp3aGl0ZX0uZnVpLWNpdHlTZWxlY3QtZGlhbG9nPmhlYWRlcntiYWNrZ3JvdW5kOiNmZmNhMDA7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2ZvbnQtc2l6ZToxNnB4O3Bvc2l0aW9uOnJlbGF0aXZlO2xpbmUtaGVpZ2h0OjUwcHg7aGVpZ2h0OjUwcHh9LmZ1aS1jaXR5U2VsZWN0LWRpYWxvZz5oZWFkZXI+Lmljb257cG9zaXRpb246YWJzb2x1dGU7bGVmdDowfVxcblwiLCBcIlwiXSk7XG5cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmZ1aS1kaWFsb2d7cG9zaXRpb246Zml4ZWQ7YmFja2dyb3VuZDp3aGl0ZTttaW4td2lkdGg6MjBlbTt6LWluZGV4OjI7Ym9yZGVyLXJhZGl1czo0cHg7dG9wOjUwJTtsZWZ0OjUwJTt0cmFuc2Zvcm06dHJhbnNsYXRlKC01MCUsIC01MCUpfS5mdWktZGlhbG9nLW1hc2t7cG9zaXRpb246Zml4ZWQ7dG9wOjA7bGVmdDowO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7YmFja2dyb3VuZDpyZ2JhKDAsMCwwLDAuNSk7ei1pbmRleDoxfS5mdWktZGlhbG9nLWhlYWRlcntmb250LXNpemU6MTRweDtwYWRkaW5nOjhweCAxNnB4O2JvcmRlci1ib3R0b206MXB4IHNvbGlkIGdyZXl9LmZ1aS1kaWFsb2ctbWFpbntwYWRkaW5nOjhweCAxNnB4O21pbi1oZWlnaHQ6NmVtfS5mdWktZGlhbG9nLWZvb3RlcntwYWRkaW5nOjhweCAxNnB4O2JvcmRlci10b3A6MXB4IHNvbGlkIGdyZXk7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpmbGV4LWVuZH0uZnVpLWRpYWxvZy1jbG9zZXtwb3NpdGlvbjphYnNvbHV0ZTtib3R0b206MTAwJTtsZWZ0OjEwMCU7YmFja2dyb3VuZDojMTg5MGZmO3dpZHRoOjJlbTtoZWlnaHQ6MmVtO2JvcmRlci1yYWRpdXM6NTAlO3RyYW5zZm9ybTp0cmFuc2xhdGUoLTUwJSwgNTAlKTtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjthbGlnbi1pdGVtczpjZW50ZXI7Y29sb3I6d2hpdGV9XFxuXCIsIFwiXCJdKTtcblxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZHJhZ3B1bGwgLmRyYWdwdWxsLXRpdGxle2NvbG9yOiM2MzAwZTY7bWFyZ2luLWJvdHRvbTo1cHh9Lmxpc3R7aGVpZ2h0OjMwMHB4O21hcmdpbi10b3A6NDBweDtib3JkZXItcmFkaXVzOjNweDtsaXN0LXN0eWxlOm5vbmU7bWFyZ2luOjA7cG9zaXRpb246cmVsYXRpdmV9LndyYXBwZXJ7b3ZlcmZsb3c6aGlkZGVuO21hcmdpbjoxMDBweCBhdXRvO3BhZGRpbmc6MTBweH0uaXRlbXt3aWR0aDoxMTBweDtjb2xvcjojYTMwMGVlO2JvcmRlcjoxcHggc29saWQgIzAzNzFlZTtib3JkZXItcmFkaXVzOjNweDtwb3NpdGlvbjphYnNvbHV0ZTtkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcjt0cmFuc2l0aW9uOmFsbCAwLjVzIGVhc2UtaW4tb3V0fS5kcmFnZ2luZ0l0ZW17dHJhbnNpdGlvbjpzY2FsZSgxLjA2KTtvcGFjaXR5OjAuN30ubHV4dW4tbGlzdHtwYWRkaW5nOjEwcHg7dGV4dC1hbGlnbjpjZW50ZXI7d2lkdGg6NDAwcHg7bWFyZ2luLXRvcDo0MHB4O2JvcmRlci1yYWRpdXM6M3B4O2JvcmRlcjoxcHggc29saWQgY3lhbn0ubHV4dW4tbGlzdCBsaXtjb2xvcjojYTMwMGVlO3BhZGRpbmc6NXB4O2hlaWdodDozNXB4O21hcmdpbi1ib3R0b206NXB4O2JvcmRlcjoxcHggc29saWQgIzAzNzFlZTt0cmFuc2l0aW9uOmFsbCAwLjVzIGVhc2UtaW4tb3V0O2JvcmRlci1yYWRpdXM6M3B4fS5sdXh1bi1saXN0IGxpOm50aC1jaGlsZCgxKXtjb2xvcjojMDBmODBjfS5sdXh1bi1saXN0IGxpOm50aC1jaGlsZCgyKXtjb2xvcjpyZWR9Lmx1eHVuLWxpc3QgbGk6bnRoLWNoaWxkKDMpe2NvbG9yOiNmMGR9Lmx1eHVuLWxpc3QgbGk6bnRoLWNoaWxkKDQpe2NvbG9yOiNmOTB9XFxuXCIsIFwiXCJdKTtcblxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZnVpLWZvcm0tdGFibGV7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlfS5mdWktZm9ybS1sYWJlbHtsaW5lLWhlaWdodDozMnB4fS5mdWktZm9ybS10ZHt2ZXJ0aWNhbC1hbGlnbjp0b3A7cGFkZGluZy10b3A6MDtwYWRkaW5nLWJvdHRvbTo4cHh9LmZ1aS1mb3JtLXRyOmxhc3QtY2hpbGQgLmZ1aS1mb3JtLXRke3BhZGRpbmctYm90dG9tOjB9LmZ1aS1mb3JtLXRkKy5mdWktZm9ybS10ZHtwYWRkaW5nLWxlZnQ6MTZweH0uZnVpLWZvcm0tZXJyb3J7Y29sb3I6cmVkO21hcmdpbi10b3A6NHB4O2ZvbnQtc2l6ZTowLjhlbX1cXG5cIiwgXCJcIl0pO1xuXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5hbmRzLWhlYWRlciBwe21hcmdpbjoyZW0gMDtmb250LXNpemU6MTVweH0uYW5kcy1oZWFkZXItY29udGVudHtoZWlnaHQ6NTAwcHg7cGFkZGluZzoxMHB4O2Rpc3BsYXk6ZmxleH0uYW5kcy1oZWFkZXItY29udGVudCAuYW5kcy1jb250ZW50LWxlZnQsLmFuZHMtaGVhZGVyLWNvbnRlbnQgLmFuZHMtY29udGVudC1yaWdodHttaW4td2lkdGg6NDgwcHg7bWFyZ2luLXJpZ2h0OjFlbTtwYWRkaW5nOjFlbSAxZW07Ym9yZGVyOjFweCBzb2xpZCAjY2NjY2NjO2JvcmRlci1yYWRpdXM6NXB4fS5hbmRzLWhlYWRlci1jb250ZW50IC5hbmRzLWNvbnRlbnQtcmlnaHR7b3ZlcmZsb3cteTpzY3JvbGx9LmFuZHMtY29udGVudC1yaWdodDpob3ZlciwuYW5kcy1jb250ZW50LWxlZnQ6aG92ZXJ7Ym94LXNoYWRvdzowcHggMXB4IDJweCAwcHggIzk5OX0uYW5kcy1jb250ZW50LWxlZnQtdGV4dHtmb250LXNpemU6MTRweH0uYW5kcy1jb250ZW50LWxlZnQtdGV4dCBwe21hcmdpbi10b3A6MjBweDt3aWR0aDozNzBweH1cXG5cIiwgXCJcIl0pO1xuXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5hbmRzLWd1YW53YW57d2lkdGg6MTAwJTtoZWlnaHQ6NTBweDtiYWNrZ3JvdW5kLWNvbG9yOiNkZGRkZGQ7bGluZS1oZWlnaHQ6NTBweH1we21hcmdpbjo1cHggMDtmb250LXNpemU6MTRweH0uY3JpdGlje21hcmdpbi10b3A6MjBweH1cXG5cIiwgXCJcIl0pO1xuXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5mdWktaWNvbnt3aWR0aDoxLjRlbTtoZWlnaHQ6MS40ZW19XFxuXCIsIFwiXCJdKTtcblxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJbY2xhc3NePWZ1aS1de2JveC1zaXppbmc6Ym9yZGVyLWJveH1bY2xhc3NePWZ1aS1dOjphZnRlcixbY2xhc3NePWZ1aS1dOjpiZWZvcmV7Ym94LXNpemluZzpib3JkZXItYm94fWJ1dHRvbntib3gtc2l6aW5nOmJvcmRlci1ib3g7aGVpZ2h0OjMycHg7bWFyZ2luOjAgNHB4O2JvcmRlci1yYWRpdXM6NHB4fWJ1dHRvbjpmaXJzdC1jaGlsZHttYXJnaW4tbGVmdDowfWJ1dHRvbjpsYXN0LWNoaWxke21hcmdpbi1yaWdodDowfVxcblwiLCBcIlwiXSk7XG5cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmZ1aS1pbnB1dHtib3JkZXI6MXB4IHNvbGlkICNkZGQ7bGluZS1oZWlnaHQ6MjJweDtwYWRkaW5nOjRweCA4cHg7Ym9yZGVyLXJhZGl1czo0cHg7Ym94LXNoYWRvdzowIDAgMCAycHggcmdiYSgyNCwxNDQsMjU1LDApO3RyYW5zaXRpb246Ym94LXNoYWRvdyAyNTBtc30uZnVpLWlucHV0OmZvY3Vze291dGxpbmU6bm9uZTtib3JkZXItY29sb3I6IzE4OTBmZjtib3gtc2hhZG93OjAgMCAwIDJweCByZ2JhKDI0LDE0NCwyNTUsMC41KX1cXG5cIiwgXCJcIl0pO1xuXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5hbmRzLWhlYWRlciBwe21hcmdpbjoyZW0gMDtmb250LXNpemU6MTVweH0uYW5kcy1oZWFkZXItY29udGVudHtwYWRkaW5nOjEwcHg7ZGlzcGxheTpmbGV4fS5hbmRzLWhlYWRlci1jb250ZW50IC5hbmRzLWNvbnRlbnQtbGVmdCwuYW5kcy1oZWFkZXItY29udGVudCAuYW5kcy1jb250ZW50LXJpZ2h0e21pbi13aWR0aDo0ODBweDttYXJnaW4tcmlnaHQ6MWVtO3BhZGRpbmc6MWVtIDFlbTtib3JkZXI6MXB4IHNvbGlkICNjY2NjY2M7Ym9yZGVyLXJhZGl1czo1cHh9LmFuZHMtY29udGVudC1yaWdodDpob3ZlciwuYW5kcy1jb250ZW50LWxlZnQ6aG92ZXJ7Ym94LXNoYWRvdzowcHggMXB4IDJweCAwcHggIzk5OX0uYW5kcy1jb250ZW50LWxlZnQtdGV4dHtmb250LXNpemU6MTRweH0uYW5kcy1jb250ZW50LWxlZnQtdGV4dCBwe21hcmdpbi10b3A6MjBweDt3aWR0aDozNzBweH1cXG5cIiwgXCJcIl0pO1xuXG4iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiKShmYWxzZSk7XG4vLyBNb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi54e2hlaWdodDo0MHB4O2JhY2tncm91bmQ6IzQyODVmNDttYXJnaW46NHB4IDA7Y29sb3I6d2hpdGV9Lnl7YmFja2dyb3VuZDojNWE5NWY1O21hcmdpbjo0cHggMDtjb2xvcjp3aGl0ZX0uentiYWNrZ3JvdW5kOiMzNGE4NTM7d2lkdGg6MTAwcHg7bWFyZ2luOjRweCAwO2NvbG9yOndoaXRlfS56Ky55LC55Ky56LC56Ky5ndS1sYXlvdXR7bWFyZ2luLWxlZnQ6OHB4fVxcblwiLCBcIlwiXSk7XG5cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmd1LWxheW91dHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5ndS1sYXlvdXQtY29udGVudHtmbGV4LWdyb3c6MX0uZ3UtbGF5b3V0IC5ndS1sYXlvdXR7ZmxleC1ncm93OjE7ZmxleC1kaXJlY3Rpb246cm93fS5ndS1sYXlvdXQtaGFzQXNpZGV7ZmxleC1kaXJlY3Rpb246cm93fS5ndS1sYXlvdXQtaGFzQXNpZGUgLmd1LWxheW91dHtmbGV4LWRpcmVjdGlvbjpjb2x1bW59XFxuXCIsIFwiXCJdKTtcblxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuY29udGFpbmVyc3toZWlnaHQ6MTAwdmg7b3ZlcmZsb3c6c2Nyb2xsfS5jb250YWluZXJzIC5pdGVtc3toZWlnaHQ6MzBweDtib3JkZXI6MXB4IHNvbGlkICNlZWU7cGFkZGluZzo2cHggMTBweDtjdXJzb3I6cG9pbnRlcn0ucGFuZWx7Ym9yZGVyOjFweCBzb2xpZCByZWR9XFxuXCIsIFwiXCJdKTtcblxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIueHVlLXJhZGlve2Rpc3BsYXk6aW5saW5lLWZsZXg7anVzdGlmeS1jb250ZW50OmZsZXgtc3RhcnQ7YWxpZ24taXRlbXM6ZmxleC1zdGFydDtjb2xvcjpyZ2JhKDAsMCwwLDAuNjUpO2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjIycHh9Lnh1ZS1yYWRpby52ZXJ0aWNhbHtmbGV4LWRpcmVjdGlvbjpjb2x1bW59Lnh1ZS1yYWRpbyAueHVlLW9wdGlvbntkaXNwbGF5OmlubGluZS1mbGV4O2p1c3RpZnktY29udGVudDpmbGV4LXN0YXJ0O2FsaWduLWl0ZW1zOmNlbnRlcjtjdXJzb3I6cG9pbnRlcn0ueHVlLXJhZGlvIC54dWUtb3B0aW9uPi5sYWJlbC1kb3R7d2lkdGg6MTZweDtoZWlnaHQ6MTZweDtib3JkZXItcmFkaXVzOjUwJTtib3JkZXI6MXB4IHNvbGlkO2JvcmRlci1jb2xvcjpyZ2JhKDAsMCwwLDAuMTUpO2Rpc3BsYXk6ZmxleDtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO2FsaWduLWNvbnRlbnQ6Y2VudGVyO3Bvc2l0aW9uOnJlbGF0aXZlO3RyYW5zaXRpb246YWxsIDAuM3MgY3ViaWMtYmV6aWVyKDAuNzgsIDAuMTQsIDAuMTUsIDAuODYpfS54dWUtcmFkaW8gLnh1ZS1vcHRpb24+LmxhYmVsLWRvdDo6YWZ0ZXJ7cG9zaXRpb246YWJzb2x1dGU7dG9wOjNweDtsZWZ0OjNweDtjb250ZW50OicnO2Rpc3BsYXk6YmxvY2s7d2lkdGg6OHB4O2hlaWdodDo4cHg7YmFja2dyb3VuZC1jb2xvcjojMTg5MGZmO2JvcmRlci1yYWRpdXM6NTAlO29wYWNpdHk6MDt0cmFuc2Zvcm06c2NhbGUoMCk7dHJhbnNpdGlvbjphbGwgMC4zcyBjdWJpYy1iZXppZXIoMC43OCwgMC4xNCwgMC4xNSwgMC44Nil9Lnh1ZS1yYWRpbyAueHVlLW9wdGlvbjpob3Zlcj4ubGFiZWwtZG90e2JvcmRlci1jb2xvcjojMTg5MGZmfS54dWUtcmFkaW8gLnh1ZS1vcHRpb24uY2hlY2tlZCAubGFiZWwtZG90e2JvcmRlci1jb2xvcjojMTg5MGZmfS54dWUtcmFkaW8gLnh1ZS1vcHRpb24uY2hlY2tlZCAubGFiZWwtZG90OjphZnRlcntvcGFjaXR5OjE7dHJhbnNmb3JtOnNjYWxlKDEpfS54dWUtcmFkaW8gLnh1ZS1vcHRpb24+LmxhYmVsLXRleHR7cGFkZGluZzowIDhweDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7dHJhbnNpdGlvbjphbGwgMC4zcyBjdWJpYy1iZXppZXIoMC43OCwgMC4xNCwgMC4xNSwgMC44Nil9Lnh1ZS1yYWRpbyAueHVlLW9wdGlvbi5idXR0b24tc3R5bGU+LmxhYmVsLXRleHR7cGFkZGluZzo0cHggMTVweDtib3JkZXI6MXB4IHNvbGlkO2JvcmRlci1jb2xvcjpyZ2JhKDAsMCwwLDAuMTUpfS54dWUtcmFkaW8gLnh1ZS1vcHRpb24uYnV0dG9uLXN0eWxlPi5sYWJlbC10ZXh0OmhvdmVye2NvbG9yOiMxODkwZmZ9Lnh1ZS1yYWRpbyAueHVlLW9wdGlvbi5idXR0b24tc3R5bGU6bm90KDpmaXJzdC1jaGlsZCk+LmxhYmVsLXRleHR7bWFyZ2luLWxlZnQ6LTFweH0ueHVlLXJhZGlvIC54dWUtb3B0aW9uLmJ1dHRvbi1zdHlsZTpmaXJzdC1jaGlsZD4ubGFiZWwtdGV4dHtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjRweDtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjRweDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czowO2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjB9Lnh1ZS1yYWRpbyAueHVlLW9wdGlvbi5idXR0b24tc3R5bGU6bGFzdC1jaGlsZD4ubGFiZWwtdGV4dHtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjA7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czowO2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjRweDtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czo0cHh9Lnh1ZS1yYWRpbyAueHVlLW9wdGlvbi5idXR0b24tc3R5bGUuY2hlY2tlZD4ubGFiZWwtdGV4dHtiYWNrZ3JvdW5kLWNvbG9yOiMxODkwZmY7Y29sb3I6I2ZmZjtwb3NpdGlvbjpyZWxhdGl2ZTt6LWluZGV4OjE7Ym9yZGVyLWNvbG9yOiMxODkwZmZ9Lnh1ZS1yYWRpbyAueHVlLW9wdGlvbi5idXR0b24tc3R5bGUuY2hlY2tlZD4ubGFiZWwtdGV4dDpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOiM0MGE5ZmY7Ym9yZGVyLWNvbG9yOiM0MGE5ZmZ9Lnh1ZS1yYWRpbyAueHVlLW9wdGlvbi5idXR0b24tc3R5bGUudmVydGljYWw+LmxhYmVsLXRleHR7bWFyZ2luLWxlZnQ6MDttaW4td2lkdGg6MTIwcHg7dGV4dC1hbGlnbjpjZW50ZXJ9Lnh1ZS1yYWRpbyAueHVlLW9wdGlvbi5idXR0b24tc3R5bGUudmVydGljYWw6bm90KDpmaXJzdC1jaGlsZCk+LmxhYmVsLXRleHR7bWFyZ2luLXRvcDotMXB4fS54dWUtcmFkaW8gLnh1ZS1vcHRpb24uYnV0dG9uLXN0eWxlLnZlcnRpY2FsOmZpcnN0LWNoaWxkPi5sYWJlbC10ZXh0e2JvcmRlci10b3AtbGVmdC1yYWRpdXM6NHB4O2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6MDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czo0cHg7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MH0ueHVlLXJhZGlvIC54dWUtb3B0aW9uLmJ1dHRvbi1zdHlsZS52ZXJ0aWNhbDpsYXN0LWNoaWxkPi5sYWJlbC10ZXh0e2JvcmRlci10b3AtbGVmdC1yYWRpdXM6MDtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjRweDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czowO2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjRweH0ueHVlLXJhZGlvIC54dWUtb3B0aW9uLmRpc2FibGVkPi5sYWJlbC1kb3R7Y3Vyc29yOm5vdC1hbGxvd2VkO2JvcmRlci1jb2xvcjojZDlkOWQ5O2JhY2tncm91bmQtY29sb3I6I2U2ZTZlNn0ueHVlLXJhZGlvIC54dWUtb3B0aW9uLmRpc2FibGVkPi5sYWJlbC1kb3Q6OmFmdGVye2JhY2tncm91bmQtY29sb3I6cmdiYSgwLDAsMCwwLjM1KX0ueHVlLXJhZGlvIC54dWUtb3B0aW9uLmRpc2FibGVkPi5sYWJlbC10ZXh0e2N1cnNvcjpub3QtYWxsb3dlZDtjb2xvcjpyZ2JhKDAsMCwwLDAuMjUpfS54dWUtcmFkaW8gLnh1ZS1vcHRpb24uZGlzYWJsZWQ+LmxhYmVsLXRleHQ6aG92ZXJ7Y29sb3I6cmdiYSgwLDAsMCwwLjI1KX0ueHVlLXJhZGlvIC54dWUtb3B0aW9uLmRpc2FibGVkLmJ1dHRvbi1zdHlsZS5jaGVja2VkPi5sYWJlbC10ZXh0e2JhY2tncm91bmQtY29sb3I6I2U2ZTZlNjtib3JkZXItY29sb3I6I2Q5ZDlkOX0ueHVlLXJhZGlvIC54dWUtb3B0aW9uLmRpc2FibGVkLmJ1dHRvbi1zdHlsZS5jaGVja2VkPi5sYWJlbC10ZXh0OmhvdmVye2NvbG9yOiNmZmZ9XFxuXCIsIFwiXCJdKTtcblxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZnVpLXNjcm9sbHtwb3NpdGlvbjpyZWxhdGl2ZTtvdmVyZmxvdzpoaWRkZW59LmZ1aS1zY3JvbGwtaW5uZXJ7b3ZlcmZsb3c6YXV0bztwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtib3R0b206MDtsZWZ0OjA7cmlnaHQ6MH0uZnVpLXNjcm9sbC10cmFja3t3aWR0aDo4cHg7cG9zaXRpb246YWJzb2x1dGU7cmlnaHQ6MDt0b3A6MDtoZWlnaHQ6MTAwJX0uZnVpLXNjcm9sbC1iYXJ7aGVpZ2h0OjMwcHg7YmFja2dyb3VuZDpyZ2JhKDEyOCwxMjgsMTI4LDAuOCk7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDowcHg7d2lkdGg6NnB4O2JvcmRlci1yYWRpdXM6M3B4fVxcblwiLCBcIlwiXSk7XG5cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLnh1ZS1zd2l0Y2h7d2lkdGg6NDBweDtoZWlnaHQ6MjJweDtkaXNwbGF5OmlubGluZS1mbGV4O2JvcmRlci1jb2xvcjojMTg5MGZmO2JvcmRlci1yYWRpdXM6MTFweDtiYWNrZ3JvdW5kLWNvbG9yOnJnYmEoMCwwLDAsMC4yNSk7Y3Vyc29yOnBvaW50ZXI7dHJhbnNpdGlvbjphbGwgLjJzIGxpbmVhcjtwYWRkaW5nOjJweDtwb3NpdGlvbjpyZWxhdGl2ZX0ueHVlLXN3aXRjaD4ueHVlLXN3aXRjaC1jb3Jle3dpZHRoOjE4cHg7aGVpZ2h0OjE4cHg7Ym9yZGVyLXJhZGl1czo1MCU7YmFja2dyb3VuZC1jb2xvcjojZmZmO3RyYW5zZm9ybTp0cmFuc2xhdGVYKDApO3RyYW5zaXRpb246YWxsIC4ycyBsaW5lYXJ9Lnh1ZS1zd2l0Y2guY2hlY2tlZHtiYWNrZ3JvdW5kLWNvbG9yOiMxODkwZmZ9Lnh1ZS1zd2l0Y2guY2hlY2tlZD4ueHVlLXN3aXRjaC1jb3Jle3RyYW5zZm9ybTp0cmFuc2xhdGVYKDEwMCUpfS54dWUtc3dpdGNoLmRpc2FibGVke2N1cnNvcjpub3QtYWxsb3dlZH0ueHVlLXN3aXRjaC5kaXNhYmxlZDo6YWZ0ZXJ7Y29udGVudDonJztkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDtyaWdodDowO2JvdHRvbTowO2JvcmRlci1yYWRpdXM6aW5oZXJpdDtiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7b3BhY2l0eTowLjR9Lnh1ZS1zd2l0Y2guc21hbGx7d2lkdGg6MzJweDtoZWlnaHQ6MThweDtwYWRkaW5nOjJweH0ueHVlLXN3aXRjaC5zbWFsbD4ueHVlLXN3aXRjaC1jb3Jle3dpZHRoOjE0cHg7aGVpZ2h0OjE0cHh9XFxuXCIsIFwiXCJdKTtcblxuIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIudGFibGVze2xpbmUtaGVpZ2h0OjI1cHg7dGV4dC1hbGlnbjpjZW50ZXJ9LnRhYmxlcyAudGFibGUtdGh7d2lkdGg6MTIwcHh9Lm5vbmV7dmlzaWJpbGl0eTpoaWRkZW59LnZpc2libGV7dmlzaWJpbGl0eTp2aXNpYmxlfVxcblwiLCBcIlwiXSk7XG5cbiIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLmFuZHMtdHJlZS1sZXZlbC0xe21hcmdpbi1sZWZ0OjBweH0uYW5kcy10cmVlLWxldmVsLTJ7bWFyZ2luLWxlZnQ6MWVtfS5hbmRzLXRyZWUtbGV2ZWwtM3ttYXJnaW4tbGVmdDoxZW19LmFuZHMtdHJlZS1sZXZlbC00e21hcmdpbi1sZWZ0OjFlbX0uYW5kcy10cmVlLWxldmVsLTV7bWFyZ2luLWxlZnQ6MWVtfS5hbmRzLXRyZWUtbGV2ZWwtNnttYXJnaW4tbGVmdDoxZW19XFxuXCIsIFwiXCJdKTtcblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuICdAbWVkaWEgJyArIGl0ZW1bMl0gKyAneycgKyBjb250ZW50ICsgJ30nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IG1vZHVsZXNbaV07IC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcbiAgICAgIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG4gICAgICAvLyB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG4gICAgICAvLyBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cbiAgICAgIGlmIChpdGVtWzBdID09IG51bGwgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgaWYgKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgICAgaXRlbVsyXSA9ICcoJyArIGl0ZW1bMl0gKyAnKSBhbmQgKCcgKyBtZWRpYVF1ZXJ5ICsgJyknO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuICByZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufSIsIid1c2Ugc3RyaWN0JztcblxudmFyIHJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4vKipcbiAqIENvcHlyaWdodCAyMDE1LCBZYWhvbyEgSW5jLlxuICogQ29weXJpZ2h0cyBsaWNlbnNlZCB1bmRlciB0aGUgTmV3IEJTRCBMaWNlbnNlLiBTZWUgdGhlIGFjY29tcGFueWluZyBMSUNFTlNFIGZpbGUgZm9yIHRlcm1zLlxuICovXG52YXIgUkVBQ1RfU1RBVElDUyA9IHtcbiAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gIGNvbnRleHRUeXBlOiB0cnVlLFxuICBjb250ZXh0VHlwZXM6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yOiB0cnVlLFxuICBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM6IHRydWUsXG4gIG1peGluczogdHJ1ZSxcbiAgcHJvcFR5cGVzOiB0cnVlLFxuICB0eXBlOiB0cnVlXG59O1xudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gIG5hbWU6IHRydWUsXG4gIGxlbmd0aDogdHJ1ZSxcbiAgcHJvdG90eXBlOiB0cnVlLFxuICBjYWxsZXI6IHRydWUsXG4gIGNhbGxlZTogdHJ1ZSxcbiAgYXJndW1lbnRzOiB0cnVlLFxuICBhcml0eTogdHJ1ZVxufTtcbnZhciBGT1JXQVJEX1JFRl9TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICByZW5kZXI6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZVxufTtcbnZhciBNRU1PX1NUQVRJQ1MgPSB7XG4gICckJHR5cGVvZic6IHRydWUsXG4gIGNvbXBhcmU6IHRydWUsXG4gIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgZGlzcGxheU5hbWU6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBUWVBFX1NUQVRJQ1MgPSB7fTtcblRZUEVfU1RBVElDU1tyZWFjdElzLkZvcndhcmRSZWZdID0gRk9SV0FSRF9SRUZfU1RBVElDUztcblRZUEVfU1RBVElDU1tyZWFjdElzLk1lbW9dID0gTUVNT19TVEFUSUNTO1xuXG5mdW5jdGlvbiBnZXRTdGF0aWNzKGNvbXBvbmVudCkge1xuICAvLyBSZWFjdCB2MTYuMTEgYW5kIGJlbG93XG4gIGlmIChyZWFjdElzLmlzTWVtbyhjb21wb25lbnQpKSB7XG4gICAgcmV0dXJuIE1FTU9fU1RBVElDUztcbiAgfSAvLyBSZWFjdCB2MTYuMTIgYW5kIGFib3ZlXG5cblxuICByZXR1cm4gVFlQRV9TVEFUSUNTW2NvbXBvbmVudFsnJCR0eXBlb2YnXV0gfHwgUkVBQ1RfU1RBVElDUztcbn1cblxudmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xudmFyIGdldE93blByb3BlcnR5TmFtZXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcztcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2Y7XG52YXIgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZTtcbmZ1bmN0aW9uIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKHRhcmdldENvbXBvbmVudCwgc291cmNlQ29tcG9uZW50LCBibGFja2xpc3QpIHtcbiAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgLy8gZG9uJ3QgaG9pc3Qgb3ZlciBzdHJpbmcgKGh0bWwpIGNvbXBvbmVudHNcbiAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICB2YXIgaW5oZXJpdGVkQ29tcG9uZW50ID0gZ2V0UHJvdG90eXBlT2Yoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgIGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICAgIGtleXMgPSBrZXlzLmNvbmNhdChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlQ29tcG9uZW50KSk7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldFN0YXRpY3MgPSBnZXRTdGF0aWNzKHRhcmdldENvbXBvbmVudCk7XG4gICAgdmFyIHNvdXJjZVN0YXRpY3MgPSBnZXRTdGF0aWNzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuXG4gICAgICBpZiAoIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAhKGJsYWNrbGlzdCAmJiBibGFja2xpc3Rba2V5XSkgJiYgIShzb3VyY2VTdGF0aWNzICYmIHNvdXJjZVN0YXRpY3Nba2V5XSkgJiYgISh0YXJnZXRTdGF0aWNzICYmIHRhcmdldFN0YXRpY3Nba2V5XSkpIHtcbiAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlQ29tcG9uZW50LCBrZXkpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwiLypcbm9iamVjdC1hc3NpZ25cbihjKSBTaW5kcmUgU29yaHVzXG5AbGljZW5zZSBNSVRcbiovXG5cbid1c2Ugc3RyaWN0Jztcbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG52YXIgcHJvcElzRW51bWVyYWJsZSA9IE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbmZ1bmN0aW9uIHRvT2JqZWN0KHZhbCkge1xuXHRpZiAodmFsID09PSBudWxsIHx8IHZhbCA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcignT2JqZWN0LmFzc2lnbiBjYW5ub3QgYmUgY2FsbGVkIHdpdGggbnVsbCBvciB1bmRlZmluZWQnKTtcblx0fVxuXG5cdHJldHVybiBPYmplY3QodmFsKTtcbn1cblxuZnVuY3Rpb24gc2hvdWxkVXNlTmF0aXZlKCkge1xuXHR0cnkge1xuXHRcdGlmICghT2JqZWN0LmFzc2lnbikge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIERldGVjdCBidWdneSBwcm9wZXJ0eSBlbnVtZXJhdGlvbiBvcmRlciBpbiBvbGRlciBWOCB2ZXJzaW9ucy5cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTQxMThcblx0XHR2YXIgdGVzdDEgPSBuZXcgU3RyaW5nKCdhYmMnKTsgIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbmV3LXdyYXBwZXJzXG5cdFx0dGVzdDFbNV0gPSAnZGUnO1xuXHRcdGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MSlbMF0gPT09ICc1Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDIgPSB7fTtcblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IDEwOyBpKyspIHtcblx0XHRcdHRlc3QyWydfJyArIFN0cmluZy5mcm9tQ2hhckNvZGUoaSldID0gaTtcblx0XHR9XG5cdFx0dmFyIG9yZGVyMiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QyKS5tYXAoZnVuY3Rpb24gKG4pIHtcblx0XHRcdHJldHVybiB0ZXN0MltuXTtcblx0XHR9KTtcblx0XHRpZiAob3JkZXIyLmpvaW4oJycpICE9PSAnMDEyMzQ1Njc4OScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QzID0ge307XG5cdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jy5zcGxpdCgnJykuZm9yRWFjaChmdW5jdGlvbiAobGV0dGVyKSB7XG5cdFx0XHR0ZXN0M1tsZXR0ZXJdID0gbGV0dGVyO1xuXHRcdH0pO1xuXHRcdGlmIChPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCB0ZXN0MykpLmpvaW4oJycpICE9PVxuXHRcdFx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH0gY2F0Y2ggKGVycikge1xuXHRcdC8vIFdlIGRvbid0IGV4cGVjdCBhbnkgb2YgdGhlIGFib3ZlIHRvIHRocm93LCBidXQgYmV0dGVyIHRvIGJlIHNhZmUuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2hvdWxkVXNlTmF0aXZlKCkgPyBPYmplY3QuYXNzaWduIDogZnVuY3Rpb24gKHRhcmdldCwgc291cmNlKSB7XG5cdHZhciBmcm9tO1xuXHR2YXIgdG8gPSB0b09iamVjdCh0YXJnZXQpO1xuXHR2YXIgc3ltYm9scztcblxuXHRmb3IgKHZhciBzID0gMTsgcyA8IGFyZ3VtZW50cy5sZW5ndGg7IHMrKykge1xuXHRcdGZyb20gPSBPYmplY3QoYXJndW1lbnRzW3NdKTtcblxuXHRcdGZvciAodmFyIGtleSBpbiBmcm9tKSB7XG5cdFx0XHRpZiAoaGFzT3duUHJvcGVydHkuY2FsbChmcm9tLCBrZXkpKSB7XG5cdFx0XHRcdHRvW2tleV0gPSBmcm9tW2tleV07XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKGdldE93blByb3BlcnR5U3ltYm9scykge1xuXHRcdFx0c3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9scyhmcm9tKTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgc3ltYm9scy5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHRpZiAocHJvcElzRW51bWVyYWJsZS5jYWxsKGZyb20sIHN5bWJvbHNbaV0pKSB7XG5cdFx0XHRcdFx0dG9bc3ltYm9sc1tpXV0gPSBmcm9tW3N5bWJvbHNbaV1dO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRvO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBiaWdpbnQ6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiZXhwb3J0IGRlZmF1bHQgXCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcclxcbmltcG9ydCBCdXR0b25zcyBmcm9tICcuL2J1dHRvbidcXHJcXG5cXHJcXG5jb25zdCBCdXR0b25Bc3NlbWJseTM6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50ID0gKCkgPT4ge1xcclxcbiAgICByZXR1cm4gKFxcclxcbiAgICAgICAgPGRpdj5cXHJcXG4gICAgICAgICAgICAgICAgPEJ1dHRvbnNzIGNsYXNzTmFtZT1cXFwiYmFpamlhd2VpXFxcIiBkaXNhYmxlZD5cXHJcXG4gICAgICAgICAgICAgICAgICAgIExvYWRpbmcuLlxcclxcbiAgICAgICAgICAgICAgICA8L0J1dHRvbnNzPlxcclxcblxcclxcbiAgICAgICAgPC9kaXY+XFxyXFxuICAgICk7XFxyXFxufTtcXHJcXG5leHBvcnQgZGVmYXVsdCBCdXR0b25Bc3NlbWJseTM7XCI7IiwiZXhwb3J0IGRlZmF1bHQgXCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xcclxcbmltcG9ydCBCdXR0b25zcyBmcm9tICcuL2J1dHRvbidcXHJcXG5jb25zdCBCdXR0b25Bc3NlbWJseTE6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50ID0gKCkgPT4ge1xcclxcbiAgICByZXR1cm4gKFxcclxcbiAgICAgICAgPGRpdiA+XFxyXFxuICAgICAgICAgICAgPGRpdiA+XFxyXFxuICAgICAgICAgICAgICAgIDxCdXR0b25zcz7pu5jorqTmjInpkq48L0J1dHRvbnNzPlxcclxcbiAgICAgICAgICAgICAgICA8QnV0dG9uc3MgbGV2ZWw9XFxcImltcG9ydGFudFxcXCI+6JOd6Imy5oyJ6ZKuPC9CdXR0b25zcz5cXHJcXG4gICAgICAgICAgICAgICAgPEJ1dHRvbnNzIGxldmVsPVxcXCJyZWRcXFwiPue6ouiJsjwvQnV0dG9uc3M+XFxyXFxuICAgICAgICAgICAgPC9kaXY+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgKTtcXHJcXG59O1xcclxcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbkFzc2VtYmx5MTtcIjsiLCJleHBvcnQgZGVmYXVsdCBcImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XFxyXFxuXFxyXFxuXFxyXFxuY29uc3QgQnV0dG9uQXNzZW1ibHkyOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudCA9ICgpID0+IHtcXHJcXG4gICAgcmV0dXJuIChcXHJcXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVxcXCJhbmRzLWhlYWRlclxcXCI+XFxyXFxuXFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgKTtcXHJcXG59O1xcclxcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbkFzc2VtYmx5MjtcIjsiLCJleHBvcnQgZGVmYXVsdCBcImltcG9ydCBSZWFjdCwge3VzZVN0YXRlICxGcmFnbWVudH0gZnJvbSBcXFwicmVhY3RcXFwiO1xcclxcbmltcG9ydCBGb3JtLHtGb3JtVmFsdWV9IGZyb20gXFxcIi4vZm9ybVxcXCI7XFxyXFxuaW1wb3J0IFZhbGlkYXRvciwge25vRXJyb3J9IGZyb20gJy4vdmFsaWRhdG9yJztcXHJcXG5pbXBvcnQgQnV0dG9uc3MgZnJvbSAnLi4vYnV0dG9uL2J1dHRvbic7XFxyXFxuXFxyXFxuXFxyXFxuY29uc3QgdXNlcm5hbWVzID0gWydmcmFuaycsICdqYWNrJywgJ2ZyYW5rZnJhbmsnLCAnYWxpY2UnLCAnYm9iJ107XFxyXFxuY29uc3QgY2hlY2tVc2VyTmFtZSA9ICh1c2VybmFtZTogc3RyaW5nLCBzdWNjZWVkOiBGdW5jdGlvbiwgZmFpbDogKCkgPT4gdm9pZCkgPT4ge1xcclxcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcXHJcXG4gICAgICAgIGNvbnNvbGUubG9nKCfmiJHnjrDlnKjnn6XpgZPnlKjmiLflkI3mmK/lkKblrZjlnKgnKTtcXHJcXG4gICAgICAgIGlmICh1c2VybmFtZXMuaW5kZXhPZih1c2VybmFtZSkgPj0gMCkge1xcclxcbiAgICAgICAgICAgIGZhaWwoKTtcXHJcXG4gICAgICAgIH0gZWxzZSB7XFxyXFxuICAgICAgICAgICAgc3VjY2VlZCgpO1xcclxcbiAgICAgICAgfVxcclxcbiAgICB9LCAyMDAwKTtcXHJcXG59O1xcclxcblxcclxcbmNvbnN0IEZvcm1FeGFtcGxlOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudCA9ICgpID0+e1xcclxcbiAgICBjb25zdCBbZm9ybURhdGEsIHNldEZvcm1EYXRhXSA9IHVzZVN0YXRlPEZvcm1WYWx1ZT4oe1xcclxcbiAgICAgICAgdXNlcm5hbWU6ICcnLFxcclxcbiAgICAgICAgcGFzc3dvcmQ6ICcnXFxyXFxuICAgIH0pO1xcclxcbiAgICBjb25zdCBbZmllbGRzXT11c2VTdGF0ZShbXFxyXFxuXFxyXFxuICAgICAgICB7bmFtZTogJ3VzZXJuYW1lJywgbGFiZWw6ICflpLTlg48nLCBpbnB1dDoge3R5cGU6ICd0ZXh0J319LFxcclxcbiAgICAgICAge25hbWU6ICdwYXNzd29yZCcsIGxhYmVsOiAn5a+G56CBJywgaW5wdXQ6IHt0eXBlOiAncGFzc3dvcmQnfX0sXFxyXFxuICAgIF0pO1xcclxcbiAgICBjb25zdCBbZXJyb3JzLCBzZXRFcnJvcnNdID0gdXNlU3RhdGUoe30pO1xcclxcbiAgICBjb25zdCB2YWxpZGF0b3IgPSAodXNlcm5hbWU6IHN0cmluZykgPT4ge1xcclxcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHN0cmluZz4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xcclxcbiAgICAgICAgICAgIGNoZWNrVXNlck5hbWUodXNlcm5hbWUsIHJlc29sdmUsICgpID0+IHJlamVjdCgndW5pcXVlJykpO1xcclxcbiAgICAgICAgfSk7XFxyXFxuICAgIH07XFxyXFxuICAgIGNvbnN0IG9uU3VibWl0ID0gKGU6IFJlYWN0LkZvcm1FdmVudDxIVE1MRm9ybUVsZW1lbnQ+KSA9PiB7XFxyXFxuICAgICAgICBjb25zdCBydWxlcyA9IFtcXHJcXG4gICAgICAgICAgICB7a2V5OiAndXNlcm5hbWUnLCByZXF1aXJlZDogdHJ1ZX0sXFxyXFxuICAgICAgICAgICAge2tleTogJ3VzZXJuYW1lJywgbWluTGVuZ3RoOiA4LCBtYXhMZW5ndGg6IDE2fSxcXHJcXG4gICAgICAgICAgICB7a2V5OiAndXNlcm5hbWUnLCB2YWxpZGF0b3J9LFxcclxcbiAgICAgICAgICAgIHtrZXk6ICd1c2VybmFtZScsIHZhbGlkYXRvcn0sXFxyXFxuICAgICAgICAgICAge2tleTogJ3VzZXJuYW1lJywgcGF0dGVybjogL15bQS1aYS16MC05XSskL30sXFxyXFxuICAgICAgICAgICAge2tleTogJ3Bhc3N3b3JkJywgcmVxdWlyZWQ6IHRydWV9LFxcclxcbiAgICAgICAgICAgIHtrZXk6ICdwYXNzd29yZCcsIHZhbGlkYXRvcn0sXFxyXFxuICAgICAgICAgICAge2tleTogJ3Bhc3N3b3JkJywgdmFsaWRhdG9yfSxcXHJcXG4gICAgICAgIF07XFxyXFxuICAgICAgICBWYWxpZGF0b3IoZm9ybURhdGEsIHJ1bGVzLCAoZXJyb3JzKSA9PiB7XFxyXFxuICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3JzKTtcXHJcXG4gICAgICAgICAgICBzZXRFcnJvcnMoZXJyb3JzKTtcXHJcXG4gICAgICAgICAgICBpZiAobm9FcnJvcihlcnJvcnMpKSB7XFxyXFxuICAgICAgICAgICAgICBcXHJcXG4gICAgICAgICAgICB9XFxyXFxuICAgICAgICB9KTtcXHJcXG4gICAgfTtcXHJcXG4gICAgY29uc3QgdHJhbnNmb3JtRXJyb3IgPSAobWVzc2FnZTogc3RyaW5nKSA9PiB7XFxyXFxuICAgICAgICBjb25zdCBtYXA6IGFueSA9IHtcXHJcXG4gICAgICAgICAgICB1bmlxdWU6ICd1c2VybmFtZSBpcyB0YWtlbicsXFxyXFxuICAgICAgICAgICAgcmVxdWlyZWQ6ICdyZXF1aXJlZCcsXFxyXFxuICAgICAgICAgICAgbWluTGVuZ3RoOiAndG9vIHNob3J0JyxcXHJcXG4gICAgICAgICAgICBtYXhMZW5ndGg6ICd0b28gbG9uZycsXFxyXFxuICAgICAgICB9O1xcclxcbiAgICAgICAgcmV0dXJuIG1hcFttZXNzYWdlXTtcXHJcXG4gICAgfTtcXHJcXG5cXHJcXG4gICAgcmV0dXJuIChcXHJcXG4gICAgICAgIDxkaXY+XFxyXFxuICAgICAgICAgICAgPEZvcm0gdmFsdWU9e2Zvcm1EYXRhfVxcclxcbiAgICAgICAgICAgICAgICAgIGZpZWxkcz17ZmllbGRzfVxcclxcbiAgICAgICAgICAgICAgICAgIGJ1dHRvbnM9e1xcclxcbiAgICAgICAgICAgICAgICAgICAgICA8RnJhZ21lbnQ+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uc3MgdHlwZT1cXFwic3VibWl0XFxcIiBsZXZlbD1cXFwiaW1wb3J0YW50XFxcIj7mj5DkuqQ8L0J1dHRvbnNzPlxcclxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbnNzPui/lOWbnjwvQnV0dG9uc3M+XFxyXFxuICAgICAgICAgICAgICAgICAgICAgIDwvRnJhZ21lbnQ+XFxyXFxuICAgICAgICAgICAgICAgICAgfVxcclxcbiAgICAgICAgICAgICAgICAgIGVycm9ycz17ZXJyb3JzfVxcclxcbiAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybUVycm9yPXt0cmFuc2Zvcm1FcnJvcn1cXHJcXG4gICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KG5ld1ZhbHVlKSA9PiBzZXRGb3JtRGF0YShuZXdWYWx1ZSl9XFxyXFxuICAgICAgICAgICAgICAgICAgb25TdWJtaXQ9e29uU3VibWl0fVxcclxcbiAgICAgICAgICAgIC8+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgKTtcXHJcXG59O1xcclxcblxcclxcbmV4cG9ydCBkZWZhdWx0IEZvcm1FeGFtcGxlO1wiOyIsImV4cG9ydCBkZWZhdWx0IFwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXHJcXG5pbXBvcnQgSWNvbiBmcm9tIFxcXCIuL2ljb25cXFwiO1xcclxcblxcclxcblxcclxcbmNvbnN0IEljb25FeGFtcGxlMTogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQgPSAoKSA9PiB7XFxyXFxuICAgIHJldHVybiAoXFxyXFxuICAgICAgICA8ZGl2PlxcclxcbiAgICAgICAgICAgIDxJY29uIG5hbWU9XFxcInFxXFxcIj48L0ljb24+XFxyXFxuICAgICAgICAgICAgPEljb24gbmFtZT1cXFwiYmFpZHVcXFwiPjwvSWNvbj5cXHJcXG4gICAgICAgICAgICA8SWNvbiBuYW1lPVxcXCJ3ZWNoYWxcXFwiPjwvSWNvbj5cXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICApO1xcclxcbn07XFxyXFxuXFxyXFxuZXhwb3J0IGRlZmF1bHQgSWNvbkV4YW1wbGUxO1wiOyIsImV4cG9ydCBkZWZhdWx0IFwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcXHJcXG5cXHJcXG5jb25zdCBJY29uRXhhbXBsZTI6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50ID0gKCkgPT4ge1xcclxcbiAgICByZXR1cm4gKFxcclxcbiAgICAgICAgPGRpdj5cXHJcXG4gICAgICAgICAgICBleGFtcGxlIDJcXHJcXG4gICAgICAgIDwvZGl2PlxcclxcbiAgICApO1xcclxcbn07XFxyXFxuXFxyXFxuZXhwb3J0IGRlZmF1bHQgSWNvbkV4YW1wbGUyO1wiOyIsImV4cG9ydCBkZWZhdWx0IFwiaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGV9IGZyb20gXFxcInJlYWN0XFxcIjtcXHJcXG5pbXBvcnQgSW5wdXQgZnJvbSBcXFwiLi9pbnB1dFxcXCI7XFxyXFxuY29uc3QgSW5wdXRFeGFtcGxlOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudCA9ICgpID0+IHtcXHJcXG4gICAgY29uc3QgW3ZhbHVlLCBzZXR2YWx1ZV0gPSB1c2VTdGF0ZSgn5L2g5aW9JylcXHJcXG4gICAgcmV0dXJuIChcXHJcXG4gICAgICAgIDxkaXY+XFxyXFxuICAgICAgICAgICAgPElucHV0IHZhbHVlPXt2YWx1ZX0gb25DaGFuZ2U9e1xcclxcbiAgICAgICAgICAgICAgICAoZXZlbnQ6IHsgdGFyZ2V0OiB7IHZhbHVlOiBSZWFjdC5TZXRTdGF0ZUFjdGlvbjxzdHJpbmc+OyB9OyB9KSA9PiB7XFxyXFxuICAgICAgICAgICAgICAgIHNldHZhbHVlKGV2ZW50LnRhcmdldC52YWx1ZSlcXHJcXG4gICAgICAgICAgICB9fS8+XFxyXFxuICAgICAgICAgICAgPGRpdj57dmFsdWV9PC9kaXY+XFxyXFxuICAgICAgICA8L2Rpdj5cXHJcXG4gICAgKVxcclxcbn1cXHJcXG5leHBvcnQgZGVmYXVsdCBJbnB1dEV4YW1wbGU7XCI7IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHkoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHkoMjI3KSk7dmFyIGJhPW5ldyBTZXQsY2E9e307ZnVuY3Rpb24gZGEoYSxiKXtlYShhLGIpO2VhKGErXCJDYXB0dXJlXCIsYil9XG5mdW5jdGlvbiBlYShhLGIpe2NhW2FdPWI7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKyliYS5hZGQoYlthXSl9XG52YXIgZmE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLGhhPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxpYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFxuamE9e30sa2E9e307ZnVuY3Rpb24gbGEoYSl7aWYoaWEuY2FsbChrYSxhKSlyZXR1cm4hMDtpZihpYS5jYWxsKGphLGEpKXJldHVybiExO2lmKGhhLnRlc3QoYSkpcmV0dXJuIGthW2FdPSEwO2phW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIG1hKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gbmEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8bWEoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiBCKGEsYixjLGQsZSxmLGcpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mO3RoaXMucmVtb3ZlRW1wdHlTdHJpbmc9Z312YXIgRD17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDAsITEsYSxudWxsLCExLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtEW2JdPW5ldyBCKGIsMSwhMSxhWzFdLG51bGwsITEsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDIsITEsYSxudWxsLCExLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGRpc2FibGVSZW1vdGVQbGF5YmFjayBmb3JtTm9WYWxpZGF0ZSBoaWRkZW4gbG9vcCBub01vZHVsZSBub1ZhbGlkYXRlIG9wZW4gcGxheXNJbmxpbmUgcmVhZE9ubHkgcmVxdWlyZWQgcmV2ZXJzZWQgc2NvcGVkIHNlYW1sZXNzIGl0ZW1TY29wZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExLCExKX0pO1xuW1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSwzLCEwLGEsbnVsbCwhMSwhMSl9KTtbXCJjYXB0dXJlXCIsXCJkb3dubG9hZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0RbYV09bmV3IEIoYSw0LCExLGEsbnVsbCwhMSwhMSl9KTtbXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDYsITEsYSxudWxsLCExLCExKX0pO1tcInJvd1NwYW5cIixcInN0YXJ0XCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDUsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7dmFyIG9hPS9bXFwtOl0oW2Etel0pL2c7ZnVuY3Rpb24gcGEoYSl7cmV0dXJuIGFbMV0udG9VcHBlckNhc2UoKX1cblwiYWNjZW50LWhlaWdodCBhbGlnbm1lbnQtYmFzZWxpbmUgYXJhYmljLWZvcm0gYmFzZWxpbmUtc2hpZnQgY2FwLWhlaWdodCBjbGlwLXBhdGggY2xpcC1ydWxlIGNvbG9yLWludGVycG9sYXRpb24gY29sb3ItaW50ZXJwb2xhdGlvbi1maWx0ZXJzIGNvbG9yLXByb2ZpbGUgY29sb3ItcmVuZGVyaW5nIGRvbWluYW50LWJhc2VsaW5lIGVuYWJsZS1iYWNrZ3JvdW5kIGZpbGwtb3BhY2l0eSBmaWxsLXJ1bGUgZmxvb2QtY29sb3IgZmxvb2Qtb3BhY2l0eSBmb250LWZhbWlseSBmb250LXNpemUgZm9udC1zaXplLWFkanVzdCBmb250LXN0cmV0Y2ggZm9udC1zdHlsZSBmb250LXZhcmlhbnQgZm9udC13ZWlnaHQgZ2x5cGgtbmFtZSBnbHlwaC1vcmllbnRhdGlvbi1ob3Jpem9udGFsIGdseXBoLW9yaWVudGF0aW9uLXZlcnRpY2FsIGhvcml6LWFkdi14IGhvcml6LW9yaWdpbi14IGltYWdlLXJlbmRlcmluZyBsZXR0ZXItc3BhY2luZyBsaWdodGluZy1jb2xvciBtYXJrZXItZW5kIG1hcmtlci1taWQgbWFya2VyLXN0YXJ0IG92ZXJsaW5lLXBvc2l0aW9uIG92ZXJsaW5lLXRoaWNrbmVzcyBwYWludC1vcmRlciBwYW5vc2UtMSBwb2ludGVyLWV2ZW50cyByZW5kZXJpbmctaW50ZW50IHNoYXBlLXJlbmRlcmluZyBzdG9wLWNvbG9yIHN0b3Atb3BhY2l0eSBzdHJpa2V0aHJvdWdoLXBvc2l0aW9uIHN0cmlrZXRocm91Z2gtdGhpY2tuZXNzIHN0cm9rZS1kYXNoYXJyYXkgc3Ryb2tlLWRhc2hvZmZzZXQgc3Ryb2tlLWxpbmVjYXAgc3Ryb2tlLWxpbmVqb2luIHN0cm9rZS1taXRlcmxpbWl0IHN0cm9rZS1vcGFjaXR5IHN0cm9rZS13aWR0aCB0ZXh0LWFuY2hvciB0ZXh0LWRlY29yYXRpb24gdGV4dC1yZW5kZXJpbmcgdW5kZXJsaW5lLXBvc2l0aW9uIHVuZGVybGluZS10aGlja25lc3MgdW5pY29kZS1iaWRpIHVuaWNvZGUtcmFuZ2UgdW5pdHMtcGVyLWVtIHYtYWxwaGFiZXRpYyB2LWhhbmdpbmcgdi1pZGVvZ3JhcGhpYyB2LW1hdGhlbWF0aWNhbCB2ZWN0b3ItZWZmZWN0IHZlcnQtYWR2LXkgdmVydC1vcmlnaW4teCB2ZXJ0LW9yaWdpbi15IHdvcmQtc3BhY2luZyB3cml0aW5nLW1vZGUgeG1sbnM6eGxpbmsgeC1oZWlnaHRcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2Uob2EsXG5wYSk7RFtiXT1uZXcgQihiLDEsITEsYSxudWxsLCExLCExKX0pO1wieGxpbms6YWN0dWF0ZSB4bGluazphcmNyb2xlIHhsaW5rOnJvbGUgeGxpbms6c2hvdyB4bGluazp0aXRsZSB4bGluazp0eXBlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCExLCExKX0pO1tcInhtbDpiYXNlXCIsXCJ4bWw6bGFuZ1wiLFwieG1sOnNwYWNlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKG9hLHBhKTtEW2JdPW5ldyBCKGIsMSwhMSxhLFwiaHR0cDovL3d3dy53My5vcmcvWE1MLzE5OTgvbmFtZXNwYWNlXCIsITEsITEpfSk7W1widGFiSW5kZXhcIixcImNyb3NzT3JpZ2luXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5ELnhsaW5rSHJlZj1uZXcgQihcInhsaW5rSHJlZlwiLDEsITEsXCJ4bGluazpocmVmXCIsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITAsITEpO1tcInNyY1wiLFwiaHJlZlwiLFwiYWN0aW9uXCIsXCJmb3JtQWN0aW9uXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7RFthXT1uZXcgQihhLDEsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITAsITApfSk7XG5mdW5jdGlvbiBxYShhLGIsYyxkKXt2YXIgZT1ELmhhc093blByb3BlcnR5KGIpP0RbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChuYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/bGEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbnZhciByYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRCxzYT02MDEwMyx0YT02MDEwNix1YT02MDEwNyx3YT02MDEwOCx4YT02MDExNCx5YT02MDEwOSx6YT02MDExMCxBYT02MDExMixCYT02MDExMyxDYT02MDEyMCxEYT02MDExNSxFYT02MDExNixGYT02MDEyMSxHYT02MDEyOCxIYT02MDEyOSxJYT02MDEzMCxKYT02MDEzMTtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciBFPVN5bWJvbC5mb3I7c2E9RShcInJlYWN0LmVsZW1lbnRcIik7dGE9RShcInJlYWN0LnBvcnRhbFwiKTt1YT1FKFwicmVhY3QuZnJhZ21lbnRcIik7d2E9RShcInJlYWN0LnN0cmljdF9tb2RlXCIpO3hhPUUoXCJyZWFjdC5wcm9maWxlclwiKTt5YT1FKFwicmVhY3QucHJvdmlkZXJcIik7emE9RShcInJlYWN0LmNvbnRleHRcIik7QWE9RShcInJlYWN0LmZvcndhcmRfcmVmXCIpO0JhPUUoXCJyZWFjdC5zdXNwZW5zZVwiKTtDYT1FKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKTtEYT1FKFwicmVhY3QubWVtb1wiKTtFYT1FKFwicmVhY3QubGF6eVwiKTtGYT1FKFwicmVhY3QuYmxvY2tcIik7RShcInJlYWN0LnNjb3BlXCIpO0dhPUUoXCJyZWFjdC5vcGFxdWUuaWRcIik7SGE9RShcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7SWE9RShcInJlYWN0Lm9mZnNjcmVlblwiKTtKYT1FKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKX1cbnZhciBLYT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gTGEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUthJiZhW0thXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBNYTtmdW5jdGlvbiBOYShhKXtpZih2b2lkIDA9PT1NYSl0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goYyl7dmFyIGI9Yy5zdGFjay50cmltKCkubWF0Y2goL1xcbiggKihhdCApPykvKTtNYT1iJiZiWzFdfHxcIlwifXJldHVyblwiXFxuXCIrTWErYX12YXIgT2E9ITE7XG5mdW5jdGlvbiBQYShhLGIpe2lmKCFhfHxPYSlyZXR1cm5cIlwiO09hPSEwO3ZhciBjPUVycm9yLnByZXBhcmVTdGFja1RyYWNlO0Vycm9yLnByZXBhcmVTdGFja1RyYWNlPXZvaWQgMDt0cnl7aWYoYilpZihiPWZ1bmN0aW9uKCl7dGhyb3cgRXJyb3IoKTt9LE9iamVjdC5kZWZpbmVQcm9wZXJ0eShiLnByb3RvdHlwZSxcInByb3BzXCIse3NldDpmdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fX0pLFwib2JqZWN0XCI9PT10eXBlb2YgUmVmbGVjdCYmUmVmbGVjdC5jb25zdHJ1Y3Qpe3RyeXtSZWZsZWN0LmNvbnN0cnVjdChiLFtdKX1jYXRjaChrKXt2YXIgZD1rfVJlZmxlY3QuY29uc3RydWN0KGEsW10sYil9ZWxzZXt0cnl7Yi5jYWxsKCl9Y2F0Y2goayl7ZD1rfWEuY2FsbChiLnByb3RvdHlwZSl9ZWxzZXt0cnl7dGhyb3cgRXJyb3IoKTt9Y2F0Y2goayl7ZD1rfWEoKX19Y2F0Y2goayl7aWYoayYmZCYmXCJzdHJpbmdcIj09PXR5cGVvZiBrLnN0YWNrKXtmb3IodmFyIGU9ay5zdGFjay5zcGxpdChcIlxcblwiKSxcbmY9ZC5zdGFjay5zcGxpdChcIlxcblwiKSxnPWUubGVuZ3RoLTEsaD1mLmxlbmd0aC0xOzE8PWcmJjA8PWgmJmVbZ10hPT1mW2hdOyloLS07Zm9yKDsxPD1nJiYwPD1oO2ctLSxoLS0paWYoZVtnXSE9PWZbaF0pe2lmKDEhPT1nfHwxIT09aCl7ZG8gaWYoZy0tLGgtLSwwPmh8fGVbZ10hPT1mW2hdKXJldHVyblwiXFxuXCIrZVtnXS5yZXBsYWNlKFwiIGF0IG5ldyBcIixcIiBhdCBcIik7d2hpbGUoMTw9ZyYmMDw9aCl9YnJlYWt9fX1maW5hbGx5e09hPSExLEVycm9yLnByZXBhcmVTdGFja1RyYWNlPWN9cmV0dXJuKGE9YT9hLmRpc3BsYXlOYW1lfHxhLm5hbWU6XCJcIik/TmEoYSk6XCJcIn1cbmZ1bmN0aW9uIFFhKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBOYShhLnR5cGUpO2Nhc2UgMTY6cmV0dXJuIE5hKFwiTGF6eVwiKTtjYXNlIDEzOnJldHVybiBOYShcIlN1c3BlbnNlXCIpO2Nhc2UgMTk6cmV0dXJuIE5hKFwiU3VzcGVuc2VMaXN0XCIpO2Nhc2UgMDpjYXNlIDI6Y2FzZSAxNTpyZXR1cm4gYT1QYShhLnR5cGUsITEpLGE7Y2FzZSAxMTpyZXR1cm4gYT1QYShhLnR5cGUucmVuZGVyLCExKSxhO2Nhc2UgMjI6cmV0dXJuIGE9UGEoYS50eXBlLl9yZW5kZXIsITEpLGE7Y2FzZSAxOnJldHVybiBhPVBhKGEudHlwZSwhMCksYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gUmEoYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSB1YTpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSB0YTpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgeGE6cmV0dXJuXCJQcm9maWxlclwiO2Nhc2Ugd2E6cmV0dXJuXCJTdHJpY3RNb2RlXCI7Y2FzZSBCYTpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSBDYTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwifWlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB6YTpyZXR1cm4oYS5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLkNvbnN1bWVyXCI7Y2FzZSB5YTpyZXR1cm4oYS5fY29udGV4dC5kaXNwbGF5TmFtZXx8XCJDb250ZXh0XCIpK1wiLlByb3ZpZGVyXCI7Y2FzZSBBYTp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtcbnJldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgRGE6cmV0dXJuIFJhKGEudHlwZSk7Y2FzZSBGYTpyZXR1cm4gUmEoYS5fcmVuZGVyKTtjYXNlIEVhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBSYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfWZ1bmN0aW9uIFNhKGEpe3N3aXRjaCh0eXBlb2YgYSl7Y2FzZSBcImJvb2xlYW5cIjpjYXNlIFwibnVtYmVyXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJzdHJpbmdcIjpjYXNlIFwidW5kZWZpbmVkXCI6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm5cIlwifX1mdW5jdGlvbiBUYShhKXt2YXIgYj1hLnR5cGU7cmV0dXJuKGE9YS5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWEudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWJ8fFwicmFkaW9cIj09PWIpfVxuZnVuY3Rpb24gVWEoYSl7dmFyIGI9VGEoYSk/XCJjaGVja2VkXCI6XCJ2YWx1ZVwiLGM9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihhLmNvbnN0cnVjdG9yLnByb3RvdHlwZSxiKSxkPVwiXCIrYVtiXTtpZighYS5oYXNPd25Qcm9wZXJ0eShiKSYmXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldCl7dmFyIGU9Yy5nZXQsZj1jLnNldDtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGUuY2FsbCh0aGlzKX0sc2V0OmZ1bmN0aW9uKGEpe2Q9XCJcIithO2YuY2FsbCh0aGlzLGEpfX0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSk7cmV0dXJue2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9XG5udWxsO2RlbGV0ZSBhW2JdfX19fWZ1bmN0aW9uIFZhKGEpe2EuX3ZhbHVlVHJhY2tlcnx8KGEuX3ZhbHVlVHJhY2tlcj1VYShhKSl9ZnVuY3Rpb24gV2EoYSl7aWYoIWEpcmV0dXJuITE7dmFyIGI9YS5fdmFsdWVUcmFja2VyO2lmKCFiKXJldHVybiEwO3ZhciBjPWIuZ2V0VmFsdWUoKTt2YXIgZD1cIlwiO2EmJihkPVRhKGEpP2EuY2hlY2tlZD9cInRydWVcIjpcImZhbHNlXCI6YS52YWx1ZSk7YT1kO3JldHVybiBhIT09Yz8oYi5zZXRWYWx1ZShhKSwhMCk6ITF9ZnVuY3Rpb24gWGEoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fVxuZnVuY3Rpb24gWWEoYSxiKXt2YXIgYz1iLmNoZWNrZWQ7cmV0dXJuIG0oe30sYix7ZGVmYXVsdENoZWNrZWQ6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsdmFsdWU6dm9pZCAwLGNoZWNrZWQ6bnVsbCE9Yz9jOmEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZH0pfWZ1bmN0aW9uIFphKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPVNhKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gJGEoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZxYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gYWIoYSxiKXskYShhLGIpO3ZhciBjPVNhKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP2JiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJmJiKGEsYi50eXBlLFNhKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gY2IoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIGJiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8WGEoYS5vd25lckRvY3VtZW50KSE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfWZ1bmN0aW9uIGRiKGEpe3ZhciBiPVwiXCI7YWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGwhPWEmJihiKz1hKX0pO3JldHVybiBifWZ1bmN0aW9uIGViKGEsYil7YT1tKHtjaGlsZHJlbjp2b2lkIDB9LGIpO2lmKGI9ZGIoYi5jaGlsZHJlbikpYS5jaGlsZHJlbj1iO3JldHVybiBhfVxuZnVuY3Rpb24gZmIoYSxiLGMsZCl7YT1hLm9wdGlvbnM7aWYoYil7Yj17fTtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyliW1wiJFwiK2NbZV1dPSEwO2ZvcihjPTA7YzxhLmxlbmd0aDtjKyspZT1iLmhhc093blByb3BlcnR5KFwiJFwiK2FbY10udmFsdWUpLGFbY10uc2VsZWN0ZWQhPT1lJiYoYVtjXS5zZWxlY3RlZD1lKSxlJiZkJiYoYVtjXS5kZWZhdWx0U2VsZWN0ZWQ9ITApfWVsc2V7Yz1cIlwiK1NhKGMpO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBnYihhLGIpe2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpdGhyb3cgRXJyb3IoeSg5MSkpO3JldHVybiBtKHt9LGIse3ZhbHVlOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLGNoaWxkcmVuOlwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZX0pfWZ1bmN0aW9uIGhiKGEsYil7dmFyIGM9Yi52YWx1ZTtpZihudWxsPT1jKXtjPWIuY2hpbGRyZW47Yj1iLmRlZmF1bHRWYWx1ZTtpZihudWxsIT1jKXtpZihudWxsIT1iKXRocm93IEVycm9yKHkoOTIpKTtpZihBcnJheS5pc0FycmF5KGMpKXtpZighKDE+PWMubGVuZ3RoKSl0aHJvdyBFcnJvcih5KDkzKSk7Yz1jWzBdfWI9Y31udWxsPT1iJiYoYj1cIlwiKTtjPWJ9YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6U2EoYyl9fVxuZnVuY3Rpb24gaWIoYSxiKXt2YXIgYz1TYShiLnZhbHVlKSxkPVNhKGIuZGVmYXVsdFZhbHVlKTtudWxsIT1jJiYoYz1cIlwiK2MsYyE9PWEudmFsdWUmJihhLnZhbHVlPWMpLG51bGw9PWIuZGVmYXVsdFZhbHVlJiZhLmRlZmF1bHRWYWx1ZSE9PWMmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9ZCYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrZCl9ZnVuY3Rpb24gamIoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmXCJcIiE9PWImJm51bGwhPT1iJiYoYS52YWx1ZT1iKX12YXIga2I9e2h0bWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCIsbWF0aG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiLHN2ZzpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJ9O1xuZnVuY3Rpb24gbGIoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1mdW5jdGlvbiBtYihhLGIpe3JldHVybiBudWxsPT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/bGIoYik6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPT09YSYmXCJmb3JlaWduT2JqZWN0XCI9PT1iP1wiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiOmF9XG52YXIgbmIsb2I9ZnVuY3Rpb24oYSl7cmV0dXJuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBNU0FwcCYmTVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24/ZnVuY3Rpb24oYixjLGQsZSl7TVNBcHAuZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24oZnVuY3Rpb24oKXtyZXR1cm4gYShiLGMsZCxlKX0pfTphfShmdW5jdGlvbihhLGIpe2lmKGEubmFtZXNwYWNlVVJJIT09a2Iuc3ZnfHxcImlubmVySFRNTFwiaW4gYSlhLmlubmVySFRNTD1iO2Vsc2V7bmI9bmJ8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7bmIuaW5uZXJIVE1MPVwiPHN2Zz5cIitiLnZhbHVlT2YoKS50b1N0cmluZygpK1wiPC9zdmc+XCI7Zm9yKGI9bmIuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gcGIoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBxYj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkQXJlYTohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsXG5mbG9vZE9wYWNpdHk6ITAsc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxyYj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMocWIpLmZvckVhY2goZnVuY3Rpb24oYSl7cmIuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtxYltiXT1xYlthXX0pfSk7ZnVuY3Rpb24gc2IoYSxiLGMpe3JldHVybiBudWxsPT1ifHxcImJvb2xlYW5cIj09PXR5cGVvZiBifHxcIlwiPT09Yj9cIlwiOmN8fFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MD09PWJ8fHFiLmhhc093blByb3BlcnR5KGEpJiZxYlthXT8oXCJcIitiKS50cmltKCk6YitcInB4XCJ9XG5mdW5jdGlvbiB0YihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIiksZT1zYihjLGJbY10sZCk7XCJmbG9hdFwiPT09YyYmKGM9XCJjc3NGbG9hdFwiKTtkP2Euc2V0UHJvcGVydHkoYyxlKTphW2NdPWV9fXZhciB1Yj1tKHttZW51aXRlbTohMH0se2FyZWE6ITAsYmFzZTohMCxicjohMCxjb2w6ITAsZW1iZWQ6ITAsaHI6ITAsaW1nOiEwLGlucHV0OiEwLGtleWdlbjohMCxsaW5rOiEwLG1ldGE6ITAscGFyYW06ITAsc291cmNlOiEwLHRyYWNrOiEwLHdicjohMH0pO1xuZnVuY3Rpb24gdmIoYSxiKXtpZihiKXtpZih1YlthXSYmKG51bGwhPWIuY2hpbGRyZW58fG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoMTM3LGEpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHkoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHkoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHkoNjIpKTt9fVxuZnVuY3Rpb24gd2IoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fWZ1bmN0aW9uIHhiKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX12YXIgeWI9bnVsbCx6Yj1udWxsLEFiPW51bGw7XG5mdW5jdGlvbiBCYihhKXtpZihhPUNiKGEpKXtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgeWIpdGhyb3cgRXJyb3IoeSgyODApKTt2YXIgYj1hLnN0YXRlTm9kZTtiJiYoYj1EYihiKSx5YihhLnN0YXRlTm9kZSxhLnR5cGUsYikpfX1mdW5jdGlvbiBFYihhKXt6Yj9BYj9BYi5wdXNoKGEpOkFiPVthXTp6Yj1hfWZ1bmN0aW9uIEZiKCl7aWYoemIpe3ZhciBhPXpiLGI9QWI7QWI9emI9bnVsbDtCYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspQmIoYlthXSl9fWZ1bmN0aW9uIEdiKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gSGIoYSxiLGMsZCxlKXtyZXR1cm4gYShiLGMsZCxlKX1mdW5jdGlvbiBJYigpe312YXIgSmI9R2IsS2I9ITEsTGI9ITE7ZnVuY3Rpb24gTWIoKXtpZihudWxsIT09emJ8fG51bGwhPT1BYilJYigpLEZiKCl9XG5mdW5jdGlvbiBOYihhLGIsYyl7aWYoTGIpcmV0dXJuIGEoYixjKTtMYj0hMDt0cnl7cmV0dXJuIEpiKGEsYixjKX1maW5hbGx5e0xiPSExLE1iKCl9fVxuZnVuY3Rpb24gT2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcih5KDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIFBiPSExO2lmKGZhKXRyeXt2YXIgUWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KFFiLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtQYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixRYixRYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsUWIsUWIpfWNhdGNoKGEpe1BiPSExfWZ1bmN0aW9uIFJiKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChuKXt0aGlzLm9uRXJyb3Iobil9fXZhciBTYj0hMSxUYj1udWxsLFViPSExLFZiPW51bGwsV2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7U2I9ITA7VGI9YX19O2Z1bmN0aW9uIFhiKGEsYixjLGQsZSxmLGcsaCxrKXtTYj0hMTtUYj1udWxsO1JiLmFwcGx5KFdiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBZYihhLGIsYyxkLGUsZixnLGgsayl7WGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKFNiKXtpZihTYil7dmFyIGw9VGI7U2I9ITE7VGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHkoMTk4KSk7VWJ8fChVYj0hMCxWYj1sKX19ZnVuY3Rpb24gWmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjEwMjYpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiAkYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIGFjKGEpe2lmKFpiKGEpIT09YSl0aHJvdyBFcnJvcih5KDE4OCkpO31cbmZ1bmN0aW9uIGJjKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVpiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHkoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIGFjKGUpLGE7aWYoZj09PWQpcmV0dXJuIGFjKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IoeSgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcih5KDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHkoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcih5KDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gY2MoYSl7YT1iYyhhKTtpZighYSlyZXR1cm4gbnVsbDtmb3IodmFyIGI9YTs7KXtpZig1PT09Yi50YWd8fDY9PT1iLnRhZylyZXR1cm4gYjtpZihiLmNoaWxkKWIuY2hpbGQucmV0dXJuPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIGRjKGEsYil7Zm9yKHZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1iOyl7aWYoYj09PWF8fGI9PT1jKXJldHVybiEwO2I9Yi5yZXR1cm59cmV0dXJuITF9dmFyIGVjLGZjLGdjLGhjLGljPSExLGpjPVtdLGtjPW51bGwsbGM9bnVsbCxtYz1udWxsLG5jPW5ldyBNYXAsb2M9bmV3IE1hcCxwYz1bXSxxYz1cIm1vdXNlZG93biBtb3VzZXVwIHRvdWNoY2FuY2VsIHRvdWNoZW5kIHRvdWNoc3RhcnQgYXV4Y2xpY2sgZGJsY2xpY2sgcG9pbnRlcmNhbmNlbCBwb2ludGVyZG93biBwb2ludGVydXAgZHJhZ2VuZCBkcmFnc3RhcnQgZHJvcCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnN0YXJ0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgaW5wdXQgdGV4dElucHV0IGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiByYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSxkb21FdmVudE5hbWU6YixldmVudFN5c3RlbUZsYWdzOmN8MTYsbmF0aXZlRXZlbnQ6ZSx0YXJnZXRDb250YWluZXJzOltkXX19ZnVuY3Rpb24gc2MoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjprYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6bGM9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6bWM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOm5jLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOm9jLmRlbGV0ZShiLnBvaW50ZXJJZCl9fVxuZnVuY3Rpb24gdGMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1yYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1DYihiKSxudWxsIT09YiYmZmMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO2I9YS50YXJnZXRDb250YWluZXJzO251bGwhPT1lJiYtMT09PWIuaW5kZXhPZihlKSYmYi5wdXNoKGUpO3JldHVybiBhfVxuZnVuY3Rpb24gdWMoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzaW5cIjpyZXR1cm4ga2M9dGMoa2MsYSxiLGMsZCxlKSwhMDtjYXNlIFwiZHJhZ2VudGVyXCI6cmV0dXJuIGxjPXRjKGxjLGEsYixjLGQsZSksITA7Y2FzZSBcIm1vdXNlb3ZlclwiOnJldHVybiBtYz10YyhtYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJwb2ludGVyb3ZlclwiOnZhciBmPWUucG9pbnRlcklkO25jLnNldChmLHRjKG5jLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKTtyZXR1cm4hMDtjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpyZXR1cm4gZj1lLnBvaW50ZXJJZCxvYy5zZXQoZix0YyhvYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSksITB9cmV0dXJuITF9XG5mdW5jdGlvbiB2YyhhKXt2YXIgYj13YyhhLnRhcmdldCk7aWYobnVsbCE9PWIpe3ZhciBjPVpiKGIpO2lmKG51bGwhPT1jKWlmKGI9Yy50YWcsMTM9PT1iKXtpZihiPSRiKGMpLG51bGwhPT1iKXthLmJsb2NrZWRPbj1iO2hjKGEubGFuZVByaW9yaXR5LGZ1bmN0aW9uKCl7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoYS5wcmlvcml0eSxmdW5jdGlvbigpe2djKGMpfSl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24geGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPXljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1jKXJldHVybiBiPUNiKGMpLG51bGwhPT1iJiZmYyhiKSxhLmJsb2NrZWRPbj1jLCExO2Iuc2hpZnQoKX1yZXR1cm4hMH1mdW5jdGlvbiB6YyhhLGIsYyl7eGMoYSkmJmMuZGVsZXRlKGIpfVxuZnVuY3Rpb24gQWMoKXtmb3IoaWM9ITE7MDxqYy5sZW5ndGg7KXt2YXIgYT1qY1swXTtpZihudWxsIT09YS5ibG9ja2VkT24pe2E9Q2IoYS5ibG9ja2VkT24pO251bGwhPT1hJiZlYyhhKTticmVha31mb3IodmFyIGI9YS50YXJnZXRDb250YWluZXJzOzA8Yi5sZW5ndGg7KXt2YXIgYz15YyhhLmRvbUV2ZW50TmFtZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYlswXSxhLm5hdGl2ZUV2ZW50KTtpZihudWxsIT09Yyl7YS5ibG9ja2VkT249YzticmVha31iLnNoaWZ0KCl9bnVsbD09PWEuYmxvY2tlZE9uJiZqYy5zaGlmdCgpfW51bGwhPT1rYyYmeGMoa2MpJiYoa2M9bnVsbCk7bnVsbCE9PWxjJiZ4YyhsYykmJihsYz1udWxsKTtudWxsIT09bWMmJnhjKG1jKSYmKG1jPW51bGwpO25jLmZvckVhY2goemMpO29jLmZvckVhY2goemMpfVxuZnVuY3Rpb24gQmMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLGljfHwoaWM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksQWMpKSl9XG5mdW5jdGlvbiBDYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBCYyhiLGEpfWlmKDA8amMubGVuZ3RoKXtCYyhqY1swXSxhKTtmb3IodmFyIGM9MTtjPGpjLmxlbmd0aDtjKyspe3ZhciBkPWpjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09a2MmJkJjKGtjLGEpO251bGwhPT1sYyYmQmMobGMsYSk7bnVsbCE9PW1jJiZCYyhtYyxhKTtuYy5mb3JFYWNoKGIpO29jLmZvckVhY2goYik7Zm9yKGM9MDtjPHBjLmxlbmd0aDtjKyspZD1wY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8cGMubGVuZ3RoJiYoYz1wY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOyl2YyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJnBjLnNoaWZ0KCl9XG5mdW5jdGlvbiBEYyhhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBFYz17YW5pbWF0aW9uZW5kOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOkRjKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6RGMoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6RGMoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxGYz17fSxHYz17fTtcbmZhJiYoR2M9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgRWMuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgRWMuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgRWMudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBIYyhhKXtpZihGY1thXSlyZXR1cm4gRmNbYV07aWYoIUVjW2FdKXJldHVybiBhO3ZhciBiPUVjW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIEdjKXJldHVybiBGY1thXT1iW2NdO3JldHVybiBhfVxudmFyIEljPUhjKFwiYW5pbWF0aW9uZW5kXCIpLEpjPUhjKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLEtjPUhjKFwiYW5pbWF0aW9uc3RhcnRcIiksTGM9SGMoXCJ0cmFuc2l0aW9uZW5kXCIpLE1jPW5ldyBNYXAsTmM9bmV3IE1hcCxPYz1bXCJhYm9ydFwiLFwiYWJvcnRcIixJYyxcImFuaW1hdGlvbkVuZFwiLEpjLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsS2MsXCJhbmltYXRpb25TdGFydFwiLFwiY2FucGxheVwiLFwiY2FuUGxheVwiLFwiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIixcImVtcHRpZWRcIixcImVtcHRpZWRcIixcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmRlZFwiLFwiZW5kZWRcIixcImVycm9yXCIsXCJlcnJvclwiLFwiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsXCJsb2FkXCIsXCJsb2FkXCIsXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCIsXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIixcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsXG5cImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcInNlZWtpbmdcIixcInN0YWxsZWRcIixcInN0YWxsZWRcIixcInN1c3BlbmRcIixcInN1c3BlbmRcIixcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIixMYyxcInRyYW5zaXRpb25FbmRcIixcIndhaXRpbmdcIixcIndhaXRpbmdcIl07ZnVuY3Rpb24gUGMoYSxiKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrPTIpe3ZhciBkPWFbY10sZT1hW2MrMV07ZT1cIm9uXCIrKGVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpKTtOYy5zZXQoZCxiKTtNYy5zZXQoZCxlKTtkYShlLFtkXSl9fXZhciBRYz1yLnVuc3RhYmxlX25vdztRYygpO3ZhciBGPTg7XG5mdW5jdGlvbiBSYyhhKXtpZigwIT09KDEmYSkpcmV0dXJuIEY9MTUsMTtpZigwIT09KDImYSkpcmV0dXJuIEY9MTQsMjtpZigwIT09KDQmYSkpcmV0dXJuIEY9MTMsNDt2YXIgYj0yNCZhO2lmKDAhPT1iKXJldHVybiBGPTEyLGI7aWYoMCE9PShhJjMyKSlyZXR1cm4gRj0xMSwzMjtiPTE5MiZhO2lmKDAhPT1iKXJldHVybiBGPTEwLGI7aWYoMCE9PShhJjI1NikpcmV0dXJuIEY9OSwyNTY7Yj0zNTg0JmE7aWYoMCE9PWIpcmV0dXJuIEY9OCxiO2lmKDAhPT0oYSY0MDk2KSlyZXR1cm4gRj03LDQwOTY7Yj00MTg2MTEyJmE7aWYoMCE9PWIpcmV0dXJuIEY9NixiO2I9NjI5MTQ1NjAmYTtpZigwIT09YilyZXR1cm4gRj01LGI7aWYoYSY2NzEwODg2NClyZXR1cm4gRj00LDY3MTA4ODY0O2lmKDAhPT0oYSYxMzQyMTc3MjgpKXJldHVybiBGPTMsMTM0MjE3NzI4O2I9ODA1MzA2MzY4JmE7aWYoMCE9PWIpcmV0dXJuIEY9MixiO2lmKDAhPT0oMTA3Mzc0MTgyNCZhKSlyZXR1cm4gRj0xLDEwNzM3NDE4MjQ7XG5GPTg7cmV0dXJuIGF9ZnVuY3Rpb24gU2MoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIDE1O2Nhc2UgOTg6cmV0dXJuIDEwO2Nhc2UgOTc6Y2FzZSA5NjpyZXR1cm4gODtjYXNlIDk1OnJldHVybiAyO2RlZmF1bHQ6cmV0dXJuIDB9fWZ1bmN0aW9uIFRjKGEpe3N3aXRjaChhKXtjYXNlIDE1OmNhc2UgMTQ6cmV0dXJuIDk5O2Nhc2UgMTM6Y2FzZSAxMjpjYXNlIDExOmNhc2UgMTA6cmV0dXJuIDk4O2Nhc2UgOTpjYXNlIDg6Y2FzZSA3OmNhc2UgNjpjYXNlIDQ6Y2FzZSA1OnJldHVybiA5NztjYXNlIDM6Y2FzZSAyOmNhc2UgMTpyZXR1cm4gOTU7Y2FzZSAwOnJldHVybiA5MDtkZWZhdWx0OnRocm93IEVycm9yKHkoMzU4LGEpKTt9fVxuZnVuY3Rpb24gVWMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcztpZigwPT09YylyZXR1cm4gRj0wO3ZhciBkPTAsZT0wLGY9YS5leHBpcmVkTGFuZXMsZz1hLnN1c3BlbmRlZExhbmVzLGg9YS5waW5nZWRMYW5lcztpZigwIT09ZilkPWYsZT1GPTE1O2Vsc2UgaWYoZj1jJjEzNDIxNzcyNywwIT09Zil7dmFyIGs9ZiZ+ZzswIT09az8oZD1SYyhrKSxlPUYpOihoJj1mLDAhPT1oJiYoZD1SYyhoKSxlPUYpKX1lbHNlIGY9YyZ+ZywwIT09Zj8oZD1SYyhmKSxlPUYpOjAhPT1oJiYoZD1SYyhoKSxlPUYpO2lmKDA9PT1kKXJldHVybiAwO2Q9MzEtVmMoZCk7ZD1jJigoMD5kPzA6MTw8ZCk8PDEpLTE7aWYoMCE9PWImJmIhPT1kJiYwPT09KGImZykpe1JjKGIpO2lmKGU8PUYpcmV0dXJuIGI7Rj1lfWI9YS5lbnRhbmdsZWRMYW5lcztpZigwIT09Yilmb3IoYT1hLmVudGFuZ2xlbWVudHMsYiY9ZDswPGI7KWM9MzEtVmMoYiksZT0xPDxjLGR8PWFbY10sYiY9fmU7cmV0dXJuIGR9XG5mdW5jdGlvbiBXYyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24gWGMoYSxiKXtzd2l0Y2goYSl7Y2FzZSAxNTpyZXR1cm4gMTtjYXNlIDE0OnJldHVybiAyO2Nhc2UgMTI6cmV0dXJuIGE9WWMoMjQmfmIpLDA9PT1hP1hjKDEwLGIpOmE7Y2FzZSAxMDpyZXR1cm4gYT1ZYygxOTImfmIpLDA9PT1hP1hjKDgsYik6YTtjYXNlIDg6cmV0dXJuIGE9WWMoMzU4NCZ+YiksMD09PWEmJihhPVljKDQxODYxMTImfmIpLDA9PT1hJiYoYT01MTIpKSxhO2Nhc2UgMjpyZXR1cm4gYj1ZYyg4MDUzMDYzNjgmfmIpLDA9PT1iJiYoYj0yNjg0MzU0NTYpLGJ9dGhyb3cgRXJyb3IoeSgzNTgsYSkpO31mdW5jdGlvbiBZYyhhKXtyZXR1cm4gYSYtYX1mdW5jdGlvbiBaYyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uICRjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjt2YXIgZD1iLTE7YS5zdXNwZW5kZWRMYW5lcyY9ZDthLnBpbmdlZExhbmVzJj1kO2E9YS5ldmVudFRpbWVzO2I9MzEtVmMoYik7YVtiXT1jfXZhciBWYz1NYXRoLmNsejMyP01hdGguY2x6MzI6YWQsYmQ9TWF0aC5sb2csY2Q9TWF0aC5MTjI7ZnVuY3Rpb24gYWQoYSl7cmV0dXJuIDA9PT1hPzMyOjMxLShiZChhKS9jZHwwKXwwfXZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIGdkKGEsYixjLGQpe0tifHxJYigpO3ZhciBlPWhkLGY9S2I7S2I9ITA7dHJ5e0hiKGUsYSxiLGMsZCl9ZmluYWxseXsoS2I9Zil8fE1iKCl9fWZ1bmN0aW9uIGlkKGEsYixjLGQpe2VkKGRkLGhkLmJpbmQobnVsbCxhLGIsYyxkKSl9XG5mdW5jdGlvbiBoZChhLGIsYyxkKXtpZihmZCl7dmFyIGU7aWYoKGU9MD09PShiJjQpKSYmMDxqYy5sZW5ndGgmJi0xPHFjLmluZGV4T2YoYSkpYT1yYyhudWxsLGEsYixjLGQpLGpjLnB1c2goYSk7ZWxzZXt2YXIgZj15YyhhLGIsYyxkKTtpZihudWxsPT09ZillJiZzYyhhLGQpO2Vsc2V7aWYoZSl7aWYoLTE8cWMuaW5kZXhPZihhKSl7YT1yYyhmLGEsYixjLGQpO2pjLnB1c2goYSk7cmV0dXJufWlmKHVjKGYsYSxiLGMsZCkpcmV0dXJuO3NjKGEsZCl9amQoYSxiLGQsbnVsbCxjKX19fX1cbmZ1bmN0aW9uIHljKGEsYixjLGQpe3ZhciBlPXhiKGQpO2U9d2MoZSk7aWYobnVsbCE9PWUpe3ZhciBmPVpiKGUpO2lmKG51bGw9PT1mKWU9bnVsbDtlbHNle3ZhciBnPWYudGFnO2lmKDEzPT09Zyl7ZT0kYihmKTtpZihudWxsIT09ZSlyZXR1cm4gZTtlPW51bGx9ZWxzZSBpZigzPT09Zyl7aWYoZi5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWYudGFnP2Yuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtlPW51bGx9ZWxzZSBmIT09ZSYmKGU9bnVsbCl9fWpkKGEsYixkLGUsYyk7cmV0dXJuIG51bGx9dmFyIGtkPW51bGwsbGQ9bnVsbCxtZD1udWxsO1xuZnVuY3Rpb24gbmQoKXtpZihtZClyZXR1cm4gbWQ7dmFyIGEsYj1sZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBrZD9rZC52YWx1ZTprZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiBtZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIG9kKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfWZ1bmN0aW9uIHBkKCl7cmV0dXJuITB9ZnVuY3Rpb24gcWQoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIHJkKGEpe2Z1bmN0aW9uIGIoYixkLGUsZixnKXt0aGlzLl9yZWFjdE5hbWU9Yjt0aGlzLl90YXJnZXRJbnN0PWU7dGhpcy50eXBlPWQ7dGhpcy5uYXRpdmVFdmVudD1mO3RoaXMudGFyZ2V0PWc7dGhpcy5jdXJyZW50VGFyZ2V0PW51bGw7Zm9yKHZhciBjIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShjKSYmKGI9YVtjXSx0aGlzW2NdPWI/YihmKTpmW2NdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Zi5kZWZhdWx0UHJldmVudGVkP2YuZGVmYXVsdFByZXZlbnRlZDohMT09PWYucmV0dXJuVmFsdWUpP3BkOnFkO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cWQ7cmV0dXJuIHRoaXN9bShiLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmXG4oYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9cGQpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cGQpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7fSxpc1BlcnNpc3RlbnQ6cGR9KTtyZXR1cm4gYn1cbnZhciBzZD17ZXZlbnRQaGFzZTowLGJ1YmJsZXM6MCxjYW5jZWxhYmxlOjAsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDowLGlzVHJ1c3RlZDowfSx0ZD1yZChzZCksdWQ9bSh7fSxzZCx7dmlldzowLGRldGFpbDowfSksdmQ9cmQodWQpLHdkLHhkLHlkLEFkPW0oe30sdWQse3NjcmVlblg6MCxzY3JlZW5ZOjAsY2xpZW50WDowLGNsaWVudFk6MCxwYWdlWDowLHBhZ2VZOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLGdldE1vZGlmaWVyU3RhdGU6emQsYnV0dG9uOjAsYnV0dG9uczowLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIHZvaWQgMD09PWEucmVsYXRlZFRhcmdldD9hLmZyb21FbGVtZW50PT09YS5zcmNFbGVtZW50P2EudG9FbGVtZW50OmEuZnJvbUVsZW1lbnQ6YS5yZWxhdGVkVGFyZ2V0fSxtb3ZlbWVudFg6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFhcImluXG5hKXJldHVybiBhLm1vdmVtZW50WDthIT09eWQmJih5ZCYmXCJtb3VzZW1vdmVcIj09PWEudHlwZT8od2Q9YS5zY3JlZW5YLXlkLnNjcmVlblgseGQ9YS5zY3JlZW5ZLXlkLnNjcmVlblkpOnhkPXdkPTAseWQ9YSk7cmV0dXJuIHdkfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJtb3ZlbWVudFlcImluIGE/YS5tb3ZlbWVudFk6eGR9fSksQmQ9cmQoQWQpLENkPW0oe30sQWQse2RhdGFUcmFuc2ZlcjowfSksRGQ9cmQoQ2QpLEVkPW0oe30sdWQse3JlbGF0ZWRUYXJnZXQ6MH0pLEZkPXJkKEVkKSxHZD1tKHt9LHNkLHthbmltYXRpb25OYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxIZD1yZChHZCksSWQ9bSh7fSxzZCx7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEpkPXJkKElkKSxLZD1tKHt9LHNkLHtkYXRhOjB9KSxMZD1yZChLZCksTWQ9e0VzYzpcIkVzY2FwZVwiLFxuU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sTmQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsMTE2OlwiRjVcIiwxMTc6XCJGNlwiLDExODpcIkY3XCIsXG4xMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LE9kPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZChhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9kW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gemQoKXtyZXR1cm4gUGR9XG52YXIgUWQ9bSh7fSx1ZCx7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1NZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/TmRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxjb2RlOjAsbG9jYXRpb246MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxhbHRLZXk6MCxtZXRhS2V5OjAscmVwZWF0OjAsbG9jYWxlOjAsZ2V0TW9kaWZpZXJTdGF0ZTp6ZCxjaGFyQ29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2QoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1cbmEudHlwZT9vZChhKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfX0pLFJkPXJkKFFkKSxTZD1tKHt9LEFkLHtwb2ludGVySWQ6MCx3aWR0aDowLGhlaWdodDowLHByZXNzdXJlOjAsdGFuZ2VudGlhbFByZXNzdXJlOjAsdGlsdFg6MCx0aWx0WTowLHR3aXN0OjAscG9pbnRlclR5cGU6MCxpc1ByaW1hcnk6MH0pLFRkPXJkKFNkKSxVZD1tKHt9LHVkLHt0b3VjaGVzOjAsdGFyZ2V0VG91Y2hlczowLGNoYW5nZWRUb3VjaGVzOjAsYWx0S2V5OjAsbWV0YUtleTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGdldE1vZGlmaWVyU3RhdGU6emR9KSxWZD1yZChVZCksV2Q9bSh7fSxzZCx7cHJvcGVydHlOYW1lOjAsZWxhcHNlZFRpbWU6MCxwc2V1ZG9FbGVtZW50OjB9KSxYZD1yZChXZCksWWQ9bSh7fSxBZCx7ZGVsdGFYOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFYXCJpbiBhP2EuZGVsdGFYOlwid2hlZWxEZWx0YVhcImluIGE/LWEud2hlZWxEZWx0YVg6MH0sXG5kZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6MCxkZWx0YU1vZGU6MH0pLFpkPXJkKFlkKSwkZD1bOSwxMywyNywzMl0sYWU9ZmEmJlwiQ29tcG9zaXRpb25FdmVudFwiaW4gd2luZG93LGJlPW51bGw7ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmKGJlPWRvY3VtZW50LmRvY3VtZW50TW9kZSk7dmFyIGNlPWZhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYhYmUsZGU9ZmEmJighYWV8fGJlJiY4PGJlJiYxMT49YmUpLGVlPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLGZlPSExO1xuZnVuY3Rpb24gZ2UoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT0kZC5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiZm9jdXNvdXRcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBoZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBpZT0hMTtmdW5jdGlvbiBqZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gaGUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO2ZlPSEwO3JldHVybiBlZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1lZSYmZmU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24ga2UoYSxiKXtpZihpZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhYWUmJmdlKGEsYik/KGE9bmQoKSxtZD1sZD1rZD1udWxsLGllPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBkZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgbGU9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24gbWUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISFsZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9ZnVuY3Rpb24gbmUoYSxiLGMsZCl7RWIoZCk7Yj1vZShiLFwib25DaGFuZ2VcIik7MDxiLmxlbmd0aCYmKGM9bmV3IHRkKFwib25DaGFuZ2VcIixcImNoYW5nZVwiLG51bGwsYyxkKSxhLnB1c2goe2V2ZW50OmMsbGlzdGVuZXJzOmJ9KSl9dmFyIHBlPW51bGwscWU9bnVsbDtmdW5jdGlvbiByZShhKXtzZShhLDApfWZ1bmN0aW9uIHRlKGEpe3ZhciBiPXVlKGEpO2lmKFdhKGIpKXJldHVybiBhfVxuZnVuY3Rpb24gdmUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgd2U9ITE7aWYoZmEpe3ZhciB4ZTtpZihmYSl7dmFyIHllPVwib25pbnB1dFwiaW4gZG9jdW1lbnQ7aWYoIXllKXt2YXIgemU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTt6ZS5zZXRBdHRyaWJ1dGUoXCJvbmlucHV0XCIsXCJyZXR1cm47XCIpO3llPVwiZnVuY3Rpb25cIj09PXR5cGVvZiB6ZS5vbmlucHV0fXhlPXllfWVsc2UgeGU9ITE7d2U9eGUmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSl9ZnVuY3Rpb24gQWUoKXtwZSYmKHBlLmRldGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSxxZT1wZT1udWxsKX1mdW5jdGlvbiBCZShhKXtpZihcInZhbHVlXCI9PT1hLnByb3BlcnR5TmFtZSYmdGUocWUpKXt2YXIgYj1bXTtuZShiLHFlLGEseGIoYSkpO2E9cmU7aWYoS2IpYShiKTtlbHNle0tiPSEwO3RyeXtHYihhLGIpfWZpbmFsbHl7S2I9ITEsTWIoKX19fX1cbmZ1bmN0aW9uIENlKGEsYixjKXtcImZvY3VzaW5cIj09PWE/KEFlKCkscGU9YixxZT1jLHBlLmF0dGFjaEV2ZW50KFwib25wcm9wZXJ0eWNoYW5nZVwiLEJlKSk6XCJmb2N1c291dFwiPT09YSYmQWUoKX1mdW5jdGlvbiBEZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiB0ZShxZSl9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBGZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiB0ZShiKX1mdW5jdGlvbiBHZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyIEhlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOkdlLEllPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBKZShhLGIpe2lmKEhlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighSWUuY2FsbChiLGNbZF0pfHwhSGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1mdW5jdGlvbiBLZShhKXtmb3IoO2EmJmEuZmlyc3RDaGlsZDspYT1hLmZpcnN0Q2hpbGQ7cmV0dXJuIGF9XG5mdW5jdGlvbiBMZShhLGIpe3ZhciBjPUtlKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPUtlKGMpfX1mdW5jdGlvbiBNZShhLGIpe3JldHVybiBhJiZiP2E9PT1iPyEwOmEmJjM9PT1hLm5vZGVUeXBlPyExOmImJjM9PT1iLm5vZGVUeXBlP01lKGEsYi5wYXJlbnROb2RlKTpcImNvbnRhaW5zXCJpbiBhP2EuY29udGFpbnMoYik6YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbj8hIShhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpJjE2KTohMTohMX1cbmZ1bmN0aW9uIE5lKCl7Zm9yKHZhciBhPXdpbmRvdyxiPVhhKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPVhhKGEuZG9jdW1lbnQpfXJldHVybiBifWZ1bmN0aW9uIE9lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJihcInRleHRcIj09PWEudHlwZXx8XCJzZWFyY2hcIj09PWEudHlwZXx8XCJ0ZWxcIj09PWEudHlwZXx8XCJ1cmxcIj09PWEudHlwZXx8XCJwYXNzd29yZFwiPT09YS50eXBlKXx8XCJ0ZXh0YXJlYVwiPT09Ynx8XCJ0cnVlXCI9PT1hLmNvbnRlbnRFZGl0YWJsZSl9XG52YXIgUGU9ZmEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxRZT1udWxsLFJlPW51bGwsU2U9bnVsbCxUZT0hMTtcbmZ1bmN0aW9uIFVlKGEsYixjKXt2YXIgZD1jLndpbmRvdz09PWM/Yy5kb2N1bWVudDo5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtUZXx8bnVsbD09UWV8fFFlIT09WGEoZCl8fChkPVFlLFwic2VsZWN0aW9uU3RhcnRcImluIGQmJk9lKGQpP2Q9e3N0YXJ0OmQuc2VsZWN0aW9uU3RhcnQsZW5kOmQuc2VsZWN0aW9uRW5kfTooZD0oZC5vd25lckRvY3VtZW50JiZkLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksZD17YW5jaG9yTm9kZTpkLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmQuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpkLmZvY3VzTm9kZSxmb2N1c09mZnNldDpkLmZvY3VzT2Zmc2V0fSksU2UmJkplKFNlLGQpfHwoU2U9ZCxkPW9lKFJlLFwib25TZWxlY3RcIiksMDxkLmxlbmd0aCYmKGI9bmV3IHRkKFwib25TZWxlY3RcIixcInNlbGVjdFwiLG51bGwsYixjKSxhLnB1c2goe2V2ZW50OmIsbGlzdGVuZXJzOmR9KSxiLnRhcmdldD1RZSkpKX1cblBjKFwiY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXNpbiBmb2N1cyBmb2N1c291dCBibHVyIGlucHV0IGlucHV0IGludmFsaWQgaW52YWxpZCBrZXlkb3duIGtleURvd24ga2V5cHJlc3Mga2V5UHJlc3Mga2V5dXAga2V5VXAgbW91c2Vkb3duIG1vdXNlRG93biBtb3VzZXVwIG1vdXNlVXAgcGFzdGUgcGFzdGUgcGF1c2UgcGF1c2UgcGxheSBwbGF5IHBvaW50ZXJjYW5jZWwgcG9pbnRlckNhbmNlbCBwb2ludGVyZG93biBwb2ludGVyRG93biBwb2ludGVydXAgcG9pbnRlclVwIHJhdGVjaGFuZ2UgcmF0ZUNoYW5nZSByZXNldCByZXNldCBzZWVrZWQgc2Vla2VkIHN1Ym1pdCBzdWJtaXQgdG91Y2hjYW5jZWwgdG91Y2hDYW5jZWwgdG91Y2hlbmQgdG91Y2hFbmQgdG91Y2hzdGFydCB0b3VjaFN0YXJ0IHZvbHVtZWNoYW5nZSB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIiksXG4wKTtQYyhcImRyYWcgZHJhZyBkcmFnZW50ZXIgZHJhZ0VudGVyIGRyYWdleGl0IGRyYWdFeGl0IGRyYWdsZWF2ZSBkcmFnTGVhdmUgZHJhZ292ZXIgZHJhZ092ZXIgbW91c2Vtb3ZlIG1vdXNlTW92ZSBtb3VzZW91dCBtb3VzZU91dCBtb3VzZW92ZXIgbW91c2VPdmVyIHBvaW50ZXJtb3ZlIHBvaW50ZXJNb3ZlIHBvaW50ZXJvdXQgcG9pbnRlck91dCBwb2ludGVyb3ZlciBwb2ludGVyT3ZlciBzY3JvbGwgc2Nyb2xsIHRvZ2dsZSB0b2dnbGUgdG91Y2htb3ZlIHRvdWNoTW92ZSB3aGVlbCB3aGVlbFwiLnNwbGl0KFwiIFwiKSwxKTtQYyhPYywyKTtmb3IodmFyIFZlPVwiY2hhbmdlIHNlbGVjdGlvbmNoYW5nZSB0ZXh0SW5wdXQgY29tcG9zaXRpb25zdGFydCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnVwZGF0ZVwiLnNwbGl0KFwiIFwiKSxXZT0wO1dlPFZlLmxlbmd0aDtXZSsrKU5jLnNldChWZVtXZV0sMCk7ZWEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtcbmVhKFwib25Nb3VzZUxlYXZlXCIsW1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXSk7ZWEoXCJvblBvaW50ZXJFbnRlclwiLFtcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdKTtlYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2RhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtkYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2RhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZGEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7XG5kYShcIm9uQ29tcG9zaXRpb25TdGFydFwiLFwiY29tcG9zaXRpb25zdGFydCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZGEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIFhlPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSBzZWVrZWQgc2Vla2luZyBzdGFsbGVkIHN1c3BlbmQgdGltZXVwZGF0ZSB2b2x1bWVjaGFuZ2Ugd2FpdGluZ1wiLnNwbGl0KFwiIFwiKSxZZT1uZXcgU2V0KFwiY2FuY2VsIGNsb3NlIGludmFsaWQgbG9hZCBzY3JvbGwgdG9nZ2xlXCIuc3BsaXQoXCIgXCIpLmNvbmNhdChYZSkpO1xuZnVuY3Rpb24gWmUoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PWM7WWIoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIHNlKGEsYil7Yj0wIT09KGImNCk7Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBkPWFbY10sZT1kLmV2ZW50O2Q9ZC5saXN0ZW5lcnM7YTp7dmFyIGY9dm9pZCAwO2lmKGIpZm9yKHZhciBnPWQubGVuZ3RoLTE7MDw9ZztnLS0pe3ZhciBoPWRbZ10saz1oLmluc3RhbmNlLGw9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7WmUoZSxoLGwpO2Y9a31lbHNlIGZvcihnPTA7ZzxkLmxlbmd0aDtnKyspe2g9ZFtnXTtrPWguaW5zdGFuY2U7bD1oLmN1cnJlbnRUYXJnZXQ7aD1oLmxpc3RlbmVyO2lmKGshPT1mJiZlLmlzUHJvcGFnYXRpb25TdG9wcGVkKCkpYnJlYWsgYTtaZShlLGgsbCk7Zj1rfX19aWYoVWIpdGhyb3cgYT1WYixVYj0hMSxWYj1udWxsLGE7fVxuZnVuY3Rpb24gRyhhLGIpe3ZhciBjPSRlKGIpLGQ9YStcIl9fYnViYmxlXCI7Yy5oYXMoZCl8fChhZihiLGEsMiwhMSksYy5hZGQoZCkpfXZhciBiZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIGNmKGEpe2FbYmZdfHwoYVtiZl09ITAsYmEuZm9yRWFjaChmdW5jdGlvbihiKXtZZS5oYXMoYil8fGRmKGIsITEsYSxudWxsKTtkZihiLCEwLGEsbnVsbCl9KSl9XG5mdW5jdGlvbiBkZihhLGIsYyxkKXt2YXIgZT00PGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06MCxmPWM7XCJzZWxlY3Rpb25jaGFuZ2VcIj09PWEmJjkhPT1jLm5vZGVUeXBlJiYoZj1jLm93bmVyRG9jdW1lbnQpO2lmKG51bGwhPT1kJiYhYiYmWWUuaGFzKGEpKXtpZihcInNjcm9sbFwiIT09YSlyZXR1cm47ZXw9MjtmPWR9dmFyIGc9JGUoZiksaD1hK1wiX19cIisoYj9cImNhcHR1cmVcIjpcImJ1YmJsZVwiKTtnLmhhcyhoKXx8KGImJihlfD00KSxhZihmLGEsZSxiKSxnLmFkZChoKSl9XG5mdW5jdGlvbiBhZihhLGIsYyxkKXt2YXIgZT1OYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWU/MjplKXtjYXNlIDA6ZT1nZDticmVhaztjYXNlIDE6ZT1pZDticmVhaztkZWZhdWx0OmU9aGR9Yz1lLmJpbmQobnVsbCxiLGMsYSk7ZT12b2lkIDA7IVBifHxcInRvdWNoc3RhcnRcIiE9PWImJlwidG91Y2htb3ZlXCIhPT1iJiZcIndoZWVsXCIhPT1ifHwoZT0hMCk7ZD92b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse2NhcHR1cmU6ITAscGFzc2l2ZTplfSk6YS5hZGRFdmVudExpc3RlbmVyKGIsYywhMCk6dm9pZCAwIT09ZT9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLHtwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCExKX1cbmZ1bmN0aW9uIGpkKGEsYixjLGQsZSl7dmFyIGY9ZDtpZigwPT09KGImMSkmJjA9PT0oYiYyKSYmbnVsbCE9PWQpYTpmb3IoOzspe2lmKG51bGw9PT1kKXJldHVybjt2YXIgZz1kLnRhZztpZigzPT09Z3x8ND09PWcpe3ZhciBoPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87aWYoaD09PWV8fDg9PT1oLm5vZGVUeXBlJiZoLnBhcmVudE5vZGU9PT1lKWJyZWFrO2lmKDQ9PT1nKWZvcihnPWQucmV0dXJuO251bGwhPT1nOyl7dmFyIGs9Zy50YWc7aWYoMz09PWt8fDQ9PT1rKWlmKGs9Zy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyxrPT09ZXx8OD09PWsubm9kZVR5cGUmJmsucGFyZW50Tm9kZT09PWUpcmV0dXJuO2c9Zy5yZXR1cm59Zm9yKDtudWxsIT09aDspe2c9d2MoaCk7aWYobnVsbD09PWcpcmV0dXJuO2s9Zy50YWc7aWYoNT09PWt8fDY9PT1rKXtkPWY9Zztjb250aW51ZSBhfWg9aC5wYXJlbnROb2RlfX1kPWQucmV0dXJufU5iKGZ1bmN0aW9uKCl7dmFyIGQ9ZixlPXhiKGMpLGc9W107XG5hOnt2YXIgaD1NYy5nZXQoYSk7aWYodm9pZCAwIT09aCl7dmFyIGs9dGQseD1hO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2QoYykpYnJlYWsgYTtjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOms9UmQ7YnJlYWs7Y2FzZSBcImZvY3VzaW5cIjp4PVwiZm9jdXNcIjtrPUZkO2JyZWFrO2Nhc2UgXCJmb2N1c291dFwiOng9XCJibHVyXCI7az1GZDticmVhaztjYXNlIFwiYmVmb3JlYmx1clwiOmNhc2UgXCJhZnRlcmJsdXJcIjprPUZkO2JyZWFrO2Nhc2UgXCJjbGlja1wiOmlmKDI9PT1jLmJ1dHRvbilicmVhayBhO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6az1CZDticmVhaztjYXNlIFwiZHJhZ1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwiZHJhZ3N0YXJ0XCI6Y2FzZSBcImRyb3BcIjprPVxuRGQ7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6az1WZDticmVhaztjYXNlIEljOmNhc2UgSmM6Y2FzZSBLYzprPUhkO2JyZWFrO2Nhc2UgTGM6az1YZDticmVhaztjYXNlIFwic2Nyb2xsXCI6az12ZDticmVhaztjYXNlIFwid2hlZWxcIjprPVpkO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOms9SmQ7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6az1UZH12YXIgdz0wIT09KGImNCksej0hdyYmXCJzY3JvbGxcIj09PWEsdT13P251bGwhPT1oP2grXCJDYXB0dXJlXCI6bnVsbDpoO3c9W107Zm9yKHZhciB0PWQscTtudWxsIT09XG50Oyl7cT10O3ZhciB2PXEuc3RhdGVOb2RlOzU9PT1xLnRhZyYmbnVsbCE9PXYmJihxPXYsbnVsbCE9PXUmJih2PU9iKHQsdSksbnVsbCE9diYmdy5wdXNoKGVmKHQsdixxKSkpKTtpZih6KWJyZWFrO3Q9dC5yZXR1cm59MDx3Lmxlbmd0aCYmKGg9bmV3IGsoaCx4LG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmgsbGlzdGVuZXJzOnd9KSl9fWlmKDA9PT0oYiY3KSl7YTp7aD1cIm1vdXNlb3ZlclwiPT09YXx8XCJwb2ludGVyb3ZlclwiPT09YTtrPVwibW91c2VvdXRcIj09PWF8fFwicG9pbnRlcm91dFwiPT09YTtpZihoJiYwPT09KGImMTYpJiYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpJiYod2MoeCl8fHhbZmZdKSlicmVhayBhO2lmKGt8fGgpe2g9ZS53aW5kb3c9PT1lP2U6KGg9ZS5vd25lckRvY3VtZW50KT9oLmRlZmF1bHRWaWV3fHxoLnBhcmVudFdpbmRvdzp3aW5kb3c7aWYoayl7aWYoeD1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50LGs9ZCx4PXg/d2MoeCk6bnVsbCxudWxsIT09XG54JiYoej1aYih4KSx4IT09enx8NSE9PXgudGFnJiY2IT09eC50YWcpKXg9bnVsbH1lbHNlIGs9bnVsbCx4PWQ7aWYoayE9PXgpe3c9QmQ7dj1cIm9uTW91c2VMZWF2ZVwiO3U9XCJvbk1vdXNlRW50ZXJcIjt0PVwibW91c2VcIjtpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpdz1UZCx2PVwib25Qb2ludGVyTGVhdmVcIix1PVwib25Qb2ludGVyRW50ZXJcIix0PVwicG9pbnRlclwiO3o9bnVsbD09az9oOnVlKGspO3E9bnVsbD09eD9oOnVlKHgpO2g9bmV3IHcodix0K1wibGVhdmVcIixrLGMsZSk7aC50YXJnZXQ9ejtoLnJlbGF0ZWRUYXJnZXQ9cTt2PW51bGw7d2MoZSk9PT1kJiYodz1uZXcgdyh1LHQrXCJlbnRlclwiLHgsYyxlKSx3LnRhcmdldD1xLHcucmVsYXRlZFRhcmdldD16LHY9dyk7ej12O2lmKGsmJngpYjp7dz1rO3U9eDt0PTA7Zm9yKHE9dztxO3E9Z2YocSkpdCsrO3E9MDtmb3Iodj11O3Y7dj1nZih2KSlxKys7Zm9yKDswPHQtcTspdz1nZih3KSx0LS07Zm9yKDswPHEtdDspdT1cbmdmKHUpLHEtLTtmb3IoO3QtLTspe2lmKHc9PT11fHxudWxsIT09dSYmdz09PXUuYWx0ZXJuYXRlKWJyZWFrIGI7dz1nZih3KTt1PWdmKHUpfXc9bnVsbH1lbHNlIHc9bnVsbDtudWxsIT09ayYmaGYoZyxoLGssdywhMSk7bnVsbCE9PXgmJm51bGwhPT16JiZoZihnLHoseCx3LCEwKX19fWE6e2g9ZD91ZShkKTp3aW5kb3c7az1oLm5vZGVOYW1lJiZoLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWt8fFwiaW5wdXRcIj09PWsmJlwiZmlsZVwiPT09aC50eXBlKXZhciBKPXZlO2Vsc2UgaWYobWUoaCkpaWYod2UpSj1GZTtlbHNle0o9RGU7dmFyIEs9Q2V9ZWxzZShrPWgubm9kZU5hbWUpJiZcImlucHV0XCI9PT1rLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1oLnR5cGV8fFwicmFkaW9cIj09PWgudHlwZSkmJihKPUVlKTtpZihKJiYoSj1KKGEsZCkpKXtuZShnLEosYyxlKTticmVhayBhfUsmJksoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJihLPWguX3dyYXBwZXJTdGF0ZSkmJlxuSy5jb250cm9sbGVkJiZcIm51bWJlclwiPT09aC50eXBlJiZiYihoLFwibnVtYmVyXCIsaC52YWx1ZSl9Sz1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZShLKXx8XCJ0cnVlXCI9PT1LLmNvbnRlbnRFZGl0YWJsZSlRZT1LLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgUTtpZihhZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6TD1cIm9uQ29tcG9zaXRpb25FbmRcIjticmVhayBiO1xuY2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6TD1cIm9uQ29tcG9zaXRpb25VcGRhdGVcIjticmVhayBifUw9dm9pZCAwfWVsc2UgaWU/Z2UoYSxjKSYmKEw9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoTD1cIm9uQ29tcG9zaXRpb25TdGFydFwiKTtMJiYoZGUmJlwia29cIiE9PWMubG9jYWxlJiYoaWV8fFwib25Db21wb3NpdGlvblN0YXJ0XCIhPT1MP1wib25Db21wb3NpdGlvbkVuZFwiPT09TCYmaWUmJihRPW5kKCkpOihrZD1lLGxkPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGllPSEwKSksSz1vZShkLEwpLDA8Sy5sZW5ndGgmJihMPW5ldyBMZChMLGEsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6TCxsaXN0ZW5lcnM6S30pLFE/TC5kYXRhPVE6KFE9aGUoYyksbnVsbCE9PVEmJihMLmRhdGE9USkpKSk7aWYoUT1jZT9qZShhLGMpOmtlKGEsYykpZD1vZShkLFwib25CZWZvcmVJbnB1dFwiKSwwPGQubGVuZ3RoJiYoZT1uZXcgTGQoXCJvbkJlZm9yZUlucHV0XCIsXG5cImJlZm9yZWlucHV0XCIsbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6ZSxsaXN0ZW5lcnM6ZH0pLGUuZGF0YT1RKX1zZShnLGIpfSl9ZnVuY3Rpb24gZWYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPU9iKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KGVmKGEsZixlKSksZj1PYihhLGIpLG51bGwhPWYmJmQucHVzaChlZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIGdmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiBoZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPU9iKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KGVmKGMsayxoKSkpOmV8fChrPU9iKGMsZiksbnVsbCE9ayYmZy5wdXNoKGVmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9ZnVuY3Rpb24gamYoKXt9dmFyIGtmPW51bGwsbGY9bnVsbDtmdW5jdGlvbiBtZihhLGIpe3N3aXRjaChhKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOnJldHVybiEhYi5hdXRvRm9jdXN9cmV0dXJuITF9XG5mdW5jdGlvbiBuZihhLGIpe3JldHVyblwidGV4dGFyZWFcIj09PWF8fFwib3B0aW9uXCI9PT1hfHxcIm5vc2NyaXB0XCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTC5fX2h0bWx9dmFyIG9mPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLHBmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMDtmdW5jdGlvbiBxZihhKXsxPT09YS5ub2RlVHlwZT9hLnRleHRDb250ZW50PVwiXCI6OT09PWEubm9kZVR5cGUmJihhPWEuYm9keSxudWxsIT1hJiYoYS50ZXh0Q29udGVudD1cIlwiKSl9XG5mdW5jdGlvbiByZihhKXtmb3IoO251bGwhPWE7YT1hLm5leHRTaWJsaW5nKXt2YXIgYj1hLm5vZGVUeXBlO2lmKDE9PT1ifHwzPT09YilicmVha31yZXR1cm4gYX1mdW5jdGlvbiBzZihhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKFwiJFwiPT09Y3x8XCIkIVwiPT09Y3x8XCIkP1wiPT09Yyl7aWYoMD09PWIpcmV0dXJuIGE7Yi0tfWVsc2VcIi8kXCI9PT1jJiZiKyt9YT1hLnByZXZpb3VzU2libGluZ31yZXR1cm4gbnVsbH12YXIgdGY9MDtmdW5jdGlvbiB1ZihhKXtyZXR1cm57JCR0eXBlb2Y6R2EsdG9TdHJpbmc6YSx2YWx1ZU9mOmF9fXZhciB2Zj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSx3Zj1cIl9fcmVhY3RGaWJlciRcIit2Zix4Zj1cIl9fcmVhY3RQcm9wcyRcIit2ZixmZj1cIl9fcmVhY3RDb250YWluZXIkXCIrdmYseWY9XCJfX3JlYWN0RXZlbnRzJFwiK3ZmO1xuZnVuY3Rpb24gd2MoYSl7dmFyIGI9YVt3Zl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbZmZdfHxjW3dmXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPXNmKGEpO251bGwhPT1hOyl7aWYoYz1hW3dmXSlyZXR1cm4gYzthPXNmKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbd2ZdfHxhW2ZmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHkoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbeGZdfHxudWxsfVxuZnVuY3Rpb24gJGUoYSl7dmFyIGI9YVt5Zl07dm9pZCAwPT09YiYmKGI9YVt5Zl09bmV3IFNldCk7cmV0dXJuIGJ9dmFyIHpmPVtdLEFmPS0xO2Z1bmN0aW9uIEJmKGEpe3JldHVybntjdXJyZW50OmF9fWZ1bmN0aW9uIEgoYSl7MD5BZnx8KGEuY3VycmVudD16ZltBZl0semZbQWZdPW51bGwsQWYtLSl9ZnVuY3Rpb24gSShhLGIpe0FmKys7emZbQWZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgQ2Y9e30sTT1CZihDZiksTj1CZighMSksRGY9Q2Y7XG5mdW5jdGlvbiBFZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIENmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEZmKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9ZnVuY3Rpb24gR2YoKXtIKE4pO0goTSl9ZnVuY3Rpb24gSGYoYSxiLGMpe2lmKE0uY3VycmVudCE9PUNmKXRocm93IEVycm9yKHkoMTY4KSk7SShNLGIpO0koTixjKX1cbmZ1bmN0aW9uIElmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IoeSgxMDgsUmEoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbSh7fSxjLGQpfWZ1bmN0aW9uIEpmKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxDZjtEZj1NLmN1cnJlbnQ7SShNLGEpO0koTixOLmN1cnJlbnQpO3JldHVybiEwfWZ1bmN0aW9uIEtmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTtpZighZCl0aHJvdyBFcnJvcih5KDE2OSkpO2M/KGE9SWYoYSxiLERmKSxkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWEsSChOKSxIKE0pLEkoTSxhKSk6SChOKTtJKE4sYyl9XG52YXIgTGY9bnVsbCxNZj1udWxsLE5mPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LE9mPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxQZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLFFmPXIudW5zdGFibGVfc2hvdWxkWWllbGQsUmY9ci51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsU2Y9ci51bnN0YWJsZV9ub3csVGY9ci51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCxVZj1yLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5LFZmPXIudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksV2Y9ci51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSxYZj1yLnVuc3RhYmxlX0xvd1ByaW9yaXR5LFlmPXIudW5zdGFibGVfSWRsZVByaW9yaXR5LFpmPXt9LCRmPXZvaWQgMCE9PVJmP1JmOmZ1bmN0aW9uKCl7fSxhZz1udWxsLGJnPW51bGwsY2c9ITEsZGc9U2YoKSxPPTFFND5kZz9TZjpmdW5jdGlvbigpe3JldHVybiBTZigpLWRnfTtcbmZ1bmN0aW9uIGVnKCl7c3dpdGNoKFRmKCkpe2Nhc2UgVWY6cmV0dXJuIDk5O2Nhc2UgVmY6cmV0dXJuIDk4O2Nhc2UgV2Y6cmV0dXJuIDk3O2Nhc2UgWGY6cmV0dXJuIDk2O2Nhc2UgWWY6cmV0dXJuIDk1O2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMzIpKTt9fWZ1bmN0aW9uIGZnKGEpe3N3aXRjaChhKXtjYXNlIDk5OnJldHVybiBVZjtjYXNlIDk4OnJldHVybiBWZjtjYXNlIDk3OnJldHVybiBXZjtjYXNlIDk2OnJldHVybiBYZjtjYXNlIDk1OnJldHVybiBZZjtkZWZhdWx0OnRocm93IEVycm9yKHkoMzMyKSk7fX1mdW5jdGlvbiBnZyhhLGIpe2E9ZmcoYSk7cmV0dXJuIE5mKGEsYil9ZnVuY3Rpb24gaGcoYSxiLGMpe2E9ZmcoYSk7cmV0dXJuIE9mKGEsYixjKX1mdW5jdGlvbiBpZygpe2lmKG51bGwhPT1iZyl7dmFyIGE9Ymc7Ymc9bnVsbDtQZihhKX1qZygpfVxuZnVuY3Rpb24gamcoKXtpZighY2cmJm51bGwhPT1hZyl7Y2c9ITA7dmFyIGE9MDt0cnl7dmFyIGI9YWc7Z2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO2FnPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PWFnJiYoYWc9YWcuc2xpY2UoYSsxKSksT2YoVWYsaWcpLGM7fWZpbmFsbHl7Y2c9ITF9fX12YXIga2c9cmEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc7ZnVuY3Rpb24gbGcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1tKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSk7cmV0dXJuIGJ9cmV0dXJuIGJ9dmFyIG1nPUJmKG51bGwpLG5nPW51bGwsb2c9bnVsbCxwZz1udWxsO2Z1bmN0aW9uIHFnKCl7cGc9b2c9bmc9bnVsbH1cbmZ1bmN0aW9uIHJnKGEpe3ZhciBiPW1nLmN1cnJlbnQ7SChtZyk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBzZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZigoYS5jaGlsZExhbmVzJmIpPT09YilpZihudWxsPT09Y3x8KGMuY2hpbGRMYW5lcyZiKT09PWIpYnJlYWs7ZWxzZSBjLmNoaWxkTGFuZXN8PWI7ZWxzZSBhLmNoaWxkTGFuZXN8PWIsbnVsbCE9PWMmJihjLmNoaWxkTGFuZXN8PWIpO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHRnKGEsYil7bmc9YTtwZz1vZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKDAhPT0oYS5sYW5lcyZiKSYmKHVnPSEwKSxhLmZpcnN0Q29udGV4dD1udWxsKX1cbmZ1bmN0aW9uIHZnKGEsYil7aWYocGchPT1hJiYhMSE9PWImJjAhPT1iKXtpZihcIm51bWJlclwiIT09dHlwZW9mIGJ8fDEwNzM3NDE4MjM9PT1iKXBnPWEsYj0xMDczNzQxODIzO2I9e2NvbnRleHQ6YSxvYnNlcnZlZEJpdHM6YixuZXh0Om51bGx9O2lmKG51bGw9PT1vZyl7aWYobnVsbD09PW5nKXRocm93IEVycm9yKHkoMzA4KSk7b2c9YjtuZy5kZXBlbmRlbmNpZXM9e2xhbmVzOjAsZmlyc3RDb250ZXh0OmIscmVzcG9uZGVyczpudWxsfX1lbHNlIG9nPW9nLm5leHQ9Yn1yZXR1cm4gYS5fY3VycmVudFZhbHVlfXZhciB3Zz0hMTtmdW5jdGlvbiB4ZyhhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGx9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB5ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxmaXJzdEJhc2VVcGRhdGU6YS5maXJzdEJhc2VVcGRhdGUsbGFzdEJhc2VVcGRhdGU6YS5sYXN0QmFzZVVwZGF0ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB6ZyhhLGIpe3JldHVybntldmVudFRpbWU6YSxsYW5lOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfX1mdW5jdGlvbiBBZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIEJnKGEsYil7dmFyIGM9YS51cGRhdGVRdWV1ZSxkPWEuYWx0ZXJuYXRlO2lmKG51bGwhPT1kJiYoZD1kLnVwZGF0ZVF1ZXVlLGM9PT1kKSl7dmFyIGU9bnVsbCxmPW51bGw7Yz1jLmZpcnN0QmFzZVVwZGF0ZTtpZihudWxsIT09Yyl7ZG97dmFyIGc9e2V2ZW50VGltZTpjLmV2ZW50VGltZSxsYW5lOmMubGFuZSx0YWc6Yy50YWcscGF5bG9hZDpjLnBheWxvYWQsY2FsbGJhY2s6Yy5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT1mP2U9Zj1nOmY9Zi5uZXh0PWc7Yz1jLm5leHR9d2hpbGUobnVsbCE9PWMpO251bGw9PT1mP2U9Zj1iOmY9Zi5uZXh0PWJ9ZWxzZSBlPWY9YjtjPXtiYXNlU3RhdGU6ZC5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmUsbGFzdEJhc2VVcGRhdGU6ZixzaGFyZWQ6ZC5zaGFyZWQsZWZmZWN0czpkLmVmZmVjdHN9O2EudXBkYXRlUXVldWU9YztyZXR1cm59YT1jLmxhc3RCYXNlVXBkYXRlO251bGw9PT1hP2MuZmlyc3RCYXNlVXBkYXRlPWI6YS5uZXh0PVxuYjtjLmxhc3RCYXNlVXBkYXRlPWJ9XG5mdW5jdGlvbiBDZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3dnPSExO3ZhciBmPWUuZmlyc3RCYXNlVXBkYXRlLGc9ZS5sYXN0QmFzZVVwZGF0ZSxoPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWgpe2Uuc2hhcmVkLnBlbmRpbmc9bnVsbDt2YXIgaz1oLGw9ay5uZXh0O2submV4dD1udWxsO251bGw9PT1nP2Y9bDpnLm5leHQ9bDtnPWs7dmFyIG49YS5hbHRlcm5hdGU7aWYobnVsbCE9PW4pe249bi51cGRhdGVRdWV1ZTt2YXIgQT1uLmxhc3RCYXNlVXBkYXRlO0EhPT1nJiYobnVsbD09PUE/bi5maXJzdEJhc2VVcGRhdGU9bDpBLm5leHQ9bCxuLmxhc3RCYXNlVXBkYXRlPWspfX1pZihudWxsIT09Zil7QT1lLmJhc2VTdGF0ZTtnPTA7bj1sPWs9bnVsbDtkb3toPWYubGFuZTt2YXIgcD1mLmV2ZW50VGltZTtpZigoZCZoKT09PWgpe251bGwhPT1uJiYobj1uLm5leHQ9e2V2ZW50VGltZTpwLGxhbmU6MCx0YWc6Zi50YWcscGF5bG9hZDpmLnBheWxvYWQsY2FsbGJhY2s6Zi5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBDPWEseD1mO2g9YjtwPWM7c3dpdGNoKHgudGFnKXtjYXNlIDE6Qz14LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIEMpe0E9Qy5jYWxsKHAsQSxoKTticmVhayBhfUE9QzticmVhayBhO2Nhc2UgMzpDLmZsYWdzPUMuZmxhZ3MmLTQwOTd8NjQ7Y2FzZSAwOkM9eC5wYXlsb2FkO2g9XCJmdW5jdGlvblwiPT09dHlwZW9mIEM/Qy5jYWxsKHAsQSxoKTpDO2lmKG51bGw9PT1ofHx2b2lkIDA9PT1oKWJyZWFrIGE7QT1tKHt9LEEsaCk7YnJlYWsgYTtjYXNlIDI6d2c9ITB9fW51bGwhPT1mLmNhbGxiYWNrJiYoYS5mbGFnc3w9MzIsaD1lLmVmZmVjdHMsbnVsbD09PWg/ZS5lZmZlY3RzPVtmXTpoLnB1c2goZikpfWVsc2UgcD17ZXZlbnRUaW1lOnAsbGFuZTpoLHRhZzpmLnRhZyxwYXlsb2FkOmYucGF5bG9hZCxjYWxsYmFjazpmLmNhbGxiYWNrLG5leHQ6bnVsbH0sbnVsbD09PW4/KGw9bj1wLGs9QSk6bj1uLm5leHQ9cCxnfD1oO2Y9Zi5uZXh0O2lmKG51bGw9PT1cbmYpaWYoaD1lLnNoYXJlZC5wZW5kaW5nLG51bGw9PT1oKWJyZWFrO2Vsc2UgZj1oLm5leHQsaC5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1oLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09biYmKGs9QSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bjtEZ3w9ZzthLmxhbmVzPWc7YS5tZW1vaXplZFN0YXRlPUF9fWZ1bmN0aW9uIEVnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcih5KDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIEZnPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO1xuZnVuY3Rpb24gR2coYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm0oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5sYW5lcyYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEtnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbHMpP1piKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO0FnKGEsZik7SmcoYSxlLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBkPUhnKCksZT1JZyhhKSxmPXpnKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7QWcoYSxmKTtKZyhhLGUsZCl9LGVucXVldWVGb3JjZVVwZGF0ZTpmdW5jdGlvbihhLGIpe2E9YS5fcmVhY3RJbnRlcm5hbHM7dmFyIGM9SGcoKSxkPUlnKGEpLGU9emcoYyxkKTtlLnRhZz0yO3ZvaWQgMCE9PWImJm51bGwhPT1iJiYoZS5jYWxsYmFjaz1cbmIpO0FnKGEsZSk7SmcoYSxkLGMpfX07ZnVuY3Rpb24gTGcoYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hSmUoYyxkKXx8IUplKGUsZik6ITB9XG5mdW5jdGlvbiBNZyhhLGIsYyl7dmFyIGQ9ITEsZT1DZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj12ZyhmKTooZT1GZihiKT9EZjpNLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9FZihhLGUpOkNmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9S2c7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFscz1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBPZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUZnO3hnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9dmcoZik6KGY9RmYoYik/RGY6TS5jdXJyZW50LGUuY29udGV4dD1FZihhLGYpKTtDZyhhLGMsZSxkKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoR2coYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8XG4oYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmS2cuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksQ2coYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5mbGFnc3w9NCl9dmFyIFBnPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBRZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHkoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IoeSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RmcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IoeSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IoeSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFJnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHkoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7fVxuZnVuY3Rpb24gU2coYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5mbGFncz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1UZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5mbGFncz0yLFxuYyk6ZDtiLmZsYWdzPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1VZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1RZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VmcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UWcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5XZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbihhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9WGcoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBBKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1VZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYz1WZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1RZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgdGE6cmV0dXJuIGI9V2coYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKFBnKGIpfHxMYShiKSlyZXR1cm4gYj1YZyhiLFxuYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1JnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBzYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PXVhP24oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSB0YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihQZyhjKXx8TGEoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bihhLGIsYyxkLG51bGwpO1JnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQyhhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxcbm51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIHNhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT11YT9uKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSB0YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihQZyhkKXx8TGEoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbihiLGEsZCxlLG51bGwpO1JnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChlLGcsaCxrKXtmb3IodmFyIGw9bnVsbCx0PW51bGwsdT1nLHo9Zz0wLHE9bnVsbDtudWxsIT09dSYmejxoLmxlbmd0aDt6Kyspe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIG49cChlLHUsaFt6XSxrKTtpZihudWxsPT09bil7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT1cbm4uYWx0ZXJuYXRlJiZiKGUsdSk7Zz1mKG4sZyx6KTtudWxsPT09dD9sPW46dC5zaWJsaW5nPW47dD1uO3U9cX1pZih6PT09aC5sZW5ndGgpcmV0dXJuIGMoZSx1KSxsO2lmKG51bGw9PT11KXtmb3IoO3o8aC5sZW5ndGg7eisrKXU9QShlLGhbel0sayksbnVsbCE9PXUmJihnPWYodSxnLHopLG51bGw9PT10P2w9dTp0LnNpYmxpbmc9dSx0PXUpO3JldHVybiBsfWZvcih1PWQoZSx1KTt6PGgubGVuZ3RoO3orKylxPUModSxlLHosaFt6XSxrKSxudWxsIT09cSYmKGEmJm51bGwhPT1xLmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PXEua2V5P3o6cS5rZXkpLGc9ZihxLGcseiksbnVsbD09PXQ/bD1xOnQuc2libGluZz1xLHQ9cSk7YSYmdS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gbH1mdW5jdGlvbiB3KGUsZyxoLGspe3ZhciBsPUxhKGgpO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBsKXRocm93IEVycm9yKHkoMTUwKSk7aD1sLmNhbGwoaCk7aWYobnVsbD09XG5oKXRocm93IEVycm9yKHkoMTUxKSk7Zm9yKHZhciB0PWw9bnVsbCx1PWcsej1nPTAscT1udWxsLG49aC5uZXh0KCk7bnVsbCE9PXUmJiFuLmRvbmU7eisrLG49aC5uZXh0KCkpe3UuaW5kZXg+ej8ocT11LHU9bnVsbCk6cT11LnNpYmxpbmc7dmFyIHc9cChlLHUsbi52YWx1ZSxrKTtpZihudWxsPT09dyl7bnVsbD09PXUmJih1PXEpO2JyZWFrfWEmJnUmJm51bGw9PT13LmFsdGVybmF0ZSYmYihlLHUpO2c9Zih3LGcseik7bnVsbD09PXQ/bD13OnQuc2libGluZz13O3Q9dzt1PXF9aWYobi5kb25lKXJldHVybiBjKGUsdSksbDtpZihudWxsPT09dSl7Zm9yKDshbi5kb25lO3orKyxuPWgubmV4dCgpKW49QShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO3JldHVybiBsfWZvcih1PWQoZSx1KTshbi5kb25lO3orKyxuPWgubmV4dCgpKW49Qyh1LGUseixuLnZhbHVlLGspLG51bGwhPT1uJiYoYSYmbnVsbCE9PW4uYWx0ZXJuYXRlJiZcbnUuZGVsZXRlKG51bGw9PT1uLmtleT96Om4ua2V5KSxnPWYobixnLHopLG51bGw9PT10P2w9bjp0LnNpYmxpbmc9bix0PW4pO2EmJnUuZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9cmV0dXJuIGZ1bmN0aW9uKGEsZCxmLGgpe3ZhciBrPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXVhJiZudWxsPT09Zi5rZXk7ayYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGw9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihsKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHNhOmE6e2w9Zi5rZXk7Zm9yKGs9ZDtudWxsIT09azspe2lmKGsua2V5PT09bCl7c3dpdGNoKGsudGFnKXtjYXNlIDc6aWYoZi50eXBlPT09dWEpe2MoYSxrLnNpYmxpbmcpO2Q9ZShrLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9YnJlYWs7ZGVmYXVsdDppZihrLmVsZW1lbnRUeXBlPT09Zi50eXBlKXtjKGEsay5zaWJsaW5nKTtcbmQ9ZShrLGYucHJvcHMpO2QucmVmPVFnKGEsayxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfX1jKGEsayk7YnJlYWt9ZWxzZSBiKGEsayk7az1rLnNpYmxpbmd9Zi50eXBlPT09dWE/KGQ9WGcoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsaCxmLmtleSksZC5yZXR1cm49YSxhPWQpOihoPVZnKGYudHlwZSxmLmtleSxmLnByb3BzLG51bGwsYS5tb2RlLGgpLGgucmVmPVFnKGEsZCxmKSxoLnJldHVybj1hLGE9aCl9cmV0dXJuIGcoYSk7Y2FzZSB0YTphOntmb3Ioaz1mLmtleTtudWxsIT09ZDspe2lmKGQua2V5PT09aylpZig0PT09ZC50YWcmJmQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm89PT1mLmNvbnRhaW5lckluZm8mJmQuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uPT09Zi5pbXBsZW1lbnRhdGlvbil7YyhhLGQuc2libGluZyk7ZD1lKGQsZi5jaGlsZHJlbnx8W10pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9ZWxzZXtjKGEsZCk7YnJlYWt9ZWxzZSBiKGEsZCk7ZD1kLnNpYmxpbmd9ZD1cbldnKGYsYS5tb2RlLGgpO2QucmV0dXJuPWE7YT1kfXJldHVybiBnKGEpfWlmKFwic3RyaW5nXCI9PT10eXBlb2YgZnx8XCJudW1iZXJcIj09PXR5cGVvZiBmKXJldHVybiBmPVwiXCIrZixudWxsIT09ZCYmNj09PWQudGFnPyhjKGEsZC5zaWJsaW5nKSxkPWUoZCxmKSxkLnJldHVybj1hLGE9ZCk6KGMoYSxkKSxkPVVnKGYsYS5tb2RlLGgpLGQucmV0dXJuPWEsYT1kKSxnKGEpO2lmKFBnKGYpKXJldHVybiB4KGEsZCxmLGgpO2lmKExhKGYpKXJldHVybiB3KGEsZCxmLGgpO2wmJlJnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDIyOmNhc2UgMDpjYXNlIDExOmNhc2UgMTU6dGhyb3cgRXJyb3IoeSgxNTIsUmEoYS50eXBlKXx8XCJDb21wb25lbnRcIikpO31yZXR1cm4gYyhhLGQpfX12YXIgWWc9U2coITApLFpnPVNnKCExKSwkZz17fSxhaD1CZigkZyksYmg9QmYoJGcpLGNoPUJmKCRnKTtcbmZ1bmN0aW9uIGRoKGEpe2lmKGE9PT0kZyl0aHJvdyBFcnJvcih5KDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIGVoKGEsYil7SShjaCxiKTtJKGJoLGEpO0koYWgsJGcpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bWIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPW1iKGIsYSl9SChhaCk7SShhaCxiKX1mdW5jdGlvbiBmaCgpe0goYWgpO0goYmgpO0goY2gpfWZ1bmN0aW9uIGdoKGEpe2RoKGNoLmN1cnJlbnQpO3ZhciBiPWRoKGFoLmN1cnJlbnQpO3ZhciBjPW1iKGIsYS50eXBlKTtiIT09YyYmKEkoYmgsYSksSShhaCxjKSl9ZnVuY3Rpb24gaGgoYSl7YmguY3VycmVudD09PWEmJihIKGFoKSxIKGJoKSl9dmFyIFA9QmYoMCk7XG5mdW5jdGlvbiBpaChhKXtmb3IodmFyIGI9YTtudWxsIT09Yjspe2lmKDEzPT09Yi50YWcpe3ZhciBjPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09YyYmKGM9Yy5kZWh5ZHJhdGVkLG51bGw9PT1jfHxcIiQ/XCI9PT1jLmRhdGF8fFwiJCFcIj09PWMuZGF0YSkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBqaD1udWxsLGtoPW51bGwsbGg9ITE7XG5mdW5jdGlvbiBtaChhLGIpe3ZhciBjPW5oKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmZsYWdzPTg7bnVsbCE9PWEubGFzdEVmZmVjdD8oYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxhLmxhc3RFZmZlY3Q9Yyk6YS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9Y31mdW5jdGlvbiBvaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gcGgoYSl7aWYobGgpe3ZhciBiPWtoO2lmKGIpe3ZhciBjPWI7aWYoIW9oKGEsYikpe2I9cmYoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFvaChhLGIpKXthLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MjtsaD0hMTtqaD1hO3JldHVybn1taChqaCxjKX1qaD1hO2toPXJmKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmZsYWdzPWEuZmxhZ3MmLTEwMjV8MixsaD0hMSxqaD1hfX1mdW5jdGlvbiBxaChhKXtmb3IoYT1hLnJldHVybjtudWxsIT09YSYmNSE9PWEudGFnJiYzIT09YS50YWcmJjEzIT09YS50YWc7KWE9YS5yZXR1cm47amg9YX1cbmZ1bmN0aW9uIHJoKGEpe2lmKGEhPT1qaClyZXR1cm4hMTtpZighbGgpcmV0dXJuIHFoKGEpLGxoPSEwLCExO3ZhciBiPWEudHlwZTtpZig1IT09YS50YWd8fFwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhbmYoYixhLm1lbW9pemVkUHJvcHMpKWZvcihiPWtoO2I7KW1oKGEsYiksYj1yZihiLm5leHRTaWJsaW5nKTtxaChhKTtpZigxMz09PWEudGFnKXthPWEubWVtb2l6ZWRTdGF0ZTthPW51bGwhPT1hP2EuZGVoeWRyYXRlZDpudWxsO2lmKCFhKXRocm93IEVycm9yKHkoMzE3KSk7YTp7YT1hLm5leHRTaWJsaW5nO2ZvcihiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIvJFwiPT09Yyl7aWYoMD09PWIpe2toPXJmKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2VcIiRcIiE9PWMmJlwiJCFcIiE9PWMmJlwiJD9cIiE9PWN8fGIrK31hPWEubmV4dFNpYmxpbmd9a2g9bnVsbH19ZWxzZSBraD1qaD9yZihhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1cbmZ1bmN0aW9uIHNoKCl7a2g9amg9bnVsbDtsaD0hMX12YXIgdGg9W107ZnVuY3Rpb24gdWgoKXtmb3IodmFyIGE9MDthPHRoLmxlbmd0aDthKyspdGhbYV0uX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9bnVsbDt0aC5sZW5ndGg9MH12YXIgdmg9cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcix3aD1yYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyx4aD0wLFI9bnVsbCxTPW51bGwsVD1udWxsLHloPSExLHpoPSExO2Z1bmN0aW9uIEFoKCl7dGhyb3cgRXJyb3IoeSgzMjEpKTt9ZnVuY3Rpb24gQmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighSGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIENoKGEsYixjLGQsZSxmKXt4aD1mO1I9YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5sYW5lcz0wO3ZoLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/RGg6RWg7YT1jKGQsZSk7aWYoemgpe2Y9MDtkb3t6aD0hMTtpZighKDI1PmYpKXRocm93IEVycm9yKHkoMzAxKSk7Zis9MTtUPVM9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7dmguY3VycmVudD1GaDthPWMoZCxlKX13aGlsZSh6aCl9dmguY3VycmVudD1HaDtiPW51bGwhPT1TJiZudWxsIT09Uy5uZXh0O3hoPTA7VD1TPVI9bnVsbDt5aD0hMTtpZihiKXRocm93IEVycm9yKHkoMzAwKSk7cmV0dXJuIGF9ZnVuY3Rpb24gSGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09VD9SLm1lbW9pemVkU3RhdGU9VD1hOlQ9VC5uZXh0PWE7cmV0dXJuIFR9XG5mdW5jdGlvbiBJaCgpe2lmKG51bGw9PT1TKXt2YXIgYT1SLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1TLm5leHQ7dmFyIGI9bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlOlQubmV4dDtpZihudWxsIT09YilUPWIsUz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeSgzMTApKTtTPWE7YT17bWVtb2l6ZWRTdGF0ZTpTLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOlMuYmFzZVN0YXRlLGJhc2VRdWV1ZTpTLmJhc2VRdWV1ZSxxdWV1ZTpTLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVQ/Ui5tZW1vaXplZFN0YXRlPVQ9YTpUPVQubmV4dD1hfXJldHVybiBUfWZ1bmN0aW9uIEpoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gS2goYSl7dmFyIGI9SWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IoeSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1TLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2U9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1mPW51bGwsaz1lO2Rve3ZhciBsPWsubGFuZTtpZigoeGgmbCk9PT1sKW51bGwhPT1oJiYoaD1oLm5leHQ9e2xhbmU6MCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGQsay5hY3Rpb24pO2Vsc2V7dmFyIG49e2xhbmU6bCxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLFxuZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW4sZj1kKTpoPWgubmV4dD1uO1IubGFuZXN8PWw7RGd8PWx9az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7SGUoZCxiLm1lbW9pemVkU3RhdGUpfHwodWc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIExoKGEpe3ZhciBiPUloKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHkoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTtIZShmLGIubWVtb2l6ZWRTdGF0ZSl8fCh1Zz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24gTWgoYSxiLGMpe3ZhciBkPWIuX2dldFZlcnNpb247ZD1kKGIuX3NvdXJjZSk7dmFyIGU9Yi5fd29ya0luUHJvZ3Jlc3NWZXJzaW9uUHJpbWFyeTtpZihudWxsIT09ZSlhPWU9PT1kO2Vsc2UgaWYoYT1hLm11dGFibGVSZWFkTGFuZXMsYT0oeGgmYSk9PT1hKWIuX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnk9ZCx0aC5wdXNoKGIpO2lmKGEpcmV0dXJuIGMoYi5fc291cmNlKTt0aC5wdXNoKGIpO3Rocm93IEVycm9yKHkoMzUwKSk7fVxuZnVuY3Rpb24gTmgoYSxiLGMsZCl7dmFyIGU9VTtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih5KDM0OSkpO3ZhciBmPWIuX2dldFZlcnNpb24sZz1mKGIuX3NvdXJjZSksaD12aC5jdXJyZW50LGs9aC51c2VTdGF0ZShmdW5jdGlvbigpe3JldHVybiBNaChlLGIsYyl9KSxsPWtbMV0sbj1rWzBdO2s9VDt2YXIgQT1hLm1lbW9pemVkU3RhdGUscD1BLnJlZnMsQz1wLmdldFNuYXBzaG90LHg9QS5zb3VyY2U7QT1BLnN1YnNjcmliZTt2YXIgdz1SO2EubWVtb2l6ZWRTdGF0ZT17cmVmczpwLHNvdXJjZTpiLHN1YnNjcmliZTpkfTtoLnVzZUVmZmVjdChmdW5jdGlvbigpe3AuZ2V0U25hcHNob3Q9YztwLnNldFNuYXBzaG90PWw7dmFyIGE9ZihiLl9zb3VyY2UpO2lmKCFIZShnLGEpKXthPWMoYi5fc291cmNlKTtIZShuLGEpfHwobChhKSxhPUlnKHcpLGUubXV0YWJsZVJlYWRMYW5lc3w9YSZlLnBlbmRpbmdMYW5lcyk7YT1lLm11dGFibGVSZWFkTGFuZXM7ZS5lbnRhbmdsZWRMYW5lc3w9YTtmb3IodmFyIGQ9XG5lLmVudGFuZ2xlbWVudHMsaD1hOzA8aDspe3ZhciBrPTMxLVZjKGgpLHY9MTw8aztkW2tdfD1hO2gmPX52fX19LFtjLGIsZF0pO2gudXNlRWZmZWN0KGZ1bmN0aW9uKCl7cmV0dXJuIGQoYi5fc291cmNlLGZ1bmN0aW9uKCl7dmFyIGE9cC5nZXRTbmFwc2hvdCxjPXAuc2V0U25hcHNob3Q7dHJ5e2MoYShiLl9zb3VyY2UpKTt2YXIgZD1JZyh3KTtlLm11dGFibGVSZWFkTGFuZXN8PWQmZS5wZW5kaW5nTGFuZXN9Y2F0Y2gocSl7YyhmdW5jdGlvbigpe3Rocm93IHE7fSl9fSl9LFtiLGRdKTtIZShDLGMpJiZIZSh4LGIpJiZIZShBLGQpfHwoYT17cGVuZGluZzpudWxsLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjpKaCxsYXN0UmVuZGVyZWRTdGF0ZTpufSxhLmRpc3BhdGNoPWw9T2guYmluZChudWxsLFIsYSksay5xdWV1ZT1hLGsuYmFzZVF1ZXVlPW51bGwsbj1NaChlLGIsYyksay5tZW1vaXplZFN0YXRlPWsuYmFzZVN0YXRlPW4pO3JldHVybiBufVxuZnVuY3Rpb24gUGgoYSxiLGMpe3ZhciBkPUloKCk7cmV0dXJuIE5oKGQsYSxiLGMpfWZ1bmN0aW9uIFFoKGEpe3ZhciBiPUhoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOkpoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD1PaC5iaW5kKG51bGwsUixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfVxuZnVuY3Rpb24gUmgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ui51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxSLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfWZ1bmN0aW9uIFNoKGEpe3ZhciBiPUhoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9ZnVuY3Rpb24gVGgoKXtyZXR1cm4gSWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIFVoKGEsYixjLGQpe3ZhciBlPUhoKCk7Ui5mbGFnc3w9YTtlLm1lbW9pemVkU3RhdGU9UmgoMXxiLGMsdm9pZCAwLHZvaWQgMD09PWQ/bnVsbDpkKX1cbmZ1bmN0aW9uIFZoKGEsYixjLGQpe3ZhciBlPUloKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PVMpe3ZhciBnPVMubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmQmgoZCxnLmRlcHMpKXtSaChiLGMsZixkKTtyZXR1cm59fVIuZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPVJoKDF8YixjLGYsZCl9ZnVuY3Rpb24gV2goYSxiKXtyZXR1cm4gVWgoNTE2LDQsYSxiKX1mdW5jdGlvbiBYaChhLGIpe3JldHVybiBWaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIFloKGEsYil7cmV0dXJuIFZoKDQsMixhLGIpfWZ1bmN0aW9uIFpoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19XG5mdW5jdGlvbiAkaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFZoKDQsMixaaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBhaSgpe31mdW5jdGlvbiBiaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBjaShhLGIpe3ZhciBjPUloKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZCaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1cbmZ1bmN0aW9uIGRpKGEsYil7dmFyIGM9ZWcoKTtnZyg5OD5jPzk4OmMsZnVuY3Rpb24oKXthKCEwKX0pO2dnKDk3PGM/OTc6YyxmdW5jdGlvbigpe3ZhciBjPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXthKCExKSxiKCl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWN9fSl9XG5mdW5jdGlvbiBPaChhLGIsYyl7dmFyIGQ9SGcoKSxlPUlnKGEpLGY9e2xhbmU6ZSxhY3Rpb246YyxlYWdlclJlZHVjZXI6bnVsbCxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfSxnPWIucGVuZGluZztudWxsPT09Zz9mLm5leHQ9ZjooZi5uZXh0PWcubmV4dCxnLm5leHQ9Zik7Yi5wZW5kaW5nPWY7Zz1hLmFsdGVybmF0ZTtpZihhPT09Unx8bnVsbCE9PWcmJmc9PT1SKXpoPXloPSEwO2Vsc2V7aWYoMD09PWEubGFuZXMmJihudWxsPT09Z3x8MD09PWcubGFuZXMpJiYoZz1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWcpKXRyeXt2YXIgaD1iLmxhc3RSZW5kZXJlZFN0YXRlLGs9ZyhoLGMpO2YuZWFnZXJSZWR1Y2VyPWc7Zi5lYWdlclN0YXRlPWs7aWYoSGUoayxoKSlyZXR1cm59Y2F0Y2gobCl7fWZpbmFsbHl7fUpnKGEsZSxkKX19XG52YXIgR2g9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOkFoLHVzZUNvbnRleHQ6QWgsdXNlRWZmZWN0OkFoLHVzZUltcGVyYXRpdmVIYW5kbGU6QWgsdXNlTGF5b3V0RWZmZWN0OkFoLHVzZU1lbW86QWgsdXNlUmVkdWNlcjpBaCx1c2VSZWY6QWgsdXNlU3RhdGU6QWgsdXNlRGVidWdWYWx1ZTpBaCx1c2VEZWZlcnJlZFZhbHVlOkFoLHVzZVRyYW5zaXRpb246QWgsdXNlTXV0YWJsZVNvdXJjZTpBaCx1c2VPcGFxdWVJZGVudGlmaWVyOkFoLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sRGg9e3JlYWRDb250ZXh0OnZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7SGgoKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6V2gsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIFVoKDQsMixaaC5iaW5kKG51bGwsXG5iLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVWgoNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz1IaCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1IaCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPU9oLmJpbmQobnVsbCxSLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpTaCx1c2VTdGF0ZTpRaCx1c2VEZWJ1Z1ZhbHVlOmFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9UWgoYSksYz1iWzBdLGQ9YlsxXTtXaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247XG53aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9UWgoITEpLGI9YVswXTthPWRpLmJpbmQobnVsbCxhWzFdKTtTaChhKTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9SGgoKTtkLm1lbW9pemVkU3RhdGU9e3JlZnM6e2dldFNuYXBzaG90OmIsc2V0U25hcHNob3Q6bnVsbH0sc291cmNlOmEsc3Vic2NyaWJlOmN9O3JldHVybiBOaChkLGEsYixjKX0sdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe2lmKGxoKXt2YXIgYT0hMSxiPXVmKGZ1bmN0aW9uKCl7YXx8KGE9ITAsYyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSkpO3Rocm93IEVycm9yKHkoMzU1KSk7fSksYz1RaChiKVsxXTswPT09KFIubW9kZSYyKSYmKFIuZmxhZ3N8PTUxNixSaCg1LGZ1bmN0aW9uKCl7YyhcInI6XCIrKHRmKyspLnRvU3RyaW5nKDM2KSl9LFxudm9pZCAwLG51bGwpKTtyZXR1cm4gYn1iPVwicjpcIisodGYrKykudG9TdHJpbmcoMzYpO1FoKGIpO3JldHVybiBifSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9LEVoPXtyZWFkQ29udGV4dDp2Zyx1c2VDYWxsYmFjazpiaSx1c2VDb250ZXh0OnZnLHVzZUVmZmVjdDpYaCx1c2VJbXBlcmF0aXZlSGFuZGxlOiRoLHVzZUxheW91dEVmZmVjdDpZaCx1c2VNZW1vOmNpLHVzZVJlZHVjZXI6S2gsdXNlUmVmOlRoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKX0sdXNlRGVidWdWYWx1ZTphaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3ZhciBiPUtoKEpoKSxjPWJbMF0sZD1iWzFdO1hoKGZ1bmN0aW9uKCl7dmFyIGI9d2gudHJhbnNpdGlvbjt3aC50cmFuc2l0aW9uPTE7dHJ5e2QoYSl9ZmluYWxseXt3aC50cmFuc2l0aW9uPWJ9fSxbYV0pO3JldHVybiBjfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9S2goSmgpWzBdO3JldHVybltUaCgpLmN1cnJlbnQsXG5hXX0sdXNlTXV0YWJsZVNvdXJjZTpQaCx1c2VPcGFxdWVJZGVudGlmaWVyOmZ1bmN0aW9uKCl7cmV0dXJuIEtoKEpoKVswXX0sdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSxGaD17cmVhZENvbnRleHQ6dmcsdXNlQ2FsbGJhY2s6YmksdXNlQ29udGV4dDp2Zyx1c2VFZmZlY3Q6WGgsdXNlSW1wZXJhdGl2ZUhhbmRsZTokaCx1c2VMYXlvdXRFZmZlY3Q6WWgsdXNlTWVtbzpjaSx1c2VSZWR1Y2VyOkxoLHVzZVJlZjpUaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiBMaChKaCl9LHVzZURlYnVnVmFsdWU6YWksdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhKXt2YXIgYj1MaChKaCksYz1iWzBdLGQ9YlsxXTtYaChmdW5jdGlvbigpe3ZhciBiPXdoLnRyYW5zaXRpb247d2gudHJhbnNpdGlvbj0xO3RyeXtkKGEpfWZpbmFsbHl7d2gudHJhbnNpdGlvbj1ifX0sW2FdKTtyZXR1cm4gY30sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPUxoKEpoKVswXTtyZXR1cm5bVGgoKS5jdXJyZW50LFxuYV19LHVzZU11dGFibGVTb3VyY2U6UGgsdXNlT3BhcXVlSWRlbnRpZmllcjpmdW5jdGlvbigpe3JldHVybiBMaChKaClbMF19LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sZWk9cmEuUmVhY3RDdXJyZW50T3duZXIsdWc9ITE7ZnVuY3Rpb24gZmkoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9aZyhiLG51bGwsYyxkKTpZZyhiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiBnaShhLGIsYyxkLGUpe2M9Yy5yZW5kZXI7dmFyIGY9Yi5yZWY7dGcoYixlKTtkPUNoKGEsYixjLGQsZixlKTtpZihudWxsIT09YSYmIXVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTUxNyxhLmxhbmVzJj1+ZSxoaShhLGIsZSk7Yi5mbGFnc3w9MTtmaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGlpKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhamkoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsa2koYSxiLGcsZCxlLGYpO2E9VmcoYy50eXBlLG51bGwsZCxiLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKDA9PT0oZSZmKSYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpKZSxjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiBoaShhLGIsZik7Yi5mbGFnc3w9MTthPVRnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24ga2koYSxiLGMsZCxlLGYpe2lmKG51bGwhPT1hJiZKZShhLm1lbW9pemVkUHJvcHMsZCkmJmEucmVmPT09Yi5yZWYpaWYodWc9ITEsMCE9PShmJmUpKTAhPT0oYS5mbGFncyYxNjM4NCkmJih1Zz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLGhpKGEsYixmKTtyZXR1cm4gbGkoYSxiLGMsZCxmKX1cbmZ1bmN0aW9uIG1pKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlfHxcInVuc3RhYmxlLWRlZmVyLXdpdGhvdXQtaGlkaW5nXCI9PT1kLm1vZGUpaWYoMD09PShiLm1vZGUmNCkpYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6MH0sbmkoYixjKTtlbHNlIGlmKDAhPT0oYyYxMDczNzQxODI0KSliLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowfSxuaShiLG51bGwhPT1mP2YuYmFzZUxhbmVzOmMpO2Vsc2UgcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YX0sbmkoYixhKSxudWxsO2Vsc2UgbnVsbCE9PWY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLG5pKGIsZCk7ZmkoYSxiLGUsYyk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBvaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmZsYWdzfD0xMjh9ZnVuY3Rpb24gbGkoYSxiLGMsZCxlKXt2YXIgZj1GZihjKT9EZjpNLmN1cnJlbnQ7Zj1FZihiLGYpO3RnKGIsZSk7Yz1DaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiF1ZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZmxhZ3MmPS01MTcsYS5sYW5lcyY9fmUsaGkoYSxiLGUpO2IuZmxhZ3N8PTE7ZmkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBwaShhLGIsYyxkLGUpe2lmKEZmKGMpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7dGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9MiksTWcoYixjLGQpLE9nKGIsYyxkLGUpLGQ9ITA7ZWxzZSBpZihudWxsPT09YSl7dmFyIGc9Yi5zdGF0ZU5vZGUsaD1iLm1lbW9pemVkUHJvcHM7Zy5wcm9wcz1oO3ZhciBrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXZnKGwpOihsPUZmKGMpP0RmOk0uY3VycmVudCxsPUVmKGIsbCkpO3ZhciBuPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLEE9XCJmdW5jdGlvblwiPT09dHlwZW9mIG58fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO0F8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZOZyhiLGcsZCxsKTt3Zz0hMTt2YXIgcD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT1wO0NnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHxwIT09a3x8Ti5jdXJyZW50fHx3Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG4mJihHZyhiLGMsbixkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9d2d8fExnKGIsYyxoLGQscCxrLGwpKT8oQXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCkpOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO3lnKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6bGcoYi50eXBlLGgpO2cucHJvcHM9bDtBPWIucGVuZGluZ1Byb3BzO3A9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9dmcoayk6KGs9RmYoYyk/RGY6TS5jdXJyZW50LGs9RWYoYixrKSk7dmFyIEM9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG49XCJmdW5jdGlvblwiPT09dHlwZW9mIEN8fFxuXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1BfHxwIT09aykmJk5nKGIsZyxkLGspO3dnPSExO3A9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cDtDZyhiLGQsZyxlKTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7aCE9PUF8fHAhPT14fHxOLmN1cnJlbnR8fHdnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgQyYmKEdnKGIsYyxDLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobD13Z3x8TGcoYixjLGwsZCxwLHgsaykpPyhufHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsaykpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlJiYoYi5mbGFnc3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxiLm1lbW9pemVkUHJvcHM9ZCxiLm1lbW9pemVkU3RhdGU9eCksZy5wcm9wcz1kLGcuc3RhdGU9eCxnLmNvbnRleHQ9ayxkPWwpOihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fFxuaD09PWEubWVtb2l6ZWRQcm9wcyYmcD09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZwPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MjU2KSxkPSExKX1yZXR1cm4gcWkoYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gcWkoYSxiLGMsZCxlLGYpe29pKGEsYik7dmFyIGc9MCE9PShiLmZsYWdzJjY0KTtpZighZCYmIWcpcmV0dXJuIGUmJktmKGIsYywhMSksaGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7ZWkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1ZZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVlnKGIsbnVsbCxoLGYpKTpmaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZLZihiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIHJpKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/SGYoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmSGYoYSxiLmNvbnRleHQsITEpO2VoKGEsYi5jb250YWluZXJJbmZvKX1cbnZhciBzaT17ZGVoeWRyYXRlZDpudWxsLHJldHJ5TGFuZTowfTtcbmZ1bmN0aW9uIHRpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPVAuY3VycmVudCxmPSExLGc7KGc9MCE9PShiLmZsYWdzJjY0KSl8fChnPW51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlPyExOjAhPT0oZSYyKSk7Zz8oZj0hMCxiLmZsYWdzJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1kLmZhbGxiYWNrfHwhMD09PWQudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChlfD0xKTtJKFAsZSYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZC5mYWxsYmFjayYmcGgoYik7YT1kLmNoaWxkcmVuO2U9ZC5mYWxsYmFjaztpZihmKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LGIubWVtb2l6ZWRTdGF0ZT1zaSxhO2lmKFwibnVtYmVyXCI9PT10eXBlb2YgZC51bnN0YWJsZV9leHBlY3RlZExvYWRUaW1lKXJldHVybiBhPXVpKGIsYSxlLGMpLGIuY2hpbGQubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOmN9LFxuYi5tZW1vaXplZFN0YXRlPXNpLGIubGFuZXM9MzM1NTQ0MzIsYTtjPXZpKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmF9LGIubW9kZSxjLG51bGwpO2MucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9Y31pZihudWxsIT09YS5tZW1vaXplZFN0YXRlKXtpZihmKXJldHVybiBkPXdpKGEsYixkLmNoaWxkcmVuLGQuZmFsbGJhY2ssYyksZj1iLmNoaWxkLGU9YS5jaGlsZC5tZW1vaXplZFN0YXRlLGYubWVtb2l6ZWRTdGF0ZT1udWxsPT09ZT97YmFzZUxhbmVzOmN9OntiYXNlTGFuZXM6ZS5iYXNlTGFuZXN8Y30sZi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YyxiLm1lbW9pemVkU3RhdGU9c2ksZDtjPXhpKGEsYixkLmNoaWxkcmVuLGMpO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBjfWlmKGYpcmV0dXJuIGQ9d2koYSxiLGQuY2hpbGRyZW4sZC5mYWxsYmFjayxjKSxmPWIuY2hpbGQsZT1hLmNoaWxkLm1lbW9pemVkU3RhdGUsZi5tZW1vaXplZFN0YXRlPW51bGw9PT1lP3tiYXNlTGFuZXM6Y306XG57YmFzZUxhbmVzOmUuYmFzZUxhbmVzfGN9LGYuY2hpbGRMYW5lcz1hLmNoaWxkTGFuZXMmfmMsYi5tZW1vaXplZFN0YXRlPXNpLGQ7Yz14aShhLGIsZC5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gY31mdW5jdGlvbiB1aShhLGIsYyxkKXt2YXIgZT1hLm1vZGUsZj1hLmNoaWxkO2I9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpifTswPT09KGUmMikmJm51bGwhPT1mPyhmLmNoaWxkTGFuZXM9MCxmLnBlbmRpbmdQcm9wcz1iKTpmPXZpKGIsZSwwLG51bGwpO2M9WGcoYyxlLGQsbnVsbCk7Zi5yZXR1cm49YTtjLnJldHVybj1hO2Yuc2libGluZz1jO2EuY2hpbGQ9ZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHhpKGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7YT1lLnNpYmxpbmc7Yz1UZyhlLHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmN9KTswPT09KGIubW9kZSYyKSYmKGMubGFuZXM9ZCk7Yy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbDtudWxsIT09YSYmKGEubmV4dEVmZmVjdD1udWxsLGEuZmxhZ3M9OCxiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1hKTtyZXR1cm4gYi5jaGlsZD1jfVxuZnVuY3Rpb24gd2koYSxiLGMsZCxlKXt2YXIgZj1iLm1vZGUsZz1hLmNoaWxkO2E9Zy5zaWJsaW5nO3ZhciBoPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Y307MD09PShmJjIpJiZiLmNoaWxkIT09Zz8oYz1iLmNoaWxkLGMuY2hpbGRMYW5lcz0wLGMucGVuZGluZ1Byb3BzPWgsZz1jLmxhc3RFZmZlY3QsbnVsbCE9PWc/KGIuZmlyc3RFZmZlY3Q9Yy5maXJzdEVmZmVjdCxiLmxhc3RFZmZlY3Q9ZyxnLm5leHRFZmZlY3Q9bnVsbCk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9bnVsbCk6Yz1UZyhnLGgpO251bGwhPT1hP2Q9VGcoYSxkKTooZD1YZyhkLGYsZSxudWxsKSxkLmZsYWdzfD0yKTtkLnJldHVybj1iO2MucmV0dXJuPWI7Yy5zaWJsaW5nPWQ7Yi5jaGlsZD1jO3JldHVybiBkfWZ1bmN0aW9uIHlpKGEsYil7YS5sYW5lc3w9Yjt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmKGMubGFuZXN8PWIpO3NnKGEucmV0dXJuLGIpfVxuZnVuY3Rpb24gemkoYSxiLGMsZCxlLGYpe3ZhciBnPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09Zz9hLm1lbW9pemVkU3RhdGU9e2lzQmFja3dhcmRzOmIscmVuZGVyaW5nOm51bGwscmVuZGVyaW5nU3RhcnRUaW1lOjAsbGFzdDpkLHRhaWw6Yyx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsTW9kZT1lLGcubGFzdEVmZmVjdD1mKX1cbmZ1bmN0aW9uIEFpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQucmV2ZWFsT3JkZXIsZj1kLnRhaWw7ZmkoYSxiLGQuY2hpbGRyZW4sYyk7ZD1QLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5mbGFnc3w9NjQ7ZWxzZXtpZihudWxsIT09YSYmMCE9PShhLmZsYWdzJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJnlpKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKXlpKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoUCxkKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09aWgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTt6aShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1paChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9emkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOnppKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBoaShhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7RGd8PWIubGFuZXM7aWYoMCE9PShjJmIuY2hpbGRMYW5lcykpe2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcih5KDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz1UZyhhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9VGcoYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1yZXR1cm4gbnVsbH12YXIgQmksQ2ksRGksRWk7XG5CaT1mdW5jdGlvbihhLGIpe2Zvcih2YXIgYz1iLmNoaWxkO251bGwhPT1jOyl7aWYoNT09PWMudGFnfHw2PT09Yy50YWcpYS5hcHBlbmRDaGlsZChjLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09Yy50YWcmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09YilicmVhaztmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fGMucmV0dXJuPT09YilyZXR1cm47Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2M9Yy5zaWJsaW5nfX07Q2k9ZnVuY3Rpb24oKXt9O1xuRGk9ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9YS5tZW1vaXplZFByb3BzO2lmKGUhPT1kKXthPWIuc3RhdGVOb2RlO2RoKGFoLmN1cnJlbnQpO3ZhciBmPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmU9WWEoYSxlKTtkPVlhKGEsZCk7Zj1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1lYihhLGUpO2Q9ZWIoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPW0oe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1tKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1qZil9dmIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1cbmwpe3ZhciBoPWVbbF07Zm9yKGcgaW4gaCloLmhhc093blByb3BlcnR5KGcpJiYoY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihjYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8XG4oYz17fSksY1tnXT1rW2ddKX1lbHNlIGN8fChmfHwoZj1bXSksZi5wdXNoKGwsYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoY2EuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkcoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTpcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rJiZrLiQkdHlwZW9mPT09R2E/ay50b1N0cmluZygpOihmPWZ8fFtdKS5wdXNoKGwsaykpfWMmJihmPWZ8fFtdKS5wdXNoKFwic3R5bGVcIixcbmMpO3ZhciBsPWY7aWYoYi51cGRhdGVRdWV1ZT1sKWIuZmxhZ3N8PTR9fTtFaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZmxhZ3N8PTQpfTtmdW5jdGlvbiBGaShhLGIpe2lmKCFsaClzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7ZD1iLnN0YXRlTm9kZTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpcmgoYik/Yi5mbGFnc3w9NDpkLmh5ZHJhdGV8fChiLmZsYWdzfD0yNTYpO0NpKGIpO3JldHVybiBudWxsO2Nhc2UgNTpoaChiKTt2YXIgZT1kaChjaC5jdXJyZW50KTtjPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpRGkoYSxiLGMsZCxlKSxhLnJlZiE9PWIucmVmJiYoYi5mbGFnc3w9MTI4KTtlbHNle2lmKCFkKXtpZihudWxsPT09XG5iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO3JldHVybiBudWxsfWE9ZGgoYWguY3VycmVudCk7aWYocmgoYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2Rbd2ZdPWI7ZFt4Zl09Zjtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixkKTtHKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPFhlLmxlbmd0aDthKyspRyhYZVthXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RyhcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsZCk7RyhcImxvYWRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkcoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpaYShkLGYpO0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmQuX3dyYXBwZXJTdGF0ZT1cbnt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0coXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxHKFwiaW52YWxpZFwiLGQpfXZiKGMsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWYuaGFzT3duUHJvcGVydHkoZykmJihlPWZbZ10sXCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGU/ZC50ZXh0Q29udGVudCE9PWUmJihhPVtcImNoaWxkcmVuXCIsZV0pOlwibnVtYmVyXCI9PT10eXBlb2YgZSYmZC50ZXh0Q29udGVudCE9PVwiXCIrZSYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2VdKTpjYS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9ZSYmXCJvblNjcm9sbFwiPT09ZyYmRyhcInNjcm9sbFwiLGQpKTtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7Y2IoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1cbmpmKX1kPWE7Yi51cGRhdGVRdWV1ZT1kO251bGwhPT1kJiYoYi5mbGFnc3w9NCl9ZWxzZXtnPTk9PT1lLm5vZGVUeXBlP2U6ZS5vd25lckRvY3VtZW50O2E9PT1rYi5odG1sJiYoYT1sYihjKSk7YT09PWtiLmh0bWw/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChjLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGMpLFwic2VsZWN0XCI9PT1jJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxjKTthW3dmXT1iO2FbeGZdPWQ7QmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9d2IoYyxkKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkcoXCJjYW5jZWxcIixhKTtHKFwiY2xvc2VcIixhKTtcbmU9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkcoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxYZS5sZW5ndGg7ZSsrKUcoWGVbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpHKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RyhcImVycm9yXCIsYSk7RyhcImxvYWRcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpHKFwidG9nZ2xlXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGEsZCk7ZT1ZYShhLGQpO0coXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmU9ZWIoYSxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2U9bSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtHKFwiaW52YWxpZFwiLGEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmhiKGEsZCk7ZT1cbmdiKGEsZCk7RyhcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH12YihjLGUpO3ZhciBoPWU7Zm9yKGYgaW4gaClpZihoLmhhc093blByb3BlcnR5KGYpKXt2YXIgaz1oW2ZdO1wic3R5bGVcIj09PWY/dGIoYSxrKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1mPyhrPWs/ay5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJm9iKGEsaykpOlwiY2hpbGRyZW5cIj09PWY/XCJzdHJpbmdcIj09PXR5cGVvZiBrPyhcInRleHRhcmVhXCIhPT1jfHxcIlwiIT09aykmJnBiKGEsayk6XCJudW1iZXJcIj09PXR5cGVvZiBrJiZwYihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWYmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1mJiZcImF1dG9Gb2N1c1wiIT09ZiYmKGNhLmhhc093blByb3BlcnR5KGYpP251bGwhPWsmJlwib25TY3JvbGxcIj09PWYmJkcoXCJzY3JvbGxcIixhKTpudWxsIT1rJiZxYShhLGYsayxnKSl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlZhKGEpO2NiKGEsZCwhMSk7XG5icmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShhKTtqYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrU2EoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtmPWQudmFsdWU7bnVsbCE9Zj9mYihhLCEhZC5tdWx0aXBsZSxmLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmZmIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGUub25DbGljayYmKGEub25jbGljaz1qZil9bWYoYyxkKSYmKGIuZmxhZ3N8PTQpfW51bGwhPT1iLnJlZiYmKGIuZmxhZ3N8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKUVpKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2NikpO1xuYz1kaChjaC5jdXJyZW50KTtkaChhaC5jdXJyZW50KTtyaChiKT8oZD1iLnN0YXRlTm9kZSxjPWIubWVtb2l6ZWRQcm9wcyxkW3dmXT1iLGQubm9kZVZhbHVlIT09YyYmKGIuZmxhZ3N8PTQpKTooZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbd2ZdPWIsYi5zdGF0ZU5vZGU9ZCl9cmV0dXJuIG51bGw7Y2FzZSAxMzpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5mbGFncyY2NCkpcmV0dXJuIGIubGFuZXM9YyxiO2Q9bnVsbCE9PWQ7Yz0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJnJoKGIpOmM9bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZTtpZihkJiYhYyYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KFAuY3VycmVudCYxKSkwPT09ViYmKFY9Myk7ZWxzZXtpZigwPT09Vnx8Mz09PVYpVj1cbjQ7bnVsbD09PVV8fDA9PT0oRGcmMTM0MjE3NzI3KSYmMD09PShIaSYxMzQyMTc3MjcpfHxJaShVLFcpfWlmKGR8fGMpYi5mbGFnc3w9NDtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIGZoKCksQ2koYiksbnVsbD09PWEmJmNmKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLG51bGw7Y2FzZSAxMDpyZXR1cm4gcmcoYiksbnVsbDtjYXNlIDE3OnJldHVybiBGZihiLnR5cGUpJiZHZigpLG51bGw7Y2FzZSAxOTpIKFApO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2Y9MCE9PShiLmZsYWdzJjY0KTtnPWQucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGYpRmkoZCwhMSk7ZWxzZXtpZigwIT09Vnx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyY2NCkpZm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2c9aWgoYSk7aWYobnVsbCE9PWcpe2IuZmxhZ3N8PTY0O0ZpKGQsITEpO2Y9Zy51cGRhdGVRdWV1ZTtudWxsIT09ZiYmKGIudXBkYXRlUXVldWU9ZixiLmZsYWdzfD00KTtcbm51bGw9PT1kLmxhc3RFZmZlY3QmJihiLmZpcnN0RWZmZWN0PW51bGwpO2IubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3Q7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MixmLm5leHRFZmZlY3Q9bnVsbCxmLmZpcnN0RWZmZWN0PW51bGwsZi5sYXN0RWZmZWN0PW51bGwsZz1mLmFsdGVybmF0ZSxudWxsPT09Zz8oZi5jaGlsZExhbmVzPTAsZi5sYW5lcz1hLGYuY2hpbGQ9bnVsbCxmLm1lbW9pemVkUHJvcHM9bnVsbCxmLm1lbW9pemVkU3RhdGU9bnVsbCxmLnVwZGF0ZVF1ZXVlPW51bGwsZi5kZXBlbmRlbmNpZXM9bnVsbCxmLnN0YXRlTm9kZT1udWxsKTooZi5jaGlsZExhbmVzPWcuY2hpbGRMYW5lcyxmLmxhbmVzPWcubGFuZXMsZi5jaGlsZD1nLmNoaWxkLGYubWVtb2l6ZWRQcm9wcz1nLm1lbW9pemVkUHJvcHMsZi5tZW1vaXplZFN0YXRlPWcubWVtb2l6ZWRTdGF0ZSxmLnVwZGF0ZVF1ZXVlPWcudXBkYXRlUXVldWUsZi50eXBlPWcudHlwZSxhPWcuZGVwZW5kZW5jaWVzLFxuZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztJKFAsUC5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1hLnNpYmxpbmd9bnVsbCE9PWQudGFpbCYmTygpPkppJiYoYi5mbGFnc3w9NjQsZj0hMCxGaShkLCExKSxiLmxhbmVzPTMzNTU0NDMyKX1lbHNle2lmKCFmKWlmKGE9aWgoZyksbnVsbCE9PWEpe2lmKGIuZmxhZ3N8PTY0LGY9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEZpKGQsITApLG51bGw9PT1kLnRhaWwmJlwiaGlkZGVuXCI9PT1kLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFsaClyZXR1cm4gYj1iLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0LG51bGwhPT1iJiYoYi5uZXh0RWZmZWN0PW51bGwpLG51bGx9ZWxzZSAyKk8oKS1kLnJlbmRlcmluZ1N0YXJ0VGltZT5KaSYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD1cbjY0LGY9ITAsRmkoZCwhMSksYi5sYW5lcz0zMzU1NDQzMik7ZC5pc0JhY2t3YXJkcz8oZy5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1nKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWc6Yi5jaGlsZD1nLGQubGFzdD1nKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oYz1kLnRhaWwsZC5yZW5kZXJpbmc9YyxkLnRhaWw9Yy5zaWJsaW5nLGQubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QsZC5yZW5kZXJpbmdTdGFydFRpbWU9TygpLGMuc2libGluZz1udWxsLGI9UC5jdXJyZW50LEkoUCxmP2ImMXwyOmImMSksYyk6bnVsbDtjYXNlIDIzOmNhc2UgMjQ6cmV0dXJuIEtpKCksbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT0obnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSkmJlwidW5zdGFibGUtZGVmZXItd2l0aG91dC1oaWRpbmdcIiE9PWQubW9kZSYmKGIuZmxhZ3N8PTQpLG51bGx9dGhyb3cgRXJyb3IoeSgxNTYsYi50YWcpKTt9XG5mdW5jdGlvbiBMaShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpGZihhLnR5cGUpJiZHZigpO3ZhciBiPWEuZmxhZ3M7cmV0dXJuIGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmZoKCk7SChOKTtIKE0pO3VoKCk7Yj1hLmZsYWdzO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IoeSgyODUpKTthLmZsYWdzPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBoaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoUCksYj1hLmZsYWdzLGImNDA5Nj8oYS5mbGFncz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gSChQKSxudWxsO2Nhc2UgNDpyZXR1cm4gZmgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIHJnKGEpLG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBLaSgpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBNaShhLGIpe3RyeXt2YXIgYz1cIlwiLGQ9YjtkbyBjKz1RYShkKSxkPWQucmV0dXJuO3doaWxlKGQpO3ZhciBlPWN9Y2F0Y2goZil7ZT1cIlxcbkVycm9yIGdlbmVyYXRpbmcgc3RhY2s6IFwiK2YubWVzc2FnZStcIlxcblwiK2Yuc3RhY2t9cmV0dXJue3ZhbHVlOmEsc291cmNlOmIsc3RhY2s6ZX19ZnVuY3Rpb24gTmkoYSxiKXt0cnl7Y29uc29sZS5lcnJvcihiLnZhbHVlKX1jYXRjaChjKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgYzt9KX19dmFyIE9pPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFBpKGEsYixjKXtjPXpnKC0xLGMpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1FpfHwoUWk9ITAsUmk9ZCk7TmkoYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiBTaShhLGIsYyl7Yz16ZygtMSxjKTtjLnRhZz0zO3ZhciBkPWEudHlwZS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQpe3ZhciBlPWIudmFsdWU7Yy5wYXlsb2FkPWZ1bmN0aW9uKCl7TmkoYSxiKTtyZXR1cm4gZChlKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBkJiYobnVsbD09PVRpP1RpPW5ldyBTZXQoW3RoaXNdKTpUaS5hZGQodGhpcyksTmkoYSxiKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9dmFyIFVpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrU2V0P1dlYWtTZXQ6U2V0O1xuZnVuY3Rpb24gVmkoYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpdHJ5e2IobnVsbCl9Y2F0Y2goYyl7V2koYSxjKX1lbHNlIGIuY3VycmVudD1udWxsfWZ1bmN0aW9uIFhpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmZsYWdzJjI1NiYmbnVsbCE9PWEpe3ZhciBjPWEubWVtb2l6ZWRQcm9wcyxkPWEubWVtb2l6ZWRTdGF0ZTthPWIuc3RhdGVOb2RlO2I9YS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZShiLmVsZW1lbnRUeXBlPT09Yi50eXBlP2M6bGcoYi50eXBlLGMpLGQpO2EuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGU9Yn1yZXR1cm47Y2FzZSAzOmIuZmxhZ3MmMjU2JiZxZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKTtyZXR1cm47Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9XG5mdW5jdGlvbiBZaShhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97aWYoMz09PShhLnRhZyYzKSl7dmFyIGQ9YS5jcmVhdGU7YS5kZXN0cm95PWQoKX1hPWEubmV4dH13aGlsZShhIT09Yil9Yj1jLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe2E9Yj1iLm5leHQ7ZG97dmFyIGU9YTtkPWUubmV4dDtlPWUudGFnOzAhPT0oZSY0KSYmMCE9PShlJjEpJiYoWmkoYyxhKSwkaShjLGEpKTthPWR9d2hpbGUoYSE9PWIpfXJldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtjLmZsYWdzJjQmJihudWxsPT09Yj9hLmNvbXBvbmVudERpZE1vdW50KCk6KGQ9Yy5lbGVtZW50VHlwZT09PWMudHlwZT9iLm1lbW9pemVkUHJvcHM6bGcoYy50eXBlLGIubWVtb2l6ZWRQcm9wcyksYS5jb21wb25lbnREaWRVcGRhdGUoZCxcbmIubWVtb2l6ZWRTdGF0ZSxhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKSkpO2I9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmRWcoYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1FZyhjLGIsYSl9cmV0dXJuO2Nhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmZsYWdzJjQmJm1mKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmQ2MoYykpKSk7XG5yZXR1cm47Y2FzZSAxOTpjYXNlIDE3OmNhc2UgMjA6Y2FzZSAyMTpjYXNlIDIzOmNhc2UgMjQ6cmV0dXJufXRocm93IEVycm9yKHkoMTYzKSk7fVxuZnVuY3Rpb24gYWooYSxiKXtmb3IodmFyIGM9YTs7KXtpZig1PT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKGIpZD1kLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnNldFByb3BlcnR5P2Quc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6ZC5kaXNwbGF5PVwibm9uZVwiO2Vsc2V7ZD1jLnN0YXRlTm9kZTt2YXIgZT1jLm1lbW9pemVkUHJvcHMuc3R5bGU7ZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGw7ZC5zdHlsZS5kaXNwbGF5PXNiKFwiZGlzcGxheVwiLGUpfX1lbHNlIGlmKDY9PT1jLnRhZyljLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yj9cIlwiOmMubWVtb2l6ZWRQcm9wcztlbHNlIGlmKCgyMyE9PWMudGFnJiYyNCE9PWMudGFnfHxudWxsPT09Yy5tZW1vaXplZFN0YXRlfHxjPT09YSkmJm51bGwhPT1jLmNoaWxkKXtjLmNoaWxkLnJldHVybj1jO2M9Yy5jaGlsZDtjb250aW51ZX1pZihjPT09XG5hKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1hKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gYmooYSxiKXtpZihNZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIE1mLm9uQ29tbWl0RmliZXJVbm1vdW50KXRyeXtNZi5vbkNvbW1pdEZpYmVyVW5tb3VudChMZixiKX1jYXRjaChmKXt9c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBjPWE9YS5uZXh0O2Rve3ZhciBkPWMsZT1kLmRlc3Ryb3k7ZD1kLnRhZztpZih2b2lkIDAhPT1lKWlmKDAhPT0oZCY0KSlaaShiLGMpO2Vsc2V7ZD1iO3RyeXtlKCl9Y2F0Y2goZil7V2koZCxmKX19Yz1jLm5leHR9d2hpbGUoYyE9PWEpfWJyZWFrO2Nhc2UgMTpWaShiKTthPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXthLnByb3BzPWIubWVtb2l6ZWRQcm9wcyxhLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZSxhLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goZil7V2koYixcbmYpfWJyZWFrO2Nhc2UgNTpWaShiKTticmVhaztjYXNlIDQ6Y2ooYSxiKX19ZnVuY3Rpb24gZGooYSl7YS5hbHRlcm5hdGU9bnVsbDthLmNoaWxkPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLnJldHVybj1udWxsO2EudXBkYXRlUXVldWU9bnVsbH1mdW5jdGlvbiBlaihhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIGZqKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKGVqKGIpKWJyZWFrIGE7Yj1iLnJldHVybn10aHJvdyBFcnJvcih5KDE2MCkpO312YXIgYz1iO2I9Yy5zdGF0ZU5vZGU7c3dpdGNoKGMudGFnKXtjYXNlIDU6dmFyIGQ9ITE7YnJlYWs7Y2FzZSAzOmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yi5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih5KDE2MSkpO31jLmZsYWdzJjE2JiYocGIoYixcIlwiKSxjLmZsYWdzJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8ZWooYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5mbGFncyYyKWNvbnRpbnVlIGI7aWYobnVsbD09PVxuYy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkLnJldHVybj1jLGM9Yy5jaGlsZH1pZighKGMuZmxhZ3MmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19ZD9naihhLGMsYik6aGooYSxjLGIpfVxuZnVuY3Rpb24gZ2ooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPWpmKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKGdqKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspZ2ooYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gaGooYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihoaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KWhqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIGNqKGEsYil7Zm9yKHZhciBjPWIsZD0hMSxlLGY7Oyl7aWYoIWQpe2Q9Yy5yZXR1cm47YTpmb3IoOzspe2lmKG51bGw9PT1kKXRocm93IEVycm9yKHkoMTYwKSk7ZT1kLnN0YXRlTm9kZTtzd2l0Y2goZC50YWcpe2Nhc2UgNTpmPSExO2JyZWFrIGE7Y2FzZSAzOmU9ZS5jb250YWluZXJJbmZvO2Y9ITA7YnJlYWsgYTtjYXNlIDQ6ZT1lLmNvbnRhaW5lckluZm87Zj0hMDticmVhayBhfWQ9ZC5yZXR1cm59ZD0hMH1pZig1PT09Yy50YWd8fDY9PT1jLnRhZyl7YTpmb3IodmFyIGc9YSxoPWMsaz1oOzspaWYoYmooZyxrKSxudWxsIT09ay5jaGlsZCYmNCE9PWsudGFnKWsuY2hpbGQucmV0dXJuPWssaz1rLmNoaWxkO2Vsc2V7aWYoaz09PWgpYnJlYWsgYTtmb3IoO251bGw9PT1rLnNpYmxpbmc7KXtpZihudWxsPT09ay5yZXR1cm58fGsucmV0dXJuPT09aClicmVhayBhO2s9ay5yZXR1cm59ay5zaWJsaW5nLnJldHVybj1rLnJldHVybjtrPWsuc2libGluZ31mPyhnPWUsaD1jLnN0YXRlTm9kZSxcbjg9PT1nLm5vZGVUeXBlP2cucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChoKTpnLnJlbW92ZUNoaWxkKGgpKTplLnJlbW92ZUNoaWxkKGMuc3RhdGVOb2RlKX1lbHNlIGlmKDQ9PT1jLnRhZyl7aWYobnVsbCE9PWMuY2hpbGQpe2U9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztmPSEwO2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfX1lbHNlIGlmKGJqKGEsYyksbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJuOzQ9PT1jLnRhZyYmKGQ9ITEpfWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fVxuZnVuY3Rpb24gaWooYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOnZhciBjPWIudXBkYXRlUXVldWU7Yz1udWxsIT09Yz9jLmxhc3RFZmZlY3Q6bnVsbDtpZihudWxsIT09Yyl7dmFyIGQ9Yz1jLm5leHQ7ZG8gMz09PShkLnRhZyYzKSYmKGE9ZC5kZXN0cm95LGQuZGVzdHJveT12b2lkIDAsdm9pZCAwIT09YSYmYSgpKSxkPWQubmV4dDt3aGlsZShkIT09Yyl9cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OmM9Yi5zdGF0ZU5vZGU7aWYobnVsbCE9Yyl7ZD1iLm1lbW9pemVkUHJvcHM7dmFyIGU9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmQ7YT1iLnR5cGU7dmFyIGY9Yi51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYobnVsbCE9PWYpe2NbeGZdPWQ7XCJpbnB1dFwiPT09YSYmXCJyYWRpb1wiPT09ZC50eXBlJiZudWxsIT1kLm5hbWUmJiRhKGMsZCk7d2IoYSxlKTtiPXdiKGEsZCk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrPVxuMil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP3RiKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9vYihjLGgpOlwiY2hpbGRyZW5cIj09PWc/cGIoYyxoKTpxYShjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6YWIoYyxkKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihjLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphPWMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZSxjLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGU9ISFkLm11bHRpcGxlLGY9ZC52YWx1ZSxudWxsIT1mP2ZiKGMsISFkLm11bHRpcGxlLGYsITEpOmEhPT0hIWQubXVsdGlwbGUmJihudWxsIT1kLmRlZmF1bHRWYWx1ZT9mYihjLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk6ZmIoYywhIWQubXVsdGlwbGUsZC5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fX1yZXR1cm47Y2FzZSA2OmlmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih5KDE2MikpO2Iuc3RhdGVOb2RlLm5vZGVWYWx1ZT1cbmIubWVtb2l6ZWRQcm9wcztyZXR1cm47Y2FzZSAzOmM9Yi5zdGF0ZU5vZGU7Yy5oeWRyYXRlJiYoYy5oeWRyYXRlPSExLENjKGMuY29udGFpbmVySW5mbykpO3JldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGwhPT1iLm1lbW9pemVkU3RhdGUmJihqaj1PKCksYWooYi5jaGlsZCwhMCkpO2tqKGIpO3JldHVybjtjYXNlIDE5OmtqKGIpO3JldHVybjtjYXNlIDE3OnJldHVybjtjYXNlIDIzOmNhc2UgMjQ6YWooYixudWxsIT09Yi5tZW1vaXplZFN0YXRlKTtyZXR1cm59dGhyb3cgRXJyb3IoeSgxNjMpKTt9ZnVuY3Rpb24ga2ooYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgVWkpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1sai5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbmZ1bmN0aW9uIG1qKGEsYil7cmV0dXJuIG51bGwhPT1hJiYoYT1hLm1lbW9pemVkU3RhdGUsbnVsbD09PWF8fG51bGwhPT1hLmRlaHlkcmF0ZWQpPyhiPWIubWVtb2l6ZWRTdGF0ZSxudWxsIT09YiYmbnVsbD09PWIuZGVoeWRyYXRlZCk6ITF9dmFyIG5qPU1hdGguY2VpbCxvaj1yYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLHBqPXJhLlJlYWN0Q3VycmVudE93bmVyLFg9MCxVPW51bGwsWT1udWxsLFc9MCxxaj0wLHJqPUJmKDApLFY9MCxzaj1udWxsLHRqPTAsRGc9MCxIaT0wLHVqPTAsdmo9bnVsbCxqaj0wLEppPUluZmluaXR5O2Z1bmN0aW9uIHdqKCl7Smk9TygpKzUwMH12YXIgWj1udWxsLFFpPSExLFJpPW51bGwsVGk9bnVsbCx4aj0hMSx5aj1udWxsLHpqPTkwLEFqPVtdLEJqPVtdLENqPW51bGwsRGo9MCxFaj1udWxsLEZqPS0xLEdqPTAsSGo9MCxJaj1udWxsLEpqPSExO2Z1bmN0aW9uIEhnKCl7cmV0dXJuIDAhPT0oWCY0OCk/TygpOi0xIT09Rmo/Rmo6Rmo9TygpfVxuZnVuY3Rpb24gSWcoYSl7YT1hLm1vZGU7aWYoMD09PShhJjIpKXJldHVybiAxO2lmKDA9PT0oYSY0KSlyZXR1cm4gOTk9PT1lZygpPzE6MjswPT09R2omJihHaj10aik7aWYoMCE9PWtnLnRyYW5zaXRpb24pezAhPT1IaiYmKEhqPW51bGwhPT12aj92ai5wZW5kaW5nTGFuZXM6MCk7YT1Hajt2YXIgYj00MTg2MTEyJn5IajtiJj0tYjswPT09YiYmKGE9NDE4NjExMiZ+YSxiPWEmLWEsMD09PWImJihiPTgxOTIpKTtyZXR1cm4gYn1hPWVnKCk7MCE9PShYJjQpJiY5OD09PWE/YT1YYygxMixHaik6KGE9U2MoYSksYT1YYyhhLEdqKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiBKZyhhLGIsYyl7aWYoNTA8RGopdGhyb3cgRGo9MCxFaj1udWxsLEVycm9yKHkoMTg1KSk7YT1LaihhLGIpO2lmKG51bGw9PT1hKXJldHVybiBudWxsOyRjKGEsYixjKTthPT09VSYmKEhpfD1iLDQ9PT1WJiZJaShhLFcpKTt2YXIgZD1lZygpOzE9PT1iPzAhPT0oWCY4KSYmMD09PShYJjQ4KT9MaihhKTooTWooYSxjKSwwPT09WCYmKHdqKCksaWcoKSkpOigwPT09KFgmNCl8fDk4IT09ZCYmOTkhPT1kfHwobnVsbD09PUNqP0NqPW5ldyBTZXQoW2FdKTpDai5hZGQoYSkpLE1qKGEsYykpO3ZqPWF9ZnVuY3Rpb24gS2ooYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfVxuZnVuY3Rpb24gTWooYSxiKXtmb3IodmFyIGM9YS5jYWxsYmFja05vZGUsZD1hLnN1c3BlbmRlZExhbmVzLGU9YS5waW5nZWRMYW5lcyxmPWEuZXhwaXJhdGlvblRpbWVzLGc9YS5wZW5kaW5nTGFuZXM7MDxnOyl7dmFyIGg9MzEtVmMoZyksaz0xPDxoLGw9ZltoXTtpZigtMT09PWwpe2lmKDA9PT0oayZkKXx8MCE9PShrJmUpKXtsPWI7UmMoayk7dmFyIG49RjtmW2hdPTEwPD1uP2wrMjUwOjY8PW4/bCs1RTM6LTF9fWVsc2UgbDw9YiYmKGEuZXhwaXJlZExhbmVzfD1rKTtnJj1+a31kPVVjKGEsYT09PVU/VzowKTtiPUY7aWYoMD09PWQpbnVsbCE9PWMmJihjIT09WmYmJlBmKGMpLGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja1ByaW9yaXR5PTApO2Vsc2V7aWYobnVsbCE9PWMpe2lmKGEuY2FsbGJhY2tQcmlvcml0eT09PWIpcmV0dXJuO2MhPT1aZiYmUGYoYyl9MTU9PT1iPyhjPUxqLmJpbmQobnVsbCxhKSxudWxsPT09YWc/KGFnPVtjXSxiZz1PZihVZixqZykpOmFnLnB1c2goYyksXG5jPVpmKToxND09PWI/Yz1oZyg5OSxMai5iaW5kKG51bGwsYSkpOihjPVRjKGIpLGM9aGcoYyxOai5iaW5kKG51bGwsYSkpKTthLmNhbGxiYWNrUHJpb3JpdHk9YjthLmNhbGxiYWNrTm9kZT1jfX1cbmZ1bmN0aW9uIE5qKGEpe0ZqPS0xO0hqPUdqPTA7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBiPWEuY2FsbGJhY2tOb2RlO2lmKE9qKCkmJmEuY2FsbGJhY2tOb2RlIT09YilyZXR1cm4gbnVsbDt2YXIgYz1VYyhhLGE9PT1VP1c6MCk7aWYoMD09PWMpcmV0dXJuIG51bGw7dmFyIGQ9Yzt2YXIgZT1YO1h8PTE2O3ZhciBmPVBqKCk7aWYoVSE9PWF8fFchPT1kKXdqKCksUWooYSxkKTtkbyB0cnl7UmooKTticmVha31jYXRjaChoKXtTaihhLGgpfXdoaWxlKDEpO3FnKCk7b2ouY3VycmVudD1mO1g9ZTtudWxsIT09WT9kPTA6KFU9bnVsbCxXPTAsZD1WKTtpZigwIT09KHRqJkhpKSlRaihhLDApO2Vsc2UgaWYoMCE9PWQpezI9PT1kJiYoWHw9NjQsYS5oeWRyYXRlJiYoYS5oeWRyYXRlPSExLHFmKGEuY29udGFpbmVySW5mbykpLGM9V2MoYSksMCE9PWMmJihkPVRqKGEsYykpKTtpZigxPT09ZCl0aHJvdyBiPXNqLFFqKGEsMCksSWkoYSxjKSxNaihhLE8oKSksYjthLmZpbmlzaGVkV29yaz1cbmEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWM7c3dpdGNoKGQpe2Nhc2UgMDpjYXNlIDE6dGhyb3cgRXJyb3IoeSgzNDUpKTtjYXNlIDI6VWooYSk7YnJlYWs7Y2FzZSAzOklpKGEsYyk7aWYoKGMmNjI5MTQ1NjApPT09YyYmKGQ9amorNTAwLU8oKSwxMDxkKSl7aWYoMCE9PVVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmMpIT09Yyl7SGcoKTthLnBpbmdlZExhbmVzfD1hLnN1c3BlbmRlZExhbmVzJmU7YnJlYWt9YS50aW1lb3V0SGFuZGxlPW9mKFVqLmJpbmQobnVsbCxhKSxkKTticmVha31VaihhKTticmVhaztjYXNlIDQ6SWkoYSxjKTtpZigoYyY0MTg2MTEyKT09PWMpYnJlYWs7ZD1hLmV2ZW50VGltZXM7Zm9yKGU9LTE7MDxjOyl7dmFyIGc9MzEtVmMoYyk7Zj0xPDxnO2c9ZFtnXTtnPmUmJihlPWcpO2MmPX5mfWM9ZTtjPU8oKS1jO2M9KDEyMD5jPzEyMDo0ODA+Yz80ODA6MTA4MD5jPzEwODA6MTkyMD5jPzE5MjA6M0UzPmM/M0UzOjQzMjA+XG5jPzQzMjA6MTk2MCpuaihjLzE5NjApKS1jO2lmKDEwPGMpe2EudGltZW91dEhhbmRsZT1vZihVai5iaW5kKG51bGwsYSksYyk7YnJlYWt9VWooYSk7YnJlYWs7Y2FzZSA1OlVqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IoeSgzMjkpKTt9fU1qKGEsTygpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1iP05qLmJpbmQobnVsbCxhKTpudWxsfWZ1bmN0aW9uIElpKGEsYil7YiY9fnVqO2ImPX5IaTthLnN1c3BlbmRlZExhbmVzfD1iO2EucGluZ2VkTGFuZXMmPX5iO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yjspe3ZhciBjPTMxLVZjKGIpLGQ9MTw8YzthW2NdPS0xO2ImPX5kfX1cbmZ1bmN0aW9uIExqKGEpe2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMjcpKTtPaigpO2lmKGE9PT1VJiYwIT09KGEuZXhwaXJlZExhbmVzJlcpKXt2YXIgYj1XO3ZhciBjPVRqKGEsYik7MCE9PSh0aiZIaSkmJihiPVVjKGEsYiksYz1UaihhLGIpKX1lbHNlIGI9VWMoYSwwKSxjPVRqKGEsYik7MCE9PWEudGFnJiYyPT09YyYmKFh8PTY0LGEuaHlkcmF0ZSYmKGEuaHlkcmF0ZT0hMSxxZihhLmNvbnRhaW5lckluZm8pKSxiPVdjKGEpLDAhPT1iJiYoYz1UaihhLGIpKSk7aWYoMT09PWMpdGhyb3cgYz1zaixRaihhLDApLElpKGEsYiksTWooYSxPKCkpLGM7YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZTthLmZpbmlzaGVkTGFuZXM9YjtVaihhKTtNaihhLE8oKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBWaigpe2lmKG51bGwhPT1Dail7dmFyIGE9Q2o7Q2o9bnVsbDthLmZvckVhY2goZnVuY3Rpb24oYSl7YS5leHBpcmVkTGFuZXN8PTI0JmEucGVuZGluZ0xhbmVzO01qKGEsTygpKX0pfWlnKCl9ZnVuY3Rpb24gV2ooYSxiKXt2YXIgYz1YO1h8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gWGooYSxiKXt2YXIgYz1YO1gmPS0yO1h8PTg7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7WD1jLDA9PT1YJiYod2ooKSxpZygpKX19ZnVuY3Rpb24gbmkoYSxiKXtJKHJqLHFqKTtxanw9Yjt0anw9Yn1mdW5jdGlvbiBLaSgpe3FqPXJqLmN1cnJlbnQ7SChyail9XG5mdW5jdGlvbiBRaihhLGIpe2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7dmFyIGM9YS50aW1lb3V0SGFuZGxlOy0xIT09YyYmKGEudGltZW91dEhhbmRsZT0tMSxwZihjKSk7aWYobnVsbCE9PVkpZm9yKGM9WS5yZXR1cm47bnVsbCE9PWM7KXt2YXIgZD1jO3N3aXRjaChkLnRhZyl7Y2FzZSAxOmQ9ZC50eXBlLmNoaWxkQ29udGV4dFR5cGVzO251bGwhPT1kJiZ2b2lkIDAhPT1kJiZHZigpO2JyZWFrO2Nhc2UgMzpmaCgpO0goTik7SChNKTt1aCgpO2JyZWFrO2Nhc2UgNTpoaChkKTticmVhaztjYXNlIDQ6ZmgoKTticmVhaztjYXNlIDEzOkgoUCk7YnJlYWs7Y2FzZSAxOTpIKFApO2JyZWFrO2Nhc2UgMTA6cmcoZCk7YnJlYWs7Y2FzZSAyMzpjYXNlIDI0OktpKCl9Yz1jLnJldHVybn1VPWE7WT1UZyhhLmN1cnJlbnQsbnVsbCk7Vz1xaj10aj1iO1Y9MDtzaj1udWxsO3VqPUhpPURnPTB9XG5mdW5jdGlvbiBTaihhLGIpe2Rve3ZhciBjPVk7dHJ5e3FnKCk7dmguY3VycmVudD1HaDtpZih5aCl7Zm9yKHZhciBkPVIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZDspe3ZhciBlPWQucXVldWU7bnVsbCE9PWUmJihlLnBlbmRpbmc9bnVsbCk7ZD1kLm5leHR9eWg9ITF9eGg9MDtUPVM9Uj1udWxsO3poPSExO3BqLmN1cnJlbnQ9bnVsbDtpZihudWxsPT09Y3x8bnVsbD09PWMucmV0dXJuKXtWPTE7c2o9YjtZPW51bGw7YnJlYWt9YTp7dmFyIGY9YSxnPWMucmV0dXJuLGg9YyxrPWI7Yj1XO2guZmxhZ3N8PTIwNDg7aC5maXJzdEVmZmVjdD1oLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rO2lmKDA9PT0oaC5tb2RlJjIpKXt2YXIgbj1oLmFsdGVybmF0ZTtuPyhoLnVwZGF0ZVF1ZXVlPW4udXBkYXRlUXVldWUsaC5tZW1vaXplZFN0YXRlPW4ubWVtb2l6ZWRTdGF0ZSxoLmxhbmVzPW4ubGFuZXMpOlxuKGgudXBkYXRlUXVldWU9bnVsbCxoLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIEE9MCE9PShQLmN1cnJlbnQmMSkscD1nO2Rve3ZhciBDO2lmKEM9MTM9PT1wLnRhZyl7dmFyIHg9cC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT14KUM9bnVsbCE9PXguZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciB3PXAubWVtb2l6ZWRQcm9wcztDPXZvaWQgMD09PXcuZmFsbGJhY2s/ITE6ITAhPT13LnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOkE/ITE6ITB9fWlmKEMpe3ZhciB6PXAudXBkYXRlUXVldWU7aWYobnVsbD09PXope3ZhciB1PW5ldyBTZXQ7dS5hZGQobCk7cC51cGRhdGVRdWV1ZT11fWVsc2Ugei5hZGQobCk7aWYoMD09PShwLm1vZGUmMikpe3AuZmxhZ3N8PTY0O2guZmxhZ3N8PTE2Mzg0O2guZmxhZ3MmPS0yOTgxO2lmKDE9PT1oLnRhZylpZihudWxsPT09aC5hbHRlcm5hdGUpaC50YWc9MTc7ZWxzZXt2YXIgdD16ZygtMSwxKTt0LnRhZz0yO0FnKGgsdCl9aC5sYW5lc3w9MTticmVhayBhfWs9XG52b2lkIDA7aD1iO3ZhciBxPWYucGluZ0NhY2hlO251bGw9PT1xPyhxPWYucGluZ0NhY2hlPW5ldyBPaSxrPW5ldyBTZXQscS5zZXQobCxrKSk6KGs9cS5nZXQobCksdm9pZCAwPT09ayYmKGs9bmV3IFNldCxxLnNldChsLGspKSk7aWYoIWsuaGFzKGgpKXtrLmFkZChoKTt2YXIgdj1Zai5iaW5kKG51bGwsZixsLGgpO2wudGhlbih2LHYpfXAuZmxhZ3N8PTQwOTY7cC5sYW5lcz1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7az1FcnJvcigoUmEoaC50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiKX01IT09ViYmKFY9Mik7az1NaShrLGgpO3A9XG5nO2Rve3N3aXRjaChwLnRhZyl7Y2FzZSAzOmY9aztwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEo9UGkocCxmLGIpO0JnKHAsSik7YnJlYWsgYTtjYXNlIDE6Zj1rO3ZhciBLPXAudHlwZSxRPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5mbGFncyY2NCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgSy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT1RJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgUS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhRKSkpKXtwLmZsYWdzfD00MDk2O2ImPS1iO3AubGFuZXN8PWI7dmFyIEw9U2kocCxmLGIpO0JnKHAsTCk7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WmooYyl9Y2F0Y2godmEpe2I9dmE7WT09PWMmJm51bGwhPT1jJiYoWT1jPWMucmV0dXJuKTtjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIFBqKCl7dmFyIGE9b2ouY3VycmVudDtvai5jdXJyZW50PUdoO3JldHVybiBudWxsPT09YT9HaDphfWZ1bmN0aW9uIFRqKGEsYil7dmFyIGM9WDtYfD0xNjt2YXIgZD1QaigpO1U9PT1hJiZXPT09Ynx8UWooYSxiKTtkbyB0cnl7YWsoKTticmVha31jYXRjaChlKXtTaihhLGUpfXdoaWxlKDEpO3FnKCk7WD1jO29qLmN1cnJlbnQ9ZDtpZihudWxsIT09WSl0aHJvdyBFcnJvcih5KDI2MSkpO1U9bnVsbDtXPTA7cmV0dXJuIFZ9ZnVuY3Rpb24gYWsoKXtmb3IoO251bGwhPT1ZOyliayhZKX1mdW5jdGlvbiBSaigpe2Zvcig7bnVsbCE9PVkmJiFRZigpOyliayhZKX1mdW5jdGlvbiBiayhhKXt2YXIgYj1jayhhLmFsdGVybmF0ZSxhLHFqKTthLm1lbW9pemVkUHJvcHM9YS5wZW5kaW5nUHJvcHM7bnVsbD09PWI/WmooYSk6WT1iO3BqLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIFpqKGEpe3ZhciBiPWE7ZG97dmFyIGM9Yi5hbHRlcm5hdGU7YT1iLnJldHVybjtpZigwPT09KGIuZmxhZ3MmMjA0OCkpe2M9R2koYyxiLHFqKTtpZihudWxsIT09Yyl7WT1jO3JldHVybn1jPWI7aWYoMjQhPT1jLnRhZyYmMjMhPT1jLnRhZ3x8bnVsbD09PWMubWVtb2l6ZWRTdGF0ZXx8MCE9PShxaiYxMDczNzQxODI0KXx8MD09PShjLm1vZGUmNCkpe2Zvcih2YXIgZD0wLGU9Yy5jaGlsZDtudWxsIT09ZTspZHw9ZS5sYW5lc3xlLmNoaWxkTGFuZXMsZT1lLnNpYmxpbmc7Yy5jaGlsZExhbmVzPWR9bnVsbCE9PWEmJjA9PT0oYS5mbGFncyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1iLmZpcnN0RWZmZWN0KSxudWxsIT09Yi5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWIuZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QpLDE8Yi5mbGFncyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1iOmEuZmlyc3RFZmZlY3Q9YixhLmxhc3RFZmZlY3Q9YikpfWVsc2V7Yz1MaShiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MjA0NztZPWM7cmV0dXJufW51bGwhPT1hJiYoYS5maXJzdEVmZmVjdD1hLmxhc3RFZmZlY3Q9bnVsbCxhLmZsYWdzfD0yMDQ4KX1iPWIuc2libGluZztpZihudWxsIT09Yil7WT1iO3JldHVybn1ZPWI9YX13aGlsZShudWxsIT09Yik7MD09PVYmJihWPTUpfWZ1bmN0aW9uIFVqKGEpe3ZhciBiPWVnKCk7Z2coOTksZGsuYmluZChudWxsLGEsYikpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gZGsoYSxiKXtkbyBPaigpO3doaWxlKG51bGwhPT15aik7aWYoMCE9PShYJjQ4KSl0aHJvdyBFcnJvcih5KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih5KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7dmFyIGQ9Yy5sYW5lc3xjLmNoaWxkTGFuZXMsZT1kLGY9YS5wZW5kaW5nTGFuZXMmfmU7YS5wZW5kaW5nTGFuZXM9ZTthLnN1c3BlbmRlZExhbmVzPTA7YS5waW5nZWRMYW5lcz0wO2EuZXhwaXJlZExhbmVzJj1lO2EubXV0YWJsZVJlYWRMYW5lcyY9ZTthLmVudGFuZ2xlZExhbmVzJj1lO2U9YS5lbnRhbmdsZW1lbnRzO2Zvcih2YXIgZz1hLmV2ZW50VGltZXMsaD1hLmV4cGlyYXRpb25UaW1lczswPGY7KXt2YXIgaz0zMS1WYyhmKSxsPTE8PGs7ZVtrXT0wO2dba109LTE7aFtrXT0tMTtmJj1+bH1udWxsIT09XG5DaiYmMD09PShkJjI0KSYmQ2ouaGFzKGEpJiZDai5kZWxldGUoYSk7YT09PVUmJihZPVU9bnVsbCxXPTApOzE8Yy5mbGFncz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGQ9Yy5maXJzdEVmZmVjdCk6ZD1jOmQ9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZCl7ZT1YO1h8PTMyO3BqLmN1cnJlbnQ9bnVsbDtrZj1mZDtnPU5lKCk7aWYoT2UoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTppZihoPShoPWcub3duZXJEb2N1bWVudCkmJmguZGVmYXVsdFZpZXd8fHdpbmRvdywobD1oLmdldFNlbGVjdGlvbiYmaC5nZXRTZWxlY3Rpb24oKSkmJjAhPT1sLnJhbmdlQ291bnQpe2g9bC5hbmNob3JOb2RlO2Y9bC5hbmNob3JPZmZzZXQ7az1sLmZvY3VzTm9kZTtsPWwuZm9jdXNPZmZzZXQ7dHJ5e2gubm9kZVR5cGUsay5ub2RlVHlwZX1jYXRjaCh2YSl7aD1udWxsO1xuYnJlYWsgYX12YXIgbj0wLEE9LTEscD0tMSxDPTAseD0wLHc9Zyx6PW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgdTs7KXt3IT09aHx8MCE9PWYmJjMhPT13Lm5vZGVUeXBlfHwoQT1uK2YpO3chPT1rfHwwIT09bCYmMyE9PXcubm9kZVR5cGV8fChwPW4rbCk7Mz09PXcubm9kZVR5cGUmJihuKz13Lm5vZGVWYWx1ZS5sZW5ndGgpO2lmKG51bGw9PT0odT13LmZpcnN0Q2hpbGQpKWJyZWFrO3o9dzt3PXV9Zm9yKDs7KXtpZih3PT09ZylicmVhayBiO3o9PT1oJiYrK0M9PT1mJiYoQT1uKTt6PT09ayYmKyt4PT09bCYmKHA9bik7aWYobnVsbCE9PSh1PXcubmV4dFNpYmxpbmcpKWJyZWFrO3c9ejt6PXcucGFyZW50Tm9kZX13PXV9aD0tMT09PUF8fC0xPT09cD9udWxsOntzdGFydDpBLGVuZDpwfX1lbHNlIGg9bnVsbDtoPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9bnVsbDtsZj17Zm9jdXNlZEVsZW06ZyxzZWxlY3Rpb25SYW5nZTpofTtmZD0hMTtJaj1udWxsO0pqPSExO1o9ZDtkbyB0cnl7ZWsoKX1jYXRjaCh2YSl7aWYobnVsbD09PVxuWil0aHJvdyBFcnJvcih5KDMzMCkpO1dpKFosdmEpO1o9Wi5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1aKTtJaj1udWxsO1o9ZDtkbyB0cnl7Zm9yKGc9YTtudWxsIT09Wjspe3ZhciB0PVouZmxhZ3M7dCYxNiYmcGIoWi5zdGF0ZU5vZGUsXCJcIik7aWYodCYxMjgpe3ZhciBxPVouYWx0ZXJuYXRlO2lmKG51bGwhPT1xKXt2YXIgdj1xLnJlZjtudWxsIT09diYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB2P3YobnVsbCk6di5jdXJyZW50PW51bGwpfX1zd2l0Y2godCYxMDM4KXtjYXNlIDI6ZmooWik7Wi5mbGFncyY9LTM7YnJlYWs7Y2FzZSA2OmZqKFopO1ouZmxhZ3MmPS0zO2lqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgMTAyNDpaLmZsYWdzJj0tMTAyNTticmVhaztjYXNlIDEwMjg6Wi5mbGFncyY9LTEwMjU7aWooWi5hbHRlcm5hdGUsWik7YnJlYWs7Y2FzZSA0OmlqKFouYWx0ZXJuYXRlLFopO2JyZWFrO2Nhc2UgODpoPVo7Y2ooZyxoKTt2YXIgSj1oLmFsdGVybmF0ZTtkaihoKTtudWxsIT09XG5KJiZkaihKKX1aPVoubmV4dEVmZmVjdH19Y2F0Y2godmEpe2lmKG51bGw9PT1aKXRocm93IEVycm9yKHkoMzMwKSk7V2koWix2YSk7Wj1aLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVopO3Y9bGY7cT1OZSgpO3Q9di5mb2N1c2VkRWxlbTtnPXYuc2VsZWN0aW9uUmFuZ2U7aWYocSE9PXQmJnQmJnQub3duZXJEb2N1bWVudCYmTWUodC5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCx0KSl7bnVsbCE9PWcmJk9lKHQpJiYocT1nLnN0YXJ0LHY9Zy5lbmQsdm9pZCAwPT09diYmKHY9cSksXCJzZWxlY3Rpb25TdGFydFwiaW4gdD8odC5zZWxlY3Rpb25TdGFydD1xLHQuc2VsZWN0aW9uRW5kPU1hdGgubWluKHYsdC52YWx1ZS5sZW5ndGgpKToodj0ocT10Lm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmcS5kZWZhdWx0Vmlld3x8d2luZG93LHYuZ2V0U2VsZWN0aW9uJiYodj12LmdldFNlbGVjdGlvbigpLGg9dC50ZXh0Q29udGVudC5sZW5ndGgsSj1NYXRoLm1pbihnLnN0YXJ0LGgpLGc9dm9pZCAwPT09XG5nLmVuZD9KOk1hdGgubWluKGcuZW5kLGgpLCF2LmV4dGVuZCYmSj5nJiYoaD1nLGc9SixKPWgpLGg9TGUodCxKKSxmPUxlKHQsZyksaCYmZiYmKDEhPT12LnJhbmdlQ291bnR8fHYuYW5jaG9yTm9kZSE9PWgubm9kZXx8di5hbmNob3JPZmZzZXQhPT1oLm9mZnNldHx8di5mb2N1c05vZGUhPT1mLm5vZGV8fHYuZm9jdXNPZmZzZXQhPT1mLm9mZnNldCkmJihxPXEuY3JlYXRlUmFuZ2UoKSxxLnNldFN0YXJ0KGgubm9kZSxoLm9mZnNldCksdi5yZW1vdmVBbGxSYW5nZXMoKSxKPmc/KHYuYWRkUmFuZ2UocSksdi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KHEuc2V0RW5kKGYubm9kZSxmLm9mZnNldCksdi5hZGRSYW5nZShxKSkpKSkpO3E9W107Zm9yKHY9dDt2PXYucGFyZW50Tm9kZTspMT09PXYubm9kZVR5cGUmJnEucHVzaCh7ZWxlbWVudDp2LGxlZnQ6di5zY3JvbGxMZWZ0LHRvcDp2LnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiB0LmZvY3VzJiZ0LmZvY3VzKCk7Zm9yKHQ9XG4wO3Q8cS5sZW5ndGg7dCsrKXY9cVt0XSx2LmVsZW1lbnQuc2Nyb2xsTGVmdD12LmxlZnQsdi5lbGVtZW50LnNjcm9sbFRvcD12LnRvcH1mZD0hIWtmO2xmPWtmPW51bGw7YS5jdXJyZW50PWM7Wj1kO2RvIHRyeXtmb3IodD1hO251bGwhPT1aOyl7dmFyIEs9Wi5mbGFncztLJjM2JiZZaSh0LFouYWx0ZXJuYXRlLFopO2lmKEsmMTI4KXtxPXZvaWQgMDt2YXIgUT1aLnJlZjtpZihudWxsIT09USl7dmFyIEw9Wi5zdGF0ZU5vZGU7c3dpdGNoKFoudGFnKXtjYXNlIDU6cT1MO2JyZWFrO2RlZmF1bHQ6cT1MfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBRP1EocSk6US5jdXJyZW50PXF9fVo9Wi5uZXh0RWZmZWN0fX1jYXRjaCh2YSl7aWYobnVsbD09PVopdGhyb3cgRXJyb3IoeSgzMzApKTtXaShaLHZhKTtaPVoubmV4dEVmZmVjdH13aGlsZShudWxsIT09Wik7Wj1udWxsOyRmKCk7WD1lfWVsc2UgYS5jdXJyZW50PWM7aWYoeGopeGo9ITEseWo9YSx6aj1iO2Vsc2UgZm9yKFo9ZDtudWxsIT09WjspYj1cbloubmV4dEVmZmVjdCxaLm5leHRFZmZlY3Q9bnVsbCxaLmZsYWdzJjgmJihLPVosSy5zaWJsaW5nPW51bGwsSy5zdGF0ZU5vZGU9bnVsbCksWj1iO2Q9YS5wZW5kaW5nTGFuZXM7MD09PWQmJihUaT1udWxsKTsxPT09ZD9hPT09RWo/RGorKzooRGo9MCxFaj1hKTpEaj0wO2M9Yy5zdGF0ZU5vZGU7aWYoTWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBNZi5vbkNvbW1pdEZpYmVyUm9vdCl0cnl7TWYub25Db21taXRGaWJlclJvb3QoTGYsYyx2b2lkIDAsNjQ9PT0oYy5jdXJyZW50LmZsYWdzJjY0KSl9Y2F0Y2godmEpe31NaihhLE8oKSk7aWYoUWkpdGhyb3cgUWk9ITEsYT1SaSxSaT1udWxsLGE7aWYoMCE9PShYJjgpKXJldHVybiBudWxsO2lnKCk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBlaygpe2Zvcig7bnVsbCE9PVo7KXt2YXIgYT1aLmFsdGVybmF0ZTtKanx8bnVsbD09PUlqfHwoMCE9PShaLmZsYWdzJjgpP2RjKFosSWopJiYoSmo9ITApOjEzPT09Wi50YWcmJm1qKGEsWikmJmRjKFosSWopJiYoSmo9ITApKTt2YXIgYj1aLmZsYWdzOzAhPT0oYiYyNTYpJiZYaShhLFopOzA9PT0oYiY1MTIpfHx4anx8KHhqPSEwLGhnKDk3LGZ1bmN0aW9uKCl7T2ooKTtyZXR1cm4gbnVsbH0pKTtaPVoubmV4dEVmZmVjdH19ZnVuY3Rpb24gT2ooKXtpZig5MCE9PXpqKXt2YXIgYT05Nzx6aj85Nzp6ajt6aj05MDtyZXR1cm4gZ2coYSxmayl9cmV0dXJuITF9ZnVuY3Rpb24gJGkoYSxiKXtBai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9ZnVuY3Rpb24gWmkoYSxiKXtCai5wdXNoKGIsYSk7eGp8fCh4aj0hMCxoZyg5NyxmdW5jdGlvbigpe09qKCk7cmV0dXJuIG51bGx9KSl9XG5mdW5jdGlvbiBmaygpe2lmKG51bGw9PT15ailyZXR1cm4hMTt2YXIgYT15ajt5aj1udWxsO2lmKDAhPT0oWCY0OCkpdGhyb3cgRXJyb3IoeSgzMzEpKTt2YXIgYj1YO1h8PTMyO3ZhciBjPUJqO0JqPVtdO2Zvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCs9Mil7dmFyIGU9Y1tkXSxmPWNbZCsxXSxnPWUuZGVzdHJveTtlLmRlc3Ryb3k9dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnKXRyeXtnKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1jPUFqO0FqPVtdO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKz0yKXtlPWNbZF07Zj1jW2QrMV07dHJ5e3ZhciBoPWUuY3JlYXRlO2UuZGVzdHJveT1oKCl9Y2F0Y2goayl7aWYobnVsbD09PWYpdGhyb3cgRXJyb3IoeSgzMzApKTtXaShmLGspfX1mb3IoaD1hLmN1cnJlbnQuZmlyc3RFZmZlY3Q7bnVsbCE9PWg7KWE9aC5uZXh0RWZmZWN0LGgubmV4dEVmZmVjdD1udWxsLGguZmxhZ3MmOCYmKGguc2libGluZz1cbm51bGwsaC5zdGF0ZU5vZGU9bnVsbCksaD1hO1g9YjtpZygpO3JldHVybiEwfWZ1bmN0aW9uIGdrKGEsYixjKXtiPU1pKGMsYik7Yj1QaShhLGIsMSk7QWcoYSxiKTtiPUhnKCk7YT1LaihhLDEpO251bGwhPT1hJiYoJGMoYSwxLGIpLE1qKGEsYikpfVxuZnVuY3Rpb24gV2koYSxiKXtpZigzPT09YS50YWcpZ2soYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtnayhjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1UaXx8IVRpLmhhcyhkKSkpe2E9TWkoYixhKTt2YXIgZT1TaShjLGEsMSk7QWcoYyxlKTtlPUhnKCk7Yz1LaihjLDEpO2lmKG51bGwhPT1jKSRjKGMsMSxlKSxNaihjLGUpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09VGl8fCFUaS5oYXMoZCkpKXRyeXtkLmNvbXBvbmVudERpZENhdGNoKGIsYSl9Y2F0Y2goZil7fWJyZWFrfX1jPWMucmV0dXJufX1cbmZ1bmN0aW9uIFlqKGEsYixjKXt2YXIgZD1hLnBpbmdDYWNoZTtudWxsIT09ZCYmZC5kZWxldGUoYik7Yj1IZygpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztVPT09YSYmKFcmYyk9PT1jJiYoND09PVZ8fDM9PT1WJiYoVyY2MjkxNDU2MCk9PT1XJiY1MDA+TygpLWpqP1FqKGEsMCk6dWp8PWMpO01qKGEsYil9ZnVuY3Rpb24gbGooYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj0wOzA9PT1iJiYoYj1hLm1vZGUsMD09PShiJjIpP2I9MTowPT09KGImNCk/Yj05OT09PWVnKCk/MToyOigwPT09R2omJihHaj10aiksYj1ZYyg2MjkxNDU2MCZ+R2opLDA9PT1iJiYoYj00MTk0MzA0KSkpO2M9SGcoKTthPUtqKGEsYik7bnVsbCE9PWEmJigkYyhhLGIsYyksTWooYSxjKSl9dmFyIGNrO1xuY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIubGFuZXM7aWYobnVsbCE9PWEpaWYoYS5tZW1vaXplZFByb3BzIT09Yi5wZW5kaW5nUHJvcHN8fE4uY3VycmVudCl1Zz0hMDtlbHNlIGlmKDAhPT0oYyZkKSl1Zz0wIT09KGEuZmxhZ3MmMTYzODQpPyEwOiExO2Vsc2V7dWc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6cmkoYik7c2goKTticmVhaztjYXNlIDU6Z2goYik7YnJlYWs7Y2FzZSAxOkZmKGIudHlwZSkmJkpmKGIpO2JyZWFrO2Nhc2UgNDplaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6ZD1iLm1lbW9pemVkUHJvcHMudmFsdWU7dmFyIGU9Yi50eXBlLl9jb250ZXh0O0kobWcsZS5fY3VycmVudFZhbHVlKTtlLl9jdXJyZW50VmFsdWU9ZDticmVhaztjYXNlIDEzOmlmKG51bGwhPT1iLm1lbW9pemVkU3RhdGUpe2lmKDAhPT0oYyZiLmNoaWxkLmNoaWxkTGFuZXMpKXJldHVybiB0aShhLGIsYyk7SShQLFAuY3VycmVudCYxKTtiPWhpKGEsYixjKTtyZXR1cm4gbnVsbCE9PVxuYj9iLnNpYmxpbmc6bnVsbH1JKFAsUC5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmYi5jaGlsZExhbmVzKTtpZigwIT09KGEuZmxhZ3MmNjQpKXtpZihkKXJldHVybiBBaShhLGIsYyk7Yi5mbGFnc3w9NjR9ZT1iLm1lbW9pemVkU3RhdGU7bnVsbCE9PWUmJihlLnJlbmRlcmluZz1udWxsLGUudGFpbD1udWxsLGUubGFzdEVmZmVjdD1udWxsKTtJKFAsUC5jdXJyZW50KTtpZihkKWJyZWFrO2Vsc2UgcmV0dXJuIG51bGw7Y2FzZSAyMzpjYXNlIDI0OnJldHVybiBiLmxhbmVzPTAsbWkoYSxiLGMpfXJldHVybiBoaShhLGIsYyl9ZWxzZSB1Zz0hMTtiLmxhbmVzPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mik7YT1iLnBlbmRpbmdQcm9wcztlPUVmKGIsTS5jdXJyZW50KTt0ZyhiLGMpO2U9Q2gobnVsbCxiLGQsYSxlLGMpO2IuZmxhZ3N8PTE7aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKEZmKGQpKXt2YXIgZj0hMDtKZihiKX1lbHNlIGY9ITE7Yi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbDt4ZyhiKTt2YXIgZz1kLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZyYmR2coYixkLGcsYSk7ZS51cGRhdGVyPUtnO2Iuc3RhdGVOb2RlPWU7ZS5fcmVhY3RJbnRlcm5hbHM9YjtPZyhiLGQsYSxjKTtiPXFpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLGZpKG51bGwsYixlLGMpLGI9Yi5jaGlsZDtyZXR1cm4gYjtjYXNlIDE2OmU9Yi5lbGVtZW50VHlwZTthOntudWxsIT09YSYmKGEuYWx0ZXJuYXRlPW51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmZsYWdzfD0yKTtcbmE9Yi5wZW5kaW5nUHJvcHM7Zj1lLl9pbml0O2U9ZihlLl9wYXlsb2FkKTtiLnR5cGU9ZTtmPWIudGFnPWhrKGUpO2E9bGcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9bGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPXBpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9Z2kobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1paShudWxsLGIsZSxsZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHkoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksbGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSkscGkoYSxiLGQsZSxjKTtjYXNlIDM6cmkoYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1hfHxudWxsPT09ZCl0aHJvdyBFcnJvcih5KDI4MikpO1xuZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3lnKGEsYik7Q2coYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlzaCgpLGI9aGkoYSxiLGMpO2Vsc2V7ZT1iLnN0YXRlTm9kZTtpZihmPWUuaHlkcmF0ZSlraD1yZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLGpoPWIsZj1saD0hMDtpZihmKXthPWUubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YTtpZihudWxsIT1hKWZvcihlPTA7ZTxhLmxlbmd0aDtlKz0yKWY9YVtlXSxmLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PWFbZSsxXSx0aC5wdXNoKGYpO2M9WmcoYixudWxsLGQsYyk7Zm9yKGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8MTAyNCxjPWMuc2libGluZ31lbHNlIGZpKGEsYixkLGMpLHNoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZ2goYiksbnVsbD09PWEmJlxucGgoYiksZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxmPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpudWxsLGc9ZS5jaGlsZHJlbixuZihkLGUpP2c9bnVsbDpudWxsIT09ZiYmbmYoZCxmKSYmKGIuZmxhZ3N8PTE2KSxvaShhLGIpLGZpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmcGgoYiksbnVsbDtjYXNlIDEzOnJldHVybiB0aShhLGIsYyk7Y2FzZSA0OnJldHVybiBlaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1ZZyhiLG51bGwsZCxjKTpmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmxnKGQsZSksZ2koYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIGZpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gZmkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFxuYyksYi5jaGlsZDtjYXNlIDEyOnJldHVybiBmaShhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKG1nLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9SGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIU4uY3VycmVudCl7Yj1oaShhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09ayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1cbmsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD16ZygtMSxjJi1jKSxsLnRhZz0yLEFnKGgsbCkpO2gubGFuZXN8PWM7bD1oLmFsdGVybmF0ZTtudWxsIT09bCYmKGwubGFuZXN8PWMpO3NnKGgucmV0dXJuLGMpO2subGFuZXN8PWM7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9Z31maShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxmPWIucGVuZGluZ1Byb3BzLGQ9Zi5jaGlsZHJlbix0ZyhiLGMpLGU9dmcoZSxcbmYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5mbGFnc3w9MSxmaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9bGcoZSxiLnBlbmRpbmdQcm9wcyksZj1sZyhlLnR5cGUsZiksaWkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIGtpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTpsZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZmxhZ3N8PTIpLGIudGFnPTEsRmYoZCk/KGE9ITAsSmYoYikpOmE9ITEsdGcoYixjKSxNZyhiLGQsZSksT2coYixkLGUsYykscWkobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiBBaShhLGIsYyk7Y2FzZSAyMzpyZXR1cm4gbWkoYSxiLGMpO2Nhc2UgMjQ6cmV0dXJuIG1pKGEsYixjKX10aHJvdyBFcnJvcih5KDE1NixiLnRhZykpO1xufTtmdW5jdGlvbiBpayhhLGIsYyxkKXt0aGlzLnRhZz1hO3RoaXMua2V5PWM7dGhpcy5zaWJsaW5nPXRoaXMuY2hpbGQ9dGhpcy5yZXR1cm49dGhpcy5zdGF0ZU5vZGU9dGhpcy50eXBlPXRoaXMuZWxlbWVudFR5cGU9bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMuZGVwZW5kZW5jaWVzPXRoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZmxhZ3M9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gbmgoYSxiLGMsZCl7cmV0dXJuIG5ldyBpayhhLGIsYyxkKX1mdW5jdGlvbiBqaShhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gaGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGppKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1BYSlyZXR1cm4gMTE7aWYoYT09PURhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFRnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9bmgoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5uZXh0RWZmZWN0PW51bGwsYy5maXJzdEVmZmVjdD1udWxsLGMubGFzdEVmZmVjdD1udWxsKTtjLmNoaWxkTGFuZXM9YS5jaGlsZExhbmVzO2MubGFuZXM9YS5sYW5lcztjLmNoaWxkPWEuY2hpbGQ7Yy5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztjLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2MudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtiPWEuZGVwZW5kZW5jaWVzO2MuZGVwZW5kZW5jaWVzPW51bGw9PT1iP251bGw6e2xhbmVzOmIubGFuZXMsZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0fTtcbmMuc2libGluZz1hLnNpYmxpbmc7Yy5pbmRleD1hLmluZGV4O2MucmVmPWEucmVmO3JldHVybiBjfVxuZnVuY3Rpb24gVmcoYSxiLGMsZCxlLGYpe3ZhciBnPTI7ZD1hO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKWppKGEpJiYoZz0xKTtlbHNlIGlmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlnPTU7ZWxzZSBhOnN3aXRjaChhKXtjYXNlIHVhOnJldHVybiBYZyhjLmNoaWxkcmVuLGUsZixiKTtjYXNlIEhhOmc9ODtlfD0xNjticmVhaztjYXNlIHdhOmc9ODtlfD0xO2JyZWFrO2Nhc2UgeGE6cmV0dXJuIGE9bmgoMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT14YSxhLnR5cGU9eGEsYS5sYW5lcz1mLGE7Y2FzZSBCYTpyZXR1cm4gYT1uaCgxMyxjLGIsZSksYS50eXBlPUJhLGEuZWxlbWVudFR5cGU9QmEsYS5sYW5lcz1mLGE7Y2FzZSBDYTpyZXR1cm4gYT1uaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1DYSxhLmxhbmVzPWYsYTtjYXNlIElhOnJldHVybiB2aShjLGUsZixiKTtjYXNlIEphOnJldHVybiBhPW5oKDI0LGMsYixlKSxhLmVsZW1lbnRUeXBlPUphLGEubGFuZXM9ZixhO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PVxudHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHlhOmc9MTA7YnJlYWsgYTtjYXNlIHphOmc9OTticmVhayBhO2Nhc2UgQWE6Zz0xMTticmVhayBhO2Nhc2UgRGE6Zz0xNDticmVhayBhO2Nhc2UgRWE6Zz0xNjtkPW51bGw7YnJlYWsgYTtjYXNlIEZhOmc9MjI7YnJlYWsgYX10aHJvdyBFcnJvcih5KDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPW5oKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gWGcoYSxiLGMsZCl7YT1uaCg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gdmkoYSxiLGMsZCl7YT1uaCgyMyxhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gVWcoYSxiLGMpe2E9bmgoNixhLG51bGwsYik7YS5sYW5lcz1jO3JldHVybiBhfVxuZnVuY3Rpb24gV2coYSxiLGMpe2I9bmgoNCxudWxsIT09YS5jaGlsZHJlbj9hLmNoaWxkcmVuOltdLGEua2V5LGIpO2IubGFuZXM9YztiLnN0YXRlTm9kZT17Y29udGFpbmVySW5mbzphLmNvbnRhaW5lckluZm8scGVuZGluZ0NoaWxkcmVuOm51bGwsaW1wbGVtZW50YXRpb246YS5pbXBsZW1lbnRhdGlvbn07cmV0dXJuIGJ9XG5mdW5jdGlvbiBqayhhLGIsYyl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT0wO3RoaXMuZXZlbnRUaW1lcz1aYygwKTt0aGlzLmV4cGlyYXRpb25UaW1lcz1aYygtMSk7dGhpcy5lbnRhbmdsZWRMYW5lcz10aGlzLmZpbmlzaGVkTGFuZXM9dGhpcy5tdXRhYmxlUmVhZExhbmVzPXRoaXMuZXhwaXJlZExhbmVzPXRoaXMucGluZ2VkTGFuZXM9dGhpcy5zdXNwZW5kZWRMYW5lcz10aGlzLnBlbmRpbmdMYW5lcz0wO3RoaXMuZW50YW5nbGVtZW50cz1aYygwKTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9bnVsbH1cbmZ1bmN0aW9uIGtrKGEsYixjKXt2YXIgZD0zPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1szXT9hcmd1bWVudHNbM106bnVsbDtyZXR1cm57JCR0eXBlb2Y6dGEsa2V5Om51bGw9PWQ/bnVsbDpcIlwiK2QsY2hpbGRyZW46YSxjb250YWluZXJJbmZvOmIsaW1wbGVtZW50YXRpb246Y319XG5mdW5jdGlvbiBsayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1IZygpLGc9SWcoZSk7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxzO2I6e2lmKFpiKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHkoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoRmYoaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyBFcnJvcih5KDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihGZihrKSl7Yz1JZihjLGssaCk7YnJlYWsgYX19Yz1ofWVsc2UgYz1DZjtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPXpnKGYsZyk7Yi5wYXlsb2FkPXtlbGVtZW50OmF9O2Q9dm9pZCAwPT09ZD9udWxsOmQ7bnVsbCE9PVxuZCYmKGIuY2FsbGJhY2s9ZCk7QWcoZSxiKTtKZyhlLGcsZik7cmV0dXJuIGd9ZnVuY3Rpb24gbWsoYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBuayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXt2YXIgYz1hLnJldHJ5TGFuZTthLnJldHJ5TGFuZT0wIT09YyYmYzxiP2M6Yn19ZnVuY3Rpb24gb2soYSxiKXtuayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmbmsoYSxiKX1mdW5jdGlvbiBwaygpe3JldHVybiBudWxsfVxuZnVuY3Rpb24gcWsoYSxiLGMpe3ZhciBkPW51bGwhPWMmJm51bGwhPWMuaHlkcmF0aW9uT3B0aW9ucyYmYy5oeWRyYXRpb25PcHRpb25zLm11dGFibGVTb3VyY2VzfHxudWxsO2M9bmV3IGprKGEsYixudWxsIT1jJiYhMD09PWMuaHlkcmF0ZSk7Yj1uaCgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7Yy5jdXJyZW50PWI7Yi5zdGF0ZU5vZGU9Yzt4ZyhiKTthW2ZmXT1jLmN1cnJlbnQ7Y2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO2lmKGQpZm9yKGE9MDthPGQubGVuZ3RoO2ErKyl7Yj1kW2FdO3ZhciBlPWIuX2dldFZlcnNpb247ZT1lKGIuX3NvdXJjZSk7bnVsbD09Yy5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2MubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYixlXTpjLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChiLGUpfXRoaXMuX2ludGVybmFsUm9vdD1jfVxucWsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtsayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtxay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztsayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbZmZdPW51bGx9KX07ZnVuY3Rpb24gcmsoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gc2soYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBxayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIHRrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9bWsoZyk7aC5jYWxsKGEpfX1sayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPXNrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPW1rKGcpO2suY2FsbChhKX19WGooZnVuY3Rpb24oKXtsayhiLGcsYSxlKX0pfXJldHVybiBtayhnKX1lYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpO0pnKGEsNCxiKTtvayhhLDQpfX07ZmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9SGcoKTtKZyhhLDY3MTA4ODY0LGIpO29rKGEsNjcxMDg4NjQpfX07XG5nYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1IZygpLGM9SWcoYSk7SmcoYSxjLGIpO29rKGEsYyl9fTtoYz1mdW5jdGlvbihhLGIpe3JldHVybiBiKCl9O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjphYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IoeSg5MCkpO1dhKGQpO2FiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1XajtcbkhiPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9WDtYfD00O3RyeXtyZXR1cm4gZ2coOTgsYS5iaW5kKG51bGwsYixjLGQsZSkpfWZpbmFsbHl7WD1mLDA9PT1YJiYod2ooKSxpZygpKX19O0liPWZ1bmN0aW9uKCl7MD09PShYJjQ5KSYmKFZqKCksT2ooKSl9O0piPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtYfD0yO3RyeXtyZXR1cm4gYShiKX1maW5hbGx5e1g9YywwPT09WCYmKHdqKCksaWcoKSl9fTtmdW5jdGlvbiB1ayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiBrayhhLGIsbnVsbCxjKX12YXIgdms9e0V2ZW50czpbQ2IsdWUsRGIsRWIsRmIsT2ose2N1cnJlbnQ6ITF9XX0sd2s9e2ZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOndjLGJ1bmRsZVR5cGU6MCx2ZXJzaW9uOlwiMTcuMC4yXCIscmVuZGVyZXJQYWNrYWdlTmFtZTpcInJlYWN0LWRvbVwifTtcbnZhciB4az17YnVuZGxlVHlwZTp3ay5idW5kbGVUeXBlLHZlcnNpb246d2sudmVyc2lvbixyZW5kZXJlclBhY2thZ2VOYW1lOndrLnJlbmRlcmVyUGFja2FnZU5hbWUscmVuZGVyZXJDb25maWc6d2sucmVuZGVyZXJDb25maWcsb3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsb3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGg6bnVsbCxvdmVycmlkZVByb3BzUmVuYW1lUGF0aDpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6cmEuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWNjKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp3ay5maW5kRmliZXJCeUhvc3RJbnN0YW5jZXx8XG5wayxmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2g6bnVsbCxzY2hlZHVsZVJlZnJlc2g6bnVsbCxzY2hlZHVsZVJvb3Q6bnVsbCxzZXRSZWZyZXNoSGFuZGxlcjpudWxsLGdldEN1cnJlbnRGaWJlcjpudWxsfTtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyl7dmFyIHlrPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZigheWsuaXNEaXNhYmxlZCYmeWsuc3VwcG9ydHNGaWJlcil0cnl7TGY9eWsuaW5qZWN0KHhrKSxNZj15a31jYXRjaChhKXt9fWV4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9dms7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9dWs7XG5leHBvcnRzLmZpbmRET01Ob2RlPWZ1bmN0aW9uKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoMT09PWEubm9kZVR5cGUpcmV0dXJuIGE7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbHM7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHkoMTg4KSk7dGhyb3cgRXJyb3IoeSgyNjgsT2JqZWN0LmtleXMoYSkpKTt9YT1jYyhiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O2V4cG9ydHMuZmx1c2hTeW5jPWZ1bmN0aW9uKGEsYil7dmFyIGM9WDtpZigwIT09KGMmNDgpKXJldHVybiBhKGIpO1h8PTE7dHJ5e2lmKGEpcmV0dXJuIGdnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1g9YyxpZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighcmsoYikpdGhyb3cgRXJyb3IoeSgyMDApKTtyZXR1cm4gdGsobnVsbCxhLGIsITAsYyl9O1xuZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFyayhiKSl0aHJvdyBFcnJvcih5KDIwMCkpO3JldHVybiB0ayhudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFyayhhKSl0aHJvdyBFcnJvcih5KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oWGooZnVuY3Rpb24oKXt0ayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbZmZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1XajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiB1ayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXJrKGMpKXRocm93IEVycm9yKHkoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IoeSgzOCkpO3JldHVybiB0ayhhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4yXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMjAuMlxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsaztpZihcIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93KXt2YXIgbD1wZXJmb3JtYW5jZTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBsLm5vdygpfX1lbHNle3ZhciBwPURhdGUscT1wLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHAubm93KCktcX19XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgdD1udWxsLHU9bnVsbCx3PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXQpdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7dCghMCxhKTt0PW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh3LDApLGI7fX07Zj1mdW5jdGlvbihhKXtudWxsIT09dD9zZXRUaW1lb3V0KGYsMCxhKToodD1hLHNldFRpbWVvdXQodywwKSl9O2c9ZnVuY3Rpb24oYSxiKXt1PXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dCh1KX07ZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3JldHVybiExfTtrPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHg9d2luZG93LnNldFRpbWVvdXQseT13aW5kb3cuY2xlYXJUaW1lb3V0O2lmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgY29uc29sZSl7dmFyIHo9XG53aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9yZWFjdGpzLm9yZy9saW5rL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgeiYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vcmVhY3Rqcy5vcmcvbGluay9yZWFjdC1wb2x5ZmlsbHNcIil9dmFyIEE9ITEsQj1udWxsLEM9LTEsRD01LEU9MDtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PVxuRX07az1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZT1mdW5jdGlvbihhKXswPmF8fDEyNTxhP2NvbnNvbGUuZXJyb3IoXCJmb3JjZUZyYW1lUmF0ZSB0YWtlcyBhIHBvc2l0aXZlIGludCBiZXR3ZWVuIDAgYW5kIDEyNSwgZm9yY2luZyBmcmFtZSByYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCBzdXBwb3J0ZWRcIik6RD0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEY9bmV3IE1lc3NhZ2VDaGFubmVsLEc9Ri5wb3J0MjtGLnBvcnQxLm9ubWVzc2FnZT1mdW5jdGlvbigpe2lmKG51bGwhPT1CKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO0U9YStEO3RyeXtCKCEwLGEpP0cucG9zdE1lc3NhZ2UobnVsbCk6KEE9ITEsQj1udWxsKX1jYXRjaChiKXt0aHJvdyBHLnBvc3RNZXNzYWdlKG51bGwpLGI7fX1lbHNlIEE9ITF9O2Y9ZnVuY3Rpb24oYSl7Qj1hO0F8fChBPSEwLEcucG9zdE1lc3NhZ2UobnVsbCkpfTtnPWZ1bmN0aW9uKGEsYil7Qz1cbngoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3koQyk7Qz0tMX19ZnVuY3Rpb24gSChhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxJKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBKKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBLKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPkkobixjKSl2b2lkIDAhPT1yJiYwPkkocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPkkocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEkoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIEw9W10sTT1bXSxOPTEsTz1udWxsLFA9MyxRPSExLFI9ITEsUz0hMTtcbmZ1bmN0aW9uIFQoYSl7Zm9yKHZhciBiPUooTSk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylLKE0pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpSyhNKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEgoTCxiKTtlbHNlIGJyZWFrO2I9SihNKX19ZnVuY3Rpb24gVShhKXtTPSExO1QoYSk7aWYoIVIpaWYobnVsbCE9PUooTCkpUj0hMCxmKFYpO2Vsc2V7dmFyIGI9SihNKTtudWxsIT09YiYmZyhVLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFYoYSxiKXtSPSExO1MmJihTPSExLGgoKSk7UT0hMDt2YXIgYz1QO3RyeXtUKGIpO2ZvcihPPUooTCk7bnVsbCE9PU8mJighKE8uZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkKCkpOyl7dmFyIGQ9Ty5jYWxsYmFjaztpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7Ty5jYWxsYmFjaz1udWxsO1A9Ty5wcmlvcml0eUxldmVsO3ZhciBlPWQoTy5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP08uY2FsbGJhY2s9ZTpPPT09SihMKSYmSyhMKTtUKGIpfWVsc2UgSyhMKTtPPUooTCl9aWYobnVsbCE9PU8pdmFyIG09ITA7ZWxzZXt2YXIgbj1KKE0pO251bGwhPT1uJiZnKFUsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e089bnVsbCxQPWMsUT0hMX19dmFyIFc9aztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O1xuZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtSfHxRfHwoUj0hMCxmKFYpKX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBQfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEooTCl9O1xuZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChQKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1QfXZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7UD1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9VztleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVA7UD1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7UD1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yz8oYz1jLmRlbGF5LGM9XCJudW1iZXJcIj09PXR5cGVvZiBjJiYwPGM/ZCtjOmQpOmM9ZDtzd2l0Y2goYSl7Y2FzZSAxOnZhciBlPS0xO2JyZWFrO2Nhc2UgMjplPTI1MDticmVhaztjYXNlIDU6ZT0xMDczNzQxODIzO2JyZWFrO2Nhc2UgNDplPTFFNDticmVhaztkZWZhdWx0OmU9NUUzfWU9YytlO2E9e2lkOk4rKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6YyxleHBpcmF0aW9uVGltZTplLHNvcnRJbmRleDotMX07Yz5kPyhhLnNvcnRJbmRleD1jLEgoTSxhKSxudWxsPT09SihMKSYmYT09PUooTSkmJihTP2goKTpTPSEwLGcoVSxjLWQpKSk6KGEuc29ydEluZGV4PWUsSChMLGEpLFJ8fFF8fChSPSEwLGYoVikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1QO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVA7UD1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtQPWN9fX07XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwidmFyIGlzYXJyYXkgPSByZXF1aXJlKCdpc2FycmF5JylcblxuLyoqXG4gKiBFeHBvc2UgYHBhdGhUb1JlZ2V4cGAuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gcGF0aFRvUmVnZXhwXG5tb2R1bGUuZXhwb3J0cy5wYXJzZSA9IHBhcnNlXG5tb2R1bGUuZXhwb3J0cy5jb21waWxlID0gY29tcGlsZVxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9GdW5jdGlvbiA9IHRva2Vuc1RvRnVuY3Rpb25cbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvUmVnRXhwID0gdG9rZW5zVG9SZWdFeHBcblxuLyoqXG4gKiBUaGUgbWFpbiBwYXRoIG1hdGNoaW5nIHJlZ2V4cCB1dGlsaXR5LlxuICpcbiAqIEB0eXBlIHtSZWdFeHB9XG4gKi9cbnZhciBQQVRIX1JFR0VYUCA9IG5ldyBSZWdFeHAoW1xuICAvLyBNYXRjaCBlc2NhcGVkIGNoYXJhY3RlcnMgdGhhdCB3b3VsZCBvdGhlcndpc2UgYXBwZWFyIGluIGZ1dHVyZSBtYXRjaGVzLlxuICAvLyBUaGlzIGFsbG93cyB0aGUgdXNlciB0byBlc2NhcGUgc3BlY2lhbCBjaGFyYWN0ZXJzIHRoYXQgd29uJ3QgdHJhbnNmb3JtLlxuICAnKFxcXFxcXFxcLiknLFxuICAvLyBNYXRjaCBFeHByZXNzLXN0eWxlIHBhcmFtZXRlcnMgYW5kIHVuLW5hbWVkIHBhcmFtZXRlcnMgd2l0aCBhIHByZWZpeFxuICAvLyBhbmQgb3B0aW9uYWwgc3VmZml4ZXMuIE1hdGNoZXMgYXBwZWFyIGFzOlxuICAvL1xuICAvLyBcIi86dGVzdChcXFxcZCspP1wiID0+IFtcIi9cIiwgXCJ0ZXN0XCIsIFwiXFxkK1wiLCB1bmRlZmluZWQsIFwiP1wiLCB1bmRlZmluZWRdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAgLy8gXCIvKlwiICAgICAgICAgICAgPT4gW1wiL1wiLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiKlwiXVxuICAnKFtcXFxcLy5dKT8oPzooPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT98KFxcXFwqKSknXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLmRlbGltaXRlciB8fCAnLydcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPSBudWxsKSB7XG4gICAgdmFyIG0gPSByZXNbMF1cbiAgICB2YXIgZXNjYXBlZCA9IHJlc1sxXVxuICAgIHZhciBvZmZzZXQgPSByZXMuaW5kZXhcbiAgICBwYXRoICs9IHN0ci5zbGljZShpbmRleCwgb2Zmc2V0KVxuICAgIGluZGV4ID0gb2Zmc2V0ICsgbS5sZW5ndGhcblxuICAgIC8vIElnbm9yZSBhbHJlYWR5IGVzY2FwZWQgc2VxdWVuY2VzLlxuICAgIGlmIChlc2NhcGVkKSB7XG4gICAgICBwYXRoICs9IGVzY2FwZWRbMV1cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSBzdHJbaW5kZXhdXG4gICAgdmFyIHByZWZpeCA9IHJlc1syXVxuICAgIHZhciBuYW1lID0gcmVzWzNdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbNF1cbiAgICB2YXIgZ3JvdXAgPSByZXNbNV1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNl1cbiAgICB2YXIgYXN0ZXJpc2sgPSByZXNbN11cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZWZpeCAhPSBudWxsICYmIG5leHQgIT0gbnVsbCAmJiBuZXh0ICE9PSBwcmVmaXhcbiAgICB2YXIgcmVwZWF0ID0gbW9kaWZpZXIgPT09ICcrJyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIG9wdGlvbmFsID0gbW9kaWZpZXIgPT09ICc/JyB8fCBtb2RpZmllciA9PT0gJyonXG4gICAgdmFyIGRlbGltaXRlciA9IHJlc1syXSB8fCBkZWZhdWx0RGVsaW1pdGVyXG4gICAgdmFyIHBhdHRlcm4gPSBjYXB0dXJlIHx8IGdyb3VwXG5cbiAgICB0b2tlbnMucHVzaCh7XG4gICAgICBuYW1lOiBuYW1lIHx8IGtleSsrLFxuICAgICAgcHJlZml4OiBwcmVmaXggfHwgJycsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIGFzdGVyaXNrOiAhIWFzdGVyaXNrLFxuICAgICAgcGF0dGVybjogcGF0dGVybiA/IGVzY2FwZUdyb3VwKHBhdHRlcm4pIDogKGFzdGVyaXNrID8gJy4qJyA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nKVxuICAgIH0pXG4gIH1cblxuICAvLyBNYXRjaCBhbnkgY2hhcmFjdGVycyBzdGlsbCByZW1haW5pbmcuXG4gIGlmIChpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICBwYXRoICs9IHN0ci5zdWJzdHIoaW5kZXgpXG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBleGlzdHMsIHB1c2ggaXQgb250byB0aGUgZW5kLlxuICBpZiAocGF0aCkge1xuICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIFByZXR0aWVyIGVuY29kaW5nIG9mIFVSSSBwYXRoIHNlZ21lbnRzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1tcXC8/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRW5jb2RlIHRoZSBhc3RlcmlzayBwYXJhbWV0ZXIuIFNpbWlsYXIgdG8gYHByZXR0eWAsIGJ1dCBhbGxvd3Mgc2xhc2hlcy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZUFzdGVyaXNrIChzdHIpIHtcbiAgcmV0dXJuIGVuY29kZVVSSShzdHIpLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24gKGMpIHtcbiAgICByZXR1cm4gJyUnICsgYy5jaGFyQ29kZUF0KDApLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogRXhwb3NlIGEgbWV0aG9kIGZvciB0cmFuc2Zvcm1pbmcgdG9rZW5zIGludG8gdGhlIHBhdGggZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvRnVuY3Rpb24gKHRva2Vucywgb3B0aW9ucykge1xuICAvLyBDb21waWxlIGFsbCB0aGUgdG9rZW5zIGludG8gcmVnZXhwcy5cbiAgdmFyIG1hdGNoZXMgPSBuZXcgQXJyYXkodG9rZW5zLmxlbmd0aClcblxuICAvLyBDb21waWxlIGFsbCB0aGUgcGF0dGVybnMgYmVmb3JlIGNvbXBpbGF0aW9uLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIGlmICh0eXBlb2YgdG9rZW5zW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgbWF0Y2hlc1tpXSA9IG5ldyBSZWdFeHAoJ14oPzonICsgdG9rZW5zW2ldLnBhdHRlcm4gKyAnKSQnLCBmbGFncyhvcHRpb25zKSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICAvLyBVc2UgYSBuZWdhdGl2ZSBsb29rYWhlYWQgdG8gbWF0Y2ggb25seSBjYXB0dXJpbmcgZ3JvdXBzLlxuICB2YXIgZ3JvdXBzID0gcGF0aC5zb3VyY2UubWF0Y2goL1xcKCg/IVxcPykvZylcblxuICBpZiAoZ3JvdXBzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBncm91cHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleXMucHVzaCh7XG4gICAgICAgIG5hbWU6IGksXG4gICAgICAgIHByZWZpeDogbnVsbCxcbiAgICAgICAgZGVsaW1pdGVyOiBudWxsLFxuICAgICAgICBvcHRpb25hbDogZmFsc2UsXG4gICAgICAgIHJlcGVhdDogZmFsc2UsXG4gICAgICAgIHBhcnRpYWw6IGZhbHNlLFxuICAgICAgICBhc3RlcmlzazogZmFsc2UsXG4gICAgICAgIHBhdHRlcm46IG51bGxcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocGF0aCwga2V5cylcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYW4gYXJyYXkgaW50byBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhcnJheVRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHZhciBwYXJ0cyA9IFtdXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aDsgaSsrKSB7XG4gICAgcGFydHMucHVzaChwYXRoVG9SZWdleHAocGF0aFtpXSwga2V5cywgb3B0aW9ucykuc291cmNlKVxuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IG5ldyBSZWdFeHAoJyg/OicgKyBwYXJ0cy5qb2luKCd8JykgKyAnKScsIGZsYWdzKG9wdGlvbnMpKVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHJlZ2V4cCwga2V5cylcbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBwYXRoIHJlZ2V4cCBmcm9tIHN0cmluZyBpbnB1dC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBwYXRoXG4gKiBAcGFyYW0gIHshQXJyYXl9ICBrZXlzXG4gKiBAcGFyYW0gIHshT2JqZWN0fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBzdHJpbmdUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9SZWdFeHAocGFyc2UocGF0aCwgb3B0aW9ucyksIGtleXMsIG9wdGlvbnMpXG59XG5cbi8qKlxuICogRXhwb3NlIGEgZnVuY3Rpb24gZm9yIHRha2luZyB0b2tlbnMgYW5kIHJldHVybmluZyBhIFJlZ0V4cC5cbiAqXG4gKiBAcGFyYW0gIHshQXJyYXl9ICAgICAgICAgIHRva2Vuc1xuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHRva2Vuc1RvUmVnRXhwICh0b2tlbnMsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIHJvdXRlID0gJydcblxuICAvLyBJdGVyYXRlIG92ZXIgdGhlIHRva2VucyBhbmQgY3JlYXRlIG91ciByZWdleHAgc3RyaW5nLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJvdXRlICs9IGVzY2FwZVN0cmluZyh0b2tlbilcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpJ1xuXG4gICAgICBrZXlzLnB1c2godG9rZW4pXG5cbiAgICAgIGlmICh0b2tlbi5yZXBlYXQpIHtcbiAgICAgICAgY2FwdHVyZSArPSAnKD86JyArIHByZWZpeCArIGNhcHR1cmUgKyAnKSonXG4gICAgICB9XG5cbiAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICBpZiAoIXRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICBjYXB0dXJlID0gJyg/OicgKyBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJykpPydcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpPydcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cblxuICAgICAgcm91dGUgKz0gY2FwdHVyZVxuICAgIH1cbiAgfVxuXG4gIHZhciBkZWxpbWl0ZXIgPSBlc2NhcGVTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nKVxuICB2YXIgZW5kc1dpdGhEZWxpbWl0ZXIgPSByb3V0ZS5zbGljZSgtZGVsaW1pdGVyLmxlbmd0aCkgPT09IGRlbGltaXRlclxuXG4gIC8vIEluIG5vbi1zdHJpY3QgbW9kZSB3ZSBhbGxvdyBhIHNsYXNoIGF0IHRoZSBlbmQgb2YgbWF0Y2guIElmIHRoZSBwYXRoIHRvXG4gIC8vIG1hdGNoIGFscmVhZHkgZW5kcyB3aXRoIGEgc2xhc2gsIHdlIHJlbW92ZSBpdCBmb3IgY29uc2lzdGVuY3kuIFRoZSBzbGFzaFxuICAvLyBpcyB2YWxpZCBhdCB0aGUgZW5kIG9mIGEgcGF0aCBtYXRjaCwgbm90IGluIHRoZSBtaWRkbGUuIFRoaXMgaXMgaW1wb3J0YW50XG4gIC8vIGluIG5vbi1lbmRpbmcgbW9kZSwgd2hlcmUgXCIvdGVzdC9cIiBzaG91bGRuJ3QgbWF0Y2ggXCIvdGVzdC8vcm91dGVcIi5cbiAgaWYgKCFzdHJpY3QpIHtcbiAgICByb3V0ZSA9IChlbmRzV2l0aERlbGltaXRlciA/IHJvdXRlLnNsaWNlKDAsIC1kZWxpbWl0ZXIubGVuZ3RoKSA6IHJvdXRlKSArICcoPzonICsgZGVsaW1pdGVyICsgJyg/PSQpKT8nXG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgcm91dGUgKz0gJyQnXG4gIH0gZWxzZSB7XG4gICAgLy8gSW4gbm9uLWVuZGluZyBtb2RlLCB3ZSBuZWVkIHRoZSBjYXB0dXJpbmcgZ3JvdXBzIHRvIG1hdGNoIGFzIG11Y2ggYXNcbiAgICAvLyBwb3NzaWJsZSBieSB1c2luZyBhIHBvc2l0aXZlIGxvb2thaGVhZCB0byB0aGUgZW5kIG9yIG5leHQgcGF0aCBzZWdtZW50LlxuICAgIHJvdXRlICs9IHN0cmljdCAmJiBlbmRzV2l0aERlbGltaXRlciA/ICcnIDogJyg/PScgKyBkZWxpbWl0ZXIgKyAnfCQpJ1xuICB9XG5cbiAgcmV0dXJuIGF0dGFjaEtleXMobmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpLCBrZXlzKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSB0aGUgZ2l2ZW4gcGF0aCBzdHJpbmcsIHJldHVybmluZyBhIHJlZ3VsYXIgZXhwcmVzc2lvbi5cbiAqXG4gKiBBbiBlbXB0eSBhcnJheSBjYW4gYmUgcGFzc2VkIGluIGZvciB0aGUga2V5cywgd2hpY2ggd2lsbCBob2xkIHRoZVxuICogcGxhY2Vob2xkZXIga2V5IGRlc2NyaXB0aW9ucy4gRm9yIGV4YW1wbGUsIHVzaW5nIGAvdXNlci86aWRgLCBga2V5c2Agd2lsbFxuICogY29udGFpbiBgW3sgbmFtZTogJ2lkJywgZGVsaW1pdGVyOiAnLycsIG9wdGlvbmFsOiBmYWxzZSwgcmVwZWF0OiBmYWxzZSB9XWAuXG4gKlxuICogQHBhcmFtICB7KHN0cmluZ3xSZWdFeHB8QXJyYXkpfSBwYXRoXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19ICAgICAgIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcGF0aFRvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIGlmIChwYXRoIGluc3RhbmNlb2YgUmVnRXhwKSB7XG4gICAgcmV0dXJuIHJlZ2V4cFRvUmVnZXhwKHBhdGgsIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cykpXG4gIH1cblxuICBpZiAoaXNhcnJheShwYXRoKSkge1xuICAgIHJldHVybiBhcnJheVRvUmVnZXhwKC8qKiBAdHlwZSB7IUFycmF5fSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG4gIH1cblxuICByZXR1cm4gc3RyaW5nVG9SZWdleHAoLyoqIEB0eXBlIHtzdHJpbmd9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbn1cbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTcuMC4yXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksbj02MDEwMyxwPTYwMTA2O2V4cG9ydHMuRnJhZ21lbnQ9NjAxMDc7ZXhwb3J0cy5TdHJpY3RNb2RlPTYwMTA4O2V4cG9ydHMuUHJvZmlsZXI9NjAxMTQ7dmFyIHE9NjAxMDkscj02MDExMCx0PTYwMTEyO2V4cG9ydHMuU3VzcGVuc2U9NjAxMTM7dmFyIHU9NjAxMTUsdj02MDExNjtcbmlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3Ipe3ZhciB3PVN5bWJvbC5mb3I7bj13KFwicmVhY3QuZWxlbWVudFwiKTtwPXcoXCJyZWFjdC5wb3J0YWxcIik7ZXhwb3J0cy5GcmFnbWVudD13KFwicmVhY3QuZnJhZ21lbnRcIik7ZXhwb3J0cy5TdHJpY3RNb2RlPXcoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTtleHBvcnRzLlByb2ZpbGVyPXcoXCJyZWFjdC5wcm9maWxlclwiKTtxPXcoXCJyZWFjdC5wcm92aWRlclwiKTtyPXcoXCJyZWFjdC5jb250ZXh0XCIpO3Q9dyhcInJlYWN0LmZvcndhcmRfcmVmXCIpO2V4cG9ydHMuU3VzcGVuc2U9dyhcInJlYWN0LnN1c3BlbnNlXCIpO3U9dyhcInJlYWN0Lm1lbW9cIik7dj13KFwicmVhY3QubGF6eVwiKX12YXIgeD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7XG5mdW5jdGlvbiB5KGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT14JiZhW3hdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24geihhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBBPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxCPXt9O2Z1bmN0aW9uIEMoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9Qjt0aGlzLnVwZGF0ZXI9Y3x8QX1DLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0MucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcih6KDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtDLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEQoKXt9RC5wcm90b3R5cGU9Qy5wcm90b3R5cGU7ZnVuY3Rpb24gRShhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfXZhciBGPUUucHJvdG90eXBlPW5ldyBEO0YuY29uc3RydWN0b3I9RTtsKEYsQy5wcm90b3R5cGUpO0YuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEc9e2N1cnJlbnQ6bnVsbH0sSD1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEk9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIEooYSxiLGMpe3ZhciBlLGQ9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSC5jYWxsKGIsZSkmJiFJLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWRbZV0mJihkW2VdPWdbZV0pO3JldHVybnskJHR5cGVvZjpuLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpkLF9vd25lcjpHLmN1cnJlbnR9fVxuZnVuY3Rpb24gSyhhLGIpe3JldHVybnskJHR5cGVvZjpuLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTChhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bn1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE09L1xcLysvZztmdW5jdGlvbiBOKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gTyhhLGIsYyxlLGQpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBuOmNhc2UgcDpoPSEwfX1pZihoKXJldHVybiBoPWEsZD1kKGgpLGE9XCJcIj09PWU/XCIuXCIrTihoLDApOmUsQXJyYXkuaXNBcnJheShkKT8oYz1cIlwiLG51bGwhPWEmJihjPWEucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSxPKGQsYixjLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9ZCYmKEwoZCkmJihkPUsoZCxjKyghZC5rZXl8fGgmJmgua2V5PT09ZC5rZXk/XCJcIjooXCJcIitkLmtleSkucmVwbGFjZShNLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGQpKSwxO2g9MDtlPVwiXCI9PT1lP1wiLlwiOmUrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGc9XG4wO2c8YS5sZW5ndGg7ZysrKXtrPWFbZ107dmFyIGY9ZStOKGssZyk7aCs9TyhrLGIsYyxmLGQpfWVsc2UgaWYoZj15KGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1lK04oayxnKyspLGgrPU8oayxiLGMsZixkKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9XCJcIithLEVycm9yKHooMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikpO3JldHVybiBofWZ1bmN0aW9uIFAoYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGU9W10sZD0wO08oYSxlLFwiXCIsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYi5jYWxsKGMsYSxkKyspfSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBRKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7YS5fc3RhdHVzPTA7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX1pZigxPT09YS5fc3RhdHVzKXJldHVybiBhLl9yZXN1bHQ7dGhyb3cgYS5fcmVzdWx0O312YXIgUj17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBTKCl7dmFyIGE9Ui5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKHooMzIxKSk7cmV0dXJuIGF9dmFyIFQ9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6UixSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7dHJhbnNpdGlvbjowfSxSZWFjdEN1cnJlbnRPd25lcjpHLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07XG5leHBvcnRzLkNoaWxkcmVuPXttYXA6UCxmb3JFYWNoOmZ1bmN0aW9uKGEsYixjKXtQKGEsZnVuY3Rpb24oKXtiLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sYyl9LGNvdW50OmZ1bmN0aW9uKGEpe3ZhciBiPTA7UChhLGZ1bmN0aW9uKCl7YisrfSk7cmV0dXJuIGJ9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7cmV0dXJuIFAoYSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pfHxbXX0sb25seTpmdW5jdGlvbihhKXtpZighTChhKSl0aHJvdyBFcnJvcih6KDE0MykpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9QztleHBvcnRzLlB1cmVDb21wb25lbnQ9RTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPVQ7XG5leHBvcnRzLmNsb25lRWxlbWVudD1mdW5jdGlvbihhLGIsYyl7aWYobnVsbD09PWF8fHZvaWQgMD09PWEpdGhyb3cgRXJyb3IoeigyNjcsYSkpO3ZhciBlPWwoe30sYS5wcm9wcyksZD1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Ry5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGQ9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilILmNhbGwoYixmKSYmIUkuaGFzT3duUHJvcGVydHkoZikmJihlW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZS5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO2Zvcih2YXIgbT0wO208ZjttKyspZ1ttXT1hcmd1bWVudHNbbSsyXTtlLmNoaWxkcmVuPWd9cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsXG5rZXk6ZCxyZWY6ayxwcm9wczplLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEsYil7dm9pZCAwPT09YiYmKGI9bnVsbCk7YT17JCR0eXBlb2Y6cixfY2FsY3VsYXRlQ2hhbmdlZEJpdHM6YixfY3VycmVudFZhbHVlOmEsX2N1cnJlbnRWYWx1ZTI6YSxfdGhyZWFkQ291bnQ6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOnEsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX07ZXhwb3J0cy5jcmVhdGVFbGVtZW50PUo7ZXhwb3J0cy5jcmVhdGVGYWN0b3J5PWZ1bmN0aW9uKGEpe3ZhciBiPUouYmluZChudWxsLGEpO2IudHlwZT1hO3JldHVybiBifTtleHBvcnRzLmNyZWF0ZVJlZj1mdW5jdGlvbigpe3JldHVybntjdXJyZW50Om51bGx9fTtleHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnQscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PUw7XG5leHBvcnRzLmxhenk9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYsX3BheWxvYWQ6e19zdGF0dXM6LTEsX3Jlc3VsdDphfSxfaW5pdDpRfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnUsdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBTKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBTKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE3LjAuMlwiO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2V4YW1wbGUuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZXhhbXBsZS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2V4YW1wbGUuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi90YWIuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdGFiLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi90YWIuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9hY3Rpb25TaGVldC5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9hY3Rpb25TaGVldC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYWN0aW9uU2hlZXQuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9hY3Rpdml0eS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9hY3Rpdml0eS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYWN0aXZpdHkuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9idXR0b24uZXhhbXBsZS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9idXR0b24uZXhhbXBsZS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYnV0dG9uLmV4YW1wbGUuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9idXR0b24uc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vYnV0dG9uLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9idXR0b24uc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jaG9pY2Uuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vY2hvaWNlLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jaG9pY2Uuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9jaXR5U2VsZWN0LnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NpdHlTZWxlY3Quc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2NpdHlTZWxlY3Quc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9kaWFsb2cuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZGlhbG9nLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9kaWFsb2cuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9kcmFncHVsbC5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9kcmFncHVsbC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZHJhZ3B1bGwuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9mb3JtLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2Zvcm0uc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2Zvcm0uc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbnB1dGFzc2VtYmx5MS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbnB1dGFzc2VtYmx5MS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5wdXRhc3NlbWJseTEuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9ndWFud2FuZy5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9ndWFud2FuZy5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vZ3Vhbndhbmcuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pY29uLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2ljb24uc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL2ljb24uc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbnB1dC5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbnB1dC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5wdXQuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbnB1dGFzc2VtYmx5MS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbnB1dGFzc2VtYmx5MS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5wdXRhc3NlbWJseTEuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9sYXlvdXQuZXhhbXBsZS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9sYXlvdXQuZXhhbXBsZS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbGF5b3V0LmV4YW1wbGUuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9sYXlvdXQuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbGF5b3V0LnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9sYXlvdXQuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9sb25nTGlzdC5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9sb25nTGlzdC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbG9uZ0xpc3Quc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9pbmRleC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vaW5kZXguc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zY3JvbGwuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc2Nyb2xsLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zY3JvbGwuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zd2l0Y2guc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3dpdGNoLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9zd2l0Y2guc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi90YWJsZS5zY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi90YWJsZS5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vdGFibGUuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi90cmVlLnNjc3NcIik7XG5cbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXG52YXIgdHJhbnNmb3JtO1xudmFyIGluc2VydEludG87XG5cblxuXG52YXIgb3B0aW9ucyA9IHtcImhtclwiOnRydWV9XG5cbm9wdGlvbnMudHJhbnNmb3JtID0gdHJhbnNmb3JtXG5vcHRpb25zLmluc2VydEludG8gPSB1bmRlZmluZWQ7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG5cbmlmKG1vZHVsZS5ob3QpIHtcblx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3RyZWUuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3RyZWUuc2Nzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCBwYXJlbnQpIHtcbiAgaWYgKHBhcmVudCl7XG4gICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQsIHBhcmVudCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0LCBwYXJlbnQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEF0LmJlZm9yZSwgdGFyZ2V0KTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRpZihvcHRpb25zLmF0dHJzLm5vbmNlID09PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuXHRcdGlmIChub25jZSkge1xuXHRcdFx0b3B0aW9ucy5hdHRycy5ub25jZSA9IG5vbmNlO1xuXHRcdH1cblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGdldE5vbmNlKCkge1xuXHRpZiAodHlwZW9mIF9fd2VicGFja19ub25jZV9fID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIF9fd2VicGFja19ub25jZV9fO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdCA/IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpIFxuXHRcdCA6IG9wdGlvbnMudHJhbnNmb3JtLmRlZmF1bHQob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG5cdHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcblx0dHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcblx0KGdsb2JhbC5Ccm93c2VyU3ByaXRlU3ltYm9sID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG52YXIgU3ByaXRlU3ltYm9sID0gZnVuY3Rpb24gU3ByaXRlU3ltYm9sKHJlZikge1xuICB2YXIgaWQgPSByZWYuaWQ7XG4gIHZhciB2aWV3Qm94ID0gcmVmLnZpZXdCb3g7XG4gIHZhciBjb250ZW50ID0gcmVmLmNvbnRlbnQ7XG5cbiAgdGhpcy5pZCA9IGlkO1xuICB0aGlzLnZpZXdCb3ggPSB2aWV3Qm94O1xuICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblNwcml0ZVN5bWJvbC5wcm90b3R5cGUuc3RyaW5naWZ5ID0gZnVuY3Rpb24gc3RyaW5naWZ5ICgpIHtcbiAgcmV0dXJuIHRoaXMuY29udGVudDtcbn07XG5cbi8qKlxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5TcHJpdGVTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcgKCkge1xuICByZXR1cm4gdGhpcy5zdHJpbmdpZnkoKTtcbn07XG5cblNwcml0ZVN5bWJvbC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gIFsnaWQnLCAndmlld0JveCcsICdjb250ZW50J10uZm9yRWFjaChmdW5jdGlvbiAocHJvcCkgeyByZXR1cm4gZGVsZXRlIHRoaXMkMVtwcm9wXTsgfSk7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XG4gKiBAcmV0dXJuIHtFbGVtZW50fVxuICovXG52YXIgcGFyc2UgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICB2YXIgaGFzSW1wb3J0Tm9kZSA9ICEhZG9jdW1lbnQuaW1wb3J0Tm9kZTtcbiAgdmFyIGRvYyA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcoY29udGVudCwgJ2ltYWdlL3N2Zyt4bWwnKS5kb2N1bWVudEVsZW1lbnQ7XG5cbiAgLyoqXG4gICAqIEZpeCBmb3IgYnJvd3NlciB3aGljaCBhcmUgdGhyb3dpbmcgV3JvbmdEb2N1bWVudEVycm9yXG4gICAqIGlmIHlvdSBpbnNlcnQgYW4gZWxlbWVudCB3aGljaCBpcyBub3QgcGFydCBvZiB0aGUgZG9jdW1lbnRcbiAgICogQHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83OTg2NTE5LzQ2MjQ0MDNcbiAgICovXG4gIGlmIChoYXNJbXBvcnROb2RlKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmltcG9ydE5vZGUoZG9jLCB0cnVlKTtcbiAgfVxuXG4gIHJldHVybiBkb2M7XG59O1xuXG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogdHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHt9O1xuXG5cblxuXG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZuLCBtb2R1bGUpIHtcblx0cmV0dXJuIG1vZHVsZSA9IHsgZXhwb3J0czoge30gfSwgZm4obW9kdWxlLCBtb2R1bGUuZXhwb3J0cyksIG1vZHVsZS5leHBvcnRzO1xufVxuXG52YXIgZGVlcG1lcmdlID0gY3JlYXRlQ29tbW9uanNNb2R1bGUoZnVuY3Rpb24gKG1vZHVsZSwgZXhwb3J0cykge1xuKGZ1bmN0aW9uIChyb290LCBmYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiB1bmRlZmluZWQgPT09ICdmdW5jdGlvbicgJiYgdW5kZWZpbmVkLmFtZCkge1xuICAgICAgICB1bmRlZmluZWQoZmFjdG9yeSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG4gICAgfVxufShjb21tb25qc0dsb2JhbCwgZnVuY3Rpb24gKCkge1xuXG5mdW5jdGlvbiBpc01lcmdlYWJsZU9iamVjdCh2YWwpIHtcbiAgICB2YXIgbm9uTnVsbE9iamVjdCA9IHZhbCAmJiB0eXBlb2YgdmFsID09PSAnb2JqZWN0JztcblxuICAgIHJldHVybiBub25OdWxsT2JqZWN0XG4gICAgICAgICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpICE9PSAnW29iamVjdCBSZWdFeHBdJ1xuICAgICAgICAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKSAhPT0gJ1tvYmplY3QgRGF0ZV0nXG59XG5cbmZ1bmN0aW9uIGVtcHR5VGFyZ2V0KHZhbCkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9XG59XG5cbmZ1bmN0aW9uIGNsb25lSWZOZWNlc3NhcnkodmFsdWUsIG9wdGlvbnNBcmd1bWVudCkge1xuICAgIHZhciBjbG9uZSA9IG9wdGlvbnNBcmd1bWVudCAmJiBvcHRpb25zQXJndW1lbnQuY2xvbmUgPT09IHRydWU7XG4gICAgcmV0dXJuIChjbG9uZSAmJiBpc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkpID8gZGVlcG1lcmdlKGVtcHR5VGFyZ2V0KHZhbHVlKSwgdmFsdWUsIG9wdGlvbnNBcmd1bWVudCkgOiB2YWx1ZVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0QXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgdmFyIGRlc3RpbmF0aW9uID0gdGFyZ2V0LnNsaWNlKCk7XG4gICAgc291cmNlLmZvckVhY2goZnVuY3Rpb24oZSwgaSkge1xuICAgICAgICBpZiAodHlwZW9mIGRlc3RpbmF0aW9uW2ldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgZGVzdGluYXRpb25baV0gPSBjbG9uZUlmTmVjZXNzYXJ5KGUsIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNNZXJnZWFibGVPYmplY3QoZSkpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2ldID0gZGVlcG1lcmdlKHRhcmdldFtpXSwgZSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQuaW5kZXhPZihlKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uLnB1c2goY2xvbmVJZk5lY2Vzc2FyeShlLCBvcHRpb25zQXJndW1lbnQpKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiBtZXJnZU9iamVjdCh0YXJnZXQsIHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgdmFyIGRlc3RpbmF0aW9uID0ge307XG4gICAgaWYgKGlzTWVyZ2VhYmxlT2JqZWN0KHRhcmdldCkpIHtcbiAgICAgICAgT2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZUlmTmVjZXNzYXJ5KHRhcmdldFtrZXldLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgT2JqZWN0LmtleXMoc291cmNlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgaWYgKCFpc01lcmdlYWJsZU9iamVjdChzb3VyY2Vba2V5XSkgfHwgIXRhcmdldFtrZXldKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gY2xvbmVJZk5lY2Vzc2FyeShzb3VyY2Vba2V5XSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uXG59XG5cbmZ1bmN0aW9uIGRlZXBtZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgdmFyIGFycmF5ID0gQXJyYXkuaXNBcnJheShzb3VyY2UpO1xuICAgIHZhciBvcHRpb25zID0gb3B0aW9uc0FyZ3VtZW50IHx8IHsgYXJyYXlNZXJnZTogZGVmYXVsdEFycmF5TWVyZ2UgfTtcbiAgICB2YXIgYXJyYXlNZXJnZSA9IG9wdGlvbnMuYXJyYXlNZXJnZSB8fCBkZWZhdWx0QXJyYXlNZXJnZTtcblxuICAgIGlmIChhcnJheSkge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh0YXJnZXQpID8gYXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9uc0FyZ3VtZW50KSA6IGNsb25lSWZOZWNlc3Nhcnkoc291cmNlLCBvcHRpb25zQXJndW1lbnQpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpXG4gICAgfVxufVxuXG5kZWVwbWVyZ2UuYWxsID0gZnVuY3Rpb24gZGVlcG1lcmdlQWxsKGFycmF5LCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpIHx8IGFycmF5Lmxlbmd0aCA8IDIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXkgd2l0aCBhdCBsZWFzdCB0d28gZWxlbWVudHMnKVxuICAgIH1cblxuICAgIC8vIHdlIGFyZSBzdXJlIHRoZXJlIGFyZSBhdCBsZWFzdCAyIHZhbHVlcywgc28gaXQgaXMgc2FmZSB0byBoYXZlIG5vIGluaXRpYWwgdmFsdWVcbiAgICByZXR1cm4gYXJyYXkucmVkdWNlKGZ1bmN0aW9uKHByZXYsIG5leHQpIHtcbiAgICAgICAgcmV0dXJuIGRlZXBtZXJnZShwcmV2LCBuZXh0LCBvcHRpb25zQXJndW1lbnQpXG4gICAgfSlcbn07XG5cbnJldHVybiBkZWVwbWVyZ2VcblxufSkpO1xufSk7XG5cbnZhciBuYW1lc3BhY2VzXzEgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG52YXIgbmFtZXNwYWNlcyA9IHtcbiAgc3ZnOiB7XG4gICAgbmFtZTogJ3htbG5zJyxcbiAgICB1cmk6ICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZydcbiAgfSxcbiAgeGxpbms6IHtcbiAgICBuYW1lOiAneG1sbnM6eGxpbmsnLFxuICAgIHVyaTogJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnXG4gIH1cbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG5hbWVzcGFjZXM7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMuZGVmYXVsdDtcbn0pO1xuXG4vKipcbiAqIEBwYXJhbSB7T2JqZWN0fSBhdHRyc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG52YXIgb2JqZWN0VG9BdHRyc1N0cmluZyA9IGZ1bmN0aW9uIChhdHRycykge1xuICByZXR1cm4gT2JqZWN0LmtleXMoYXR0cnMpLm1hcChmdW5jdGlvbiAoYXR0cikge1xuICAgIHZhciB2YWx1ZSA9IGF0dHJzW2F0dHJdLnRvU3RyaW5nKCkucmVwbGFjZSgvXCIvZywgJyZxdW90OycpO1xuICAgIHJldHVybiAoYXR0ciArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiXCIpO1xuICB9KS5qb2luKCcgJyk7XG59O1xuXG52YXIgc3ZnID0gbmFtZXNwYWNlc18xLnN2ZztcbnZhciB4bGluayA9IG5hbWVzcGFjZXNfMS54bGluaztcblxudmFyIGRlZmF1bHRBdHRycyA9IHt9O1xuZGVmYXVsdEF0dHJzW3N2Zy5uYW1lXSA9IHN2Zy51cmk7XG5kZWZhdWx0QXR0cnNbeGxpbmsubmFtZV0gPSB4bGluay51cmk7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IFtjb250ZW50XVxuICogQHBhcmFtIHtPYmplY3R9IFthdHRyaWJ1dGVzXVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG52YXIgd3JhcEluU3ZnU3RyaW5nID0gZnVuY3Rpb24gKGNvbnRlbnQsIGF0dHJpYnV0ZXMpIHtcbiAgaWYgKCBjb250ZW50ID09PSB2b2lkIDAgKSBjb250ZW50ID0gJyc7XG5cbiAgdmFyIGF0dHJzID0gZGVlcG1lcmdlKGRlZmF1bHRBdHRycywgYXR0cmlidXRlcyB8fCB7fSk7XG4gIHZhciBhdHRyc1JlbmRlcmVkID0gb2JqZWN0VG9BdHRyc1N0cmluZyhhdHRycyk7XG4gIHJldHVybiAoXCI8c3ZnIFwiICsgYXR0cnNSZW5kZXJlZCArIFwiPlwiICsgY29udGVudCArIFwiPC9zdmc+XCIpO1xufTtcblxudmFyIEJyb3dzZXJTcHJpdGVTeW1ib2wgPSAoZnVuY3Rpb24gKFNwcml0ZVN5bWJvbCQkMSkge1xuICBmdW5jdGlvbiBCcm93c2VyU3ByaXRlU3ltYm9sICgpIHtcbiAgICBTcHJpdGVTeW1ib2wkJDEuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgfVxuXG4gIGlmICggU3ByaXRlU3ltYm9sJCQxICkgQnJvd3NlclNwcml0ZVN5bWJvbC5fX3Byb3RvX18gPSBTcHJpdGVTeW1ib2wkJDE7XG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZSggU3ByaXRlU3ltYm9sJCQxICYmIFNwcml0ZVN5bWJvbCQkMS5wcm90b3R5cGUgKTtcbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBCcm93c2VyU3ByaXRlU3ltYm9sO1xuXG4gIHZhciBwcm90b3R5cGVBY2Nlc3NvcnMgPSB7IGlzTW91bnRlZDoge30gfTtcblxuICBwcm90b3R5cGVBY2Nlc3NvcnMuaXNNb3VudGVkLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gISF0aGlzLm5vZGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICAgKiBAcmV0dXJuIHtCcm93c2VyU3ByaXRlU3ltYm9sfVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5jcmVhdGVGcm9tRXhpc3RpbmdOb2RlID0gZnVuY3Rpb24gY3JlYXRlRnJvbUV4aXN0aW5nTm9kZSAobm9kZSkge1xuICAgIHJldHVybiBuZXcgQnJvd3NlclNwcml0ZVN5bWJvbCh7XG4gICAgICBpZDogbm9kZS5nZXRBdHRyaWJ1dGUoJ2lkJyksXG4gICAgICB2aWV3Qm94OiBub2RlLmdldEF0dHJpYnV0ZSgndmlld0JveCcpLFxuICAgICAgY29udGVudDogbm9kZS5vdXRlckhUTUxcbiAgICB9KTtcbiAgfTtcblxuICBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gICAgaWYgKHRoaXMuaXNNb3VudGVkKSB7XG4gICAgICB0aGlzLnVubW91bnQoKTtcbiAgICB9XG4gICAgU3ByaXRlU3ltYm9sJCQxLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RWxlbWVudHxzdHJpbmd9IHRhcmdldFxuICAgKiBAcmV0dXJuIHtFbGVtZW50fVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUubW91bnQgPSBmdW5jdGlvbiBtb3VudCAodGFyZ2V0KSB7XG4gICAgaWYgKHRoaXMuaXNNb3VudGVkKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub2RlO1xuICAgIH1cblxuICAgIHZhciBtb3VudFRhcmdldCA9IHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnID8gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpIDogdGFyZ2V0O1xuICAgIHZhciBub2RlID0gdGhpcy5yZW5kZXIoKTtcbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuXG4gICAgbW91bnRUYXJnZXQuYXBwZW5kQ2hpbGQobm9kZSk7XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICovXG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgdmFyIGNvbnRlbnQgPSB0aGlzLnN0cmluZ2lmeSgpO1xuICAgIHJldHVybiBwYXJzZSh3cmFwSW5TdmdTdHJpbmcoY29udGVudCkpLmNoaWxkTm9kZXNbMF07XG4gIH07XG5cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUudW5tb3VudCA9IGZ1bmN0aW9uIHVubW91bnQgKCkge1xuICAgIHRoaXMubm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMubm9kZSk7XG4gIH07XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuICByZXR1cm4gQnJvd3NlclNwcml0ZVN5bWJvbDtcbn0oU3ByaXRlU3ltYm9sKSk7XG5cbnJldHVybiBCcm93c2VyU3ByaXRlU3ltYm9sO1xuXG59KSkpO1xuIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3N2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sLmpzXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvc3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZC5qc1wiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwiYmFpZHVcIixcbiAgXCJ1c2VcIjogXCJiYWlkdS11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgMTAyNCAxMDI0XCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgY2xhc3M9XFxcImljb25cXFwiIHZpZXdCb3g9XFxcIjAgMCAxMDI0IDEwMjRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgeG1sbnM6eGxpbms9XFxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcXFwiIGlkPVxcXCJiYWlkdVxcXCI+PGRlZnM+PHN0eWxlIHR5cGU9XFxcInRleHQvY3NzXFxcIj48L3N0eWxlPjwvZGVmcz48cGF0aCBkPVxcXCJNMzQ1LjcwNiAyOTcuNDIzYzE1LjM1IDEyLjc5MiAzNS44MTcgMjAuNDY3IDUzLjcyNiAxNy45MDggMjAuNDY3IDAgMzguMzc1LTEwLjIzMyA1My43MjUtMjMuMDI1IDE3LjkxLTE1LjM1IDMwLjctMzUuODE3IDQwLjkzNC01OC44NDJDNTEyIDE4OS45NyA1MTIgMTM2LjI0NSA0OTYuNjUgOTAuMTk0Yy0xMC4yMzQtMzAuNy0yOC4xNDItNTguODQyLTUzLjcyNi03Ni43NUM0MjcuNTc0IDMuMjEgNDA0LjU0OC0xLjkwNiAzODQuMDgxIDAuNjUyYy0xMi43OTEgMi41NTgtMjUuNTgzIDcuNjc1LTM4LjM3NSAxNS4zNS0yMy4wMjUgMTUuMzUtMzguMzc2IDQwLjkzNC00OC42MSA2Ni41MTgtMTIuNzkxIDQ2LjA1LTE1LjM1IDkyLjEwMS0yLjU1NyAxMzguMTUyIDEwLjIzMyAyOC4xNDIgMjUuNTgzIDU2LjI4NCA1MS4xNjcgNzYuNzV6IG0yNTUuODM3IDIuNTU4YzE3LjkwOSAxNS4zNSA0MC45MzQgMjUuNTg0IDYzLjk2IDI1LjU4NCAyMC40NjYgMi41NTggMzguMzc1LTIuNTU4IDU2LjI4My0xMi43OTIgMTcuOTA5LTEwLjIzMyAzMy4yNi0yNS41ODQgNDMuNDkzLTQzLjQ5MiAxMi43OTItMjAuNDY3IDIzLjAyNS00MC45MzQgMzAuNy02My45NiA1LjExNy0xNy45MDggNy42NzUtMzguMzc1IDUuMTE3LTU4Ljg0Mi0yLjU1OS0yOC4xNDItMTUuMzUtNTMuNzI2LTMzLjI1OS03Ni43NTEtMTIuNzkyLTE1LjM1LTI4LjE0Mi0zMC43LTQ2LjA1LTM4LjM3Ni0xMi43OTItNS4xMTYtMjguMTQzLTEwLjIzMy00MC45MzUtNy42NzUtMTcuOTA4IDIuNTU5LTMzLjI1OCAxMi43OTItNDYuMDUgMjMuMDI2LTE3LjkwOSAxNS4zNS0zMy4yNTkgMzMuMjU4LTQzLjQ5MyA1My43MjUtMTAuMjMzIDE3LjkwOS0yMC40NjYgMzguMzc2LTIzLjAyNSA2MS40MDEtMi41NTggMjUuNTg0LTIuNTU4IDUxLjE2OCAyLjU1OSA3NC4xOTMgNS4xMTYgMjMuMDI1IDEyLjc5MSA0Ni4wNSAzMC43IDYzLjk2ek0yNDUuOTI5IDUwOS43NjhjMTcuOTEtMTUuMzUgMjguMTQzLTM1LjgxOCAzNS44MTgtNTYuMjg1IDEwLjIzMy0zMy4yNTggMTAuMjMzLTY2LjUxNyA3LjY3NS05OS43NzYgMC0xMi43OTItNS4xMTctMjUuNTg0LTEwLjIzNC0zOC4zNzYtMTIuNzkyLTI4LjE0Mi0zNS44MTctNTMuNzI1LTYzLjk1OS02OS4wNzYtMjMuMDI1LTEwLjIzMy00Ni4wNS0xNS4zNS02Ni41MTgtMTAuMjMzLTI1LjU4MyAyLjU1OC00Ni4wNSAyMC40NjctNjEuNCA0MC45MzQtMjAuNDY3IDI4LjE0Mi0zMC43IDYzLjk2LTM1LjgxOCA5Ny4yMTgtMi41NTggMjAuNDY3IDAgNDAuOTM0IDUuMTE3IDYxLjQgNy42NzUgMzAuNzAxIDIzLjAyNSA1OC44NDMgNDYuMDUgNzkuMzEgMTcuOTEgMTUuMzUgNDAuOTM1IDIzLjAyNiA2My45NiAyMy4wMjYgMjguMTQyIDAgNTYuMjg0LTcuNjc1IDc5LjMxLTI4LjE0MnogbTczNi44MTEtNzYuNzUyYy0yLjU1OC0yMC40NjctNy42NzUtMzguMzc1LTE3LjkwOC01Ni4yODQtMTAuMjM0LTIwLjQ2Ny0yOC4xNDMtNDAuOTM0LTQ4LjYxLTUxLjE2Ny0yMy4wMjUtMTIuNzkyLTUxLjE2Ny0xNS4zNS03Ni43NS0xMi43OTItMTIuNzkyIDIuNTU4LTI4LjE0MyA1LjExNy00MC45MzUgMTIuNzkyLTE3LjkwOCAxMC4yMzMtMzAuNyAyOC4xNDItNDAuOTMzIDQ4LjYwOS0xMC4yMzQgMjUuNTg0LTE1LjM1IDUzLjcyNi0xNS4zNSA4MS44NjggMCAyNS41ODMgMCA1My43MjYgNy42NzQgNzkuMzEgNS4xMTcgMTcuOTA4IDE1LjM1IDM4LjM3NSAzMy4yNiA0OC42MDggMTcuOTA4IDE1LjM1IDQwLjkzMyAyMC40NjcgNjMuOTU5IDIzLjAyNiAxNy45MDggMi41NTggMzguMzc1IDIuNTU4IDU2LjI4NC0yLjU1OSAxNy45MDgtNS4xMTYgMzUuODE3LTE1LjM1IDQ2LjA1LTMwLjcgMTIuNzkyLTE1LjM1IDIwLjQ2Ny0zNS44MTcgMjMuMDI2LTUzLjcyNiAxMi43OTItMzAuNyAxMC4yMzMtNTguODQyIDEwLjIzMy04Ni45ODV6TTkxMS4xMDYgODE5LjMzYy0yLjU1OS0zNS44MTctMjAuNDY3LTcxLjYzNC00Ni4wNS05OS43NzYtNS4xMTgtNS4xMTctMTAuMjM0LTEwLjIzNC0xNy45MS0xNS4zNS0zMy4yNTgtMjguMTQyLTY2LjUxNy01OC44NDMtOTkuNzc2LTg5LjU0My0zMy4yNTktMzMuMjYtNjMuOTYtNjkuMDc2LTkyLjEwMS0xMDcuNDUyLTIwLjQ2Ny0zMy4yNTktNDguNjEtNjMuOTYtODYuOTg1LTgxLjg2OC0yMy4wMjUtMTAuMjMzLTUxLjE2Ny0xNS4zNS03Ni43NTEtMTIuNzkyLTQ2LjA1IDUuMTE3LTg2Ljk4NSAzMC43LTExNS4xMjcgNjYuNTE4LTcuNjc1IDcuNjc1LTEyLjc5MSAxNy45MDktMTcuOTA4IDI4LjE0Mi0yMC40NjcgMzAuNy00Ni4wNSA2MS40MDEtNzQuMTkzIDg2Ljk4NS0xNS4zNSAxNS4zNS0zMC43IDI4LjE0Mi00Ni4wNSA0MC45MzQtNy42NzYgNy42NzUtMTcuOTEgMTUuMzUtMjUuNTg0IDIzLjAyNS0zMC43IDIzLjAyNS02MS40MDEgNTMuNzI2LTc5LjMxIDg2Ljk4NS0xMi43OTIgMjMuMDI1LTIwLjQ2NyA0OC42MDktMjMuMDI1IDc2Ljc1IDAgMjMuMDI2IDIuNTU4IDQ2LjA1MSAxMC4yMzMgNjYuNTE4IDcuNjc1IDIzLjAyNiAxNy45MDkgNDYuMDUxIDMzLjI2IDYzLjk2IDI1LjU4MyAzMC43IDYzLjk1OCA1MS4xNjcgMTAyLjMzNCA1My43MjUgNDguNjA5IDIuNTU5IDk3LjIxOCAwIDE0My4yNjktNy42NzUgMjAuNDY3LTIuNTU4IDQwLjkzNC0xMC4yMzMgNjMuOTU5LTEyLjc5MiA0Ni4wNS01LjExNiA5Mi4xMDEtMi41NTggMTM1LjU5NCAxMC4yMzQgMzUuODE3IDEyLjc5MiA3NC4xOTIgMTcuOTA5IDExMi41NjggMjAuNDY3IDM4LjM3NSAyLjU1OCA3OS4zMS0yLjU1OCAxMTUuMTI3LTIzLjAyNSAyNS41ODMtMTIuNzkyIDQ2LjA1LTM1LjgxOCA1OC44NDItNjEuNDAxIDIwLjQ2Ny0zMy4yNiAzMC43LTcxLjYzNSAyNS41ODQtMTEyLjU2OXpNNDgxLjMgOTI0LjIyNEgzNjMuNjE1Yy0xMi43OTIgMC0yNS41ODQgMC0zOC4zNzYtMi41NTktMjUuNTg0LTUuMTE3LTQ4LjYxLTIwLjQ2Ny02My45Ni00My40OTItMTIuNzkxLTE1LjM1LTIwLjQ2Ni0zMy4yNTktMjMuMDI1LTUzLjcyNmEyNDYuNTYzIDI0Ni41NjMgMCAwIDEgMC02MS40YzUuMTE3LTIzLjAyNiAxNy45MDktNDMuNDkzIDMzLjI2LTU4Ljg0MyAxMi43OTEtMTIuNzkyIDMwLjctMjMuMDI2IDQ4LjYwOC0zMC43IDcuNjc1LTIuNTYgMTUuMzUtNS4xMTcgMjMuMDI2LTUuMTE3aDY5LjA3NnYtOTcuMjE5aDY2LjUxN2MyLjU1OSAxMjAuMjQ0IDIuNTU5IDIzNy45MjkgMi41NTkgMzUzLjA1NnogbTI2My41MTIgMEg1ODMuNjM0Yy0xNy45MDgtMi41NTktMzMuMjU4LTcuNjc2LTQ2LjA1LTE3LjkwOS0xNS4zNS0xMi43OTItMjMuMDI2LTMzLjI1OS0yMy4wMjYtNTEuMTY3di0xNzMuOTdoNjYuNTE4djE2MS4xNzhjMCA3LjY3NSAyLjU1OCAxMi43OTIgNy42NzUgMTcuOTA4IDUuMTE3IDUuMTE3IDEyLjc5MiA3LjY3NSAyMC40NjcgNy42NzVoNjkuMDc2VjY3OC42Mmg2Ni41MTh2MjQ1LjYwNHpcXFwiIGZpbGw9XFxcIiMzMDZDRkZcXFwiIHAtaWQ9XFxcIjMxMjdcXFwiIC8+PHBhdGggZD1cXFwiTTM0MC41OSA3MzQuOTA0Yy0xMi43OTMgNS4xMTctMjUuNTg1IDE1LjM1LTMzLjI2IDMwLjctNS4xMTYgMTIuNzkyLTcuNjc1IDI1LjU4NC03LjY3NSAzOC4zNzYgMCAxNS4zNSA1LjExNyAzMC43IDEyLjc5MiA0My40OTIgMTAuMjM0IDE1LjM1IDI4LjE0MiAyNS41ODQgNDYuMDUgMjMuMDI2aDUzLjcyN1Y3MzIuMzQ2SDM1My4zOGMtMi41NTgtMi41NTktNy42NzUgMC0xMi43OTIgMi41NTh6XFxcIiBmaWxsPVxcXCIjMzA2Q0ZGXFxcIiBwLWlkPVxcXCIzMTI4XFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2wiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvc3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2wuanNcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9zdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkLmpzXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJjdW93dVwiLFxuICBcInVzZVwiOiBcImN1b3d1LXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCAxMDI0IDEwMjRcIixcbiAgXCJjb250ZW50XCI6IFwiPHN5bWJvbCBjbGFzcz1cXFwiaWNvblxcXCIgdmlld0JveD1cXFwiMCAwIDEwMjQgMTAyNFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB4bWxuczp4bGluaz1cXFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1xcXCIgaWQ9XFxcImN1b3d1XFxcIj48ZGVmcz48c3R5bGUgdHlwZT1cXFwidGV4dC9jc3NcXFwiPjwvc3R5bGU+PC9kZWZzPjxwYXRoIGQ9XFxcIk0xNjkuNDQ0ODExIDc0MC45NzUwMzNjLTQuNDczMDU0IDQuNDczNzYyLTQuODk3NjkzIDExLjMwMzQwNC0wLjk0NTk2NCAxNS4yNTUxMzNsOTkuMjcxMzQxIDk5LjI3MDYzM2MzLjk1MTM3NSAzLjk1MTM3NSAxMC43ODEzNzEgMy41MjgxNTIgMTUuMjU0Nzc5LTAuOTQ0NTQ4TDg1NC41NTUxODkgMjgzLjAyNTMyMWM0LjQ3NDExNi00LjQ3NDExNiA0Ljg5NzMzOS0xMS4zMDQxMTIgMC45NDU5NjQtMTUuMjU1MTMzbC05OS4yNzEzNDEtOTkuMjcwOTg3Yy0zLjk1MTM3NS0zLjk1MTcyOS0xMC43ODAzMDgtMy41MjgxNTItMTUuMjU1MTMzIDAuOTQ1OTY0TDE2OS40NDQ4MTEgNzQwLjk3NTAzM3pcXFwiIGZpbGw9XFxcIiM0YjRjNGRcXFwiIHAtaWQ9XFxcIjE5ODlcXFwiIC8+PHBhdGggZD1cXFwiTTI4My4wMjQ5NjcgMTY5LjQ0NDQ1N2MtNC40NzM3NjItNC40NzMwNTQtMTEuMzAzNDA0LTQuODk3NjkzLTE1LjI1NTEzMy0wLjk0NTk2NGwtOTkuMjcwNjMzIDk5LjI3MTM0MWMtMy45NTEzNzUgMy45NTEzNzUtMy41MjgxNTIgMTAuNzgxMzcxIDAuOTQ0NTQ4IDE1LjI1NDc3OUw3NDAuOTc0Njc5IDg1NC41NTUxODljNC40NzQxMTYgNC40NzQxMTYgMTEuMzA0NDY2IDQuODk3MzM5IDE1LjI1NTEzMyAwLjk0NTk2NGw5OS4yNzEzNDEtOTkuMjcxMzQxYzMuOTUxMzc1LTMuOTUxMzc1IDMuNTI3Nzk4LTEwLjc4MDMwOC0wLjk0NjMxOC0xNS4yNTUxMzNMMjgzLjAyNDk2NyAxNjkuNDQ0NDU3elxcXCIgZmlsbD1cXFwiIzRiNGM0ZFxcXCIgcC1pZD1cXFwiMTk5MFxcXCIgLz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sIiwiaW1wb3J0IFNwcml0ZVN5bWJvbCBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3N2Zy1iYWtlci1ydW50aW1lL2Jyb3dzZXItc3ltYm9sLmpzXCI7XG5pbXBvcnQgc3ByaXRlIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvc3ZnLXNwcml0ZS1sb2FkZXIvcnVudGltZS9icm93c2VyLXNwcml0ZS5idWlsZC5qc1wiO1xudmFyIHN5bWJvbCA9IG5ldyBTcHJpdGVTeW1ib2woe1xuICBcImlkXCI6IFwicXFcIixcbiAgXCJ1c2VcIjogXCJxcS11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgMTAyNCAxMDI0XCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgY2xhc3M9XFxcImljb25cXFwiIHZpZXdCb3g9XFxcIjAgMCAxMDI0IDEwMjRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgeG1sbnM6eGxpbms9XFxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcXFwiIGlkPVxcXCJxcVxcXCI+PGRlZnM+PHN0eWxlIHR5cGU9XFxcInRleHQvY3NzXFxcIj48L3N0eWxlPjwvZGVmcz48cGF0aCBkPVxcXCJNNTExLjA5NzYxIDk1Ny4yNTdjLTgwLjE1OSAwLTE1My43MzctMjUuMDE5LTIwMS4xMS02Mi4zODYtMjQuMDU3IDYuNzAyLTU0LjgzMSAxNy40ODktNzQuMjUyIDMwLjg2NC0xNi42MTcgMTEuNDM5LTE0LjU0NiAyMy4xMDYtMTEuNTUgMjcuODE2IDEzLjE1IDIwLjY4OSAyMjUuNTgzIDEzLjIxMSAyODYuOTEyIDYuNzY3di0zLjA2MXpcXFwiIGZpbGw9XFxcIiNGQUFEMDhcXFwiIHAtaWQ9XFxcIjQyMDdcXFwiIC8+PHBhdGggZD1cXFwiTTQ5Ni42NTA2MSA5NTcuMjU3YzgwLjE1NyAwIDE1My43MzctMjUuMDE5IDIwMS4xMS02Mi4zODYgMjQuMDU3IDYuNzAyIDU0LjgzIDE3LjQ4OSA3NC4yNTMgMzAuODY0IDE2LjYxNiAxMS40MzkgMTQuNTQzIDIzLjEwNiAxMS41NSAyNy44MTYtMTMuMTUgMjAuNjg5LTIyNS41ODQgMTMuMjExLTI4Ni45MTQgNi43Njd2LTMuMDYxelxcXCIgZmlsbD1cXFwiI0ZBQUQwOFxcXCIgcC1pZD1cXFwiNDIwOFxcXCIgLz48cGF0aCBkPVxcXCJNNDk3LjEyODYxIDQ3NC41MjRjMTMxLjkzNC0wLjg3NiAyMzcuNjY5LTI1Ljc4MyAyNzMuNDk3LTM1LjM0IDguNTQxLTIuMjggMTMuMTEtNi4zNjQgMTMuMTEtNi4zNjQgMC4wMy0xLjE3MiAwLjU0Mi0yMC45NTIgMC41NDItMzEuMTU1Qzc4NC4yNzc2MSAyMjkuODMzIDcwMS4xMjU2MSA1Ny4xNzMgNDk2LjY0MDYxIDU3LjE2MiAyOTIuMTU2NjEgNTcuMTczIDIwOS4wMDA2MSAyMjkuODMyIDIwOS4wMDA2MSA0MDEuNjY1YzAgMTAuMjAzIDAuNTE2IDI5Ljk4MyAwLjU0NyAzMS4xNTUgMCAwIDMuNzE3IDMuODIxIDEwLjUyOSA1LjY3IDMzLjA3OCA4Ljk4IDE0MC44MDMgMzUuMTM5IDI3Ni4wOCAzNi4wMzRoMC45NzJ6XFxcIiBmaWxsPVxcXCIjMDAwMDAwXFxcIiBwLWlkPVxcXCI0MjA5XFxcIiAvPjxwYXRoIGQ9XFxcIk04NjAuMjgyNjEgNjE5Ljc4MmMtOC4xMi0yNi4wODYtMTkuMjA0LTU2LjUwNi0zMC40MjctODUuNzIgMCAwLTYuNDU2LTAuNzk1LTkuNzE4IDAuMTQ4LTEwMC43MSAyOS4yMDUtMjIyLjc3MyA0Ny44MTgtMzE1Ljc5MiA0Ni42OTVoLTAuOTYyQzQxMC44ODU2MSA1ODIuMDE3IDI4OS42NTA2MSA1NjMuNjE3IDE4OS4yNzk2MSA1MzQuNjk4IDE4NS40NDQ2MSA1MzMuNTk1IDE3Ny44NzI2MSA1MzQuMDYzIDE3Ny44NzI2MSA1MzQuMDYzIDE2Ni42NDk2MSA1NjMuMjc2IDE1NS41NjY2MSA1OTMuNjk2IDE0Ny40NDc2MSA2MTkuNzgyIDEwOC43Mjk2MSA3NDQuMTY4IDEyMS4yNzI2MSA3OTUuNjQ0IDEzMC44MjQ2MSA3OTYuNzk4YzIwLjQ5NiAyLjQ3NCA3OS43OC05My42MzcgNzkuNzgtOTMuNjM3IDAgOTcuNjYgODguMzI0IDI0Ny42MTcgMjkwLjU3NiAyNDguOTk2YTcxOC4wMSA3MTguMDEgMCAwIDEgNS4zNjcgMEM3MDguODAxNjEgOTUwLjc3OCA3OTcuMTIyNjEgODAwLjgyMiA3OTcuMTIyNjEgNzAzLjE2MmMwIDAgNTkuMjg0IDk2LjExMSA3OS43ODMgOTMuNjM3IDkuNTUtMS4xNTQgMjIuMDkzLTUyLjYzLTE2LjYyMy0xNzcuMDE3XFxcIiBmaWxsPVxcXCIjMDAwMDAwXFxcIiBwLWlkPVxcXCI0MjEwXFxcIiAvPjxwYXRoIGQ9XFxcIk00MzQuMzgyNjEgMzE2LjkxN2MtMjcuOSAxLjI0LTUxLjc0NS0zMC4xMDYtNTMuMjQtNjkuOTU2LTEuNTE4LTM5Ljg3NyAxOS44NTgtNzMuMjA3IDQ3Ljc2NC03NC40NTQgMjcuODc1LTEuMjI0IDUxLjcwMyAzMC4xMDkgNTMuMjE4IDY5Ljk3NCAxLjUyNyAzOS44NzctMTkuODUzIDczLjItNDcuNzQyIDc0LjQzNm0yMDYuNjctNjkuOTU2Yy0xLjQ5NCAzOS44NS0yNS4zNCA3MS4xOTQtNTMuMjQgNjkuOTU2LTI3Ljg4OC0xLjIzOC00OS4yNjktMzQuNTU5LTQ3Ljc0Mi03NC40MzUgMS41MTMtMzkuODY4IDI1LjM0MS03MS4yMDEgNTMuMjE2LTY5Ljk3NCAyNy45MDkgMS4yNDcgNDkuMjg1IDM0LjU3NiA0Ny43NjcgNzQuNDUzXFxcIiBmaWxsPVxcXCIjRkZGRkZGXFxcIiBwLWlkPVxcXCI0MjExXFxcIiAvPjxwYXRoIGQ9XFxcIk02ODMuOTQyNjEgMzY4LjYyN2MtNy4zMjMtMTcuNjA5LTgxLjA2Mi0zNy4yMjctMTcyLjM1My0zNy4yMjdoLTAuOThjLTkxLjI5IDAtMTY1LjAzMSAxOS42MTgtMTcyLjM1MiAzNy4yMjdhNi4yNDQgNi4yNDQgMCAwIDAtMC41MzUgMi41MDVjMCAxLjI2OSAwLjM5MyAyLjQxNCAxLjAwNiAzLjM4NiA2LjE2OCA5Ljc2NSA4OC4wNTQgNTguMDE4IDE3MS44ODIgNTguMDE4aDAuOThjODMuODI3IDAgMTY1LjcxLTQ4LjI1IDE3MS44ODEtNTguMDE2YTYuMzUyIDYuMzUyIDAgMCAwIDEuMDAyLTMuMzk1YzAtMC44OTctMC4yLTEuNzM2LTAuNTMxLTIuNDk4XFxcIiBmaWxsPVxcXCIjRkFBRDA4XFxcIiBwLWlkPVxcXCI0MjEyXFxcIiAvPjxwYXRoIGQ9XFxcIk00NjcuNjMxNjEgMjU2LjM3N2MxLjI2IDE1Ljg4Ni03LjM3NyAzMC0xOS4yNjYgMzEuNTQyLTExLjkwNyAxLjU0NC0yMi41NjktMTAuMDgzLTIzLjgzNi0yNS45NzgtMS4yNDMtMTUuODk1IDcuMzgxLTMwLjAwOCAxOS4yNS0zMS41MzggMTEuOTI3LTEuNTQ5IDIyLjYwNyAxMC4wODggMjMuODUyIDI1Ljk3NG03My4wOTcgNy45MzVjMi41MzMtNC4xMTggMTkuODI3LTI1Ljc3IDU1LjYyLTE3Ljg4NiA5LjQwMSAyLjA3IDEzLjc1IDUuMTE2IDE0LjY2OCA2LjMxNiAxLjM1NSAxLjc3IDEuNzI2IDQuMjkgMC4zNTIgNy42ODQtMi43MjIgNi43MjUtOC4zMzggNi41NDItMTEuNDU0IDUuMjI2LTIuMDEtMC44NS0yNi45NC0xNS44ODktNDkuOTA1IDYuNTUzLTEuNTc5IDEuNTQ1LTQuNDA1IDIuMDc0LTcuMDg1IDAuMjQyLTIuNjc4LTEuODM0LTMuNzg2LTUuNTUzLTIuMTk2LTguMTM1XFxcIiBmaWxsPVxcXCIjMDAwMDAwXFxcIiBwLWlkPVxcXCI0MjEzXFxcIiAvPjxwYXRoIGQ9XFxcIk01MDQuMzMyNjEgNTg0LjQ5NWgtMC45NjdjLTYzLjU2OCAwLjc1Mi0xNDAuNjQ2LTcuNTA0LTIxNS4yODYtMjEuOTItNi4zOTEgMzYuMjYyLTEwLjI1IDgxLjgzOC02LjkzNiAxMzYuMTk2IDguMzcgMTM3LjM4NCA5MS42MiAyMjMuNzM2IDIyMC4xMTggMjI0Ljk5Nkg1MDYuNDg0NjFjMTI4LjQ5OC0xLjI2IDIxMS43NDgtODcuNjEyIDIyMC4xMi0yMjQuOTk2IDMuMzE0LTU0LjM2Mi0wLjU0Ny05OS45MzgtNi45NC0xMzYuMjAzLTc0LjY1NCAxNC40MjMtMTUxLjc0NSAyMi42ODQtMjE1LjMzMiAyMS45MjdcXFwiIGZpbGw9XFxcIiNGRkZGRkZcXFwiIHAtaWQ9XFxcIjQyMTRcXFwiIC8+PHBhdGggZD1cXFwiTTMyMy4yNzQ2MSA1NzcuMDE2djEzNy40NjhzNjQuOTU3IDEyLjcwNSAxMzAuMDMxIDMuOTFWNTkxLjU5Yy00MS4yMjUtMi4yNjItODUuNjg4LTcuMzA0LTEzMC4wMzEtMTQuNTc0XFxcIiBmaWxsPVxcXCIjRUIxQzI2XFxcIiBwLWlkPVxcXCI0MjE1XFxcIiAvPjxwYXRoIGQ9XFxcIk03ODguMDk3NjEgNDMyLjUzNnMtMTIxLjk4IDQwLjM4Ny0yODMuNzQzIDQxLjUzOWgtMC45NjJjLTE2MS40OTctMS4xNDctMjgzLjMyOC00MS40MDEtMjgzLjc0NC00MS41MzlsLTQwLjg1NCAxMDYuOTUyYzEwMi4xODYgMzIuMzEgMjI4LjgzNyA1My4xMzUgMzI0LjU5OCA1MS45MjZsMC45Ni0wLjAwMmM5NS43NjggMS4yMTYgMjIyLjQtMTkuNjEgMzI0LjYtNTEuOTI0bC00MC44NTUtMTA2Ljk1MnpcXFwiIGZpbGw9XFxcIiNFQjFDMjZcXFwiIHAtaWQ9XFxcIjQyMTZcXFwiIC8+PC9zeW1ib2w+XCJcbn0pO1xudmFyIHJlc3VsdCA9IHNwcml0ZS5hZGQoc3ltYm9sKTtcbmV4cG9ydCBkZWZhdWx0IHN5bWJvbCIsImltcG9ydCBTcHJpdGVTeW1ib2wgZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9zdmctYmFrZXItcnVudGltZS9icm93c2VyLXN5bWJvbC5qc1wiO1xuaW1wb3J0IHNwcml0ZSBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL3N2Zy1zcHJpdGUtbG9hZGVyL3J1bnRpbWUvYnJvd3Nlci1zcHJpdGUuYnVpbGQuanNcIjtcbnZhciBzeW1ib2wgPSBuZXcgU3ByaXRlU3ltYm9sKHtcbiAgXCJpZFwiOiBcIndlY2hhbFwiLFxuICBcInVzZVwiOiBcIndlY2hhbC11c2FnZVwiLFxuICBcInZpZXdCb3hcIjogXCIwIDAgMTAyNCAxMDI0XCIsXG4gIFwiY29udGVudFwiOiBcIjxzeW1ib2wgY2xhc3M9XFxcImljb25cXFwiIHZpZXdCb3g9XFxcIjAgMCAxMDI0IDEwMjRcXFwiIHhtbG5zPVxcXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1xcXCIgeG1sbnM6eGxpbms9XFxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcXFwiIGlkPVxcXCJ3ZWNoYWxcXFwiPjxkZWZzPjxzdHlsZSB0eXBlPVxcXCJ0ZXh0L2Nzc1xcXCI+PC9zdHlsZT48L2RlZnM+PHBhdGggZD1cXFwiTTUxMiAxLjg5NkMyMjkuNDUyIDEuODk2IDAgMjI5LjQ1MiAwIDUxMnMyMjkuNDUyIDUxMC4xMDQgNTEyIDUxMC4xMDRTMTAyMi4xMDQgNzk0LjU0OCAxMDIyLjEwNCA1MTIgNzk0LjU0OCAxLjg5NiA1MTIgMS44OTZ6IG0tOTEuMDIyIDYyOS41N2MtMjYuNTQ4IDAtNDkuMzA0LTUuNjg4LTc1Ljg1Mi0xMS4zNzdsLTc1Ljg1MiAzNy45MjYgMjIuNzU2LTY2LjM3Yy01NC45OTMtMzcuOTI2LTg3LjIzLTg3LjIzLTg3LjIzLTE0Ny45MTIgMC0xMDQuMjk2IDk4LjYwNy0xODUuODM3IDIxOC4wNzQtMTg1LjgzNyAxMDguMDg5IDAgMjAxLjAwNyA2NC40NzQgMjE5Ljk3IDE1My42LTcuNTg1IDAtMTMuMjc0LTEuODk2LTIwLjg1OS0xLjg5Ni0xMDQuMjk2IDAtMTg1LjgzNyA3Ny43NDgtMTg1LjgzNyAxNzIuNTYzIDAgMTUuMTcgMS44OTYgMzAuMzQgNy41ODUgNDUuNTExLTcuNTg1IDMuNzkzLTE1LjE3IDMuNzkzLTIyLjc1NSAzLjc5M3ogbTMyMi4zNyA3Ny43NDlsMTcuMDY3IDU0Ljk5Mi01OC43ODUtMzQuMTMzYy0yMi43NTYgNS42ODktNDMuNjE1IDExLjM3OC02Ni4zNyAxMS4zNzgtMTA0LjI5NyAwLTE4NS44MzgtNzAuMTYzLTE4NS44MzgtMTU3LjM5M1M1MzAuOTYzIDQyNC43NyA2MzUuMjYgNDI0Ljc3Yzk4LjYwOCAwIDE4NS44MzcgNzAuMTYzIDE4NS44MzcgMTU5LjI5IDAgNDcuNDA3LTMyLjIzNyA5MS4wMjEtNzcuNzQ4IDEyNS4xNTV6XFxcIiBmaWxsPVxcXCIjNDZCQjM2XFxcIiBwLWlkPVxcXCIyMTkxXFxcIiAvPjxwYXRoIGQ9XFxcIk0zMTguNTc4IDM3OS4yNmMwIDE3LjA2NiAxMy4yNzQgMzAuMzQgMzAuMzQgMzAuMzRzMzAuMzQxLTEzLjI3NCAzMC4zNDEtMzAuMzQtMTMuMjc0LTMwLjM0MS0zMC4zNC0zMC4zNDEtMzAuMzQxIDEzLjI3NC0zMC4zNDEgMzAuMzR6IG0yMzUuMTQgMTU5LjI4OGMwIDEzLjI3NCAxMS4zNzggMjQuNjUyIDI0LjY1MiAyNC42NTIgMTMuMjc0IDAgMjQuNjUyLTExLjM3OCAyNC42NTItMjQuNjUyIDAtMTMuMjc0LTExLjM3OC0yNC42NTItMjQuNjUyLTI0LjY1Mi0xMy4yNzQtMS44OTYtMjQuNjUxIDkuNDgyLTI0LjY1MSAyNC42NTJ6IG0tODEuNTQtMTU5LjI4OWMwIDE3LjA2NyAxMy4yNzQgMzAuMzQxIDMwLjM0IDMwLjM0MSAxNy4wNjcgMCAzMC4zNDEtMTMuMjc0IDMwLjM0MS0zMC4zNCAwLTE3LjA2Ny0xMy4yNzQtMzAuMzQxLTMwLjM0LTMwLjM0MS0xNy4wNjcgMC0zMC4zNDEgMTMuMjc0LTMwLjM0MSAzMC4zNHpNNjc1LjA4IDUzOC41NWMwIDEzLjI3MyAxMS4zNzggMjQuNjUxIDI0LjY1MiAyNC42NTEgMTMuMjc0IDAgMjQuNjUyLTExLjM3OCAyNC42NTItMjQuNjUyIDAtMTMuMjc0LTExLjM3OC0yNC42NTItMjQuNjUyLTI0LjY1Mi0xMy4yNzQtMS44OTYtMjQuNjUyIDkuNDgyLTI0LjY1MiAyNC42NTJ6XFxcIiBmaWxsPVxcXCIjNDZCQjM2XFxcIiBwLWlkPVxcXCIyMTkyXFxcIiAvPjwvc3ltYm9sPlwiXG59KTtcbnZhciByZXN1bHQgPSBzcHJpdGUuYWRkKHN5bWJvbCk7XG5leHBvcnQgZGVmYXVsdCBzeW1ib2wiLCJpbXBvcnQgU3ByaXRlU3ltYm9sIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvc3ZnLWJha2VyLXJ1bnRpbWUvYnJvd3Nlci1zeW1ib2wuanNcIjtcbmltcG9ydCBzcHJpdGUgZnJvbSBcIi4uLy4uL25vZGVfbW9kdWxlcy9zdmctc3ByaXRlLWxvYWRlci9ydW50aW1lL2Jyb3dzZXItc3ByaXRlLmJ1aWxkLmpzXCI7XG52YXIgc3ltYm9sID0gbmV3IFNwcml0ZVN5bWJvbCh7XG4gIFwiaWRcIjogXCJ6aGlmdWJhb1wiLFxuICBcInVzZVwiOiBcInpoaWZ1YmFvLXVzYWdlXCIsXG4gIFwidmlld0JveFwiOiBcIjAgMCAxMDI0IDEwMjRcIixcbiAgXCJjb250ZW50XCI6IFwiPHN5bWJvbCBjbGFzcz1cXFwiaWNvblxcXCIgdmlld0JveD1cXFwiMCAwIDEwMjQgMTAyNFxcXCIgeG1sbnM9XFxcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXFxcIiB4bWxuczp4bGluaz1cXFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1xcXCIgaWQ9XFxcInpoaWZ1YmFvXFxcIj48ZGVmcz48c3R5bGUgdHlwZT1cXFwidGV4dC9jc3NcXFwiPjwvc3R5bGU+PC9kZWZzPjxwYXRoIGQ9XFxcIk0yMzAuNCA1NzYuNTEyYy0xMi4yODggOS43MjgtMjUuMDg4IDI0LjA2NC0yOC42NzIgNDEuOTg0LTUuMTIgMjQuNTc2LTEuMDI0IDU1LjI5NiAyMi41MjggNzkuODcyIDI4LjY3MiAyOS4xODQgNzIuNzA0IDM3LjM3NiA5MS42NDggMzguOTEyIDUxLjIgMy41ODQgMTA1Ljk4NC0yMi4wMTYgMTQ3LjQ1Ni01MC42ODggMTYuMzg0LTExLjI2NCA0NC4wMzItMzQuMzA0IDcwLjE0NC02OS42MzItNTkuMzkyLTMwLjcyLTEzMy42MzItNjQuNTEyLTIxMi40OC02MS40NC00MC40NDggMS41MzYtNjkuNjMyIDkuNzI4LTkwLjYyNCAyMC45OTJ6IG03NTIuNjQgMTM1LjY4YzI2LjExMi02MS40NCA0MC45Ni0xMjkuMDI0IDQwLjk2LTIwMC4xOTJDMTAyNCAyMjkuODg4IDc5NC4xMTIgMCA1MTIgMFMwIDIyOS44ODggMCA1MTJzMjI5Ljg4OCA1MTIgNTEyIDUxMmMxNzAuNDk2IDAgMzIxLjUzNi04My45NjggNDE0LjcyLTIxMS45NjgtODguMDY0LTQzLjUyLTIzMi45Ni0xMTUuNzEyLTMyMi41Ni0xNTkuMjMyLTQyLjQ5NiA0OC42NC0xMDUuNDcyIDk3LjI4LTE3Ni42NCAxMTguMjcyLTQ0LjU0NCAxMy4zMTItODQuOTkyIDE4LjQzMi0xMjYuOTc2IDkuNzI4LTQxLjk4NC04LjcwNC03Mi43MDQtMjguMTYtOTAuNjI0LTQ3LjYxNi05LjIxNi0xMC4yNC0xOS40NTYtMjIuNTI4LTI3LjEzNi0zNy44ODggMC41MTIgMS4wMjQgMS4wMjQgMi4wNDggMS4wMjQgMy4wNzIgMCAwLTQuNjA4LTcuNjgtNy42OC0xOS40NTYtMS41MzYtNi4xNDQtMy4wNzItMTEuNzc2LTMuNTg0LTE3LjkyLTAuNTEyLTQuMDk2LTAuNTEyLTguNzA0IDAtMTIuOC0wLjUxMi03LjY4IDAtMTUuODcyIDEuNTM2LTI0LjA2NCA0LjA5Ni0yMC40OCAxMi44LTQ0LjAzMiAzNS4zMjgtNjUuNTM2IDQ5LjE1Mi00OC4xMjggMTE0LjY4OC01MC42ODggMTQ4Ljk5Mi01MC4xNzYgNTAuMTc2IDAuNTEyIDEzOC4yNCAyMi41MjggMjExLjk2OCA0OC42NCAyMC40OC00My41MiAzMy43OTItOTAuMTEyIDQxLjk4NC0xMjEuMzQ0aC0zMDcuMnYtMzMuMjhoMTU3LjY5NnYtNjYuNTZIMjcyLjM4NFYzMDIuMDhoMTkwLjQ2NFYyMzUuNTJjMC05LjIxNiAyLjA0OC0xNi4zODQgMTYuMzg0LTE2LjM4NGg3NC43NTJWMzAyLjA4aDIwNy4zNnYzMy4yOGgtMjA3LjM2djY2LjU2aDE2NS44ODhzLTE2Ljg5NiA5Mi42NzItNjguNjA4IDE4NC4zMmMxMTUuMiA0MC45NiAyNzguMDE2IDEwNC40NDggMzMxLjc3NiAxMjUuOTUyelxcXCIgZmlsbD1cXFwiIzA2QjRGRFxcXCIgcC1pZD1cXFwiMjc4N1xcXCIgLz48L3N5bWJvbD5cIlxufSk7XG52YXIgcmVzdWx0ID0gc3ByaXRlLmFkZChzeW1ib2wpO1xuZXhwb3J0IGRlZmF1bHQgc3ltYm9sIiwiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcblx0dHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuXHR0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuXHQoZ2xvYmFsLkJyb3dzZXJTcHJpdGUgPSBmYWN0b3J5KCkpO1xufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWwgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge307XG5cblxuXG5cblxuZnVuY3Rpb24gY3JlYXRlQ29tbW9uanNNb2R1bGUoZm4sIG1vZHVsZSkge1xuXHRyZXR1cm4gbW9kdWxlID0geyBleHBvcnRzOiB7fSB9LCBmbihtb2R1bGUsIG1vZHVsZS5leHBvcnRzKSwgbW9kdWxlLmV4cG9ydHM7XG59XG5cbnZhciBkZWVwbWVyZ2UgPSBjcmVhdGVDb21tb25qc01vZHVsZShmdW5jdGlvbiAobW9kdWxlLCBleHBvcnRzKSB7XG4oZnVuY3Rpb24gKHJvb3QsIGZhY3RvcnkpIHtcbiAgICBpZiAodHlwZW9mIHVuZGVmaW5lZCA9PT0gJ2Z1bmN0aW9uJyAmJiB1bmRlZmluZWQuYW1kKSB7XG4gICAgICAgIHVuZGVmaW5lZChmYWN0b3J5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcbiAgICB9XG59KGNvbW1vbmpzR2xvYmFsLCBmdW5jdGlvbiAoKSB7XG5cbmZ1bmN0aW9uIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbCkge1xuICAgIHZhciBub25OdWxsT2JqZWN0ID0gdmFsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xuXG4gICAgcmV0dXJuIG5vbk51bGxPYmplY3RcbiAgICAgICAgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbCkgIT09ICdbb2JqZWN0IFJlZ0V4cF0nXG4gICAgICAgICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWwpICE9PSAnW29iamVjdCBEYXRlXSdcbn1cblxuZnVuY3Rpb24gZW1wdHlUYXJnZXQodmFsKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsKSA/IFtdIDoge31cbn1cblxuZnVuY3Rpb24gY2xvbmVJZk5lY2Vzc2FyeSh2YWx1ZSwgb3B0aW9uc0FyZ3VtZW50KSB7XG4gICAgdmFyIGNsb25lID0gb3B0aW9uc0FyZ3VtZW50ICYmIG9wdGlvbnNBcmd1bWVudC5jbG9uZSA9PT0gdHJ1ZTtcbiAgICByZXR1cm4gKGNsb25lICYmIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSkgPyBkZWVwbWVyZ2UoZW1wdHlUYXJnZXQodmFsdWUpLCB2YWx1ZSwgb3B0aW9uc0FyZ3VtZW50KSA6IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRBcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICB2YXIgZGVzdGluYXRpb24gPSB0YXJnZXQuc2xpY2UoKTtcbiAgICBzb3VyY2UuZm9yRWFjaChmdW5jdGlvbihlLCBpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZGVzdGluYXRpb25baV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBkZXN0aW5hdGlvbltpXSA9IGNsb25lSWZOZWNlc3NhcnkoZSwgb3B0aW9uc0FyZ3VtZW50KTtcbiAgICAgICAgfSBlbHNlIGlmIChpc01lcmdlYWJsZU9iamVjdChlKSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb25baV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2ldLCBlLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldC5pbmRleE9mKGUpID09PSAtMSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb24ucHVzaChjbG9uZUlmTmVjZXNzYXJ5KGUsIG9wdGlvbnNBcmd1bWVudCkpO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRlc3RpbmF0aW9uXG59XG5cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICB2YXIgZGVzdGluYXRpb24gPSB7fTtcbiAgICBpZiAoaXNNZXJnZWFibGVPYmplY3QodGFyZ2V0KSkge1xuICAgICAgICBPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGNsb25lSWZOZWNlc3NhcnkodGFyZ2V0W2tleV0sIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoIWlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSB8fCAhdGFyZ2V0W2tleV0pIHtcbiAgICAgICAgICAgIGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZUlmTmVjZXNzYXJ5KHNvdXJjZVtrZXldLCBvcHRpb25zQXJndW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnNBcmd1bWVudCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZGVzdGluYXRpb25cbn1cblxuZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIHtcbiAgICB2YXIgYXJyYXkgPSBBcnJheS5pc0FycmF5KHNvdXJjZSk7XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRpb25zQXJndW1lbnQgfHwgeyBhcnJheU1lcmdlOiBkZWZhdWx0QXJyYXlNZXJnZSB9O1xuICAgIHZhciBhcnJheU1lcmdlID0gb3B0aW9ucy5hcnJheU1lcmdlIHx8IGRlZmF1bHRBcnJheU1lcmdlO1xuXG4gICAgaWYgKGFycmF5KSB7XG4gICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHRhcmdldCkgPyBhcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zQXJndW1lbnQpIDogY2xvbmVJZk5lY2Vzc2FyeShzb3VyY2UsIG9wdGlvbnNBcmd1bWVudClcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnNBcmd1bWVudClcbiAgICB9XG59XG5cbmRlZXBtZXJnZS5hbGwgPSBmdW5jdGlvbiBkZWVwbWVyZ2VBbGwoYXJyYXksIG9wdGlvbnNBcmd1bWVudCkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheSkgfHwgYXJyYXkubGVuZ3RoIDwgMikge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZpcnN0IGFyZ3VtZW50IHNob3VsZCBiZSBhbiBhcnJheSB3aXRoIGF0IGxlYXN0IHR3byBlbGVtZW50cycpXG4gICAgfVxuXG4gICAgLy8gd2UgYXJlIHN1cmUgdGhlcmUgYXJlIGF0IGxlYXN0IDIgdmFsdWVzLCBzbyBpdCBpcyBzYWZlIHRvIGhhdmUgbm8gaW5pdGlhbCB2YWx1ZVxuICAgIHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgbmV4dCkge1xuICAgICAgICByZXR1cm4gZGVlcG1lcmdlKHByZXYsIG5leHQsIG9wdGlvbnNBcmd1bWVudClcbiAgICB9KVxufTtcblxucmV0dXJuIGRlZXBtZXJnZVxuXG59KSk7XG59KTtcblxuLy8gICAgICBcbi8vIEFuIGV2ZW50IGhhbmRsZXIgY2FuIHRha2UgYW4gb3B0aW9uYWwgZXZlbnQgYXJndW1lbnRcbi8vIGFuZCBzaG91bGQgbm90IHJldHVybiBhIHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbi8vIEFuIGFycmF5IG9mIGFsbCBjdXJyZW50bHkgcmVnaXN0ZXJlZCBldmVudCBoYW5kbGVycyBmb3IgYSB0eXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuLy8gQSBtYXAgb2YgZXZlbnQgdHlwZXMgYW5kIHRoZWlyIGNvcnJlc3BvbmRpbmcgZXZlbnQgaGFuZGxlcnMuXG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gIFxuXG4vKiogTWl0dDogVGlueSAofjIwMGIpIGZ1bmN0aW9uYWwgZXZlbnQgZW1pdHRlciAvIHB1YnN1Yi5cbiAqICBAbmFtZSBtaXR0XG4gKiAgQHJldHVybnMge01pdHR9XG4gKi9cbmZ1bmN0aW9uIG1pdHQoYWxsICAgICAgICAgICAgICAgICApIHtcblx0YWxsID0gYWxsIHx8IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cblx0cmV0dXJuIHtcblx0XHQvKipcblx0XHQgKiBSZWdpc3RlciBhbiBldmVudCBoYW5kbGVyIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAge1N0cmluZ30gdHlwZVx0VHlwZSBvZiBldmVudCB0byBsaXN0ZW4gZm9yLCBvciBgXCIqXCJgIGZvciBhbGwgZXZlbnRzXG5cdFx0ICogQHBhcmFtICB7RnVuY3Rpb259IGhhbmRsZXIgRnVuY3Rpb24gdG8gY2FsbCBpbiByZXNwb25zZSB0byBnaXZlbiBldmVudFxuXHRcdCAqIEBtZW1iZXJPZiBtaXR0XG5cdFx0ICovXG5cdFx0b246IGZ1bmN0aW9uIG9uKHR5cGUgICAgICAgICwgaGFuZGxlciAgICAgICAgICAgICAgKSB7XG5cdFx0XHQoYWxsW3R5cGVdIHx8IChhbGxbdHlwZV0gPSBbXSkpLnB1c2goaGFuZGxlcik7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJlbW92ZSBhbiBldmVudCBoYW5kbGVyIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSAge1N0cmluZ30gdHlwZVx0VHlwZSBvZiBldmVudCB0byB1bnJlZ2lzdGVyIGBoYW5kbGVyYCBmcm9tLCBvciBgXCIqXCJgXG5cdFx0ICogQHBhcmFtICB7RnVuY3Rpb259IGhhbmRsZXIgSGFuZGxlciBmdW5jdGlvbiB0byByZW1vdmVcblx0XHQgKiBAbWVtYmVyT2YgbWl0dFxuXHRcdCAqL1xuXHRcdG9mZjogZnVuY3Rpb24gb2ZmKHR5cGUgICAgICAgICwgaGFuZGxlciAgICAgICAgICAgICAgKSB7XG5cdFx0XHRpZiAoYWxsW3R5cGVdKSB7XG5cdFx0XHRcdGFsbFt0eXBlXS5zcGxpY2UoYWxsW3R5cGVdLmluZGV4T2YoaGFuZGxlcikgPj4+IDAsIDEpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBJbnZva2UgYWxsIGhhbmRsZXJzIGZvciB0aGUgZ2l2ZW4gdHlwZS5cblx0XHQgKiBJZiBwcmVzZW50LCBgXCIqXCJgIGhhbmRsZXJzIGFyZSBpbnZva2VkIGFmdGVyIHR5cGUtbWF0Y2hlZCBoYW5kbGVycy5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlICBUaGUgZXZlbnQgdHlwZSB0byBpbnZva2Vcblx0XHQgKiBAcGFyYW0ge0FueX0gW2V2dF0gIEFueSB2YWx1ZSAob2JqZWN0IGlzIHJlY29tbWVuZGVkIGFuZCBwb3dlcmZ1bCksIHBhc3NlZCB0byBlYWNoIGhhbmRsZXJcblx0XHQgKiBAbWVtYmVyb2YgbWl0dFxuXHRcdCAqL1xuXHRcdGVtaXQ6IGZ1bmN0aW9uIGVtaXQodHlwZSAgICAgICAgLCBldnQgICAgICkge1xuXHRcdFx0KGFsbFt0eXBlXSB8fCBbXSkubWFwKGZ1bmN0aW9uIChoYW5kbGVyKSB7IGhhbmRsZXIoZXZ0KTsgfSk7XG5cdFx0XHQoYWxsWycqJ10gfHwgW10pLm1hcChmdW5jdGlvbiAoaGFuZGxlcikgeyBoYW5kbGVyKHR5cGUsIGV2dCk7IH0pO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIG5hbWVzcGFjZXNfMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUsIGV4cG9ydHMpIHtcbnZhciBuYW1lc3BhY2VzID0ge1xuICBzdmc6IHtcbiAgICBuYW1lOiAneG1sbnMnLFxuICAgIHVyaTogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJ1xuICB9LFxuICB4bGluazoge1xuICAgIG5hbWU6ICd4bWxuczp4bGluaycsXG4gICAgdXJpOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluaydcbiAgfVxufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gbmFtZXNwYWNlcztcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cy5kZWZhdWx0O1xufSk7XG5cbi8qKlxuICogQHBhcmFtIHtPYmplY3R9IGF0dHJzXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnZhciBvYmplY3RUb0F0dHJzU3RyaW5nID0gZnVuY3Rpb24gKGF0dHJzKSB7XG4gIHJldHVybiBPYmplY3Qua2V5cyhhdHRycykubWFwKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgdmFyIHZhbHVlID0gYXR0cnNbYXR0cl0udG9TdHJpbmcoKS5yZXBsYWNlKC9cIi9nLCAnJnF1b3Q7Jyk7XG4gICAgcmV0dXJuIChhdHRyICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIik7XG4gIH0pLmpvaW4oJyAnKTtcbn07XG5cbnZhciBzdmcgPSBuYW1lc3BhY2VzXzEuc3ZnO1xudmFyIHhsaW5rID0gbmFtZXNwYWNlc18xLnhsaW5rO1xuXG52YXIgZGVmYXVsdEF0dHJzID0ge307XG5kZWZhdWx0QXR0cnNbc3ZnLm5hbWVdID0gc3ZnLnVyaTtcbmRlZmF1bHRBdHRyc1t4bGluay5uYW1lXSA9IHhsaW5rLnVyaTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvbnRlbnRdXG4gKiBAcGFyYW0ge09iamVjdH0gW2F0dHJpYnV0ZXNdXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnZhciB3cmFwSW5TdmdTdHJpbmcgPSBmdW5jdGlvbiAoY29udGVudCwgYXR0cmlidXRlcykge1xuICBpZiAoIGNvbnRlbnQgPT09IHZvaWQgMCApIGNvbnRlbnQgPSAnJztcblxuICB2YXIgYXR0cnMgPSBkZWVwbWVyZ2UoZGVmYXVsdEF0dHJzLCBhdHRyaWJ1dGVzIHx8IHt9KTtcbiAgdmFyIGF0dHJzUmVuZGVyZWQgPSBvYmplY3RUb0F0dHJzU3RyaW5nKGF0dHJzKTtcbiAgcmV0dXJuIChcIjxzdmcgXCIgKyBhdHRyc1JlbmRlcmVkICsgXCI+XCIgKyBjb250ZW50ICsgXCI8L3N2Zz5cIik7XG59O1xuXG52YXIgc3ZnJDEgPSBuYW1lc3BhY2VzXzEuc3ZnO1xudmFyIHhsaW5rJDEgPSBuYW1lc3BhY2VzXzEueGxpbms7XG5cbnZhciBkZWZhdWx0Q29uZmlnID0ge1xuICBhdHRyczogKCBvYmogPSB7XG4gICAgc3R5bGU6IFsncG9zaXRpb246IGFic29sdXRlJywgJ3dpZHRoOiAwJywgJ2hlaWdodDogMCddLmpvaW4oJzsgJyksXG4gICAgJ2FyaWEtaGlkZGVuJzogJ3RydWUnXG4gIH0sIG9ialtzdmckMS5uYW1lXSA9IHN2ZyQxLnVyaSwgb2JqW3hsaW5rJDEubmFtZV0gPSB4bGluayQxLnVyaSwgb2JqIClcbn07XG52YXIgb2JqO1xuXG52YXIgU3ByaXRlID0gZnVuY3Rpb24gU3ByaXRlKGNvbmZpZykge1xuICB0aGlzLmNvbmZpZyA9IGRlZXBtZXJnZShkZWZhdWx0Q29uZmlnLCBjb25maWcgfHwge30pO1xuICB0aGlzLnN5bWJvbHMgPSBbXTtcbn07XG5cbi8qKlxuICogQWRkIG5ldyBzeW1ib2wuIElmIHN5bWJvbCB3aXRoIHRoZSBzYW1lIGlkIGV4aXN0cyBpdCB3aWxsIGJlIHJlcGxhY2VkLlxuICogQHBhcmFtIHtTcHJpdGVTeW1ib2x9IHN5bWJvbFxuICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIC0gc3ltYm9sIHdhcyBhZGRlZCwgYGZhbHNlYCAtIHJlcGxhY2VkXG4gKi9cblNwcml0ZS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gYWRkIChzeW1ib2wpIHtcbiAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIHN5bWJvbHMgPSByZWYuc3ltYm9scztcbiAgdmFyIGV4aXN0aW5nID0gdGhpcy5maW5kKHN5bWJvbC5pZCk7XG5cbiAgaWYgKGV4aXN0aW5nKSB7XG4gICAgc3ltYm9sc1tzeW1ib2xzLmluZGV4T2YoZXhpc3RpbmcpXSA9IHN5bWJvbDtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzeW1ib2xzLnB1c2goc3ltYm9sKTtcbiAgcmV0dXJuIHRydWU7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBzeW1ib2wgJiBkZXN0cm95IGl0XG4gKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCAtIHN5bWJvbCB3YXMgZm91bmQgJiBzdWNjZXNzZnVsbHkgZGVzdHJveWVkLCBgZmFsc2VgIC0gb3RoZXJ3aXNlXG4gKi9cblNwcml0ZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gcmVtb3ZlIChpZCkge1xuICB2YXIgcmVmID0gdGhpcztcbiAgICB2YXIgc3ltYm9scyA9IHJlZi5zeW1ib2xzO1xuICB2YXIgc3ltYm9sID0gdGhpcy5maW5kKGlkKTtcblxuICBpZiAoc3ltYm9sKSB7XG4gICAgc3ltYm9scy5zcGxpY2Uoc3ltYm9scy5pbmRleE9mKHN5bWJvbCksIDEpO1xuICAgIHN5bWJvbC5kZXN0cm95KCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59O1xuXG4vKipcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICogQHJldHVybiB7U3ByaXRlU3ltYm9sfG51bGx9XG4gKi9cblNwcml0ZS5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uIGZpbmQgKGlkKSB7XG4gIHJldHVybiB0aGlzLnN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLmlkID09PSBpZDsgfSlbMF0gfHwgbnVsbDtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGlkXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICovXG5TcHJpdGUucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAoaWQpIHtcbiAgcmV0dXJuIHRoaXMuZmluZChpZCkgIT09IG51bGw7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuU3ByaXRlLnByb3RvdHlwZS5zdHJpbmdpZnkgPSBmdW5jdGlvbiBzdHJpbmdpZnkgKCkge1xuICB2YXIgcmVmID0gdGhpcy5jb25maWc7XG4gICAgdmFyIGF0dHJzID0gcmVmLmF0dHJzO1xuICB2YXIgc3RyaW5naWZpZWRTeW1ib2xzID0gdGhpcy5zeW1ib2xzLm1hcChmdW5jdGlvbiAocykgeyByZXR1cm4gcy5zdHJpbmdpZnkoKTsgfSkuam9pbignJyk7XG4gIHJldHVybiB3cmFwSW5TdmdTdHJpbmcoc3RyaW5naWZpZWRTeW1ib2xzLCBhdHRycyk7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuU3ByaXRlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgcmV0dXJuIHRoaXMuc3RyaW5naWZ5KCk7XG59O1xuXG5TcHJpdGUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiBkZXN0cm95ICgpIHtcbiAgdGhpcy5zeW1ib2xzLmZvckVhY2goZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuZGVzdHJveSgpOyB9KTtcbn07XG5cbnZhciBTcHJpdGVTeW1ib2wgPSBmdW5jdGlvbiBTcHJpdGVTeW1ib2wocmVmKSB7XG4gIHZhciBpZCA9IHJlZi5pZDtcbiAgdmFyIHZpZXdCb3ggPSByZWYudmlld0JveDtcbiAgdmFyIGNvbnRlbnQgPSByZWYuY29udGVudDtcblxuICB0aGlzLmlkID0gaWQ7XG4gIHRoaXMudmlld0JveCA9IHZpZXdCb3g7XG4gIHRoaXMuY29udGVudCA9IGNvbnRlbnQ7XG59O1xuXG4vKipcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuU3ByaXRlU3ltYm9sLnByb3RvdHlwZS5zdHJpbmdpZnkgPSBmdW5jdGlvbiBzdHJpbmdpZnkgKCkge1xuICByZXR1cm4gdGhpcy5jb250ZW50O1xufTtcblxuLyoqXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cblNwcml0ZVN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHJldHVybiB0aGlzLnN0cmluZ2lmeSgpO1xufTtcblxuU3ByaXRlU3ltYm9sLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgWydpZCcsICd2aWV3Qm94JywgJ2NvbnRlbnQnXS5mb3JFYWNoKGZ1bmN0aW9uIChwcm9wKSB7IHJldHVybiBkZWxldGUgdGhpcyQxW3Byb3BdOyB9KTtcbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbnZhciBwYXJzZSA9IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gIHZhciBoYXNJbXBvcnROb2RlID0gISFkb2N1bWVudC5pbXBvcnROb2RlO1xuICB2YXIgZG9jID0gbmV3IERPTVBhcnNlcigpLnBhcnNlRnJvbVN0cmluZyhjb250ZW50LCAnaW1hZ2Uvc3ZnK3htbCcpLmRvY3VtZW50RWxlbWVudDtcblxuICAvKipcbiAgICogRml4IGZvciBicm93c2VyIHdoaWNoIGFyZSB0aHJvd2luZyBXcm9uZ0RvY3VtZW50RXJyb3JcbiAgICogaWYgeW91IGluc2VydCBhbiBlbGVtZW50IHdoaWNoIGlzIG5vdCBwYXJ0IG9mIHRoZSBkb2N1bWVudFxuICAgKiBAc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzc5ODY1MTkvNDYyNDQwM1xuICAgKi9cbiAgaWYgKGhhc0ltcG9ydE5vZGUpIHtcbiAgICByZXR1cm4gZG9jdW1lbnQuaW1wb3J0Tm9kZShkb2MsIHRydWUpO1xuICB9XG5cbiAgcmV0dXJuIGRvYztcbn07XG5cbnZhciBCcm93c2VyU3ByaXRlU3ltYm9sID0gKGZ1bmN0aW9uIChTcHJpdGVTeW1ib2wkJDEpIHtcbiAgZnVuY3Rpb24gQnJvd3NlclNwcml0ZVN5bWJvbCAoKSB7XG4gICAgU3ByaXRlU3ltYm9sJCQxLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICBpZiAoIFNwcml0ZVN5bWJvbCQkMSApIEJyb3dzZXJTcHJpdGVTeW1ib2wuX19wcm90b19fID0gU3ByaXRlU3ltYm9sJCQxO1xuICBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoIFNwcml0ZVN5bWJvbCQkMSAmJiBTcHJpdGVTeW1ib2wkJDEucHJvdG90eXBlICk7XG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gQnJvd3NlclNwcml0ZVN5bWJvbDtcblxuICB2YXIgcHJvdG90eXBlQWNjZXNzb3JzID0geyBpc01vdW50ZWQ6IHt9IH07XG5cbiAgcHJvdG90eXBlQWNjZXNzb3JzLmlzTW91bnRlZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5ub2RlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAgICogQHJldHVybiB7QnJvd3NlclNwcml0ZVN5bWJvbH1cbiAgICovXG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wuY3JlYXRlRnJvbUV4aXN0aW5nTm9kZSA9IGZ1bmN0aW9uIGNyZWF0ZUZyb21FeGlzdGluZ05vZGUgKG5vZGUpIHtcbiAgICByZXR1cm4gbmV3IEJyb3dzZXJTcHJpdGVTeW1ib2woe1xuICAgICAgaWQ6IG5vZGUuZ2V0QXR0cmlidXRlKCdpZCcpLFxuICAgICAgdmlld0JveDogbm9kZS5nZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnKSxcbiAgICAgIGNvbnRlbnQ6IG5vZGUub3V0ZXJIVE1MXG4gICAgfSk7XG4gIH07XG5cbiAgQnJvd3NlclNwcml0ZVN5bWJvbC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICAgIGlmICh0aGlzLmlzTW91bnRlZCkge1xuICAgICAgdGhpcy51bm1vdW50KCk7XG4gICAgfVxuICAgIFNwcml0ZVN5bWJvbCQkMS5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBAcGFyYW0ge0VsZW1lbnR8c3RyaW5nfSB0YXJnZXRcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICovXG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLm1vdW50ID0gZnVuY3Rpb24gbW91bnQgKHRhcmdldCkge1xuICAgIGlmICh0aGlzLmlzTW91bnRlZCkge1xuICAgICAgcmV0dXJuIHRoaXMubm9kZTtcbiAgICB9XG5cbiAgICB2YXIgbW91bnRUYXJnZXQgPSB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KSA6IHRhcmdldDtcbiAgICB2YXIgbm9kZSA9IHRoaXMucmVuZGVyKCk7XG4gICAgdGhpcy5ub2RlID0gbm9kZTtcblxuICAgIG1vdW50VGFyZ2V0LmFwcGVuZENoaWxkKG5vZGUpO1xuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgLyoqXG4gICAqIEByZXR1cm4ge0VsZW1lbnR9XG4gICAqL1xuICBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIgKCkge1xuICAgIHZhciBjb250ZW50ID0gdGhpcy5zdHJpbmdpZnkoKTtcbiAgICByZXR1cm4gcGFyc2Uod3JhcEluU3ZnU3RyaW5nKGNvbnRlbnQpKS5jaGlsZE5vZGVzWzBdO1xuICB9O1xuXG4gIEJyb3dzZXJTcHJpdGVTeW1ib2wucHJvdG90eXBlLnVubW91bnQgPSBmdW5jdGlvbiB1bm1vdW50ICgpIHtcbiAgICB0aGlzLm5vZGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLm5vZGUpO1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBCcm93c2VyU3ByaXRlU3ltYm9sLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgcmV0dXJuIEJyb3dzZXJTcHJpdGVTeW1ib2w7XG59KFNwcml0ZVN5bWJvbCkpO1xuXG52YXIgZGVmYXVsdENvbmZpZyQxID0ge1xuICAvKipcbiAgICogU2hvdWxkIGZvbGxvd2luZyBvcHRpb25zIGJlIGF1dG9tYXRpY2FsbHkgY29uZmlndXJlZDpcbiAgICogLSBgc3luY1VybHNXaXRoQmFzZVRhZ2BcbiAgICogLSBgbG9jYXRpb25DaGFuZ2VBbmd1bGFyRW1pdHRlcmBcbiAgICogLSBgbW92ZUdyYWRpZW50c091dHNpZGVTeW1ib2xgXG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgYXV0b0NvbmZpZ3VyZTogdHJ1ZSxcblxuICAvKipcbiAgICogRGVmYXVsdCBtb3VudGluZyBzZWxlY3RvclxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgbW91bnRUbzogJ2JvZHknLFxuXG4gIC8qKlxuICAgKiBGaXggZGlzYXBwZWFyaW5nIFNWRyBlbGVtZW50cyB3aGVuIDxiYXNlIGhyZWY+IGV4aXN0cy5cbiAgICogRXhlY3V0ZXMgd2hlbiBzcHJpdGUgbW91bnRlZC5cbiAgICogQHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xODI2NTMzNi83OTYxNTJcbiAgICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZXZlcmRpbWVuc2lvbi9hbmd1bGFyLXN2Zy1iYXNlLWZpeFxuICAgKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIuanMvaXNzdWVzLzg5MzQjaXNzdWVjb21tZW50LTU2NTY4NDY2XG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgc3luY1VybHNXaXRoQmFzZVRhZzogZmFsc2UsXG5cbiAgLyoqXG4gICAqIFNob3VsZCBzcHJpdGUgbGlzdGVuIGN1c3RvbSBsb2NhdGlvbiBjaGFuZ2UgZXZlbnRcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBsaXN0ZW5Mb2NhdGlvbkNoYW5nZUV2ZW50OiB0cnVlLFxuXG4gIC8qKlxuICAgKiBDdXN0b20gd2luZG93IGV2ZW50IG5hbWUgd2hpY2ggc2hvdWxkIGJlIGVtaXR0ZWQgdG8gdXBkYXRlIHNwcml0ZSB1cmxzXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICBsb2NhdGlvbkNoYW5nZUV2ZW50OiAnbG9jYXRpb25DaGFuZ2UnLFxuXG4gIC8qKlxuICAgKiBFbWl0IGxvY2F0aW9uIGNoYW5nZSBldmVudCBpbiBBbmd1bGFyIGF1dG9tYXRpY2FsbHlcbiAgICogQHR5cGUge2Jvb2xlYW59XG4gICAqL1xuICBsb2NhdGlvbkNoYW5nZUFuZ3VsYXJFbWl0dGVyOiBmYWxzZSxcblxuICAvKipcbiAgICogU2VsZWN0b3IgdG8gZmluZCBzeW1ib2xzIHVzYWdlcyB3aGVuIHVwZGF0aW5nIHNwcml0ZSB1cmxzXG4gICAqIEB0eXBlIHtzdHJpbmd9XG4gICAqL1xuICB1c2FnZXNUb1VwZGF0ZTogJ3VzZVsqfGhyZWZdJyxcblxuICAvKipcbiAgICogRml4IEZpcmVmb3ggYnVnIHdoZW4gZ3JhZGllbnRzIGFuZCBwYXR0ZXJucyBkb24ndCB3b3JrIGlmIHRoZXkgYXJlIHdpdGhpbiBhIHN5bWJvbC5cbiAgICogRXhlY3V0ZXMgd2hlbiBzcHJpdGUgaXMgcmVuZGVyZWQsIGJ1dCBub3QgbW91bnRlZC5cbiAgICogQHNlZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0zMDY2NzRcbiAgICogQHNlZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0zNTM1NzVcbiAgICogQHNlZSBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMjM1MzY0XG4gICAqIEB0eXBlIHtib29sZWFufVxuICAgKi9cbiAgbW92ZUdyYWRpZW50c091dHNpZGVTeW1ib2w6IGZhbHNlXG59O1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gYXJyYXlMaWtlXG4gKiBAcmV0dXJuIHtBcnJheX1cbiAqL1xudmFyIGFycmF5RnJvbSA9IGZ1bmN0aW9uIChhcnJheUxpa2UpIHtcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFycmF5TGlrZSwgMCk7XG59O1xuXG52YXIgYnJvd3NlciA9IHtcbiAgaXNDaHJvbWU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIC9jaHJvbWUvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpOyB9LFxuICBpc0ZpcmVmb3g6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIC9maXJlZm94L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsgfSxcblxuICAvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L21zNTM3NTAzKHY9dnMuODUpLmFzcHhcbiAgaXNJRTogZnVuY3Rpb24gKCkgeyByZXR1cm4gL21zaWUvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpIHx8IC90cmlkZW50L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTsgfSxcbiAgaXNFZGdlOiBmdW5jdGlvbiAoKSB7IHJldHVybiAvZWRnZS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7IH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7Kn0gZGF0YVxuICovXG52YXIgZGlzcGF0Y2hFdmVudCA9IGZ1bmN0aW9uIChuYW1lLCBkYXRhKSB7XG4gIHZhciBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICBldmVudC5pbml0Q3VzdG9tRXZlbnQobmFtZSwgZmFsc2UsIGZhbHNlLCBkYXRhKTtcbiAgd2luZG93LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xufTtcblxuLyoqXG4gKiBJRSBkb2Vzbid0IGV2YWx1YXRlIDxzdHlsZT4gdGFncyBpbiBTVkdzIHRoYXQgYXJlIGR5bmFtaWNhbGx5IGFkZGVkIHRvIHRoZSBwYWdlLlxuICogVGhpcyB0cmljayB3aWxsIHRyaWdnZXIgSUUgdG8gcmVhZCBhbmQgdXNlIGFueSBleGlzdGluZyBTVkcgPHN0eWxlPiB0YWdzLlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vaWNvbmljL1NWR0luamVjdG9yL2lzc3Vlcy8yM1xuICogQHNlZSBodHRwczovL2RldmVsb3Blci5taWNyb3NvZnQuY29tL2VuLXVzL21pY3Jvc29mdC1lZGdlL3BsYXRmb3JtL2lzc3Vlcy8xMDg5ODQ2OS9cbiAqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGUgRE9NIEVsZW1lbnQgdG8gc2VhcmNoIDxzdHlsZT4gdGFncyBpblxuICogQHJldHVybiB7QXJyYXk8SFRNTFN0eWxlRWxlbWVudD59XG4gKi9cbnZhciBldmFsU3R5bGVzSUVXb3JrYXJvdW5kID0gZnVuY3Rpb24gKG5vZGUpIHtcbiAgdmFyIHVwZGF0ZWROb2RlcyA9IFtdO1xuXG4gIGFycmF5RnJvbShub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlJykpXG4gICAgLmZvckVhY2goZnVuY3Rpb24gKHN0eWxlKSB7XG4gICAgICBzdHlsZS50ZXh0Q29udGVudCArPSAnJztcbiAgICAgIHVwZGF0ZWROb2Rlcy5wdXNoKHN0eWxlKTtcbiAgICB9KTtcblxuICByZXR1cm4gdXBkYXRlZE5vZGVzO1xufTtcblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gW3VybF0gSWYgbm90IHByb3ZpZGVkIC0gY3VycmVudCBVUkwgd2lsbCBiZSB1c2VkXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbnZhciBnZXRVcmxXaXRob3V0RnJhZ21lbnQgPSBmdW5jdGlvbiAodXJsKSB7XG4gIHJldHVybiAodXJsIHx8IHdpbmRvdy5sb2NhdGlvbi5ocmVmKS5zcGxpdCgnIycpWzBdO1xufTtcblxuLyogZ2xvYmFsIGFuZ3VsYXIgKi9cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50TmFtZVxuICovXG52YXIgbG9jYXRpb25DaGFuZ2VBbmd1bGFyRW1pdHRlciA9IGZ1bmN0aW9uIChldmVudE5hbWUpIHtcbiAgYW5ndWxhci5tb2R1bGUoJ25nJykucnVuKFsnJHJvb3RTY29wZScsIGZ1bmN0aW9uICgkcm9vdFNjb3BlKSB7XG4gICAgJHJvb3RTY29wZS4kb24oJyRsb2NhdGlvbkNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbiAoZSwgbmV3VXJsLCBvbGRVcmwpIHtcbiAgICAgIGRpc3BhdGNoRXZlbnQoZXZlbnROYW1lLCB7IG9sZFVybDogb2xkVXJsLCBuZXdVcmw6IG5ld1VybCB9KTtcbiAgICB9KTtcbiAgfV0pO1xufTtcblxudmFyIGRlZmF1bHRTZWxlY3RvciA9ICdsaW5lYXJHcmFkaWVudCwgcmFkaWFsR3JhZGllbnQsIHBhdHRlcm4sIG1hc2ssIGNsaXBQYXRoJztcblxuLyoqXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHN2Z1xuICogQHBhcmFtIHtzdHJpbmd9IFtzZWxlY3Rvcl1cbiAqIEByZXR1cm4ge0VsZW1lbnR9XG4gKi9cbnZhciBtb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbCA9IGZ1bmN0aW9uIChzdmcsIHNlbGVjdG9yKSB7XG4gIGlmICggc2VsZWN0b3IgPT09IHZvaWQgMCApIHNlbGVjdG9yID0gZGVmYXVsdFNlbGVjdG9yO1xuXG4gIGFycmF5RnJvbShzdmcucXVlcnlTZWxlY3RvckFsbCgnc3ltYm9sJykpLmZvckVhY2goZnVuY3Rpb24gKHN5bWJvbCkge1xuICAgIGFycmF5RnJvbShzeW1ib2wucXVlcnlTZWxlY3RvckFsbChzZWxlY3RvcikpLmZvckVhY2goZnVuY3Rpb24gKG5vZGUpIHtcbiAgICAgIHN5bWJvbC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShub2RlLCBzeW1ib2wpO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHN2Zztcbn07XG5cbi8qKlxuICogQHBhcmFtIHtOb2RlTGlzdH0gbm9kZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFttYXRjaGVyXVxuICogQHJldHVybiB7QXR0cltdfVxuICovXG5mdW5jdGlvbiBzZWxlY3RBdHRyaWJ1dGVzKG5vZGVzLCBtYXRjaGVyKSB7XG4gIHZhciBhdHRycyA9IGFycmF5RnJvbShub2RlcykucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG5vZGUpIHtcbiAgICBpZiAoIW5vZGUuYXR0cmlidXRlcykge1xuICAgICAgcmV0dXJuIGFjYztcbiAgICB9XG5cbiAgICB2YXIgYXJyYXlmaWVkID0gYXJyYXlGcm9tKG5vZGUuYXR0cmlidXRlcyk7XG4gICAgdmFyIG1hdGNoZWQgPSBtYXRjaGVyID8gYXJyYXlmaWVkLmZpbHRlcihtYXRjaGVyKSA6IGFycmF5ZmllZDtcbiAgICByZXR1cm4gYWNjLmNvbmNhdChtYXRjaGVkKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiBhdHRycztcbn1cblxuLyoqXG4gKiBAcGFyYW0ge05vZGVMaXN0fE5vZGV9IG5vZGVzXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtjbG9uZT10cnVlXVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5cbnZhciB4TGlua05TID0gbmFtZXNwYWNlc18xLnhsaW5rLnVyaTtcbnZhciB4TGlua0F0dHJOYW1lID0gJ3hsaW5rOmhyZWYnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdXNlbGVzcy1lc2NhcGVcbnZhciBzcGVjaWFsVXJsQ2hhcnNQYXR0ZXJuID0gL1t7fXxcXFxcXFxeXFxbXFxdYFwiPD5dL2c7XG5cbmZ1bmN0aW9uIGVuY29kZXIodXJsKSB7XG4gIHJldHVybiB1cmwucmVwbGFjZShzcGVjaWFsVXJsQ2hhcnNQYXR0ZXJuLCBmdW5jdGlvbiAobWF0Y2gpIHtcbiAgICByZXR1cm4gKFwiJVwiICsgKG1hdGNoWzBdLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCkpKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGVzY2FwZVJlZ0V4cChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9bLiorP14ke30oKXxbXFxdXFxcXF0vZywgXCJcXFxcJCZcIik7IC8vICQmIG1lYW5zIHRoZSB3aG9sZSBtYXRjaGVkIHN0cmluZ1xufVxuXG4vKipcbiAqIEBwYXJhbSB7Tm9kZUxpc3R9IG5vZGVzXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RhcnRzV2l0aFxuICogQHBhcmFtIHtzdHJpbmd9IHJlcGxhY2VXaXRoXG4gKiBAcmV0dXJuIHtOb2RlTGlzdH1cbiAqL1xuZnVuY3Rpb24gdXBkYXRlUmVmZXJlbmNlcyhub2Rlcywgc3RhcnRzV2l0aCwgcmVwbGFjZVdpdGgpIHtcbiAgYXJyYXlGcm9tKG5vZGVzKS5mb3JFYWNoKGZ1bmN0aW9uIChub2RlKSB7XG4gICAgdmFyIGhyZWYgPSBub2RlLmdldEF0dHJpYnV0ZSh4TGlua0F0dHJOYW1lKTtcbiAgICBpZiAoaHJlZiAmJiBocmVmLmluZGV4T2Yoc3RhcnRzV2l0aCkgPT09IDApIHtcbiAgICAgIHZhciBuZXdVcmwgPSBocmVmLnJlcGxhY2Uoc3RhcnRzV2l0aCwgcmVwbGFjZVdpdGgpO1xuICAgICAgbm9kZS5zZXRBdHRyaWJ1dGVOUyh4TGlua05TLCB4TGlua0F0dHJOYW1lLCBuZXdVcmwpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG5vZGVzO1xufVxuXG4vKipcbiAqIExpc3Qgb2YgU1ZHIGF0dHJpYnV0ZXMgdG8gdXBkYXRlIHVybCgpIHRhcmdldCBpbiB0aGVtXG4gKi9cbnZhciBhdHRMaXN0ID0gW1xuICAnY2xpcFBhdGgnLFxuICAnY29sb3JQcm9maWxlJyxcbiAgJ3NyYycsXG4gICdjdXJzb3InLFxuICAnZmlsbCcsXG4gICdmaWx0ZXInLFxuICAnbWFya2VyJyxcbiAgJ21hcmtlclN0YXJ0JyxcbiAgJ21hcmtlck1pZCcsXG4gICdtYXJrZXJFbmQnLFxuICAnbWFzaycsXG4gICdzdHJva2UnLFxuICAnc3R5bGUnXG5dO1xuXG52YXIgYXR0U2VsZWN0b3IgPSBhdHRMaXN0Lm1hcChmdW5jdGlvbiAoYXR0cikgeyByZXR1cm4gKFwiW1wiICsgYXR0ciArIFwiXVwiKTsgfSkuam9pbignLCcpO1xuXG4vKipcbiAqIFVwZGF0ZSBVUkxzIGluIHN2ZyBpbWFnZSAobGlrZSBgZmlsbD1cInVybCguLi4pXCJgKSBhbmQgdXBkYXRlIHJlZmVyZW5jaW5nIGVsZW1lbnRzXG4gKiBAcGFyYW0ge0VsZW1lbnR9IHN2Z1xuICogQHBhcmFtIHtOb2RlTGlzdH0gcmVmZXJlbmNlc1xuICogQHBhcmFtIHtzdHJpbmd8UmVnRXhwfSBzdGFydHNXaXRoXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVwbGFjZVdpdGhcbiAqIEByZXR1cm4ge3ZvaWR9XG4gKlxuICogQGV4YW1wbGVcbiAqIGNvbnN0IHNwcml0ZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ3N2Zy5zcHJpdGUnKTtcbiAqIGNvbnN0IHVzYWdlcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3VzZScpO1xuICogdXBkYXRlVXJscyhzcHJpdGUsIHVzYWdlcywgJyMnLCAncHJlZml4IycpO1xuICovXG52YXIgdXBkYXRlVXJscyA9IGZ1bmN0aW9uIChzdmcsIHJlZmVyZW5jZXMsIHN0YXJ0c1dpdGgsIHJlcGxhY2VXaXRoKSB7XG4gIHZhciBzdGFydHNXaXRoRW5jb2RlZCA9IGVuY29kZXIoc3RhcnRzV2l0aCk7XG4gIHZhciByZXBsYWNlV2l0aEVuY29kZWQgPSBlbmNvZGVyKHJlcGxhY2VXaXRoKTtcblxuICB2YXIgbm9kZXMgPSBzdmcucXVlcnlTZWxlY3RvckFsbChhdHRTZWxlY3Rvcik7XG4gIHZhciBhdHRycyA9IHNlbGVjdEF0dHJpYnV0ZXMobm9kZXMsIGZ1bmN0aW9uIChyZWYpIHtcbiAgICB2YXIgbG9jYWxOYW1lID0gcmVmLmxvY2FsTmFtZTtcbiAgICB2YXIgdmFsdWUgPSByZWYudmFsdWU7XG5cbiAgICByZXR1cm4gYXR0TGlzdC5pbmRleE9mKGxvY2FsTmFtZSkgIT09IC0xICYmIHZhbHVlLmluZGV4T2YoKFwidXJsKFwiICsgc3RhcnRzV2l0aEVuY29kZWQpKSAhPT0gLTE7XG4gIH0pO1xuXG4gIGF0dHJzLmZvckVhY2goZnVuY3Rpb24gKGF0dHIpIHsgcmV0dXJuIGF0dHIudmFsdWUgPSBhdHRyLnZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChlc2NhcGVSZWdFeHAoc3RhcnRzV2l0aEVuY29kZWQpLCAnZycpLCByZXBsYWNlV2l0aEVuY29kZWQpOyB9KTtcbiAgdXBkYXRlUmVmZXJlbmNlcyhyZWZlcmVuY2VzLCBzdGFydHNXaXRoRW5jb2RlZCwgcmVwbGFjZVdpdGhFbmNvZGVkKTtcbn07XG5cbi8qKlxuICogSW50ZXJuYWwgZW1pdHRlciBldmVudHNcbiAqIEBlbnVtXG4gKiBAcHJpdmF0ZVxuICovXG52YXIgRXZlbnRzID0ge1xuICBNT1VOVDogJ21vdW50JyxcbiAgU1lNQk9MX01PVU5UOiAnc3ltYm9sX21vdW50J1xufTtcblxudmFyIEJyb3dzZXJTcHJpdGUgPSAoZnVuY3Rpb24gKFNwcml0ZSQkMSkge1xuICBmdW5jdGlvbiBCcm93c2VyU3ByaXRlKGNmZykge1xuICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuICAgIGlmICggY2ZnID09PSB2b2lkIDAgKSBjZmcgPSB7fTtcblxuICAgIFNwcml0ZSQkMS5jYWxsKHRoaXMsIGRlZXBtZXJnZShkZWZhdWx0Q29uZmlnJDEsIGNmZykpO1xuXG4gICAgdmFyIGVtaXR0ZXIgPSBtaXR0KCk7XG4gICAgdGhpcy5fZW1pdHRlciA9IGVtaXR0ZXI7XG4gICAgdGhpcy5ub2RlID0gbnVsbDtcblxuICAgIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBjb25maWcgPSByZWYuY29uZmlnO1xuXG4gICAgaWYgKGNvbmZpZy5hdXRvQ29uZmlndXJlKSB7XG4gICAgICB0aGlzLl9hdXRvQ29uZmlndXJlKGNmZyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbmZpZy5zeW5jVXJsc1dpdGhCYXNlVGFnKSB7XG4gICAgICB2YXIgYmFzZVVybCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdiYXNlJylbMF0uZ2V0QXR0cmlidXRlKCdocmVmJyk7XG4gICAgICBlbWl0dGVyLm9uKEV2ZW50cy5NT1VOVCwgZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyQxLnVwZGF0ZVVybHMoJyMnLCBiYXNlVXJsKTsgfSk7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZUxvY2F0aW9uQ2hhbmdlID0gdGhpcy5faGFuZGxlTG9jYXRpb25DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9oYW5kbGVMb2NhdGlvbkNoYW5nZSA9IGhhbmRsZUxvY2F0aW9uQ2hhbmdlO1xuXG4gICAgLy8gUHJvdmlkZSB3YXkgdG8gdXBkYXRlIHNwcml0ZSB1cmxzIGV4dGVybmFsbHkgdmlhIGRpc3BhdGNoaW5nIGN1c3RvbSB3aW5kb3cgZXZlbnRcbiAgICBpZiAoY29uZmlnLmxpc3RlbkxvY2F0aW9uQ2hhbmdlRXZlbnQpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKGNvbmZpZy5sb2NhdGlvbkNoYW5nZUV2ZW50LCBoYW5kbGVMb2NhdGlvbkNoYW5nZSk7XG4gICAgfVxuXG4gICAgLy8gRW1pdCBsb2NhdGlvbiBjaGFuZ2UgZXZlbnQgaW4gQW5ndWxhciBhdXRvbWF0aWNhbGx5XG4gICAgaWYgKGNvbmZpZy5sb2NhdGlvbkNoYW5nZUFuZ3VsYXJFbWl0dGVyKSB7XG4gICAgICBsb2NhdGlvbkNoYW5nZUFuZ3VsYXJFbWl0dGVyKGNvbmZpZy5sb2NhdGlvbkNoYW5nZUV2ZW50KTtcbiAgICB9XG5cbiAgICAvLyBBZnRlciBzcHJpdGUgbW91bnRlZFxuICAgIGVtaXR0ZXIub24oRXZlbnRzLk1PVU5ULCBmdW5jdGlvbiAoc3ByaXRlTm9kZSkge1xuICAgICAgaWYgKGNvbmZpZy5tb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbCkge1xuICAgICAgICBtb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbChzcHJpdGVOb2RlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIEFmdGVyIHN5bWJvbCBtb3VudGVkIGludG8gc3ByaXRlXG4gICAgZW1pdHRlci5vbihFdmVudHMuU1lNQk9MX01PVU5ULCBmdW5jdGlvbiAoc3ltYm9sTm9kZSkge1xuICAgICAgaWYgKGNvbmZpZy5tb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbCkge1xuICAgICAgICBtb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbChzeW1ib2xOb2RlLnBhcmVudE5vZGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYnJvd3Nlci5pc0lFKCkgfHwgYnJvd3Nlci5pc0VkZ2UoKSkge1xuICAgICAgICBldmFsU3R5bGVzSUVXb3JrYXJvdW5kKHN5bWJvbE5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKCBTcHJpdGUkJDEgKSBCcm93c2VyU3ByaXRlLl9fcHJvdG9fXyA9IFNwcml0ZSQkMTtcbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKCBTcHJpdGUkJDEgJiYgU3ByaXRlJCQxLnByb3RvdHlwZSApO1xuICBCcm93c2VyU3ByaXRlLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEJyb3dzZXJTcHJpdGU7XG5cbiAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgaXNNb3VudGVkOiB7fSB9O1xuXG4gIC8qKlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgcHJvdG90eXBlQWNjZXNzb3JzLmlzTW91bnRlZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICEhdGhpcy5ub2RlO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBdXRvbWF0aWNhbGx5IGNvbmZpZ3VyZSBmb2xsb3dpbmcgb3B0aW9uc1xuICAgKiAtIGBzeW5jVXJsc1dpdGhCYXNlVGFnYFxuICAgKiAtIGBsb2NhdGlvbkNoYW5nZUFuZ3VsYXJFbWl0dGVyYFxuICAgKiAtIGBtb3ZlR3JhZGllbnRzT3V0c2lkZVN5bWJvbGBcbiAgICogQHBhcmFtIHtPYmplY3R9IGNmZ1xuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUuX2F1dG9Db25maWd1cmUgPSBmdW5jdGlvbiBfYXV0b0NvbmZpZ3VyZSAoY2ZnKSB7XG4gICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgdmFyIGNvbmZpZyA9IHJlZi5jb25maWc7XG5cbiAgICBpZiAodHlwZW9mIGNmZy5zeW5jVXJsc1dpdGhCYXNlVGFnID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnLnN5bmNVcmxzV2l0aEJhc2VUYWcgPSB0eXBlb2YgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2Jhc2UnKVswXSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBjZmcubG9jYXRpb25DaGFuZ2VBbmd1bGFyRW1pdHRlciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY29uZmlnLmxvY2F0aW9uQ2hhbmdlQW5ndWxhckVtaXR0ZXIgPSB0eXBlb2Ygd2luZG93LmFuZ3VsYXIgIT09ICd1bmRlZmluZWQnO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2ZnLm1vdmVHcmFkaWVudHNPdXRzaWRlU3ltYm9sID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uZmlnLm1vdmVHcmFkaWVudHNPdXRzaWRlU3ltYm9sID0gYnJvd3Nlci5pc0ZpcmVmb3goKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7RXZlbnR9IGV2ZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudC5kZXRhaWxcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50LmRldGFpbC5vbGRVcmxcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50LmRldGFpbC5uZXdVcmxcbiAgICogQHByaXZhdGVcbiAgICovXG4gIEJyb3dzZXJTcHJpdGUucHJvdG90eXBlLl9oYW5kbGVMb2NhdGlvbkNoYW5nZSA9IGZ1bmN0aW9uIF9oYW5kbGVMb2NhdGlvbkNoYW5nZSAoZXZlbnQpIHtcbiAgICB2YXIgcmVmID0gZXZlbnQuZGV0YWlsO1xuICAgIHZhciBvbGRVcmwgPSByZWYub2xkVXJsO1xuICAgIHZhciBuZXdVcmwgPSByZWYubmV3VXJsO1xuICAgIHRoaXMudXBkYXRlVXJscyhvbGRVcmwsIG5ld1VybCk7XG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZCBuZXcgc3ltYm9sLiBJZiBzeW1ib2wgd2l0aCB0aGUgc2FtZSBpZCBleGlzdHMgaXQgd2lsbCBiZSByZXBsYWNlZC5cbiAgICogSWYgc3ByaXRlIGFscmVhZHkgbW91bnRlZCAtIGBzeW1ib2wubW91bnQoc3ByaXRlLm5vZGUpYCB3aWxsIGJlIGNhbGxlZC5cbiAgICogQGZpcmVzIEV2ZW50cyNTWU1CT0xfTU9VTlRcbiAgICogQHBhcmFtIHtCcm93c2VyU3ByaXRlU3ltYm9sfSBzeW1ib2xcbiAgICogQHJldHVybiB7Ym9vbGVhbn0gYHRydWVgIC0gc3ltYm9sIHdhcyBhZGRlZCwgYGZhbHNlYCAtIHJlcGxhY2VkXG4gICAqL1xuICBCcm93c2VyU3ByaXRlLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKHN5bWJvbCkge1xuICAgIHZhciBzcHJpdGUgPSB0aGlzO1xuICAgIHZhciBpc05ld1N5bWJvbCA9IFNwcml0ZSQkMS5wcm90b3R5cGUuYWRkLmNhbGwodGhpcywgc3ltYm9sKTtcblxuICAgIGlmICh0aGlzLmlzTW91bnRlZCAmJiBpc05ld1N5bWJvbCkge1xuICAgICAgc3ltYm9sLm1vdW50KHNwcml0ZS5ub2RlKTtcbiAgICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChFdmVudHMuU1lNQk9MX01PVU5ULCBzeW1ib2wubm9kZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGlzTmV3U3ltYm9sO1xuICB9O1xuXG4gIC8qKlxuICAgKiBBdHRhY2ggdG8gZXhpc3RpbmcgRE9NIG5vZGVcbiAgICogQHBhcmFtIHtzdHJpbmd8RWxlbWVudH0gdGFyZ2V0XG4gICAqIEByZXR1cm4ge0VsZW1lbnR8bnVsbH0gYXR0YWNoZWQgRE9NIEVsZW1lbnQuIG51bGwgaWYgbm9kZSB0byBhdHRhY2ggbm90IGZvdW5kLlxuICAgKi9cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUuYXR0YWNoID0gZnVuY3Rpb24gYXR0YWNoICh0YXJnZXQpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcblxuICAgIHZhciBzcHJpdGUgPSB0aGlzO1xuXG4gICAgaWYgKHNwcml0ZS5pc01vdW50ZWQpIHtcbiAgICAgIHJldHVybiBzcHJpdGUubm9kZTtcbiAgICB9XG5cbiAgICAvKiogQHR5cGUgRWxlbWVudCAqL1xuICAgIHZhciBub2RlID0gdHlwZW9mIHRhcmdldCA9PT0gJ3N0cmluZycgPyBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCkgOiB0YXJnZXQ7XG4gICAgc3ByaXRlLm5vZGUgPSBub2RlO1xuXG4gICAgLy8gQWxyZWFkeSBhZGRlZCBzeW1ib2xzIG5lZWRzIHRvIGJlIG1vdW50ZWRcbiAgICB0aGlzLnN5bWJvbHMuZm9yRWFjaChmdW5jdGlvbiAoc3ltYm9sKSB7XG4gICAgICBzeW1ib2wubW91bnQoc3ByaXRlLm5vZGUpO1xuICAgICAgdGhpcyQxLl9lbWl0dGVyLmVtaXQoRXZlbnRzLlNZTUJPTF9NT1VOVCwgc3ltYm9sLm5vZGUpO1xuICAgIH0pO1xuXG4gICAgLy8gQ3JlYXRlIHN5bWJvbHMgZnJvbSBleGlzdGluZyBET00gbm9kZXMsIGFkZCBhbmQgbW91bnQgdGhlbVxuICAgIGFycmF5RnJvbShub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoJ3N5bWJvbCcpKVxuICAgICAgLmZvckVhY2goZnVuY3Rpb24gKHN5bWJvbE5vZGUpIHtcbiAgICAgICAgdmFyIHN5bWJvbCA9IEJyb3dzZXJTcHJpdGVTeW1ib2wuY3JlYXRlRnJvbUV4aXN0aW5nTm9kZShzeW1ib2xOb2RlKTtcbiAgICAgICAgc3ltYm9sLm5vZGUgPSBzeW1ib2xOb2RlOyAvLyBoYWNrIHRvIHByZXZlbnQgc3ltYm9sIG1vdW50aW5nIHRvIHNwcml0ZSB3aGVuIGFkZGluZ1xuICAgICAgICBzcHJpdGUuYWRkKHN5bWJvbCk7XG4gICAgICB9KTtcblxuICAgIHRoaXMuX2VtaXR0ZXIuZW1pdChFdmVudHMuTU9VTlQsIG5vZGUpO1xuXG4gICAgcmV0dXJuIG5vZGU7XG4gIH07XG5cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uIGRlc3Ryb3kgKCkge1xuICAgIHZhciByZWYgPSB0aGlzO1xuICAgIHZhciBjb25maWcgPSByZWYuY29uZmlnO1xuICAgIHZhciBzeW1ib2xzID0gcmVmLnN5bWJvbHM7XG4gICAgdmFyIF9lbWl0dGVyID0gcmVmLl9lbWl0dGVyO1xuXG4gICAgc3ltYm9scy5mb3JFYWNoKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLmRlc3Ryb3koKTsgfSk7XG5cbiAgICBfZW1pdHRlci5vZmYoJyonKTtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihjb25maWcubG9jYXRpb25DaGFuZ2VFdmVudCwgdGhpcy5faGFuZGxlTG9jYXRpb25DaGFuZ2UpO1xuXG4gICAgaWYgKHRoaXMuaXNNb3VudGVkKSB7XG4gICAgICB0aGlzLnVubW91bnQoKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIEBmaXJlcyBFdmVudHMjTU9VTlRcbiAgICogQHBhcmFtIHtzdHJpbmd8RWxlbWVudH0gW3RhcmdldF1cbiAgICogQHBhcmFtIHtib29sZWFufSBbcHJlcGVuZD1mYWxzZV1cbiAgICogQHJldHVybiB7RWxlbWVudHxudWxsfSByZW5kZXJlZCBzcHJpdGUgbm9kZS4gbnVsbCBpZiBtb3VudCBub2RlIG5vdCBmb3VuZC5cbiAgICovXG4gIEJyb3dzZXJTcHJpdGUucHJvdG90eXBlLm1vdW50ID0gZnVuY3Rpb24gbW91bnQgKHRhcmdldCwgcHJlcGVuZCkge1xuICAgIGlmICggdGFyZ2V0ID09PSB2b2lkIDAgKSB0YXJnZXQgPSB0aGlzLmNvbmZpZy5tb3VudFRvO1xuICAgIGlmICggcHJlcGVuZCA9PT0gdm9pZCAwICkgcHJlcGVuZCA9IGZhbHNlO1xuXG4gICAgdmFyIHNwcml0ZSA9IHRoaXM7XG5cbiAgICBpZiAoc3ByaXRlLmlzTW91bnRlZCkge1xuICAgICAgcmV0dXJuIHNwcml0ZS5ub2RlO1xuICAgIH1cblxuICAgIHZhciBtb3VudE5vZGUgPSB0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KSA6IHRhcmdldDtcbiAgICB2YXIgbm9kZSA9IHNwcml0ZS5yZW5kZXIoKTtcbiAgICB0aGlzLm5vZGUgPSBub2RlO1xuXG4gICAgaWYgKHByZXBlbmQgJiYgbW91bnROb2RlLmNoaWxkTm9kZXNbMF0pIHtcbiAgICAgIG1vdW50Tm9kZS5pbnNlcnRCZWZvcmUobm9kZSwgbW91bnROb2RlLmNoaWxkTm9kZXNbMF0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBtb3VudE5vZGUuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgfVxuXG4gICAgdGhpcy5fZW1pdHRlci5lbWl0KEV2ZW50cy5NT1VOVCwgbm9kZSk7XG5cbiAgICByZXR1cm4gbm9kZTtcbiAgfTtcblxuICAvKipcbiAgICogQHJldHVybiB7RWxlbWVudH1cbiAgICovXG4gIEJyb3dzZXJTcHJpdGUucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlciAoKSB7XG4gICAgcmV0dXJuIHBhcnNlKHRoaXMuc3RyaW5naWZ5KCkpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEZXRhY2ggc3ByaXRlIGZyb20gdGhlIERPTVxuICAgKi9cbiAgQnJvd3NlclNwcml0ZS5wcm90b3R5cGUudW5tb3VudCA9IGZ1bmN0aW9uIHVubW91bnQgKCkge1xuICAgIHRoaXMubm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMubm9kZSk7XG4gIH07XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBVUkxzIGluIHNwcml0ZSBhbmQgdXNhZ2UgZWxlbWVudHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9sZFVybFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3VXJsXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59IGB0cnVlYCAtIFVSTHMgd2FzIHVwZGF0ZWQsIGBmYWxzZWAgLSBzcHJpdGUgaXMgbm90IG1vdW50ZWRcbiAgICovXG4gIEJyb3dzZXJTcHJpdGUucHJvdG90eXBlLnVwZGF0ZVVybHMgPSBmdW5jdGlvbiB1cGRhdGVVcmxzJDEgKG9sZFVybCwgbmV3VXJsKSB7XG4gICAgaWYgKCF0aGlzLmlzTW91bnRlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1c2FnZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKHRoaXMuY29uZmlnLnVzYWdlc1RvVXBkYXRlKTtcblxuICAgIHVwZGF0ZVVybHMoXG4gICAgICB0aGlzLm5vZGUsXG4gICAgICB1c2FnZXMsXG4gICAgICAoKGdldFVybFdpdGhvdXRGcmFnbWVudChvbGRVcmwpKSArIFwiI1wiKSxcbiAgICAgICgoZ2V0VXJsV2l0aG91dEZyYWdtZW50KG5ld1VybCkpICsgXCIjXCIpXG4gICAgKTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9O1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKCBCcm93c2VyU3ByaXRlLnByb3RvdHlwZSwgcHJvdG90eXBlQWNjZXNzb3JzICk7XG5cbiAgcmV0dXJuIEJyb3dzZXJTcHJpdGU7XG59KFNwcml0ZSkpO1xuXG52YXIgcmVhZHkkMSA9IGNyZWF0ZUNvbW1vbmpzTW9kdWxlKGZ1bmN0aW9uIChtb2R1bGUpIHtcbi8qIVxuICAqIGRvbXJlYWR5IChjKSBEdXN0aW4gRGlheiAyMDE0IC0gTGljZW5zZSBNSVRcbiAgKi9cbiFmdW5jdGlvbiAobmFtZSwgZGVmaW5pdGlvbikge1xuXG4gIHsgbW9kdWxlLmV4cG9ydHMgPSBkZWZpbml0aW9uKCk7IH1cblxufSgnZG9tcmVhZHknLCBmdW5jdGlvbiAoKSB7XG5cbiAgdmFyIGZucyA9IFtdLCBsaXN0ZW5lclxuICAgICwgZG9jID0gZG9jdW1lbnRcbiAgICAsIGhhY2sgPSBkb2MuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsXG4gICAgLCBkb21Db250ZW50TG9hZGVkID0gJ0RPTUNvbnRlbnRMb2FkZWQnXG4gICAgLCBsb2FkZWQgPSAoaGFjayA/IC9ebG9hZGVkfF5jLyA6IC9ebG9hZGVkfF5pfF5jLykudGVzdChkb2MucmVhZHlTdGF0ZSk7XG5cblxuICBpZiAoIWxvYWRlZClcbiAgeyBkb2MuYWRkRXZlbnRMaXN0ZW5lcihkb21Db250ZW50TG9hZGVkLCBsaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICBkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcihkb21Db250ZW50TG9hZGVkLCBsaXN0ZW5lcik7XG4gICAgbG9hZGVkID0gMTtcbiAgICB3aGlsZSAobGlzdGVuZXIgPSBmbnMuc2hpZnQoKSkgeyBsaXN0ZW5lcigpOyB9XG4gIH0pOyB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgIGxvYWRlZCA/IHNldFRpbWVvdXQoZm4sIDApIDogZm5zLnB1c2goZm4pO1xuICB9XG5cbn0pO1xufSk7XG5cbnZhciBzcHJpdGVOb2RlSWQgPSAnX19TVkdfU1BSSVRFX05PREVfXyc7XG52YXIgc3ByaXRlR2xvYmFsVmFyTmFtZSA9ICdfX1NWR19TUFJJVEVfXyc7XG52YXIgaXNTcHJpdGVFeGlzdHMgPSAhIXdpbmRvd1tzcHJpdGVHbG9iYWxWYXJOYW1lXTtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1tdXRhYmxlLWV4cG9ydHNcbnZhciBzcHJpdGU7XG5cbmlmIChpc1Nwcml0ZUV4aXN0cykge1xuICBzcHJpdGUgPSB3aW5kb3dbc3ByaXRlR2xvYmFsVmFyTmFtZV07XG59IGVsc2Uge1xuICBzcHJpdGUgPSBuZXcgQnJvd3NlclNwcml0ZSh7XG4gICAgYXR0cnM6IHtcbiAgICAgIGlkOiBzcHJpdGVOb2RlSWQsXG4gICAgICAnYXJpYS1oaWRkZW4nOiAndHJ1ZSdcbiAgICB9XG4gIH0pO1xuICB3aW5kb3dbc3ByaXRlR2xvYmFsVmFyTmFtZV0gPSBzcHJpdGU7XG59XG5cbnZhciBsb2FkU3ByaXRlID0gZnVuY3Rpb24gKCkge1xuICAvKipcbiAgICogQ2hlY2sgZm9yIHBhZ2UgYWxyZWFkeSBjb250YWlucyBzcHJpdGUgbm9kZVxuICAgKiBJZiBmb3VuZCAtIGF0dGFjaCB0byBhbmQgcmV1c2UgaXQncyBjb250ZW50XG4gICAqIElmIG5vdCAtIHJlbmRlciBhbmQgbW91bnQgdGhlIG5ldyBzcHJpdGVcbiAgICovXG4gIHZhciBleGlzdGluZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHNwcml0ZU5vZGVJZCk7XG5cbiAgaWYgKGV4aXN0aW5nKSB7XG4gICAgc3ByaXRlLmF0dGFjaChleGlzdGluZyk7XG4gIH0gZWxzZSB7XG4gICAgc3ByaXRlLm1vdW50KGRvY3VtZW50LmJvZHksIHRydWUpO1xuICB9XG59O1xuXG5pZiAoZG9jdW1lbnQuYm9keSkge1xuICBsb2FkU3ByaXRlKCk7XG59IGVsc2Uge1xuICByZWFkeSQxKGxvYWRTcHJpdGUpO1xufVxuXG52YXIgc3ByaXRlJDEgPSBzcHJpdGU7XG5cbnJldHVybiBzcHJpdGUkMTtcblxufSkpKTtcbiIsImxldCBpbXBvcnRBbGw9KHJlcXVpcmVDb250ZXh0OmFueSk9PiByZXF1aXJlQ29udGV4dC5rZXlzKCkuZm9yRWFjaChyZXF1aXJlQ29udGV4dCk7XHJcbnRyeSB7XHJcbiAgICBpbXBvcnRBbGwocmVxdWlyZS5jb250ZXh0KCcuLi9pY29ucycsdHJ1ZSwvXFwuc3ZnJC8pKVxyXG59IGNhdGNoIChlcnJvcil7XHJcblxyXG59IiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHtcbiAgX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59IiwiaW1wb3J0IHNldFByb3RvdHlwZU9mIGZyb20gXCIuL3NldFByb3RvdHlwZU9mLmpzXCI7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8sIGZyb20pIHtcbiAgaWYgKGZyb20gPT09IHVuZGVmaW5lZCkgZnJvbSA9ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gKHRvICYmIHRvLnNwbGl0KCcvJykpIHx8IFtdO1xuICB2YXIgZnJvbVBhcnRzID0gKGZyb20gJiYgZnJvbS5zcGxpdCgnLycpKSB8fCBbXTtcblxuICB2YXIgaXNUb0FicyA9IHRvICYmIGlzQWJzb2x1dGUodG8pO1xuICB2YXIgaXNGcm9tQWJzID0gZnJvbSAmJiBpc0Fic29sdXRlKGZyb20pO1xuICB2YXIgbXVzdEVuZEFicyA9IGlzVG9BYnMgfHwgaXNGcm9tQWJzO1xuXG4gIGlmICh0byAmJiBpc0Fic29sdXRlKHRvKSkge1xuICAgIC8vIHRvIGlzIGFic29sdXRlXG4gICAgZnJvbVBhcnRzID0gdG9QYXJ0cztcbiAgfSBlbHNlIGlmICh0b1BhcnRzLmxlbmd0aCkge1xuICAgIC8vIHRvIGlzIHJlbGF0aXZlLCBkcm9wIHRoZSBmaWxlbmFtZVxuICAgIGZyb21QYXJ0cy5wb3AoKTtcbiAgICBmcm9tUGFydHMgPSBmcm9tUGFydHMuY29uY2F0KHRvUGFydHMpO1xuICB9XG5cbiAgaWYgKCFmcm9tUGFydHMubGVuZ3RoKSByZXR1cm4gJy8nO1xuXG4gIHZhciBoYXNUcmFpbGluZ1NsYXNoO1xuICBpZiAoZnJvbVBhcnRzLmxlbmd0aCkge1xuICAgIHZhciBsYXN0ID0gZnJvbVBhcnRzW2Zyb21QYXJ0cy5sZW5ndGggLSAxXTtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gbGFzdCA9PT0gJy4nIHx8IGxhc3QgPT09ICcuLicgfHwgbGFzdCA9PT0gJyc7XG4gIH0gZWxzZSB7XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGZhbHNlO1xuICB9XG5cbiAgdmFyIHVwID0gMDtcbiAgZm9yICh2YXIgaSA9IGZyb21QYXJ0cy5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgdmFyIHBhcnQgPSBmcm9tUGFydHNbaV07XG5cbiAgICBpZiAocGFydCA9PT0gJy4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICB9IGVsc2UgaWYgKHBhcnQgPT09ICcuLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXArKztcbiAgICB9IGVsc2UgaWYgKHVwKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwLS07XG4gICAgfVxuICB9XG5cbiAgaWYgKCFtdXN0RW5kQWJzKSBmb3IgKDsgdXAtLTsgdXApIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuXG4gIGlmIChcbiAgICBtdXN0RW5kQWJzICYmXG4gICAgZnJvbVBhcnRzWzBdICE9PSAnJyAmJlxuICAgICghZnJvbVBhcnRzWzBdIHx8ICFpc0Fic29sdXRlKGZyb21QYXJ0c1swXSkpXG4gIClcbiAgICBmcm9tUGFydHMudW5zaGlmdCgnJyk7XG5cbiAgdmFyIHJlc3VsdCA9IGZyb21QYXJ0cy5qb2luKCcvJyk7XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgcmVzdWx0LnN1YnN0cigtMSkgIT09ICcvJykgcmVzdWx0ICs9ICcvJztcblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCByZXNvbHZlUGF0aG5hbWU7XG4iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHZhciBwcm92aWRlZCA9IHR5cGVvZiBtZXNzYWdlID09PSAnZnVuY3Rpb24nID8gbWVzc2FnZSgpIDogbWVzc2FnZTtcbiAgICB2YXIgdmFsdWUgPSBwcm92aWRlZCA/IHByZWZpeCArIFwiOiBcIiArIHByb3ZpZGVkIDogcHJlZml4O1xuICAgIHRocm93IG5ldyBFcnJvcih2YWx1ZSk7XG59XG5cbmV4cG9ydCB7IGludmFyaWFudCBhcyBkZWZhdWx0IH07XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgX2luaGVyaXRzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vaW5oZXJpdHNMb29zZSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcblxudmFyIE1BWF9TSUdORURfMzFfQklUX0lOVCA9IDEwNzM3NDE4MjM7XG52YXIgY29tbW9uanNHbG9iYWwgPSB0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgPyBnbG9iYWxUaGlzIDogdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgPyB3aW5kb3cgOiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHt9O1xuXG5mdW5jdGlvbiBnZXRVbmlxdWVJZCgpIHtcbiAgdmFyIGtleSA9ICdfX2dsb2JhbF91bmlxdWVfaWRfXyc7XG4gIHJldHVybiBjb21tb25qc0dsb2JhbFtrZXldID0gKGNvbW1vbmpzR2xvYmFsW2tleV0gfHwgMCkgKyAxO1xufVxuXG5mdW5jdGlvbiBvYmplY3RJcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRXZlbnRFbWl0dGVyKHZhbHVlKSB7XG4gIHZhciBoYW5kbGVycyA9IFtdO1xuICByZXR1cm4ge1xuICAgIG9uOiBmdW5jdGlvbiBvbihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycy5wdXNoKGhhbmRsZXIpO1xuICAgIH0sXG4gICAgb2ZmOiBmdW5jdGlvbiBvZmYoaGFuZGxlcikge1xuICAgICAgaGFuZGxlcnMgPSBoYW5kbGVycy5maWx0ZXIoZnVuY3Rpb24gKGgpIHtcbiAgICAgICAgcmV0dXJuIGggIT09IGhhbmRsZXI7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiBzZXQobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICB2YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICByZXR1cm4gaGFuZGxlcih2YWx1ZSwgY2hhbmdlZEJpdHMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuXG5mdW5jdGlvbiBvbmx5Q2hpbGQoY2hpbGRyZW4pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pID8gY2hpbGRyZW5bMF0gOiBjaGlsZHJlbjtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUmVhY3RDb250ZXh0KGRlZmF1bHRWYWx1ZSwgY2FsY3VsYXRlQ2hhbmdlZEJpdHMpIHtcbiAgdmFyIF9Qcm92aWRlciRjaGlsZENvbnRleCwgX0NvbnN1bWVyJGNvbnRleHRUeXBlO1xuXG4gIHZhciBjb250ZXh0UHJvcCA9ICdfX2NyZWF0ZS1yZWFjdC1jb250ZXh0LScgKyBnZXRVbmlxdWVJZCgpICsgJ19fJztcblxuICB2YXIgUHJvdmlkZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQpIHtcbiAgICBfaW5oZXJpdHNMb29zZShQcm92aWRlciwgX0NvbXBvbmVudCk7XG5cbiAgICBmdW5jdGlvbiBQcm92aWRlcigpIHtcbiAgICAgIHZhciBfdGhpcztcblxuICAgICAgX3RoaXMgPSBfQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzLmVtaXR0ZXIgPSBjcmVhdGVFdmVudEVtaXR0ZXIoX3RoaXMucHJvcHMudmFsdWUpO1xuICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8gPSBQcm92aWRlci5wcm90b3R5cGU7XG5cbiAgICBfcHJvdG8uZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIHJldHVybiBfcmVmID0ge30sIF9yZWZbY29udGV4dFByb3BdID0gdGhpcy5lbWl0dGVyLCBfcmVmO1xuICAgIH07XG5cbiAgICBfcHJvdG8uY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICBpZiAodGhpcy5wcm9wcy52YWx1ZSAhPT0gbmV4dFByb3BzLnZhbHVlKSB7XG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMucHJvcHMudmFsdWU7XG4gICAgICAgIHZhciBuZXdWYWx1ZSA9IG5leHRQcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIGNoYW5nZWRCaXRzO1xuXG4gICAgICAgIGlmIChvYmplY3RJcyhvbGRWYWx1ZSwgbmV3VmFsdWUpKSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNoYW5nZWRCaXRzID0gdHlwZW9mIGNhbGN1bGF0ZUNoYW5nZWRCaXRzID09PSAnZnVuY3Rpb24nID8gY2FsY3VsYXRlQ2hhbmdlZEJpdHMob2xkVmFsdWUsIG5ld1ZhbHVlKSA6IE1BWF9TSUdORURfMzFfQklUX0lOVDtcblxuICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICB3YXJuaW5nKChjaGFuZ2VkQml0cyAmIE1BWF9TSUdORURfMzFfQklUX0lOVCkgPT09IGNoYW5nZWRCaXRzLCAnY2FsY3VsYXRlQ2hhbmdlZEJpdHM6IEV4cGVjdGVkIHRoZSByZXR1cm4gdmFsdWUgdG8gYmUgYSAnICsgJzMxLWJpdCBpbnRlZ2VyLiBJbnN0ZWFkIHJlY2VpdmVkOiAnICsgY2hhbmdlZEJpdHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNoYW5nZWRCaXRzIHw9IDA7XG5cbiAgICAgICAgICBpZiAoY2hhbmdlZEJpdHMgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdHRlci5zZXQobmV4dFByb3BzLnZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFByb3ZpZGVyO1xuICB9KENvbXBvbmVudCk7XG5cbiAgUHJvdmlkZXIuY2hpbGRDb250ZXh0VHlwZXMgPSAoX1Byb3ZpZGVyJGNoaWxkQ29udGV4ID0ge30sIF9Qcm92aWRlciRjaGlsZENvbnRleFtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsIF9Qcm92aWRlciRjaGlsZENvbnRleCk7XG5cbiAgdmFyIENvbnN1bWVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfQ29tcG9uZW50Mikge1xuICAgIF9pbmhlcml0c0xvb3NlKENvbnN1bWVyLCBfQ29tcG9uZW50Mik7XG5cbiAgICBmdW5jdGlvbiBDb25zdW1lcigpIHtcbiAgICAgIHZhciBfdGhpczI7XG5cbiAgICAgIF90aGlzMiA9IF9Db21wb25lbnQyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgIF90aGlzMi5zdGF0ZSA9IHtcbiAgICAgICAgdmFsdWU6IF90aGlzMi5nZXRWYWx1ZSgpXG4gICAgICB9O1xuXG4gICAgICBfdGhpczIub25VcGRhdGUgPSBmdW5jdGlvbiAobmV3VmFsdWUsIGNoYW5nZWRCaXRzKSB7XG4gICAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBfdGhpczIub2JzZXJ2ZWRCaXRzIHwgMDtcblxuICAgICAgICBpZiAoKG9ic2VydmVkQml0cyAmIGNoYW5nZWRCaXRzKSAhPT0gMCkge1xuICAgICAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfTtcblxuICAgICAgcmV0dXJuIF90aGlzMjtcbiAgICB9XG5cbiAgICB2YXIgX3Byb3RvMiA9IENvbnN1bWVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMobmV4dFByb3BzKSB7XG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gbmV4dFByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9uKHRoaXMub25VcGRhdGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2JzZXJ2ZWRCaXRzID0gdGhpcy5wcm9wcy5vYnNlcnZlZEJpdHM7XG4gICAgICB0aGlzLm9ic2VydmVkQml0cyA9IG9ic2VydmVkQml0cyA9PT0gdW5kZWZpbmVkIHx8IG9ic2VydmVkQml0cyA9PT0gbnVsbCA/IE1BWF9TSUdORURfMzFfQklUX0lOVCA6IG9ic2VydmVkQml0cztcbiAgICB9O1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsVW5tb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgdGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXS5vZmYodGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIF9wcm90bzIuZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZSgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLmdldCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRWYWx1ZTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICByZXR1cm4gb25seUNoaWxkKHRoaXMucHJvcHMuY2hpbGRyZW4pKHRoaXMuc3RhdGUudmFsdWUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29uc3VtZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBDb25zdW1lci5jb250ZXh0VHlwZXMgPSAoX0NvbnN1bWVyJGNvbnRleHRUeXBlID0ge30sIF9Db25zdW1lciRjb250ZXh0VHlwZVtjb250ZXh0UHJvcF0gPSBQcm9wVHlwZXMub2JqZWN0LCBfQ29uc3VtZXIkY29udGV4dFR5cGUpO1xuICByZXR1cm4ge1xuICAgIFByb3ZpZGVyOiBQcm92aWRlcixcbiAgICBDb25zdW1lcjogQ29uc3VtZXJcbiAgfTtcbn1cblxudmFyIGluZGV4ID0gUmVhY3QuY3JlYXRlQ29udGV4dCB8fCBjcmVhdGVSZWFjdENvbnRleHQ7XG5cbmV4cG9ydCBkZWZhdWx0IGluZGV4O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IF9pbmhlcml0c0xvb3NlIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBjcmVhdGVNZW1vcnlIaXN0b3J5LCBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwsIGNyZWF0ZVBhdGggfSBmcm9tICdoaXN0b3J5JztcbmltcG9ydCB3YXJuaW5nIGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tICdtaW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gJ0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMnO1xuaW1wb3J0IHBhdGhUb1JlZ2V4cCBmcm9tICdwYXRoLXRvLXJlZ2V4cCc7XG5pbXBvcnQgeyBpc1ZhbGlkRWxlbWVudFR5cGUgfSBmcm9tICdyZWFjdC1pcyc7XG5pbXBvcnQgX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSc7XG5pbXBvcnQgaG9pc3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxuLy8gVE9ETzogUmVwbGFjZSB3aXRoIFJlYWN0LmNyZWF0ZUNvbnRleHQgb25jZSB3ZSBjYW4gYXNzdW1lIFJlYWN0IDE2K1xuXG52YXIgY3JlYXRlTmFtZWRDb250ZXh0ID0gZnVuY3Rpb24gY3JlYXRlTmFtZWRDb250ZXh0KG5hbWUpIHtcbiAgdmFyIGNvbnRleHQgPSBjcmVhdGVDb250ZXh0KCk7XG4gIGNvbnRleHQuZGlzcGxheU5hbWUgPSBuYW1lO1xuICByZXR1cm4gY29udGV4dDtcbn07XG5cbnZhciBoaXN0b3J5Q29udGV4dCA9IC8qI19fUFVSRV9fKi9jcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXItSGlzdG9yeVwiKTtcblxudmFyIGNvbnRleHQgPSAvKiNfX1BVUkVfXyovY3JlYXRlTmFtZWRDb250ZXh0KFwiUm91dGVyXCIpO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgUm91dGVyLmNvbXB1dGVSb290TWF0Y2ggPSBmdW5jdGlvbiBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGg6IFwiL1wiLFxuICAgICAgdXJsOiBcIi9cIixcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gXCIvXCJcbiAgICB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIFJvdXRlcihwcm9wcykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsKHRoaXMsIHByb3BzKSB8fCB0aGlzO1xuICAgIF90aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9OyAvLyBUaGlzIGlzIGEgYml0IG9mIGEgaGFjay4gV2UgaGF2ZSB0byBzdGFydCBsaXN0ZW5pbmcgZm9yIGxvY2F0aW9uXG4gICAgLy8gY2hhbmdlcyBoZXJlIGluIHRoZSBjb25zdHJ1Y3RvciBpbiBjYXNlIHRoZXJlIGFyZSBhbnkgPFJlZGlyZWN0PnNcbiAgICAvLyBvbiB0aGUgaW5pdGlhbCByZW5kZXIuIElmIHRoZXJlIGFyZSwgdGhleSB3aWxsIHJlcGxhY2UvcHVzaCB3aGVuXG4gICAgLy8gdGhleSBtb3VudCBhbmQgc2luY2UgY0RNIGZpcmVzIGluIGNoaWxkcmVuIGJlZm9yZSBwYXJlbnRzLCB3ZSBtYXlcbiAgICAvLyBnZXQgYSBuZXcgbG9jYXRpb24gYmVmb3JlIHRoZSA8Um91dGVyPiBpcyBtb3VudGVkLlxuXG4gICAgX3RoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICBfdGhpcy51bmxpc3RlbiA9IHByb3BzLmhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uIChsb2NhdGlvbikge1xuICAgICAgICBpZiAoX3RoaXMuX2lzTW91bnRlZCkge1xuICAgICAgICAgIF90aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIF90aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBsb2NhdGlvbjtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5faXNNb3VudGVkID0gdHJ1ZTtcblxuICAgIGlmICh0aGlzLl9wZW5kaW5nTG9jYXRpb24pIHtcbiAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICBsb2NhdGlvbjogdGhpcy5fcGVuZGluZ0xvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHtcbiAgICAgIHRoaXMudW5saXN0ZW4oKTtcbiAgICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICAgICAgdGhpcy5fcGVuZGluZ0xvY2F0aW9uID0gbnVsbDtcbiAgICB9XG4gIH07XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgdmFsdWU6IHtcbiAgICAgICAgaGlzdG9yeTogdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgICBsb2NhdGlvbjogdGhpcy5zdGF0ZS5sb2NhdGlvbixcbiAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICBzdGF0aWNDb250ZXh0OiB0aGlzLnByb3BzLnN0YXRpY0NvbnRleHRcbiAgICAgIH1cbiAgICB9LCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChoaXN0b3J5Q29udGV4dC5Qcm92aWRlciwge1xuICAgICAgY2hpbGRyZW46IHRoaXMucHJvcHMuY2hpbGRyZW4gfHwgbnVsbCxcbiAgICAgIHZhbHVlOiB0aGlzLnByb3BzLmhpc3RvcnlcbiAgICB9KSk7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJldlByb3BzLmhpc3RvcnkgPT09IHRoaXMucHJvcHMuaGlzdG9yeSwgXCJZb3UgY2Fubm90IGNoYW5nZSA8Um91dGVyIGhpc3Rvcnk+XCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGhpcztcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBfdGhpcyA9IF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSB8fCB0aGlzO1xuICAgIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVNZW1vcnlIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTWVtb3J5Um91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIE1lbW9yeVJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBNZW1vcnlSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgaW5pdGlhbEluZGV4OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbiAgfTtcblxuICBNZW1vcnlSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIikgOiB2b2lkIDA7XG4gIH07XG59XG5cbnZhciBMaWZlY3ljbGUgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoTGlmZWN5Y2xlLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaWZlY3ljbGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExpZmVjeWNsZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHMpIHtcbiAgICBpZiAodGhpcy5wcm9wcy5vblVwZGF0ZSkgdGhpcy5wcm9wcy5vblVwZGF0ZS5jYWxsKHRoaXMsIHRoaXMsIHByZXZQcm9wcyk7XG4gIH07XG5cbiAgX3Byb3RvLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9O1xuXG4gIF9wcm90by5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIExpZmVjeWNsZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHJvbXB0aW5nIHRoZSB1c2VyIGJlZm9yZSBuYXZpZ2F0aW5nIGF3YXkgZnJvbSBhIHNjcmVlbi5cbiAqL1xuXG5mdW5jdGlvbiBQcm9tcHQoX3JlZikge1xuICB2YXIgbWVzc2FnZSA9IF9yZWYubWVzc2FnZSxcbiAgICAgIF9yZWYkd2hlbiA9IF9yZWYud2hlbixcbiAgICAgIHdoZW4gPSBfcmVmJHdoZW4gPT09IHZvaWQgMCA/IHRydWUgOiBfcmVmJHdoZW47XG4gIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIGlmICghd2hlbiB8fCBjb250ZXh0LnN0YXRpY0NvbnRleHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtZXRob2QgPSBjb250ZXh0Lmhpc3RvcnkuYmxvY2s7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KExpZmVjeWNsZSwge1xuICAgICAgb25Nb3VudDogZnVuY3Rpb24gb25Nb3VudChzZWxmKSB7XG4gICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgIH0sXG4gICAgICBvblVwZGF0ZTogZnVuY3Rpb24gb25VcGRhdGUoc2VsZiwgcHJldlByb3BzKSB7XG4gICAgICAgIGlmIChwcmV2UHJvcHMubWVzc2FnZSAhPT0gbWVzc2FnZSkge1xuICAgICAgICAgIHNlbGYucmVsZWFzZSgpO1xuICAgICAgICAgIHNlbGYucmVsZWFzZSA9IG1ldGhvZChtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIG9uVW5tb3VudDogZnVuY3Rpb24gb25Vbm1vdW50KHNlbGYpIHtcbiAgICAgICAgc2VsZi5yZWxlYXNlKCk7XG4gICAgICB9LFxuICAgICAgbWVzc2FnZTogbWVzc2FnZVxuICAgIH0pO1xuICB9KTtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICB2YXIgbWVzc2FnZVR5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuZnVuYywgUHJvcFR5cGVzLnN0cmluZ10pO1xuICBQcm9tcHQucHJvcFR5cGVzID0ge1xuICAgIHdoZW46IFByb3BUeXBlcy5ib29sLFxuICAgIG1lc3NhZ2U6IG1lc3NhZ2VUeXBlLmlzUmVxdWlyZWRcbiAgfTtcbn1cblxudmFyIGNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG5mdW5jdGlvbiBjb21waWxlUGF0aChwYXRoKSB7XG4gIGlmIChjYWNoZVtwYXRoXSkgcmV0dXJuIGNhY2hlW3BhdGhdO1xuICB2YXIgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cbi8qKlxuICogUHVibGljIEFQSSBmb3IgZ2VuZXJhdGluZyBhIFVSTCBwYXRobmFtZSBmcm9tIGEgcGF0aCBhbmQgcGFyYW1ldGVycy5cbiAqL1xuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlUGF0aChwYXRoLCBwYXJhbXMpIHtcbiAgaWYgKHBhdGggPT09IHZvaWQgMCkge1xuICAgIHBhdGggPSBcIi9cIjtcbiAgfVxuXG4gIGlmIChwYXJhbXMgPT09IHZvaWQgMCkge1xuICAgIHBhcmFtcyA9IHt9O1xuICB9XG5cbiAgcmV0dXJuIHBhdGggPT09IFwiL1wiID8gcGF0aCA6IGNvbXBpbGVQYXRoKHBhdGgpKHBhcmFtcywge1xuICAgIHByZXR0eTogdHJ1ZVxuICB9KTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbmF2aWdhdGluZyBwcm9ncmFtbWF0aWNhbGx5IHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxuZnVuY3Rpb24gUmVkaXJlY3QoX3JlZikge1xuICB2YXIgY29tcHV0ZWRNYXRjaCA9IF9yZWYuY29tcHV0ZWRNYXRjaCxcbiAgICAgIHRvID0gX3JlZi50byxcbiAgICAgIF9yZWYkcHVzaCA9IF9yZWYucHVzaCxcbiAgICAgIHB1c2ggPSBfcmVmJHB1c2ggPT09IHZvaWQgMCA/IGZhbHNlIDogX3JlZiRwdXNoO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJlZGlyZWN0PiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgIHZhciBoaXN0b3J5ID0gY29udGV4dC5oaXN0b3J5LFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gY29udGV4dC5zdGF0aWNDb250ZXh0O1xuICAgIHZhciBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKGNvbXB1dGVkTWF0Y2ggPyB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBnZW5lcmF0ZVBhdGgodG8sIGNvbXB1dGVkTWF0Y2gucGFyYW1zKSA6IF9leHRlbmRzKHt9LCB0bywge1xuICAgICAgcGF0aG5hbWU6IGdlbmVyYXRlUGF0aCh0by5wYXRobmFtZSwgY29tcHV0ZWRNYXRjaC5wYXJhbXMpXG4gICAgfSkgOiB0byk7IC8vIFdoZW4gcmVuZGVyaW5nIGluIGEgc3RhdGljIGNvbnRleHQsXG4gICAgLy8gc2V0IHRoZSBuZXcgbG9jYXRpb24gaW1tZWRpYXRlbHkuXG5cbiAgICBpZiAoc3RhdGljQ29udGV4dCkge1xuICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChMaWZlY3ljbGUsIHtcbiAgICAgIG9uTW91bnQ6IGZ1bmN0aW9uIG9uTW91bnQoKSB7XG4gICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICB9LFxuICAgICAgb25VcGRhdGU6IGZ1bmN0aW9uIG9uVXBkYXRlKHNlbGYsIHByZXZQcm9wcykge1xuICAgICAgICB2YXIgcHJldkxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcblxuICAgICAgICBpZiAoIWxvY2F0aW9uc0FyZUVxdWFsKHByZXZMb2NhdGlvbiwgX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgICAgICAga2V5OiBwcmV2TG9jYXRpb24ua2V5XG4gICAgICAgIH0pKSkge1xuICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0bzogdG9cbiAgICB9KTtcbiAgfSk7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgUmVkaXJlY3QucHJvcFR5cGVzID0ge1xuICAgIHB1c2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5vYmplY3RdKS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBjYWNoZSQxID0ge307XG52YXIgY2FjaGVMaW1pdCQxID0gMTAwMDA7XG52YXIgY2FjaGVDb3VudCQxID0gMDtcblxuZnVuY3Rpb24gY29tcGlsZVBhdGgkMShwYXRoLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9IFwiXCIgKyBvcHRpb25zLmVuZCArIG9wdGlvbnMuc3RyaWN0ICsgb3B0aW9ucy5zZW5zaXRpdmU7XG4gIHZhciBwYXRoQ2FjaGUgPSBjYWNoZSQxW2NhY2hlS2V5XSB8fCAoY2FjaGUkMVtjYWNoZUtleV0gPSB7fSk7XG4gIGlmIChwYXRoQ2FjaGVbcGF0aF0pIHJldHVybiBwYXRoQ2FjaGVbcGF0aF07XG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZWdleHAgPSBwYXRoVG9SZWdleHAocGF0aCwga2V5cywgb3B0aW9ucyk7XG4gIHZhciByZXN1bHQgPSB7XG4gICAgcmVnZXhwOiByZWdleHAsXG4gICAga2V5czoga2V5c1xuICB9O1xuXG4gIGlmIChjYWNoZUNvdW50JDEgPCBjYWNoZUxpbWl0JDEpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCQxKys7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cblxuXG5mdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUsIG9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgIHBhdGg6IG9wdGlvbnNcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9vcHRpb25zID0gb3B0aW9ucyxcbiAgICAgIHBhdGggPSBfb3B0aW9ucy5wYXRoLFxuICAgICAgX29wdGlvbnMkZXhhY3QgPSBfb3B0aW9ucy5leGFjdCxcbiAgICAgIGV4YWN0ID0gX29wdGlvbnMkZXhhY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkZXhhY3QsXG4gICAgICBfb3B0aW9ucyRzdHJpY3QgPSBfb3B0aW9ucy5zdHJpY3QsXG4gICAgICBzdHJpY3QgPSBfb3B0aW9ucyRzdHJpY3QgPT09IHZvaWQgMCA/IGZhbHNlIDogX29wdGlvbnMkc3RyaWN0LFxuICAgICAgX29wdGlvbnMkc2Vuc2l0aXZlID0gX29wdGlvbnMuc2Vuc2l0aXZlLFxuICAgICAgc2Vuc2l0aXZlID0gX29wdGlvbnMkc2Vuc2l0aXZlID09PSB2b2lkIDAgPyBmYWxzZSA6IF9vcHRpb25zJHNlbnNpdGl2ZTtcbiAgdmFyIHBhdGhzID0gW10uY29uY2F0KHBhdGgpO1xuICByZXR1cm4gcGF0aHMucmVkdWNlKGZ1bmN0aW9uIChtYXRjaGVkLCBwYXRoKSB7XG4gICAgaWYgKCFwYXRoICYmIHBhdGggIT09IFwiXCIpIHJldHVybiBudWxsO1xuICAgIGlmIChtYXRjaGVkKSByZXR1cm4gbWF0Y2hlZDtcblxuICAgIHZhciBfY29tcGlsZVBhdGggPSBjb21waWxlUGF0aCQxKHBhdGgsIHtcbiAgICAgIGVuZDogZXhhY3QsXG4gICAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlXG4gICAgfSksXG4gICAgICAgIHJlZ2V4cCA9IF9jb21waWxlUGF0aC5yZWdleHAsXG4gICAgICAgIGtleXMgPSBfY29tcGlsZVBhdGgua2V5cztcblxuICAgIHZhciBtYXRjaCA9IHJlZ2V4cC5leGVjKHBhdGhuYW1lKTtcbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdXJsID0gbWF0Y2hbMF0sXG4gICAgICAgIHZhbHVlcyA9IG1hdGNoLnNsaWNlKDEpO1xuICAgIHZhciBpc0V4YWN0ID0gcGF0aG5hbWUgPT09IHVybDtcbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgLy8gdGhlIHBhdGggdXNlZCB0byBtYXRjaFxuICAgICAgdXJsOiBwYXRoID09PSBcIi9cIiAmJiB1cmwgPT09IFwiXCIgPyBcIi9cIiA6IHVybCxcbiAgICAgIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdDogaXNFeGFjdCxcbiAgICAgIC8vIHdoZXRoZXIgb3Igbm90IHdlIG1hdGNoZWQgZXhhY3RseVxuICAgICAgcGFyYW1zOiBrZXlzLnJlZHVjZShmdW5jdGlvbiAobWVtbywga2V5LCBpbmRleCkge1xuICAgICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICAgIHJldHVybiBtZW1vO1xuICAgICAgfSwge30pXG4gICAgfTtcbiAgfSwgbnVsbCk7XG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufVxuXG5mdW5jdGlvbiBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBwYXRoKSB7XG4gIHZhciB2YWx1ZSA9IGNoaWxkcmVuKHByb3BzKTtcbiAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyh2YWx1ZSAhPT0gdW5kZWZpbmVkLCBcIllvdSByZXR1cm5lZCBgdW5kZWZpbmVkYCBmcm9tIHRoZSBgY2hpbGRyZW5gIGZ1bmN0aW9uIG9mIFwiICsgKFwiPFJvdXRlXCIgKyAocGF0aCA/IFwiIHBhdGg9XFxcIlwiICsgcGF0aCArIFwiXFxcIlwiIDogXCJcIikgKyBcIj4sIGJ1dCB5b3UgXCIpICsgXCJzaG91bGQgaGF2ZSByZXR1cm5lZCBhIFJlYWN0IGVsZW1lbnQgb3IgYG51bGxgXCIpIDogdm9pZCAwO1xuICByZXR1cm4gdmFsdWUgfHwgbnVsbDtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuXG5cbnZhciBSb3V0ZSA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHNMb29zZShSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJvdXRlLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQkMSkge1xuICAgICAgIWNvbnRleHQkMSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvdXRzaWRlIGEgPFJvdXRlcj5cIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICAgICAgdmFyIGxvY2F0aW9uID0gX3RoaXMucHJvcHMubG9jYXRpb24gfHwgY29udGV4dCQxLmxvY2F0aW9uO1xuICAgICAgdmFyIG1hdGNoID0gX3RoaXMucHJvcHMuY29tcHV0ZWRNYXRjaCA/IF90aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2ggLy8gPFN3aXRjaD4gYWxyZWFkeSBjb21wdXRlZCB0aGUgbWF0Y2ggZm9yIHVzXG4gICAgICA6IF90aGlzLnByb3BzLnBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIF90aGlzLnByb3BzKSA6IGNvbnRleHQkMS5tYXRjaDtcblxuICAgICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe30sIGNvbnRleHQkMSwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIG1hdGNoOiBtYXRjaFxuICAgICAgfSk7XG5cbiAgICAgIHZhciBfdGhpcyRwcm9wcyA9IF90aGlzLnByb3BzLFxuICAgICAgICAgIGNoaWxkcmVuID0gX3RoaXMkcHJvcHMuY2hpbGRyZW4sXG4gICAgICAgICAgY29tcG9uZW50ID0gX3RoaXMkcHJvcHMuY29tcG9uZW50LFxuICAgICAgICAgIHJlbmRlciA9IF90aGlzJHByb3BzLnJlbmRlcjsgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgIC8vIGRlZmF1bHQsIHNvIHVzZSBudWxsIGlmIHRoYXQncyB0aGUgY2FzZS5cblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikpIHtcbiAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgICAgICB2YWx1ZTogcHJvcHNcbiAgICAgIH0sIHByb3BzLm1hdGNoID8gY2hpbGRyZW4gPyB0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIiA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGV2YWxDaGlsZHJlbkRldihjaGlsZHJlbiwgcHJvcHMsIF90aGlzLnByb3BzLnBhdGgpIDogY2hpbGRyZW4ocHJvcHMpIDogY2hpbGRyZW4gOiBjb21wb25lbnQgPyAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHByb3BzKSA6IHJlbmRlciA/IHJlbmRlcihwcm9wcykgOiBudWxsIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCIgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBldmFsQ2hpbGRyZW5EZXYoY2hpbGRyZW4sIHByb3BzLCBfdGhpcy5wcm9wcy5wYXRoKSA6IGNoaWxkcmVuKHByb3BzKSA6IG51bGwpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBSb3V0ZS5wcm9wVHlwZXMgPSB7XG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICAgIGNvbXBvbmVudDogZnVuY3Rpb24gY29tcG9uZW50KHByb3BzLCBwcm9wTmFtZSkge1xuICAgICAgaWYgKHByb3BzW3Byb3BOYW1lXSAmJiAhaXNWYWxpZEVsZW1lbnRUeXBlKHByb3BzW3Byb3BOYW1lXSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihcIkludmFsaWQgcHJvcCAnY29tcG9uZW50JyBzdXBwbGllZCB0byAnUm91dGUnOiB0aGUgcHJvcCBpcyBub3QgYSB2YWxpZCBSZWFjdCBjb21wb25lbnRcIik7XG4gICAgICB9XG4gICAgfSxcbiAgICBleGFjdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgcGF0aDogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLnN0cmluZyldKSxcbiAgICByZW5kZXI6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNlbnNpdGl2ZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbFxuICB9O1xuXG4gIFJvdXRlLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMuY29tcG9uZW50KSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmIHRoaXMucHJvcHMucmVuZGVyKSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLCBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgY29tcG9uZW50PiBhbmQgPFJvdXRlIHJlbmRlcj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSByZW5kZXI+IHdpbGwgYmUgaWdub3JlZFwiKSA6IHZvaWQgMDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpIDogdm9pZCAwO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISghdGhpcy5wcm9wcy5sb2NhdGlvbiAmJiBwcmV2UHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJykgOiB2b2lkIDA7XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkZExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gXCIvXCIgPyBwYXRoIDogXCIvXCIgKyBwYXRoO1xufVxuXG5mdW5jdGlvbiBhZGRCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuICB2YXIgYmFzZSA9IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSk7XG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlVVJMKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09IFwic3RyaW5nXCIgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufVxuXG5mdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBjYW5ub3QgJXMgd2l0aCA8U3RhdGljUm91dGVyPlwiLCBtZXRob2ROYW1lKSA6IGludmFyaWFudChmYWxzZSkgO1xuICB9O1xufVxuXG5mdW5jdGlvbiBub29wKCkge31cbi8qKlxuICogVGhlIHB1YmxpYyB0b3AtbGV2ZWwgQVBJIGZvciBhIFwic3RhdGljXCIgPFJvdXRlcj4sIHNvLWNhbGxlZCBiZWNhdXNlIGl0XG4gKiBjYW4ndCBhY3R1YWxseSBjaGFuZ2UgdGhlIGN1cnJlbnQgbG9jYXRpb24uIEluc3RlYWQsIGl0IGp1c3QgcmVjb3Jkc1xuICogbG9jYXRpb24gY2hhbmdlcyBpbiBhIGNvbnRleHQgb2JqZWN0LiBVc2VmdWwgbWFpbmx5IGluIHRlc3RpbmcgYW5kXG4gKiBzZXJ2ZXItcmVuZGVyaW5nIHNjZW5hcmlvcy5cbiAqL1xuXG5cbnZhciBTdGF0aWNSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3RhdGljUm91dGVyLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTdGF0aWNSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG5cbiAgICBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVSZXBsYWNlID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICByZXR1cm4gX3RoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJSRVBMQUNFXCIpO1xuICAgIH07XG5cbiAgICBfdGhpcy5oYW5kbGVMaXN0ZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9O1xuXG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN0YXRpY1JvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLm5hdmlnYXRlVG8gPSBmdW5jdGlvbiBuYXZpZ2F0ZVRvKGxvY2F0aW9uLCBhY3Rpb24pIHtcbiAgICB2YXIgX3RoaXMkcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wcyRiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMkYmFzZW5hbWUsXG4gICAgICAgIF90aGlzJHByb3BzJGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMkY29udGV4dCA9PT0gdm9pZCAwID8ge30gOiBfdGhpcyRwcm9wcyRjb250ZXh0O1xuICAgIGNvbnRleHQuYWN0aW9uID0gYWN0aW9uO1xuICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICBjb250ZXh0LnVybCA9IGNyZWF0ZVVSTChjb250ZXh0LmxvY2F0aW9uKTtcbiAgfTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfdGhpcyRwcm9wczIgPSB0aGlzLnByb3BzLFxuICAgICAgICBfdGhpcyRwcm9wczIkYmFzZW5hbWUgPSBfdGhpcyRwcm9wczIuYmFzZW5hbWUsXG4gICAgICAgIGJhc2VuYW1lID0gX3RoaXMkcHJvcHMyJGJhc2VuYW1lID09PSB2b2lkIDAgPyBcIlwiIDogX3RoaXMkcHJvcHMyJGJhc2VuYW1lLFxuICAgICAgICBfdGhpcyRwcm9wczIkY29udGV4dCA9IF90aGlzJHByb3BzMi5jb250ZXh0LFxuICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyJGNvbnRleHQgPT09IHZvaWQgMCA/IHt9IDogX3RoaXMkcHJvcHMyJGNvbnRleHQsXG4gICAgICAgIF90aGlzJHByb3BzMiRsb2NhdGlvbiA9IF90aGlzJHByb3BzMi5sb2NhdGlvbixcbiAgICAgICAgbG9jYXRpb24gPSBfdGhpcyRwcm9wczIkbG9jYXRpb24gPT09IHZvaWQgMCA/IFwiL1wiIDogX3RoaXMkcHJvcHMyJGxvY2F0aW9uLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3RoaXMkcHJvcHMyLCBbXCJiYXNlbmFtZVwiLCBcImNvbnRleHRcIiwgXCJsb2NhdGlvblwiXSk7XG5cbiAgICB2YXIgaGlzdG9yeSA9IHtcbiAgICAgIGNyZWF0ZUhyZWY6IGZ1bmN0aW9uIGNyZWF0ZUhyZWYocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICAgIH0sXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBoaXN0b3J5OiBoaXN0b3J5LFxuICAgICAgc3RhdGljQ29udGV4dDogY29udGV4dFxuICAgIH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksIFwiPFN0YXRpY1JvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgdGhlIGZpcnN0IDxSb3V0ZT4gdGhhdCBtYXRjaGVzLlxuICovXG5cbnZhciBTd2l0Y2ggPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoU3dpdGNoLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBTd2l0Y2goKSB7XG4gICAgcmV0dXJuIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFN3aXRjaC5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbnRleHQuQ29uc3VtZXIsIG51bGwsIGZ1bmN0aW9uIChjb250ZXh0KSB7XG4gICAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICAgIHZhciBsb2NhdGlvbiA9IF90aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgICB2YXIgZWxlbWVudCwgbWF0Y2g7IC8vIFdlIHVzZSBSZWFjdC5DaGlsZHJlbi5mb3JFYWNoIGluc3RlYWQgb2YgUmVhY3QuQ2hpbGRyZW4udG9BcnJheSgpLmZpbmQoKVxuICAgICAgLy8gaGVyZSBiZWNhdXNlIHRvQXJyYXkgYWRkcyBrZXlzIHRvIGFsbCBjaGlsZCBlbGVtZW50cyBhbmQgd2UgZG8gbm90IHdhbnRcbiAgICAgIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgICAgIC8vIGNvbXBvbmVudCBhdCBkaWZmZXJlbnQgVVJMcy5cblxuICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChfdGhpcy5wcm9wcy5jaGlsZHJlbiwgZnVuY3Rpb24gKGNoaWxkKSB7XG4gICAgICAgIGlmIChtYXRjaCA9PSBudWxsICYmIC8qI19fUFVSRV9fKi9SZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICBlbGVtZW50ID0gY2hpbGQ7XG4gICAgICAgICAgdmFyIHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG4gICAgICAgICAgbWF0Y2ggPSBwYXRoID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCBfZXh0ZW5kcyh7fSwgY2hpbGQucHJvcHMsIHtcbiAgICAgICAgICAgIHBhdGg6IHBhdGhcbiAgICAgICAgICB9KSkgOiBjb250ZXh0Lm1hdGNoO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBtYXRjaCA/IC8qI19fUFVSRV9fKi9SZWFjdC5jbG9uZUVsZW1lbnQoZWxlbWVudCwge1xuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGNvbXB1dGVkTWF0Y2g6IG1hdGNoXG4gICAgICB9KSA6IG51bGw7XG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIFN3aXRjaDtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24gKHByZXZQcm9wcykge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0aGlzLnByb3BzLmxvY2F0aW9uICYmICFwcmV2UHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSwgJzxTd2l0Y2g+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBBIHB1YmxpYyBoaWdoZXItb3JkZXIgY29tcG9uZW50IHRvIGFjY2VzcyB0aGUgaW1wZXJhdGl2ZSBBUElcbiAqL1xuXG5mdW5jdGlvbiB3aXRoUm91dGVyKENvbXBvbmVudCkge1xuICB2YXIgZGlzcGxheU5hbWUgPSBcIndpdGhSb3V0ZXIoXCIgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArIFwiKVwiO1xuXG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShwcm9wcywgW1wid3JhcHBlZENvbXBvbmVudFJlZlwiXSk7XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8XCIgKyBkaXNwbGF5TmFtZSArIFwiIC8+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIGNvbnRleHQsIHtcbiAgICAgICAgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmXG4gICAgICB9KSk7XG4gICAgfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGRpc3BsYXlOYW1lO1xuICBDLldyYXBwZWRDb21wb25lbnQgPSBDb21wb25lbnQ7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIEMucHJvcFR5cGVzID0ge1xuICAgICAgd3JhcHBlZENvbXBvbmVudFJlZjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5vYmplY3RdKVxuICAgIH07XG4gIH1cblxuICByZXR1cm4gaG9pc3RTdGF0aWNzKEMsIENvbXBvbmVudCk7XG59XG5cbnZhciB1c2VDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dDtcbmZ1bmN0aW9uIHVzZUhpc3RvcnkoKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgcmV0dXJuIHVzZUNvbnRleHQoaGlzdG9yeUNvbnRleHQpO1xufVxuZnVuY3Rpb24gdXNlTG9jYXRpb24oKSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgICAhKHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIpID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VMb2NhdGlvbigpXCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpLmxvY2F0aW9uO1xufVxuZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gICAgISh0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiKSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUGFyYW1zKClcIikgOiBpbnZhcmlhbnQoZmFsc2UpIDogdm9pZCAwO1xuICB9XG5cbiAgdmFyIG1hdGNoID0gdXNlQ29udGV4dChjb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5mdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgICEodHlwZW9mIHVzZUNvbnRleHQgPT09IFwiZnVuY3Rpb25cIikgPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsIFwiWW91IG11c3QgdXNlIFJlYWN0ID49IDE2LjggaW4gb3JkZXIgdG8gdXNlIHVzZVJvdXRlTWF0Y2goKVwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIH1cblxuICB2YXIgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICB2YXIgbWF0Y2ggPSB1c2VDb250ZXh0KGNvbnRleHQpLm1hdGNoO1xuICByZXR1cm4gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgcGF0aCkgOiBtYXRjaDtcbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBnbG9iYWwgPSB3aW5kb3c7XG4gICAgdmFyIGtleSA9IFwiX19yZWFjdF9yb3V0ZXJfYnVpbGRfX1wiO1xuICAgIHZhciBidWlsZE5hbWVzID0ge1xuICAgICAgY2pzOiBcIkNvbW1vbkpTXCIsXG4gICAgICBlc206IFwiRVMgbW9kdWxlc1wiLFxuICAgICAgdW1kOiBcIlVNRFwiXG4gICAgfTtcblxuICAgIGlmIChnbG9iYWxba2V5XSAmJiBnbG9iYWxba2V5XSAhPT0gXCJlc21cIikge1xuICAgICAgdmFyIGluaXRpYWxCdWlsZE5hbWUgPSBidWlsZE5hbWVzW2dsb2JhbFtrZXldXTtcbiAgICAgIHZhciBzZWNvbmRhcnlCdWlsZE5hbWUgPSBidWlsZE5hbWVzW1wiZXNtXCJdOyAvLyBUT0RPOiBBZGQgbGluayB0byBhcnRpY2xlIHRoYXQgZXhwbGFpbnMgaW4gZGV0YWlsIGhvdyB0byBhdm9pZFxuICAgICAgLy8gbG9hZGluZyAyIGRpZmZlcmVudCBidWlsZHMuXG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIllvdSBhcmUgbG9hZGluZyB0aGUgXCIgKyBzZWNvbmRhcnlCdWlsZE5hbWUgKyBcIiBidWlsZCBvZiBSZWFjdCBSb3V0ZXIgXCIgKyAoXCJvbiBhIHBhZ2UgdGhhdCBpcyBhbHJlYWR5IHJ1bm5pbmcgdGhlIFwiICsgaW5pdGlhbEJ1aWxkTmFtZSArIFwiIFwiKSArIFwiYnVpbGQsIHNvIHRoaW5ncyB3b24ndCB3b3JrIHJpZ2h0LlwiKTtcbiAgICB9XG5cbiAgICBnbG9iYWxba2V5XSA9IFwiZXNtXCI7XG4gIH1cbn1cblxuZXhwb3J0IHsgTWVtb3J5Um91dGVyLCBQcm9tcHQsIFJlZGlyZWN0LCBSb3V0ZSwgUm91dGVyLCBTdGF0aWNSb3V0ZXIsIFN3aXRjaCwgaGlzdG9yeUNvbnRleHQgYXMgX19IaXN0b3J5Q29udGV4dCwgY29udGV4dCBhcyBfX1JvdXRlckNvbnRleHQsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXIuanMubWFwXG4iLCJpbXBvcnQgeyBSb3V0ZXIsIF9fUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmV4cG9ydCB7IE1lbW9yeVJvdXRlciwgUHJvbXB0LCBSZWRpcmVjdCwgUm91dGUsIFJvdXRlciwgU3RhdGljUm91dGVyLCBTd2l0Y2gsIGdlbmVyYXRlUGF0aCwgbWF0Y2hQYXRoLCB1c2VIaXN0b3J5LCB1c2VMb2NhdGlvbiwgdXNlUGFyYW1zLCB1c2VSb3V0ZU1hdGNoLCB3aXRoUm91dGVyIH0gZnJvbSAncmVhY3Qtcm91dGVyJztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSwgY3JlYXRlSGFzaEhpc3RvcnksIGNyZWF0ZUxvY2F0aW9uLCBjcmVhdGVQYXRoIH0gZnJvbSAnaGlzdG9yeSc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzJztcbmltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyBIVE1MNSBoaXN0b3J5LlxuICovXG5cbnZhciBCcm93c2VyUm91dGVyID0gLyojX19QVVJFX18qL2Z1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0c0xvb3NlKEJyb3dzZXJSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEJyb3dzZXJSb3V0ZXIoKSB7XG4gICAgdmFyIF90aGlzO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIF90aGlzID0gX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpIHx8IHRoaXM7XG4gICAgX3RoaXMuaGlzdG9yeSA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5KF90aGlzLnByb3BzKTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQnJvd3NlclJvdXRlci5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUm91dGVyLCB7XG4gICAgICBoaXN0b3J5OiB0aGlzLmhpc3RvcnksXG4gICAgICBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlblxuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIEJyb3dzZXJSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBmb3JjZVJlZnJlc2g6IFByb3BUeXBlcy5ib29sLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlclxuICB9O1xuXG4gIEJyb3dzZXJSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gKCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgKyBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiKSA6IHZvaWQgMDtcbiAgfTtcbn1cblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgd2luZG93LmxvY2F0aW9uLmhhc2guXG4gKi9cblxudmFyIEhhc2hSb3V0ZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzTG9vc2UoSGFzaFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gSGFzaFJvdXRlcigpIHtcbiAgICB2YXIgX3RoaXM7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgX3RoaXMgPSBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkgfHwgdGhpcztcbiAgICBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGFzaEhpc3RvcnkoX3RoaXMucHJvcHMpO1xuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBIYXNoUm91dGVyLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHtcbiAgICAgIGhpc3Rvcnk6IHRoaXMuaGlzdG9yeSxcbiAgICAgIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgfSk7XG4gIH07XG5cbiAgcmV0dXJuIEhhc2hSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIpIHtcbiAgSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlLFxuICAgIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhc2hUeXBlOiBQcm9wVHlwZXMub25lT2YoW1wiaGFzaGJhbmdcIiwgXCJub3NsYXNoXCIsIFwic2xhc2hcIl0pXG4gIH07XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCBcIjxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIgfWAuXCIpIDogdm9pZCAwO1xuICB9O1xufVxuXG52YXIgcmVzb2x2ZVRvTG9jYXRpb24gPSBmdW5jdGlvbiByZXNvbHZlVG9Mb2NhdGlvbih0bywgY3VycmVudExvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwiZnVuY3Rpb25cIiA/IHRvKGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG52YXIgbm9ybWFsaXplVG9Mb2NhdGlvbiA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbikge1xuICByZXR1cm4gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gY3JlYXRlTG9jYXRpb24odG8sIG51bGwsIG51bGwsIGN1cnJlbnRMb2NhdGlvbikgOiB0bztcbn07XG5cbnZhciBmb3J3YXJkUmVmU2hpbSA9IGZ1bmN0aW9uIGZvcndhcmRSZWZTaGltKEMpIHtcbiAgcmV0dXJuIEM7XG59O1xuXG52YXIgZm9yd2FyZFJlZiA9IFJlYWN0LmZvcndhcmRSZWY7XG5cbmlmICh0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmID0gZm9yd2FyZFJlZlNoaW07XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbnZhciBMaW5rQW5jaG9yID0gZm9yd2FyZFJlZihmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBpbm5lclJlZiA9IF9yZWYuaW5uZXJSZWYsXG4gICAgICBuYXZpZ2F0ZSA9IF9yZWYubmF2aWdhdGUsXG4gICAgICBfb25DbGljayA9IF9yZWYub25DbGljayxcbiAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJpbm5lclJlZlwiLCBcIm5hdmlnYXRlXCIsIFwib25DbGlja1wiXSk7XG5cbiAgdmFyIHRhcmdldCA9IHJlc3QudGFyZ2V0O1xuXG4gIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgb25DbGljazogZnVuY3Rpb24gb25DbGljayhldmVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgaWYgKF9vbkNsaWNrKSBfb25DbGljayhldmVudCk7XG4gICAgICB9IGNhdGNoIChleCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aHJvdyBleDtcbiAgICAgIH1cblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAoIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gbGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICApIHtcbiAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIG5hdmlnYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG4gIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gIGlmIChmb3J3YXJkUmVmU2hpbSAhPT0gZm9yd2FyZFJlZikge1xuICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgfSBlbHNlIHtcbiAgICBwcm9wcy5yZWYgPSBpbm5lclJlZjtcbiAgfVxuICAvKiBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUganN4LWExMXkvYW5jaG9yLWhhcy1jb250ZW50ICovXG5cblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoXCJhXCIsIHByb3BzKTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIExpbmtBbmNob3IuZGlzcGxheU5hbWUgPSBcIkxpbmtBbmNob3JcIjtcbn1cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5cblxudmFyIExpbmsgPSBmb3J3YXJkUmVmKGZ1bmN0aW9uIChfcmVmMiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmMiRjb21wb25lbnQgPSBfcmVmMi5jb21wb25lbnQsXG4gICAgICBjb21wb25lbnQgPSBfcmVmMiRjb21wb25lbnQgPT09IHZvaWQgMCA/IExpbmtBbmNob3IgOiBfcmVmMiRjb21wb25lbnQsXG4gICAgICByZXBsYWNlID0gX3JlZjIucmVwbGFjZSxcbiAgICAgIHRvID0gX3JlZjIudG8sXG4gICAgICBpbm5lclJlZiA9IF9yZWYyLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYyLCBbXCJjb21wb25lbnRcIiwgXCJyZXBsYWNlXCIsIFwidG9cIiwgXCJpbm5lclJlZlwiXSk7XG5cbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9fUm91dGVyQ29udGV4dC5Db25zdW1lciwgbnVsbCwgZnVuY3Rpb24gKGNvbnRleHQpIHtcbiAgICAhY29udGV4dCA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPExpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gICAgdmFyIGhpc3RvcnkgPSBjb250ZXh0Lmhpc3Rvcnk7XG4gICAgdmFyIGxvY2F0aW9uID0gbm9ybWFsaXplVG9Mb2NhdGlvbihyZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksIGNvbnRleHQubG9jYXRpb24pO1xuICAgIHZhciBocmVmID0gbG9jYXRpb24gPyBoaXN0b3J5LmNyZWF0ZUhyZWYobG9jYXRpb24pIDogXCJcIjtcblxuICAgIHZhciBwcm9wcyA9IF9leHRlbmRzKHt9LCByZXN0LCB7XG4gICAgICBocmVmOiBocmVmLFxuICAgICAgbmF2aWdhdGU6IGZ1bmN0aW9uIG5hdmlnYXRlKCkge1xuICAgICAgICB2YXIgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgIHZhciBpc0R1cGxpY2F0ZU5hdmlnYXRpb24gPSBjcmVhdGVQYXRoKGNvbnRleHQubG9jYXRpb24pID09PSBjcmVhdGVQYXRoKG5vcm1hbGl6ZVRvTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgICAgdmFyIG1ldGhvZCA9IHJlcGxhY2UgfHwgaXNEdXBsaWNhdGVOYXZpZ2F0aW9uID8gaGlzdG9yeS5yZXBsYWNlIDogaGlzdG9yeS5wdXNoO1xuICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgfVxuICAgIH0pOyAvLyBSZWFjdCAxNSBjb21wYXRcblxuXG4gICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIHZhciB0b1R5cGUgPSBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pO1xuICB2YXIgcmVmVHlwZSA9IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5zdHJpbmcsIFByb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGN1cnJlbnQ6IFByb3BUeXBlcy5hbnlcbiAgfSldKTtcbiAgTGluay5kaXNwbGF5TmFtZSA9IFwiTGlua1wiO1xuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogcmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbnZhciBmb3J3YXJkUmVmU2hpbSQxID0gZnVuY3Rpb24gZm9yd2FyZFJlZlNoaW0oQykge1xuICByZXR1cm4gQztcbn07XG5cbnZhciBmb3J3YXJkUmVmJDEgPSBSZWFjdC5mb3J3YXJkUmVmO1xuXG5pZiAodHlwZW9mIGZvcndhcmRSZWYkMSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmJDEgPSBmb3J3YXJkUmVmU2hpbSQxO1xufVxuXG5mdW5jdGlvbiBqb2luQ2xhc3NuYW1lcygpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGNsYXNzbmFtZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgY2xhc3NuYW1lc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgfVxuXG4gIHJldHVybiBjbGFzc25hbWVzLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgIHJldHVybiBpO1xuICB9KS5qb2luKFwiIFwiKTtcbn1cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cblxuXG52YXIgTmF2TGluayA9IGZvcndhcmRSZWYkMShmdW5jdGlvbiAoX3JlZiwgZm9yd2FyZGVkUmVmKSB7XG4gIHZhciBfcmVmJGFyaWFDdXJyZW50ID0gX3JlZltcImFyaWEtY3VycmVudFwiXSxcbiAgICAgIGFyaWFDdXJyZW50ID0gX3JlZiRhcmlhQ3VycmVudCA9PT0gdm9pZCAwID8gXCJwYWdlXCIgOiBfcmVmJGFyaWFDdXJyZW50LFxuICAgICAgX3JlZiRhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGFjdGl2ZUNsYXNzTmFtZSA9IF9yZWYkYWN0aXZlQ2xhc3NOYW1lID09PSB2b2lkIDAgPyBcImFjdGl2ZVwiIDogX3JlZiRhY3RpdmVDbGFzc05hbWUsXG4gICAgICBhY3RpdmVTdHlsZSA9IF9yZWYuYWN0aXZlU3R5bGUsXG4gICAgICBjbGFzc05hbWVQcm9wID0gX3JlZi5jbGFzc05hbWUsXG4gICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICBpc0FjdGl2ZVByb3AgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgbG9jYXRpb25Qcm9wID0gX3JlZi5sb2NhdGlvbixcbiAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBzdHlsZVByb3AgPSBfcmVmLnN0eWxlLFxuICAgICAgdG8gPSBfcmVmLnRvLFxuICAgICAgaW5uZXJSZWYgPSBfcmVmLmlubmVyUmVmLFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYsIFtcImFyaWEtY3VycmVudFwiLCBcImFjdGl2ZUNsYXNzTmFtZVwiLCBcImFjdGl2ZVN0eWxlXCIsIFwiY2xhc3NOYW1lXCIsIFwiZXhhY3RcIiwgXCJpc0FjdGl2ZVwiLCBcImxvY2F0aW9uXCIsIFwic2Vuc2l0aXZlXCIsIFwic3RyaWN0XCIsIFwic3R5bGVcIiwgXCJ0b1wiLCBcImlubmVyUmVmXCJdKTtcblxuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX19Sb3V0ZXJDb250ZXh0LkNvbnN1bWVyLCBudWxsLCBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICFjb250ZXh0ID8gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gaW52YXJpYW50KGZhbHNlLCBcIllvdSBzaG91bGQgbm90IHVzZSA8TmF2TGluaz4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgICB2YXIgY3VycmVudExvY2F0aW9uID0gbG9jYXRpb25Qcm9wIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgdmFyIHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKHJlc29sdmVUb0xvY2F0aW9uKHRvLCBjdXJyZW50TG9jYXRpb24pLCBjdXJyZW50TG9jYXRpb24pO1xuICAgIHZhciBwYXRoID0gdG9Mb2NhdGlvbi5wYXRobmFtZTsgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcblxuICAgIHZhciBlc2NhcGVkUGF0aCA9IHBhdGggJiYgcGF0aC5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfC9cXFxcXSkvZywgXCJcXFxcJDFcIik7XG4gICAgdmFyIG1hdGNoID0gZXNjYXBlZFBhdGggPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICBwYXRoOiBlc2NhcGVkUGF0aCxcbiAgICAgIGV4YWN0OiBleGFjdCxcbiAgICAgIHNlbnNpdGl2ZTogc2Vuc2l0aXZlLFxuICAgICAgc3RyaWN0OiBzdHJpY3RcbiAgICB9KSA6IG51bGw7XG4gICAgdmFyIGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wID8gaXNBY3RpdmVQcm9wKG1hdGNoLCBjdXJyZW50TG9jYXRpb24pIDogbWF0Y2gpO1xuICAgIHZhciBjbGFzc05hbWUgPSB0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gXCJmdW5jdGlvblwiID8gY2xhc3NOYW1lUHJvcChpc0FjdGl2ZSkgOiBjbGFzc05hbWVQcm9wO1xuICAgIHZhciBzdHlsZSA9IHR5cGVvZiBzdHlsZVByb3AgPT09IFwiZnVuY3Rpb25cIiA/IHN0eWxlUHJvcChpc0FjdGl2ZSkgOiBzdHlsZVByb3A7XG5cbiAgICBpZiAoaXNBY3RpdmUpIHtcbiAgICAgIGNsYXNzTmFtZSA9IGpvaW5DbGFzc25hbWVzKGNsYXNzTmFtZSwgYWN0aXZlQ2xhc3NOYW1lKTtcbiAgICAgIHN0eWxlID0gX2V4dGVuZHMoe30sIHN0eWxlLCBhY3RpdmVTdHlsZSk7XG4gICAgfVxuXG4gICAgdmFyIHByb3BzID0gX2V4dGVuZHMoe1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQgfHwgbnVsbCxcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NOYW1lLFxuICAgICAgc3R5bGU6IHN0eWxlLFxuICAgICAgdG86IHRvTG9jYXRpb25cbiAgICB9LCByZXN0KTsgLy8gUmVhY3QgMTUgY29tcGF0XG5cblxuICAgIGlmIChmb3J3YXJkUmVmU2hpbSQxICE9PSBmb3J3YXJkUmVmJDEpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICB9XG5cbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoTGluaywgcHJvcHMpO1xuICB9KTtcbn0pO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiKSB7XG4gIE5hdkxpbmsuZGlzcGxheU5hbWUgPSBcIk5hdkxpbmtcIjtcbiAgdmFyIGFyaWFDdXJyZW50VHlwZSA9IFByb3BUeXBlcy5vbmVPZihbXCJwYWdlXCIsIFwic3RlcFwiLCBcImxvY2F0aW9uXCIsIFwiZGF0ZVwiLCBcInRpbWVcIiwgXCJ0cnVlXCIsIFwiZmFsc2VcIl0pO1xuICBOYXZMaW5rLnByb3BUeXBlcyA9IF9leHRlbmRzKHt9LCBMaW5rLnByb3BUeXBlcywge1xuICAgIFwiYXJpYS1jdXJyZW50XCI6IGFyaWFDdXJyZW50VHlwZSxcbiAgICBhY3RpdmVDbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgYWN0aXZlU3R5bGU6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuY10pLFxuICAgIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBpc0FjdGl2ZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgbG9jYXRpb246IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0eWxlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMub2JqZWN0LCBQcm9wVHlwZXMuZnVuY10pXG4gIH0pO1xufVxuXG5leHBvcnQgeyBCcm93c2VyUm91dGVyLCBIYXNoUm91dGVyLCBMaW5rLCBOYXZMaW5rIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWFjdC1yb3V0ZXItZG9tLmpzLm1hcFxuIiwiLyohICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbkNvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLlxyXG5cclxuUGVybWlzc2lvbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgYW5kL29yIGRpc3RyaWJ1dGUgdGhpcyBzb2Z0d2FyZSBmb3IgYW55XHJcbnB1cnBvc2Ugd2l0aCBvciB3aXRob3V0IGZlZSBpcyBoZXJlYnkgZ3JhbnRlZC5cclxuXHJcblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIgQU5EIFRIRSBBVVRIT1IgRElTQ0xBSU1TIEFMTCBXQVJSQU5USUVTIFdJVEhcclxuUkVHQVJEIFRPIFRISVMgU09GVFdBUkUgSU5DTFVESU5HIEFMTCBJTVBMSUVEIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZXHJcbkFORCBGSVRORVNTLiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SIEJFIExJQUJMRSBGT1IgQU5ZIFNQRUNJQUwsIERJUkVDVCxcclxuSU5ESVJFQ1QsIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyBPUiBBTlkgREFNQUdFUyBXSEFUU09FVkVSIFJFU1VMVElORyBGUk9NXHJcbkxPU1MgT0YgVVNFLCBEQVRBIE9SIFBST0ZJVFMsIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBORUdMSUdFTkNFIE9SXHJcbk9USEVSIFRPUlRJT1VTIEFDVElPTiwgQVJJU0lORyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBVU0UgT1JcclxuUEVSRk9STUFOQ0UgT0YgVEhJUyBTT0ZUV0FSRS5cclxuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiogKi9cclxuLyogZ2xvYmFsIFJlZmxlY3QsIFByb21pc2UgKi9cclxuXHJcbnZhciBleHRlbmRTdGF0aWNzID0gZnVuY3Rpb24oZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fFxyXG4gICAgICAgICh7IF9fcHJvdG9fXzogW10gfSBpbnN0YW5jZW9mIEFycmF5ICYmIGZ1bmN0aW9uIChkLCBiKSB7IGQuX19wcm90b19fID0gYjsgfSkgfHxcclxuICAgICAgICBmdW5jdGlvbiAoZCwgYikgeyBmb3IgKHZhciBwIGluIGIpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoYiwgcCkpIGRbcF0gPSBiW3BdOyB9O1xyXG4gICAgcmV0dXJuIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHRlbmRzKGQsIGIpIHtcclxuICAgIGlmICh0eXBlb2YgYiAhPT0gXCJmdW5jdGlvblwiICYmIGIgIT09IG51bGwpXHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNsYXNzIGV4dGVuZHMgdmFsdWUgXCIgKyBTdHJpbmcoYikgKyBcIiBpcyBub3QgYSBjb25zdHJ1Y3RvciBvciBudWxsXCIpO1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19nZW5lcmF0b3IodGhpc0FyZywgYm9keSkge1xyXG4gICAgdmFyIF8gPSB7IGxhYmVsOiAwLCBzZW50OiBmdW5jdGlvbigpIHsgaWYgKHRbMF0gJiAxKSB0aHJvdyB0WzFdOyByZXR1cm4gdFsxXTsgfSwgdHJ5czogW10sIG9wczogW10gfSwgZiwgeSwgdCwgZztcclxuICAgIHJldHVybiBnID0geyBuZXh0OiB2ZXJiKDApLCBcInRocm93XCI6IHZlcmIoMSksIFwicmV0dXJuXCI6IHZlcmIoMikgfSwgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIChnW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHsgcmV0dXJuIHRoaXM7IH0pLCBnO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKG9wKSB7XHJcbiAgICAgICAgaWYgKGYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJHZW5lcmF0b3IgaXMgYWxyZWFkeSBleGVjdXRpbmcuXCIpO1xyXG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xyXG4gICAgICAgICAgICBpZiAoZiA9IDEsIHkgJiYgKHQgPSBvcFswXSAmIDIgPyB5W1wicmV0dXJuXCJdIDogb3BbMF0gPyB5W1widGhyb3dcIl0gfHwgKCh0ID0geVtcInJldHVyblwiXSkgJiYgdC5jYWxsKHkpLCAwKSA6IHkubmV4dCkgJiYgISh0ID0gdC5jYWxsKHksIG9wWzFdKSkuZG9uZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmICh5ID0gMCwgdCkgb3AgPSBbb3BbMF0gJiAyLCB0LnZhbHVlXTtcclxuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwOiBjYXNlIDE6IHQgPSBvcDsgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6IF8ubGFiZWwrKzsgcmV0dXJuIHsgdmFsdWU6IG9wWzFdLCBkb25lOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA3OiBvcCA9IF8ub3BzLnBvcCgpOyBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDMgJiYgKCF0IHx8IChvcFsxXSA+IHRbMF0gJiYgb3BbMV0gPCB0WzNdKSkpIHsgXy5sYWJlbCA9IG9wWzFdOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcFswXSA9PT0gNiAmJiBfLmxhYmVsIDwgdFsxXSkgeyBfLmxhYmVsID0gdFsxXTsgdCA9IG9wOyBicmVhazsgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodFsyXSkgXy5vcHMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcCA9IGJvZHkuY2FsbCh0aGlzQXJnLCBfKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7IG9wID0gWzYsIGVdOyB5ID0gMDsgfSBmaW5hbGx5IHsgZiA9IHQgPSAwOyB9XHJcbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCB2YXIgX19jcmVhdGVCaW5kaW5nID0gT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xyXG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9KTtcclxufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBvW2syXSA9IG1ba107XHJcbn0pO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXhwb3J0U3RhcihtLCBvKSB7XHJcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG8sIHApKSBfX2NyZWF0ZUJpbmRpbmcobywgbSwgcCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3ZhbHVlcyhvKSB7XHJcbiAgICB2YXIgcyA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBTeW1ib2wuaXRlcmF0b3IsIG0gPSBzICYmIG9bc10sIGkgPSAwO1xyXG4gICAgaWYgKG0pIHJldHVybiBtLmNhbGwobyk7XHJcbiAgICBpZiAobyAmJiB0eXBlb2Ygby5sZW5ndGggPT09IFwibnVtYmVyXCIpIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRocm93IG5ldyBUeXBlRXJyb3IocyA/IFwiT2JqZWN0IGlzIG5vdCBpdGVyYWJsZS5cIiA6IFwiU3ltYm9sLml0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWQoKSB7XHJcbiAgICBmb3IgKHZhciBhciA9IFtdLCBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKylcclxuICAgICAgICBhciA9IGFyLmNvbmNhdChfX3JlYWQoYXJndW1lbnRzW2ldKSk7XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbi8qKiBAZGVwcmVjYXRlZCAqL1xyXG5leHBvcnQgZnVuY3Rpb24gX19zcHJlYWRBcnJheXMoKSB7XHJcbiAgICBmb3IgKHZhciBzID0gMCwgaSA9IDAsIGlsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGlsOyBpKyspIHMgKz0gYXJndW1lbnRzW2ldLmxlbmd0aDtcclxuICAgIGZvciAodmFyIHIgPSBBcnJheShzKSwgayA9IDAsIGkgPSAwOyBpIDwgaWw7IGkrKylcclxuICAgICAgICBmb3IgKHZhciBhID0gYXJndW1lbnRzW2ldLCBqID0gMCwgamwgPSBhLmxlbmd0aDsgaiA8IGpsOyBqKyssIGsrKylcclxuICAgICAgICAgICAgcltrXSA9IGFbal07XHJcbiAgICByZXR1cm4gcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXkodG8sIGZyb20sIHBhY2spIHtcclxuICAgIGlmIChwYWNrIHx8IGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIGZvciAodmFyIGkgPSAwLCBsID0gZnJvbS5sZW5ndGgsIGFyOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgaWYgKGFyIHx8ICEoaSBpbiBmcm9tKSkge1xyXG4gICAgICAgICAgICBpZiAoIWFyKSBhciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGZyb20sIDAsIGkpO1xyXG4gICAgICAgICAgICBhcltpXSA9IGZyb21baV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRvLmNvbmNhdChhciB8fCBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxufVxyXG4iLCJmdW5jdGlvbiBjbGFzc2VzKC4uLm5hbWVzOiAoc3RyaW5nIHwgdW5kZWZpbmVkKVtdKSB7XHJcbiAgICByZXR1cm4gbmFtZXMuZmlsdGVyKEJvb2xlYW4pLmpvaW4oJyAnKTtcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3NlcztcclxuXHJcbmludGVyZmFjZSBPcHRpb25zIHtcclxuICAgIGV4dHJhOiBzdHJpbmcgfCB1bmRlZmluZWRcclxufVxyXG5cclxuaW50ZXJmYWNlIENsYXNzVG9nZ2xlcyB7XHJcbiAgICBbSzogc3RyaW5nXTogYm9vbGVhblxyXG59XHJcblxyXG5jb25zdCBzY29wZWRDbGFzc01ha2VyID0gKHByZWZpeDogc3RyaW5nKSA9PlxyXG4gICAgKG5hbWU6IHN0cmluZyB8IENsYXNzVG9nZ2xlcywgb3B0aW9ucz86IE9wdGlvbnMpID0+XHJcbiAgICAgICAgT2JqZWN0XHJcbiAgICAgICAgICAgIC5lbnRyaWVzKG5hbWUgaW5zdGFuY2VvZiBPYmplY3QgPyBuYW1lIDoge1tuYW1lXTogbmFtZX0pXHJcbiAgICAgICAgICAgIC5maWx0ZXIoa3YgPT4ga3ZbMV0gIT09IGZhbHNlKVxyXG4gICAgICAgICAgICAubWFwKGt2ID0+IGt2WzBdKVxyXG4gICAgICAgICAgICAubWFwKG5hbWUgPT4gW3ByZWZpeCwgbmFtZV1cclxuICAgICAgICAgICAgICAgIC5maWx0ZXIoQm9vbGVhbilcclxuICAgICAgICAgICAgICAgIC5qb2luKCctJykpXHJcbiAgICAgICAgICAgIC5jb25jYXQob3B0aW9ucyAmJiBvcHRpb25zLmV4dHJhIHx8IFtdKVxyXG4gICAgICAgICAgICAuam9pbignICcpO1xyXG5cclxuZXhwb3J0IHtzY29wZWRDbGFzc01ha2VyfTsiLCJcclxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0ICcuL2ltcG9ydGljb25zJztcclxuaW1wb3J0ICcuL2ljb24uc2Nzcyc7XHJcbmltcG9ydCBjbGFzc2VzIGZyb20gJy4uL2hlbHBlcnMvY2xhc3Nlcyc7XHJcblxyXG5pbnRlcmZhY2UgSWNvblByb3BzIGV4dGVuZHMgUmVhY3QuU1ZHQXR0cmlidXRlczxTVkdFbGVtZW50PiB7XHJcbiAgICBuYW1lOiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IEljb246IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PEljb25Qcm9wcz4gPVxyXG4gICAgKHtjbGFzc05hbWUsIG5hbWUsIC4uLnJlc3RQcm9wc30pID0+IHtcclxuXHJcbiAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgPHN2ZyBjbGFzc05hbWU9e2NsYXNzZXMoJ2Z1aS1pY29uJywgY2xhc3NOYW1lKX1cclxuICAgICAgICAgICAgICAgICB7Li4ucmVzdFByb3BzfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8dXNlIHhsaW5rSHJlZj17YCMke25hbWV9YH0vPlxyXG4gICAgICAgICAgICA8L3N2Zz5cclxuICAgICAgICApO1xyXG4gICAgfTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEljb247IiwiaW1wb3J0IFJlYWN0LHtCdXR0b25IVE1MQXR0cmlidXRlc30gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgY2xhc3NlcyAgZnJvbSBcIi4uL2hlbHBlcnMvY2xhc3Nlc1wiO1xyXG5pbXBvcnQgJy4vYnV0dG9uLnNjc3MnXHJcbmludGVyZmFjZSBQcm9wcyBleHRlbmRzIEJ1dHRvbkhUTUxBdHRyaWJ1dGVzPEhUTUxCdXR0b25FbGVtZW50PiB7XHJcbiBsZXZlbD86J2ltcG9ydGFudCd8J25vcm1hbCd8J3JlZCdcclxufVxyXG5cclxuY29uc3QgIEJ1dHRvbnNzOlJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPiA9KHByb3BzKT0+e1xyXG4gICAgY29uc3QgIHtjbGFzc05hbWUsY2hpbGRyZW4sbGV2ZWwsLi4ucmVzdFByb3BzfSA9cHJvcHNcclxuXHJcbiAgICByZXR1cm4oXHJcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCJcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xhc3NlcyggYGZ1aS1idXR0b25gLGBmdWktYnV0dG9uLSR7bGV2ZWx9YCxjbGFzc05hbWUpfSB7Li4ucmVzdFByb3BzfT5cclxuICAgICAgICAgICAge2NoaWxkcmVufVxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgKVxyXG59O1xyXG5CdXR0b25zcy5kZWZhdWx0UHJvcHM9e1xyXG4gICAgbGV2ZWw6J25vcm1hbCdcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uc3M7IiwiaW1wb3J0IFJlYWN0LCB7RnJhZ21lbnQsIFJlYWN0RWxlbWVudCwgUmVhY3ROb2RlfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCAnLi9kaWFsb2cuc2Nzcyc7XHJcbmltcG9ydCB7SWNvbn0gZnJvbSAnLi4vaW5kZXgnO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHtzY29wZWRDbGFzc01ha2VyfSBmcm9tICcuLi9oZWxwZXJzL2NsYXNzZXMnO1xyXG5pbXBvcnQgQnV0dG9uc3MgZnJvbSBcIi4uL2J1dHRvbi9idXR0b25cIjtcclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICAgIHZpc2libGU6IGJvb2xlYW47XHJcbiAgICBidXR0b25zPzogQXJyYXk8UmVhY3RFbGVtZW50PjtcclxuICAgIG9uQ2xvc2U6IFJlYWN0Lk1vdXNlRXZlbnRIYW5kbGVyO1xyXG4gICAgY2xvc2VPbkNsaWNrTWFzaz86IGJvb2xlYW47XHJcbn1cclxuXHJcbmNvbnN0IHNjb3BlZENsYXNzID0gc2NvcGVkQ2xhc3NNYWtlcignZnVpLWRpYWxvZycpO1xyXG5jb25zdCBzYyA9IHNjb3BlZENsYXNzO1xyXG5jb25zdCBEaWFsb2c6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPiA9IChwcm9wcykgPT4ge1xyXG4gICAgY29uc3Qgb25DbGlja0Nsb3NlOiBSZWFjdC5Nb3VzZUV2ZW50SGFuZGxlciA9IChlKSA9PiB7XHJcbiAgICAgICAgcHJvcHMub25DbG9zZShlKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBvbkNsaWNrTWFzazogUmVhY3QuTW91c2VFdmVudEhhbmRsZXIgPSAoZSkgPT4ge1xyXG4gICAgICAgIGlmIChwcm9wcy5jbG9zZU9uQ2xpY2tNYXNrKSB7XHJcbiAgICAgICAgICAgIHByb3BzLm9uQ2xvc2UoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IHByb3BzLnZpc2libGUgJiZcclxuICAgICAgICA8RnJhZ21lbnQ+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzYygnbWFzaycpfSBvbkNsaWNrPXtvbkNsaWNrTWFza30+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c2MoJycpfT5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzYygnY2xvc2UnKX0gb25DbGljaz17b25DbGlja0Nsb3NlfT5cclxuICAgICAgICAgICAgICAgICAgICA8SWNvbiBuYW1lPVwiY3Vvd3VcIi8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxoZWFkZXIgY2xhc3NOYW1lPXtzYygnaGVhZGVyJyl9PlxyXG4gICAgICAgICAgICAgICAgICAgIOaPkOekulxyXG4gICAgICAgICAgICAgICAgPC9oZWFkZXI+XHJcbiAgICAgICAgICAgICAgICA8bWFpbiBjbGFzc05hbWU9e3NjKCdtYWluJyl9PlxyXG4gICAgICAgICAgICAgICAgICAgIHtwcm9wcy5jaGlsZHJlbn1cclxuICAgICAgICAgICAgICAgIDwvbWFpbj5cclxuICAgICAgICAgICAgICAgIHtwcm9wcy5idXR0b25zICYmIHByb3BzLmJ1dHRvbnMubGVuZ3RoID4gMCAmJlxyXG4gICAgICAgICAgICAgICAgPGZvb3RlciBjbGFzc05hbWU9e3NjKCdmb290ZXInKX0+XHJcbiAgICAgICAgICAgICAgICAgICAge3Byb3BzLmJ1dHRvbnMgJiYgcHJvcHMuYnV0dG9ucy5tYXAoKGJ1dHRvbiwgaW5kZXgpID0+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlYWN0LmNsb25lRWxlbWVudChidXR0b24sIHtrZXk6IGluZGV4fSlcclxuICAgICAgICAgICAgICAgICAgICApfVxyXG4gICAgICAgICAgICAgICAgPC9mb290ZXI+XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvRnJhZ21lbnQ+O1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICBSZWFjdERPTS5jcmVhdGVQb3J0YWwocmVzdWx0LCBkb2N1bWVudC5ib2R5KVxyXG4gICAgKTtcclxufTtcclxuRGlhbG9nLmRlZmF1bHRQcm9wcyA9IHtcclxuICAgIGNsb3NlT25DbGlja01hc2s6IGZhbHNlXHJcbn07XHJcbmNvbnN0IG1vZGFsID0gKGNvbnRlbnQ6IFJlYWN0Tm9kZSwgYnV0dG9ucz86IEFycmF5PFJlYWN0RWxlbWVudD4sIGFmdGVyQ2xvc2U/OiAoKSA9PiB2b2lkKSA9PiB7XHJcbiAgICBjb25zdCBjbG9zZSA9ICgpID0+IHtcclxuICAgICAgICBSZWFjdERPTS5yZW5kZXIoUmVhY3QuY2xvbmVFbGVtZW50KGNvbXBvbmVudCwge3Zpc2libGU6IGZhbHNlfSksIGRpdik7XHJcbiAgICAgICAgUmVhY3RET00udW5tb3VudENvbXBvbmVudEF0Tm9kZShkaXYpO1xyXG4gICAgICAgIGRpdi5yZW1vdmUoKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBjb21wb25lbnQgPVxyXG4gICAgICAgIDxEaWFsb2dcclxuICAgICAgICAgICAgdmlzaWJsZT17dHJ1ZX1cclxuICAgICAgICAgICAgYnV0dG9ucz17YnV0dG9uc31cclxuICAgICAgICAgICAgb25DbG9zZT17KCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgIGFmdGVyQ2xvc2UgJiYgYWZ0ZXJDbG9zZSgpO1xyXG4gICAgICAgICAgICB9fT5cclxuICAgICAgICAgICAge2NvbnRlbnR9XHJcbiAgICAgICAgPC9EaWFsb2c+O1xyXG4gICAgY29uc3QgZGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZChkaXYpO1xyXG4gICAgUmVhY3RET00ucmVuZGVyKGNvbXBvbmVudCwgZGl2KTtcclxuICAgIHJldHVybiBjbG9zZTtcclxufTtcclxuY29uc3QgYWxlcnQgPSAoY29udGVudDogc3RyaW5nKSA9PiB7XHJcbiAgICBjb25zdCBidXR0b24gPSA8QnV0dG9uc3Mgb25DbGljaz17KCkgPT4gY2xvc2UoKX0+T0s8L0J1dHRvbnNzPjtcclxuICAgIGNvbnN0IGNsb3NlID0gbW9kYWwoY29udGVudCwgW2J1dHRvbl0pO1xyXG59O1xyXG5jb25zdCBjb25maXJtID0gKGNvbnRlbnQ6IHN0cmluZywgeWVzPzogKCkgPT4gdm9pZCwgbm8/OiAoKSA9PiB2b2lkKSA9PiB7XHJcbiAgICBjb25zdCBvblllcyA9ICgpID0+IHtcclxuICAgICAgICBjbG9zZSgpO1xyXG4gICAgICAgIHllcyAmJiB5ZXMoKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBvbk5vID0gKCkgPT4ge1xyXG4gICAgICAgIGNsb3NlKCk7XHJcbiAgICAgICAgbm8gJiYgbm8oKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBidXR0b25zID0gW1xyXG4gICAgICAgIDxCdXR0b25zcyBvbkNsaWNrPXtvblllc30gbGV2ZWw9XCJpbXBvcnRhbnRcIj55ZXM8L0J1dHRvbnNzPixcclxuICAgICAgICA8QnV0dG9uc3Mgb25DbGljaz17b25Ob30+bm88L0J1dHRvbnNzPlxyXG4gICAgXTtcclxuICAgIGNvbnN0IGNsb3NlID0gbW9kYWwoY29udGVudCwgYnV0dG9ucywgbm8pO1xyXG59O1xyXG5leHBvcnQge2FsZXJ0LCBjb25maXJtLCBtb2RhbH07XHJcbmV4cG9ydCBkZWZhdWx0IERpYWxvZzsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgQnV0dG9uc3MgZnJvbSAnLi9idXR0b24nXHJcbmNvbnN0IEJ1dHRvbkFzc2VtYmx5MTogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgPlxyXG4gICAgICAgICAgICA8ZGl2ID5cclxuICAgICAgICAgICAgICAgIDxCdXR0b25zcz7pu5jorqTmjInpkq48L0J1dHRvbnNzPlxyXG4gICAgICAgICAgICAgICAgPEJ1dHRvbnNzIGxldmVsPVwiaW1wb3J0YW50XCI+6JOd6Imy5oyJ6ZKuPC9CdXR0b25zcz5cclxuICAgICAgICAgICAgICAgIDxCdXR0b25zcyBsZXZlbD1cInJlZFwiPue6ouiJsjwvQnV0dG9uc3M+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uQXNzZW1ibHkxOyIsIi8qKlxuICogUHJpc206IExpZ2h0d2VpZ2h0LCByb2J1c3QsIGVsZWdhbnQgc3ludGF4IGhpZ2hsaWdodGluZ1xuICpcbiAqIEBsaWNlbnNlIE1JVCA8aHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVQ+XG4gKiBAYXV0aG9yIExlYSBWZXJvdSA8aHR0cHM6Ly9sZWEudmVyb3UubWU+XG4gKiBAbmFtZXNwYWNlXG4gKiBAcHVibGljXG4gKi9cbi8qKlxuICogcHJpc20tcmVhY3QtcmVuZGVyZXI6XG4gKiBUaGlzIGZpbGUgaGFzIGJlZW4gbW9kaWZpZWQgdG8gcmVtb3ZlOlxuICogLSBnbG9iYWxzIGFuZCB3aW5kb3cgZGVwZW5kZW5jeVxuICogLSB3b3JrZXIgc3VwcG9ydFxuICogLSBoaWdobGlnaHRBbGwgYW5kIG90aGVyIGVsZW1lbnQgZGVwZW5kZW50IG1ldGhvZHNcbiAqIC0gXy5ob29rcyBoZWxwZXJzXG4gKiAtIFVNRC9ub2RlLXNwZWNpZmljIGhhY2tzXG4gKiBJdCBoYXMgYWxzbyBiZWVuIHJ1biB0aHJvdWdoIHByZXR0aWVyXG4gKi9cblxuIHZhciBQcmlzbSA9IChmdW5jdGlvbiAoKSB7XG5cblx0Ly8gUHJpdmF0ZSBoZWxwZXIgdmFyc1xuXHR2YXIgbGFuZyA9IC8oPzpefFxccylsYW5nKD86dWFnZSk/LShbXFx3LV0rKSg/PVxcc3wkKS9pO1xuXHR2YXIgdW5pcXVlSWQgPSAwO1xuXG5cdC8vIFRoZSBncmFtbWFyIG9iamVjdCBmb3IgcGxhaW50ZXh0XG5cdHZhciBwbGFpblRleHRHcmFtbWFyID0ge307XG5cblxuXHR2YXIgXyA9IHtcblx0XHQvKipcblx0XHQgKiBBIG5hbWVzcGFjZSBmb3IgdXRpbGl0eSBtZXRob2RzLlxuXHRcdCAqXG5cdFx0ICogQWxsIGZ1bmN0aW9uIGluIHRoaXMgbmFtZXNwYWNlIHRoYXQgYXJlIG5vdCBleHBsaWNpdGx5IG1hcmtlZCBhcyBfcHVibGljXyBhcmUgZm9yIF9faW50ZXJuYWwgdXNlIG9ubHlfXyBhbmQgbWF5XG5cdFx0ICogY2hhbmdlIG9yIGRpc2FwcGVhciBhdCBhbnkgdGltZS5cblx0XHQgKlxuXHRcdCAqIEBuYW1lc3BhY2Vcblx0XHQgKiBAbWVtYmVyb2YgUHJpc21cblx0XHQgKi9cblx0XHR1dGlsOiB7XG5cdFx0XHRlbmNvZGU6IGZ1bmN0aW9uIGVuY29kZSh0b2tlbnMpIHtcblx0XHRcdFx0aWYgKHRva2VucyBpbnN0YW5jZW9mIFRva2VuKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG5ldyBUb2tlbih0b2tlbnMudHlwZSwgZW5jb2RlKHRva2Vucy5jb250ZW50KSwgdG9rZW5zLmFsaWFzKTtcblx0XHRcdFx0fSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRva2VucykpIHtcblx0XHRcdFx0XHRyZXR1cm4gdG9rZW5zLm1hcChlbmNvZGUpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiB0b2tlbnMucmVwbGFjZSgvJi9nLCAnJmFtcDsnKS5yZXBsYWNlKC88L2csICcmbHQ7JykucmVwbGFjZSgvXFx1MDBhMC9nLCAnICcpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIFJldHVybnMgdGhlIG5hbWUgb2YgdGhlIHR5cGUgb2YgdGhlIGdpdmVuIHZhbHVlLlxuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSB7YW55fSBvXG5cdFx0XHQgKiBAcmV0dXJucyB7c3RyaW5nfVxuXHRcdFx0ICogQGV4YW1wbGVcblx0XHRcdCAqIHR5cGUobnVsbCkgICAgICA9PT0gJ051bGwnXG5cdFx0XHQgKiB0eXBlKHVuZGVmaW5lZCkgPT09ICdVbmRlZmluZWQnXG5cdFx0XHQgKiB0eXBlKDEyMykgICAgICAgPT09ICdOdW1iZXInXG5cdFx0XHQgKiB0eXBlKCdmb28nKSAgICAgPT09ICdTdHJpbmcnXG5cdFx0XHQgKiB0eXBlKHRydWUpICAgICAgPT09ICdCb29sZWFuJ1xuXHRcdFx0ICogdHlwZShbMSwgMl0pICAgID09PSAnQXJyYXknXG5cdFx0XHQgKiB0eXBlKHt9KSAgICAgICAgPT09ICdPYmplY3QnXG5cdFx0XHQgKiB0eXBlKFN0cmluZykgICAgPT09ICdGdW5jdGlvbidcblx0XHRcdCAqIHR5cGUoL2FiYysvKSAgICA9PT0gJ1JlZ0V4cCdcblx0XHRcdCAqL1xuXHRcdFx0dHlwZTogZnVuY3Rpb24gKG8pIHtcblx0XHRcdFx0cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIFJldHVybnMgYSB1bmlxdWUgbnVtYmVyIGZvciB0aGUgZ2l2ZW4gb2JqZWN0LiBMYXRlciBjYWxscyB3aWxsIHN0aWxsIHJldHVybiB0aGUgc2FtZSBudW1iZXIuXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtIHtPYmplY3R9IG9ialxuXHRcdFx0ICogQHJldHVybnMge251bWJlcn1cblx0XHRcdCAqL1xuXHRcdFx0b2JqSWQ6IGZ1bmN0aW9uIChvYmopIHtcblx0XHRcdFx0aWYgKCFvYmpbJ19faWQnXSkge1xuXHRcdFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosICdfX2lkJywgeyB2YWx1ZTogKyt1bmlxdWVJZCB9KTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gb2JqWydfX2lkJ107XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIENyZWF0ZXMgYSBkZWVwIGNsb25lIG9mIHRoZSBnaXZlbiBvYmplY3QuXG5cdFx0XHQgKlxuXHRcdFx0ICogVGhlIG1haW4gaW50ZW5kZWQgdXNlIG9mIHRoaXMgZnVuY3Rpb24gaXMgdG8gY2xvbmUgbGFuZ3VhZ2UgZGVmaW5pdGlvbnMuXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtIHtUfSBvXG5cdFx0XHQgKiBAcGFyYW0ge1JlY29yZDxudW1iZXIsIGFueT59IFt2aXNpdGVkXVxuXHRcdFx0ICogQHJldHVybnMge1R9XG5cdFx0XHQgKiBAdGVtcGxhdGUgVFxuXHRcdFx0ICovXG5cdFx0XHRjbG9uZTogZnVuY3Rpb24gZGVlcENsb25lKG8sIHZpc2l0ZWQpIHtcblx0XHRcdFx0dmlzaXRlZCA9IHZpc2l0ZWQgfHwge307XG5cblx0XHRcdFx0dmFyIGNsb25lOyB2YXIgaWQ7XG5cdFx0XHRcdHN3aXRjaCAoXy51dGlsLnR5cGUobykpIHtcblx0XHRcdFx0XHRjYXNlICdPYmplY3QnOlxuXHRcdFx0XHRcdFx0aWQgPSBfLnV0aWwub2JqSWQobyk7XG5cdFx0XHRcdFx0XHRpZiAodmlzaXRlZFtpZF0pIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZpc2l0ZWRbaWRdO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Y2xvbmUgPSAvKiogQHR5cGUge1JlY29yZDxzdHJpbmcsIGFueT59ICovICh7fSk7XG5cdFx0XHRcdFx0XHR2aXNpdGVkW2lkXSA9IGNsb25lO1xuXG5cdFx0XHRcdFx0XHRmb3IgKHZhciBrZXkgaW4gbykge1xuXHRcdFx0XHRcdFx0XHRpZiAoby5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHRcdFx0XHRcdFx0Y2xvbmVba2V5XSA9IGRlZXBDbG9uZShvW2tleV0sIHZpc2l0ZWQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJldHVybiAvKiogQHR5cGUge2FueX0gKi8gKGNsb25lKTtcblxuXHRcdFx0XHRcdGNhc2UgJ0FycmF5Jzpcblx0XHRcdFx0XHRcdGlkID0gXy51dGlsLm9iaklkKG8pO1xuXHRcdFx0XHRcdFx0aWYgKHZpc2l0ZWRbaWRdKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiB2aXNpdGVkW2lkXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGNsb25lID0gW107XG5cdFx0XHRcdFx0XHR2aXNpdGVkW2lkXSA9IGNsb25lO1xuXG5cdFx0XHRcdFx0XHQoLyoqIEB0eXBlIHtBcnJheX0gKi8oLyoqIEB0eXBlIHthbnl9ICovKG8pKSkuZm9yRWFjaChmdW5jdGlvbiAodiwgaSkge1xuXHRcdFx0XHRcdFx0XHRjbG9uZVtpXSA9IGRlZXBDbG9uZSh2LCB2aXNpdGVkKTtcblx0XHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4gLyoqIEB0eXBlIHthbnl9ICovIChjbG9uZSk7XG5cblx0XHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdFx0cmV0dXJuIG87XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogUmV0dXJucyB0aGUgUHJpc20gbGFuZ3VhZ2Ugb2YgdGhlIGdpdmVuIGVsZW1lbnQgc2V0IGJ5IGEgYGxhbmd1YWdlLXh4eHhgIG9yIGBsYW5nLXh4eHhgIGNsYXNzLlxuXHRcdFx0ICpcblx0XHRcdCAqIElmIG5vIGxhbmd1YWdlIGlzIHNldCBmb3IgdGhlIGVsZW1lbnQgb3IgdGhlIGVsZW1lbnQgaXMgYG51bGxgIG9yIGB1bmRlZmluZWRgLCBgbm9uZWAgd2lsbCBiZSByZXR1cm5lZC5cblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0ge0VsZW1lbnR9IGVsZW1lbnRcblx0XHRcdCAqIEByZXR1cm5zIHtzdHJpbmd9XG5cdFx0XHQgKi9cblx0XHRcdGdldExhbmd1YWdlOiBmdW5jdGlvbiAoZWxlbWVudCkge1xuXHRcdFx0XHR3aGlsZSAoZWxlbWVudCkge1xuXHRcdFx0XHRcdHZhciBtID0gbGFuZy5leGVjKGVsZW1lbnQuY2xhc3NOYW1lKTtcblx0XHRcdFx0XHRpZiAobSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIG1bMV0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxlbWVudCA9IGVsZW1lbnQucGFyZW50RWxlbWVudDtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gJ25vbmUnO1xuXHRcdFx0fSxcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBTZXRzIHRoZSBQcmlzbSBgbGFuZ3VhZ2UteHh4eGAgY2xhc3Mgb2YgdGhlIGdpdmVuIGVsZW1lbnQuXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG5cdFx0XHQgKiBAcGFyYW0ge3N0cmluZ30gbGFuZ3VhZ2Vcblx0XHRcdCAqIEByZXR1cm5zIHt2b2lkfVxuXHRcdFx0ICovXG5cdFx0XHRzZXRMYW5ndWFnZTogZnVuY3Rpb24gKGVsZW1lbnQsIGxhbmd1YWdlKSB7XG5cdFx0XHRcdC8vIHJlbW92ZSBhbGwgYGxhbmd1YWdlLXh4eHhgIGNsYXNzZXNcblx0XHRcdFx0Ly8gKHRoaXMgbWlnaHQgbGVhdmUgYmVoaW5kIGEgbGVhZGluZyBzcGFjZSlcblx0XHRcdFx0ZWxlbWVudC5jbGFzc05hbWUgPSBlbGVtZW50LmNsYXNzTmFtZS5yZXBsYWNlKFJlZ0V4cChsYW5nLCAnZ2knKSwgJycpO1xuXG5cdFx0XHRcdC8vIGFkZCB0aGUgbmV3IGBsYW5ndWFnZS14eHh4YCBjbGFzc1xuXHRcdFx0XHQvLyAodXNpbmcgYGNsYXNzTGlzdGAgd2lsbCBhdXRvbWF0aWNhbGx5IGNsZWFuIHVwIHNwYWNlcyBmb3IgdXMpXG5cdFx0XHRcdGVsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbGFuZ3VhZ2UtJyArIGxhbmd1YWdlKTtcblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogUmV0dXJucyB3aGV0aGVyIGEgZ2l2ZW4gY2xhc3MgaXMgYWN0aXZlIGZvciBgZWxlbWVudGAuXG5cdFx0XHQgKlxuXHRcdFx0ICogVGhlIGNsYXNzIGNhbiBiZSBhY3RpdmF0ZWQgaWYgYGVsZW1lbnRgIG9yIG9uZSBvZiBpdHMgYW5jZXN0b3JzIGhhcyB0aGUgZ2l2ZW4gY2xhc3MgYW5kIGl0IGNhbiBiZSBkZWFjdGl2YXRlZFxuXHRcdFx0ICogaWYgYGVsZW1lbnRgIG9yIG9uZSBvZiBpdHMgYW5jZXN0b3JzIGhhcyB0aGUgbmVnYXRlZCB2ZXJzaW9uIG9mIHRoZSBnaXZlbiBjbGFzcy4gVGhlIF9uZWdhdGVkIHZlcnNpb25fIG9mIHRoZVxuXHRcdFx0ICogZ2l2ZW4gY2xhc3MgaXMganVzdCB0aGUgZ2l2ZW4gY2xhc3Mgd2l0aCBhIGBuby1gIHByZWZpeC5cblx0XHRcdCAqXG5cdFx0XHQgKiBXaGV0aGVyIHRoZSBjbGFzcyBpcyBhY3RpdmUgaXMgZGV0ZXJtaW5lZCBieSB0aGUgY2xvc2VzdCBhbmNlc3RvciBvZiBgZWxlbWVudGAgKHdoZXJlIGBlbGVtZW50YCBpdHNlbGYgaXNcblx0XHRcdCAqIGNsb3Nlc3QgYW5jZXN0b3IpIHRoYXQgaGFzIHRoZSBnaXZlbiBjbGFzcyBvciB0aGUgbmVnYXRlZCB2ZXJzaW9uIG9mIGl0LiBJZiBuZWl0aGVyIGBlbGVtZW50YCBub3IgYW55IG9mIGl0c1xuXHRcdFx0ICogYW5jZXN0b3JzIGhhdmUgdGhlIGdpdmVuIGNsYXNzIG9yIHRoZSBuZWdhdGVkIHZlcnNpb24gb2YgaXQsIHRoZW4gdGhlIGRlZmF1bHQgYWN0aXZhdGlvbiB3aWxsIGJlIHJldHVybmVkLlxuXHRcdFx0ICpcblx0XHRcdCAqIEluIHRoZSBwYXJhZG94aWNhbCBzaXR1YXRpb24gd2hlcmUgdGhlIGNsb3Nlc3QgYW5jZXN0b3IgY29udGFpbnMgX19ib3RoX18gdGhlIGdpdmVuIGNsYXNzIGFuZCB0aGUgbmVnYXRlZFxuXHRcdFx0ICogdmVyc2lvbiBvZiBpdCwgdGhlIGNsYXNzIGlzIGNvbnNpZGVyZWQgYWN0aXZlLlxuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuXHRcdFx0ICogQHBhcmFtIHtzdHJpbmd9IGNsYXNzTmFtZVxuXHRcdFx0ICogQHBhcmFtIHtib29sZWFufSBbZGVmYXVsdEFjdGl2YXRpb249ZmFsc2VdXG5cdFx0XHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0XHRcdCAqL1xuXHRcdFx0aXNBY3RpdmU6IGZ1bmN0aW9uIChlbGVtZW50LCBjbGFzc05hbWUsIGRlZmF1bHRBY3RpdmF0aW9uKSB7XG5cdFx0XHRcdHZhciBubyA9ICduby0nICsgY2xhc3NOYW1lO1xuXG5cdFx0XHRcdHdoaWxlIChlbGVtZW50KSB7XG5cdFx0XHRcdFx0dmFyIGNsYXNzTGlzdCA9IGVsZW1lbnQuY2xhc3NMaXN0O1xuXHRcdFx0XHRcdGlmIChjbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChjbGFzc0xpc3QuY29udGFpbnMobm8pKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGVsZW1lbnQgPSBlbGVtZW50LnBhcmVudEVsZW1lbnQ7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuICEhZGVmYXVsdEFjdGl2YXRpb247XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFRoaXMgbmFtZXNwYWNlIGNvbnRhaW5zIGFsbCBjdXJyZW50bHkgbG9hZGVkIGxhbmd1YWdlcyBhbmQgdGhlIHNvbWUgaGVscGVyIGZ1bmN0aW9ucyB0byBjcmVhdGUgYW5kIG1vZGlmeSBsYW5ndWFnZXMuXG5cdFx0ICpcblx0XHQgKiBAbmFtZXNwYWNlXG5cdFx0ICogQG1lbWJlcm9mIFByaXNtXG5cdFx0ICogQHB1YmxpY1xuXHRcdCAqL1xuXHRcdGxhbmd1YWdlczoge1xuXHRcdFx0LyoqXG5cdFx0XHQgKiBUaGUgZ3JhbW1hciBmb3IgcGxhaW4sIHVuZm9ybWF0dGVkIHRleHQuXG5cdFx0XHQgKi9cblx0XHRcdHBsYWluOiBwbGFpblRleHRHcmFtbWFyLFxuXHRcdFx0cGxhaW50ZXh0OiBwbGFpblRleHRHcmFtbWFyLFxuXHRcdFx0dGV4dDogcGxhaW5UZXh0R3JhbW1hcixcblx0XHRcdHR4dDogcGxhaW5UZXh0R3JhbW1hcixcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIHRoZSBsYW5ndWFnZSB3aXRoIHRoZSBnaXZlbiBpZCBhbmQgYXBwZW5kcyB0aGUgZ2l2ZW4gdG9rZW5zLlxuXHRcdFx0ICpcblx0XHRcdCAqIElmIGEgdG9rZW4gaW4gYHJlZGVmYCBhbHNvIGFwcGVhcnMgaW4gdGhlIGNvcGllZCBsYW5ndWFnZSwgdGhlbiB0aGUgZXhpc3RpbmcgdG9rZW4gaW4gdGhlIGNvcGllZCBsYW5ndWFnZVxuXHRcdFx0ICogd2lsbCBiZSBvdmVyd3JpdHRlbiBhdCBpdHMgb3JpZ2luYWwgcG9zaXRpb24uXG5cdFx0XHQgKlxuXHRcdFx0ICogIyMgQmVzdCBwcmFjdGljZXNcblx0XHRcdCAqXG5cdFx0XHQgKiBTaW5jZSB0aGUgcG9zaXRpb24gb2Ygb3ZlcndyaXRpbmcgdG9rZW5zICh0b2tlbiBpbiBgcmVkZWZgIHRoYXQgb3ZlcndyaXRlIHRva2VucyBpbiB0aGUgY29waWVkIGxhbmd1YWdlKVxuXHRcdFx0ICogZG9lc24ndCBtYXR0ZXIsIHRoZXkgY2FuIHRlY2huaWNhbGx5IGJlIGluIGFueSBvcmRlci4gSG93ZXZlciwgdGhpcyBjYW4gYmUgY29uZnVzaW5nIHRvIG90aGVycyB0aGF0IHRyeWluZyB0b1xuXHRcdFx0ICogdW5kZXJzdGFuZCB0aGUgbGFuZ3VhZ2UgZGVmaW5pdGlvbiBiZWNhdXNlLCBub3JtYWxseSwgdGhlIG9yZGVyIG9mIHRva2VucyBtYXR0ZXJzIGluIFByaXNtIGdyYW1tYXJzLlxuXHRcdFx0ICpcblx0XHRcdCAqIFRoZXJlZm9yZSwgaXQgaXMgZW5jb3VyYWdlZCB0byBvcmRlciBvdmVyd3JpdGluZyB0b2tlbnMgYWNjb3JkaW5nIHRvIHRoZSBwb3NpdGlvbnMgb2YgdGhlIG92ZXJ3cml0dGVuIHRva2Vucy5cblx0XHRcdCAqIEZ1cnRoZXJtb3JlLCBhbGwgbm9uLW92ZXJ3cml0aW5nIHRva2VucyBzaG91bGQgYmUgcGxhY2VkIGFmdGVyIHRoZSBvdmVyd3JpdGluZyBvbmVzLlxuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgaWQgb2YgdGhlIGxhbmd1YWdlIHRvIGV4dGVuZC4gVGhpcyBoYXMgdG8gYmUgYSBrZXkgaW4gYFByaXNtLmxhbmd1YWdlc2AuXG5cdFx0XHQgKiBAcGFyYW0ge0dyYW1tYXJ9IHJlZGVmIFRoZSBuZXcgdG9rZW5zIHRvIGFwcGVuZC5cblx0XHRcdCAqIEByZXR1cm5zIHtHcmFtbWFyfSBUaGUgbmV3IGxhbmd1YWdlIGNyZWF0ZWQuXG5cdFx0XHQgKiBAcHVibGljXG5cdFx0XHQgKiBAZXhhbXBsZVxuXHRcdFx0ICogUHJpc20ubGFuZ3VhZ2VzWydjc3Mtd2l0aC1jb2xvcnMnXSA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2NzcycsIHtcblx0XHRcdCAqICAgICAvLyBQcmlzbS5sYW5ndWFnZXMuY3NzIGFscmVhZHkgaGFzIGEgJ2NvbW1lbnQnIHRva2VuLCBzbyB0aGlzIHRva2VuIHdpbGwgb3ZlcndyaXRlIENTUycgJ2NvbW1lbnQnIHRva2VuXG5cdFx0XHQgKiAgICAgLy8gYXQgaXRzIG9yaWdpbmFsIHBvc2l0aW9uXG5cdFx0XHQgKiAgICAgJ2NvbW1lbnQnOiB7IC4uLiB9LFxuXHRcdFx0ICogICAgIC8vIENTUyBkb2Vzbid0IGhhdmUgYSAnY29sb3InIHRva2VuLCBzbyB0aGlzIHRva2VuIHdpbGwgYmUgYXBwZW5kZWRcblx0XHRcdCAqICAgICAnY29sb3InOiAvXFxiKD86cmVkfGdyZWVufGJsdWUpXFxiL1xuXHRcdFx0ICogfSk7XG5cdFx0XHQgKi9cblx0XHRcdGV4dGVuZDogZnVuY3Rpb24gKGlkLCByZWRlZikge1xuXHRcdFx0XHR2YXIgbGFuZyA9IF8udXRpbC5jbG9uZShfLmxhbmd1YWdlc1tpZF0pO1xuXG5cdFx0XHRcdGZvciAodmFyIGtleSBpbiByZWRlZikge1xuXHRcdFx0XHRcdGxhbmdba2V5XSA9IHJlZGVmW2tleV07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbGFuZztcblx0XHRcdH0sXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogSW5zZXJ0cyB0b2tlbnMgX2JlZm9yZV8gYW5vdGhlciB0b2tlbiBpbiBhIGxhbmd1YWdlIGRlZmluaXRpb24gb3IgYW55IG90aGVyIGdyYW1tYXIuXG5cdFx0XHQgKlxuXHRcdFx0ICogIyMgVXNhZ2Vcblx0XHRcdCAqXG5cdFx0XHQgKiBUaGlzIGhlbHBlciBtZXRob2QgbWFrZXMgaXQgZWFzeSB0byBtb2RpZnkgZXhpc3RpbmcgbGFuZ3VhZ2VzLiBGb3IgZXhhbXBsZSwgdGhlIENTUyBsYW5ndWFnZSBkZWZpbml0aW9uXG5cdFx0XHQgKiBub3Qgb25seSBkZWZpbmVzIENTUyBoaWdobGlnaHRpbmcgZm9yIENTUyBkb2N1bWVudHMsIGJ1dCBhbHNvIG5lZWRzIHRvIGRlZmluZSBoaWdobGlnaHRpbmcgZm9yIENTUyBlbWJlZGRlZFxuXHRcdFx0ICogaW4gSFRNTCB0aHJvdWdoIGA8c3R5bGU+YCBlbGVtZW50cy4gVG8gZG8gdGhpcywgaXQgbmVlZHMgdG8gbW9kaWZ5IGBQcmlzbS5sYW5ndWFnZXMubWFya3VwYCBhbmQgYWRkIHRoZVxuXHRcdFx0ICogYXBwcm9wcmlhdGUgdG9rZW5zLiBIb3dldmVyLCBgUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cGAgaXMgYSByZWd1bGFyIEphdmFTY3JpcHQgb2JqZWN0IGxpdGVyYWwsIHNvIGlmIHlvdSBkb1xuXHRcdFx0ICogdGhpczpcblx0XHRcdCAqXG5cdFx0XHQgKiBgYGBqc1xuXHRcdFx0ICogUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC5zdHlsZSA9IHtcblx0XHRcdCAqICAgICAvLyB0b2tlblxuXHRcdFx0ICogfTtcblx0XHRcdCAqIGBgYFxuXHRcdFx0ICpcblx0XHRcdCAqIHRoZW4gdGhlIGBzdHlsZWAgdG9rZW4gd2lsbCBiZSBhZGRlZCAoYW5kIHByb2Nlc3NlZCkgYXQgdGhlIGVuZC4gYGluc2VydEJlZm9yZWAgYWxsb3dzIHlvdSB0byBpbnNlcnQgdG9rZW5zXG5cdFx0XHQgKiBiZWZvcmUgZXhpc3RpbmcgdG9rZW5zLiBGb3IgdGhlIENTUyBleGFtcGxlIGFib3ZlLCB5b3Ugd291bGQgdXNlIGl0IGxpa2UgdGhpczpcblx0XHRcdCAqXG5cdFx0XHQgKiBgYGBqc1xuXHRcdFx0ICogUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnbWFya3VwJywgJ2NkYXRhJywge1xuXHRcdFx0ICogICAgICdzdHlsZSc6IHtcblx0XHRcdCAqICAgICAgICAgLy8gdG9rZW5cblx0XHRcdCAqICAgICB9XG5cdFx0XHQgKiB9KTtcblx0XHRcdCAqIGBgYFxuXHRcdFx0ICpcblx0XHRcdCAqICMjIFNwZWNpYWwgY2FzZXNcblx0XHRcdCAqXG5cdFx0XHQgKiBJZiB0aGUgZ3JhbW1hcnMgb2YgYGluc2lkZWAgYW5kIGBpbnNlcnRgIGhhdmUgdG9rZW5zIHdpdGggdGhlIHNhbWUgbmFtZSwgdGhlIHRva2VucyBpbiBgaW5zaWRlYCdzIGdyYW1tYXJcblx0XHRcdCAqIHdpbGwgYmUgaWdub3JlZC5cblx0XHRcdCAqXG5cdFx0XHQgKiBUaGlzIGJlaGF2aW9yIGNhbiBiZSB1c2VkIHRvIGluc2VydCB0b2tlbnMgYWZ0ZXIgYGJlZm9yZWA6XG5cdFx0XHQgKlxuXHRcdFx0ICogYGBganNcblx0XHRcdCAqIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ21hcmt1cCcsICdjb21tZW50Jywge1xuXHRcdFx0ICogICAgICdjb21tZW50JzogUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC5jb21tZW50LFxuXHRcdFx0ICogICAgIC8vIHRva2VucyBhZnRlciAnY29tbWVudCdcblx0XHRcdCAqIH0pO1xuXHRcdFx0ICogYGBgXG5cdFx0XHQgKlxuXHRcdFx0ICogIyMgTGltaXRhdGlvbnNcblx0XHRcdCAqXG5cdFx0XHQgKiBUaGUgbWFpbiBwcm9ibGVtIGBpbnNlcnRCZWZvcmVgIGhhcyB0byBzb2x2ZSBpcyBpdGVyYXRpb24gb3JkZXIuIFNpbmNlIEVTMjAxNSwgdGhlIGl0ZXJhdGlvbiBvcmRlciBmb3Igb2JqZWN0XG5cdFx0XHQgKiBwcm9wZXJ0aWVzIGlzIGd1YXJhbnRlZWQgdG8gYmUgdGhlIGluc2VydGlvbiBvcmRlciAoZXhjZXB0IGZvciBpbnRlZ2VyIGtleXMpIGJ1dCBzb21lIGJyb3dzZXJzIGJlaGF2ZVxuXHRcdFx0ICogZGlmZmVyZW50bHkgd2hlbiBrZXlzIGFyZSBkZWxldGVkIGFuZCByZS1pbnNlcnRlZC4gU28gYGluc2VydEJlZm9yZWAgY2FuJ3QgYmUgaW1wbGVtZW50ZWQgYnkgdGVtcG9yYXJpbHlcblx0XHRcdCAqIGRlbGV0aW5nIHByb3BlcnRpZXMgd2hpY2ggaXMgbmVjZXNzYXJ5IHRvIGluc2VydCBhdCBhcmJpdHJhcnkgcG9zaXRpb25zLlxuXHRcdFx0ICpcblx0XHRcdCAqIFRvIHNvbHZlIHRoaXMgcHJvYmxlbSwgYGluc2VydEJlZm9yZWAgZG9lc24ndCBhY3R1YWxseSBpbnNlcnQgdGhlIGdpdmVuIHRva2VucyBpbnRvIHRoZSB0YXJnZXQgb2JqZWN0LlxuXHRcdFx0ICogSW5zdGVhZCwgaXQgd2lsbCBjcmVhdGUgYSBuZXcgb2JqZWN0IGFuZCByZXBsYWNlIGFsbCByZWZlcmVuY2VzIHRvIHRoZSB0YXJnZXQgb2JqZWN0IHdpdGggdGhlIG5ldyBvbmUuIFRoaXNcblx0XHRcdCAqIGNhbiBiZSBkb25lIHdpdGhvdXQgdGVtcG9yYXJpbHkgZGVsZXRpbmcgcHJvcGVydGllcywgc28gdGhlIGl0ZXJhdGlvbiBvcmRlciBpcyB3ZWxsLWRlZmluZWQuXG5cdFx0XHQgKlxuXHRcdFx0ICogSG93ZXZlciwgb25seSByZWZlcmVuY2VzIHRoYXQgY2FuIGJlIHJlYWNoZWQgZnJvbSBgUHJpc20ubGFuZ3VhZ2VzYCBvciBgaW5zZXJ0YCB3aWxsIGJlIHJlcGxhY2VkLiBJLmUuIGlmXG5cdFx0XHQgKiB5b3UgaG9sZCB0aGUgdGFyZ2V0IG9iamVjdCBpbiBhIHZhcmlhYmxlLCB0aGVuIHRoZSB2YWx1ZSBvZiB0aGUgdmFyaWFibGUgd2lsbCBub3QgY2hhbmdlLlxuXHRcdFx0ICpcblx0XHRcdCAqIGBgYGpzXG5cdFx0XHQgKiB2YXIgb2xkTWFya3VwID0gUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cDtcblx0XHRcdCAqIHZhciBuZXdNYXJrdXAgPSBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdtYXJrdXAnLCAnY29tbWVudCcsIHsgLi4uIH0pO1xuXHRcdFx0ICpcblx0XHRcdCAqIGFzc2VydChvbGRNYXJrdXAgIT09IFByaXNtLmxhbmd1YWdlcy5tYXJrdXApO1xuXHRcdFx0ICogYXNzZXJ0KG5ld01hcmt1cCA9PT0gUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cCk7XG5cdFx0XHQgKiBgYGBcblx0XHRcdCAqXG5cdFx0XHQgKiBAcGFyYW0ge3N0cmluZ30gaW5zaWRlIFRoZSBwcm9wZXJ0eSBvZiBgcm9vdGAgKGUuZy4gYSBsYW5ndWFnZSBpZCBpbiBgUHJpc20ubGFuZ3VhZ2VzYCkgdGhhdCBjb250YWlucyB0aGVcblx0XHRcdCAqIG9iamVjdCB0byBiZSBtb2RpZmllZC5cblx0XHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBiZWZvcmUgVGhlIGtleSB0byBpbnNlcnQgYmVmb3JlLlxuXHRcdFx0ICogQHBhcmFtIHtHcmFtbWFyfSBpbnNlcnQgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIGtleS12YWx1ZSBwYWlycyB0byBiZSBpbnNlcnRlZC5cblx0XHRcdCAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gW3Jvb3RdIFRoZSBvYmplY3QgY29udGFpbmluZyBgaW5zaWRlYCwgaS5lLiB0aGUgb2JqZWN0IHRoYXQgY29udGFpbnMgdGhlXG5cdFx0XHQgKiBvYmplY3QgdG8gYmUgbW9kaWZpZWQuXG5cdFx0XHQgKlxuXHRcdFx0ICogRGVmYXVsdHMgdG8gYFByaXNtLmxhbmd1YWdlc2AuXG5cdFx0XHQgKiBAcmV0dXJucyB7R3JhbW1hcn0gVGhlIG5ldyBncmFtbWFyIG9iamVjdC5cblx0XHRcdCAqIEBwdWJsaWNcblx0XHRcdCAqL1xuXHRcdFx0aW5zZXJ0QmVmb3JlOiBmdW5jdGlvbiAoaW5zaWRlLCBiZWZvcmUsIGluc2VydCwgcm9vdCkge1xuXHRcdFx0XHRyb290ID0gcm9vdCB8fCAvKiogQHR5cGUge2FueX0gKi8gKF8ubGFuZ3VhZ2VzKTtcblx0XHRcdFx0dmFyIGdyYW1tYXIgPSByb290W2luc2lkZV07XG5cdFx0XHRcdC8qKiBAdHlwZSB7R3JhbW1hcn0gKi9cblx0XHRcdFx0dmFyIHJldCA9IHt9O1xuXG5cdFx0XHRcdGZvciAodmFyIHRva2VuIGluIGdyYW1tYXIpIHtcblx0XHRcdFx0XHRpZiAoZ3JhbW1hci5oYXNPd25Qcm9wZXJ0eSh0b2tlbikpIHtcblxuXHRcdFx0XHRcdFx0aWYgKHRva2VuID09IGJlZm9yZSkge1xuXHRcdFx0XHRcdFx0XHRmb3IgKHZhciBuZXdUb2tlbiBpbiBpbnNlcnQpIHtcblx0XHRcdFx0XHRcdFx0XHRpZiAoaW5zZXJ0Lmhhc093blByb3BlcnR5KG5ld1Rva2VuKSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0cmV0W25ld1Rva2VuXSA9IGluc2VydFtuZXdUb2tlbl07XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdC8vIERvIG5vdCBpbnNlcnQgdG9rZW4gd2hpY2ggYWxzbyBvY2N1ciBpbiBpbnNlcnQuIFNlZSAjMTUyNVxuXHRcdFx0XHRcdFx0aWYgKCFpbnNlcnQuaGFzT3duUHJvcGVydHkodG9rZW4pKSB7XG5cdFx0XHRcdFx0XHRcdHJldFt0b2tlbl0gPSBncmFtbWFyW3Rva2VuXTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHR2YXIgb2xkID0gcm9vdFtpbnNpZGVdO1xuXHRcdFx0XHRyb290W2luc2lkZV0gPSByZXQ7XG5cblx0XHRcdFx0Ly8gVXBkYXRlIHJlZmVyZW5jZXMgaW4gb3RoZXIgbGFuZ3VhZ2UgZGVmaW5pdGlvbnNcblx0XHRcdFx0Xy5sYW5ndWFnZXMuREZTKF8ubGFuZ3VhZ2VzLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuXHRcdFx0XHRcdGlmICh2YWx1ZSA9PT0gb2xkICYmIGtleSAhPSBpbnNpZGUpIHtcblx0XHRcdFx0XHRcdHRoaXNba2V5XSA9IHJldDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUcmF2ZXJzZSBhIGxhbmd1YWdlIGRlZmluaXRpb24gd2l0aCBEZXB0aCBGaXJzdCBTZWFyY2hcblx0XHRcdERGUzogZnVuY3Rpb24gREZTKG8sIGNhbGxiYWNrLCB0eXBlLCB2aXNpdGVkKSB7XG5cdFx0XHRcdHZpc2l0ZWQgPSB2aXNpdGVkIHx8IHt9O1xuXG5cdFx0XHRcdHZhciBvYmpJZCA9IF8udXRpbC5vYmpJZDtcblxuXHRcdFx0XHRmb3IgKHZhciBpIGluIG8pIHtcblx0XHRcdFx0XHRpZiAoby5oYXNPd25Qcm9wZXJ0eShpKSkge1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2suY2FsbChvLCBpLCBvW2ldLCB0eXBlIHx8IGkpO1xuXG5cdFx0XHRcdFx0XHR2YXIgcHJvcGVydHkgPSBvW2ldO1xuXHRcdFx0XHRcdFx0dmFyIHByb3BlcnR5VHlwZSA9IF8udXRpbC50eXBlKHByb3BlcnR5KTtcblxuXHRcdFx0XHRcdFx0aWYgKHByb3BlcnR5VHlwZSA9PT0gJ09iamVjdCcgJiYgIXZpc2l0ZWRbb2JqSWQocHJvcGVydHkpXSkge1xuXHRcdFx0XHRcdFx0XHR2aXNpdGVkW29iaklkKHByb3BlcnR5KV0gPSB0cnVlO1xuXHRcdFx0XHRcdFx0XHRERlMocHJvcGVydHksIGNhbGxiYWNrLCBudWxsLCB2aXNpdGVkKTtcblx0XHRcdFx0XHRcdH0gZWxzZSBpZiAocHJvcGVydHlUeXBlID09PSAnQXJyYXknICYmICF2aXNpdGVkW29iaklkKHByb3BlcnR5KV0pIHtcblx0XHRcdFx0XHRcdFx0dmlzaXRlZFtvYmpJZChwcm9wZXJ0eSldID0gdHJ1ZTtcblx0XHRcdFx0XHRcdFx0REZTKHByb3BlcnR5LCBjYWxsYmFjaywgaSwgdmlzaXRlZCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHBsdWdpbnM6IHt9LFxuXG5cblx0XHQvKipcblx0XHQgKiBMb3ctbGV2ZWwgZnVuY3Rpb24sIG9ubHkgdXNlIGlmIHlvdSBrbm93IHdoYXQgeW914oCZcmUgZG9pbmcuIEl0IGFjY2VwdHMgYSBzdHJpbmcgb2YgdGV4dCBhcyBpbnB1dFxuXHRcdCAqIGFuZCB0aGUgbGFuZ3VhZ2UgZGVmaW5pdGlvbnMgdG8gdXNlLCBhbmQgcmV0dXJucyBhIHN0cmluZyB3aXRoIHRoZSBIVE1MIHByb2R1Y2VkLlxuXHRcdCAqXG5cdFx0ICogVGhlIGZvbGxvd2luZyBob29rcyB3aWxsIGJlIHJ1bjpcblx0XHQgKiAxLiBgYmVmb3JlLXRva2VuaXplYFxuXHRcdCAqIDIuIGBhZnRlci10b2tlbml6ZWBcblx0XHQgKiAzLiBgd3JhcGA6IE9uIGVhY2gge0BsaW5rIFRva2VufS5cblx0XHQgKlxuXHRcdCAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IEEgc3RyaW5nIHdpdGggdGhlIGNvZGUgdG8gYmUgaGlnaGxpZ2h0ZWQuXG5cdFx0ICogQHBhcmFtIHtHcmFtbWFyfSBncmFtbWFyIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSB0b2tlbnMgdG8gdXNlLlxuXHRcdCAqXG5cdFx0ICogVXN1YWxseSBhIGxhbmd1YWdlIGRlZmluaXRpb24gbGlrZSBgUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cGAuXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IGxhbmd1YWdlIFRoZSBuYW1lIG9mIHRoZSBsYW5ndWFnZSBkZWZpbml0aW9uIHBhc3NlZCB0byBgZ3JhbW1hcmAuXG5cdFx0ICogQHJldHVybnMge3N0cmluZ30gVGhlIGhpZ2hsaWdodGVkIEhUTUwuXG5cdFx0ICogQG1lbWJlcm9mIFByaXNtXG5cdFx0ICogQHB1YmxpY1xuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogUHJpc20uaGlnaGxpZ2h0KCd2YXIgZm9vID0gdHJ1ZTsnLCBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdCwgJ2phdmFzY3JpcHQnKTtcblx0XHQgKi9cblx0XHRoaWdobGlnaHQ6IGZ1bmN0aW9uICh0ZXh0LCBncmFtbWFyLCBsYW5ndWFnZSkge1xuXHRcdFx0dmFyIGVudiA9IHtcblx0XHRcdFx0Y29kZTogdGV4dCxcblx0XHRcdFx0Z3JhbW1hcjogZ3JhbW1hcixcblx0XHRcdFx0bGFuZ3VhZ2U6IGxhbmd1YWdlXG5cdFx0XHR9O1xuXHRcdFx0Xy5ob29rcy5ydW4oJ2JlZm9yZS10b2tlbml6ZScsIGVudik7XG5cdFx0XHRlbnYudG9rZW5zID0gXy50b2tlbml6ZShlbnYuY29kZSwgZW52LmdyYW1tYXIpO1xuXHRcdFx0Xy5ob29rcy5ydW4oJ2FmdGVyLXRva2VuaXplJywgZW52KTtcblx0XHRcdHJldHVybiBUb2tlbi5zdHJpbmdpZnkoXy51dGlsLmVuY29kZShlbnYudG9rZW5zKSwgZW52Lmxhbmd1YWdlKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogVGhpcyBpcyB0aGUgaGVhcnQgb2YgUHJpc20sIGFuZCB0aGUgbW9zdCBsb3ctbGV2ZWwgZnVuY3Rpb24geW91IGNhbiB1c2UuIEl0IGFjY2VwdHMgYSBzdHJpbmcgb2YgdGV4dCBhcyBpbnB1dFxuXHRcdCAqIGFuZCB0aGUgbGFuZ3VhZ2UgZGVmaW5pdGlvbnMgdG8gdXNlLCBhbmQgcmV0dXJucyBhbiBhcnJheSB3aXRoIHRoZSB0b2tlbml6ZWQgY29kZS5cblx0XHQgKlxuXHRcdCAqIFdoZW4gdGhlIGxhbmd1YWdlIGRlZmluaXRpb24gaW5jbHVkZXMgbmVzdGVkIHRva2VucywgdGhlIGZ1bmN0aW9uIGlzIGNhbGxlZCByZWN1cnNpdmVseSBvbiBlYWNoIG9mIHRoZXNlIHRva2Vucy5cblx0XHQgKlxuXHRcdCAqIFRoaXMgbWV0aG9kIGNvdWxkIGJlIHVzZWZ1bCBpbiBvdGhlciBjb250ZXh0cyBhcyB3ZWxsLCBhcyBhIHZlcnkgY3J1ZGUgcGFyc2VyLlxuXHRcdCAqXG5cdFx0ICogQHBhcmFtIHtzdHJpbmd9IHRleHQgQSBzdHJpbmcgd2l0aCB0aGUgY29kZSB0byBiZSBoaWdobGlnaHRlZC5cblx0XHQgKiBAcGFyYW0ge0dyYW1tYXJ9IGdyYW1tYXIgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHRva2VucyB0byB1c2UuXG5cdFx0ICpcblx0XHQgKiBVc3VhbGx5IGEgbGFuZ3VhZ2UgZGVmaW5pdGlvbiBsaWtlIGBQcmlzbS5sYW5ndWFnZXMubWFya3VwYC5cblx0XHQgKiBAcmV0dXJucyB7VG9rZW5TdHJlYW19IEFuIGFycmF5IG9mIHN0cmluZ3MgYW5kIHRva2VucywgYSB0b2tlbiBzdHJlYW0uXG5cdFx0ICogQG1lbWJlcm9mIFByaXNtXG5cdFx0ICogQHB1YmxpY1xuXHRcdCAqIEBleGFtcGxlXG5cdFx0ICogbGV0IGNvZGUgPSBgdmFyIGZvbyA9IDA7YDtcblx0XHQgKiBsZXQgdG9rZW5zID0gUHJpc20udG9rZW5pemUoY29kZSwgUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQpO1xuXHRcdCAqIHRva2Vucy5mb3JFYWNoKHRva2VuID0+IHtcblx0XHQgKiAgICAgaWYgKHRva2VuIGluc3RhbmNlb2YgUHJpc20uVG9rZW4gJiYgdG9rZW4udHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHQgKiAgICAgICAgIGNvbnNvbGUubG9nKGBGb3VuZCBudW1lcmljIGxpdGVyYWw6ICR7dG9rZW4uY29udGVudH1gKTtcblx0XHQgKiAgICAgfVxuXHRcdCAqIH0pO1xuXHRcdCAqL1xuXHRcdHRva2VuaXplOiBmdW5jdGlvbiAodGV4dCwgZ3JhbW1hcikge1xuXHRcdFx0dmFyIHJlc3QgPSBncmFtbWFyLnJlc3Q7XG5cdFx0XHRpZiAocmVzdCkge1xuXHRcdFx0XHRmb3IgKHZhciB0b2tlbiBpbiByZXN0KSB7XG5cdFx0XHRcdFx0Z3JhbW1hclt0b2tlbl0gPSByZXN0W3Rva2VuXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGRlbGV0ZSBncmFtbWFyLnJlc3Q7XG5cdFx0XHR9XG5cblx0XHRcdHZhciB0b2tlbkxpc3QgPSBuZXcgTGlua2VkTGlzdCgpO1xuXHRcdFx0YWRkQWZ0ZXIodG9rZW5MaXN0LCB0b2tlbkxpc3QuaGVhZCwgdGV4dCk7XG5cblx0XHRcdG1hdGNoR3JhbW1hcih0ZXh0LCB0b2tlbkxpc3QsIGdyYW1tYXIsIHRva2VuTGlzdC5oZWFkLCAwKTtcblxuXHRcdFx0cmV0dXJuIHRvQXJyYXkodG9rZW5MaXN0KTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQG5hbWVzcGFjZVxuXHRcdCAqIEBtZW1iZXJvZiBQcmlzbVxuXHRcdCAqIEBwdWJsaWNcblx0XHQgKi9cblx0XHRob29rczoge1xuXHRcdFx0YWxsOiB7fSxcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBBZGRzIHRoZSBnaXZlbiBjYWxsYmFjayB0byB0aGUgbGlzdCBvZiBjYWxsYmFja3MgZm9yIHRoZSBnaXZlbiBob29rLlxuXHRcdFx0ICpcblx0XHRcdCAqIFRoZSBjYWxsYmFjayB3aWxsIGJlIGludm9rZWQgd2hlbiB0aGUgaG9vayBpdCBpcyByZWdpc3RlcmVkIGZvciBpcyBydW4uXG5cdFx0XHQgKiBIb29rcyBhcmUgdXN1YWxseSBkaXJlY3RseSBydW4gYnkgYSBoaWdobGlnaHQgZnVuY3Rpb24gYnV0IHlvdSBjYW4gYWxzbyBydW4gaG9va3MgeW91cnNlbGYuXG5cdFx0XHQgKlxuXHRcdFx0ICogT25lIGNhbGxiYWNrIGZ1bmN0aW9uIGNhbiBiZSByZWdpc3RlcmVkIHRvIG11bHRpcGxlIGhvb2tzIGFuZCB0aGUgc2FtZSBob29rIG11bHRpcGxlIHRpbWVzLlxuXHRcdFx0ICpcblx0XHRcdCAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBob29rLlxuXHRcdFx0ICogQHBhcmFtIHtIb29rQ2FsbGJhY2t9IGNhbGxiYWNrIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB3aGljaCBpcyBnaXZlbiBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG5cdFx0XHQgKiBAcHVibGljXG5cdFx0XHQgKi9cblx0XHRcdGFkZDogZnVuY3Rpb24gKG5hbWUsIGNhbGxiYWNrKSB7XG5cdFx0XHRcdHZhciBob29rcyA9IF8uaG9va3MuYWxsO1xuXG5cdFx0XHRcdGhvb2tzW25hbWVdID0gaG9va3NbbmFtZV0gfHwgW107XG5cblx0XHRcdFx0aG9va3NbbmFtZV0ucHVzaChjYWxsYmFjayk7XG5cdFx0XHR9LFxuXG5cdFx0XHQvKipcblx0XHRcdCAqIFJ1bnMgYSBob29rIGludm9raW5nIGFsbCByZWdpc3RlcmVkIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBlbnZpcm9ubWVudCB2YXJpYWJsZXMuXG5cdFx0XHQgKlxuXHRcdFx0ICogQ2FsbGJhY2tzIHdpbGwgYmUgaW52b2tlZCBzeW5jaHJvbm91c2x5IGFuZCBpbiB0aGUgb3JkZXIgaW4gd2hpY2ggdGhleSB3ZXJlIHJlZ2lzdGVyZWQuXG5cdFx0XHQgKlxuXHRcdFx0ICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIGhvb2suXG5cdFx0XHQgKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IGVudiBUaGUgZW52aXJvbm1lbnQgdmFyaWFibGVzIG9mIHRoZSBob29rIHBhc3NlZCB0byBhbGwgY2FsbGJhY2tzIHJlZ2lzdGVyZWQuXG5cdFx0XHQgKiBAcHVibGljXG5cdFx0XHQgKi9cblx0XHRcdHJ1bjogZnVuY3Rpb24gKG5hbWUsIGVudikge1xuXHRcdFx0XHR2YXIgY2FsbGJhY2tzID0gXy5ob29rcy5hbGxbbmFtZV07XG5cblx0XHRcdFx0aWYgKCFjYWxsYmFja3MgfHwgIWNhbGxiYWNrcy5sZW5ndGgpIHtcblx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRmb3IgKHZhciBpID0gMCwgY2FsbGJhY2s7IChjYWxsYmFjayA9IGNhbGxiYWNrc1tpKytdKTspIHtcblx0XHRcdFx0XHRjYWxsYmFjayhlbnYpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdFRva2VuOiBUb2tlblxuXHR9O1xuXG5cblx0Ly8gVHlwZXNjcmlwdCBub3RlOlxuXHQvLyBUaGUgZm9sbG93aW5nIGNhbiBiZSB1c2VkIHRvIGltcG9ydCB0aGUgVG9rZW4gdHlwZSBpbiBKU0RvYzpcblx0Ly9cblx0Ly8gICBAdHlwZWRlZiB7SW5zdGFuY2VUeXBlPGltcG9ydChcIi4vcHJpc20tY29yZVwiKVtcIlRva2VuXCJdPn0gVG9rZW5cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5ldyB0b2tlbi5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgU2VlIHtAbGluayBUb2tlbiN0eXBlIHR5cGV9XG5cdCAqIEBwYXJhbSB7c3RyaW5nIHwgVG9rZW5TdHJlYW19IGNvbnRlbnQgU2VlIHtAbGluayBUb2tlbiNjb250ZW50IGNvbnRlbnR9XG5cdCAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbYWxpYXNdIFRoZSBhbGlhcyhlcykgb2YgdGhlIHRva2VuLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gW21hdGNoZWRTdHI9XCJcIl0gQSBjb3B5IG9mIHRoZSBmdWxsIHN0cmluZyB0aGlzIHRva2VuIHdhcyBjcmVhdGVkIGZyb20uXG5cdCAqIEBjbGFzc1xuXHQgKiBAZ2xvYmFsXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdGZ1bmN0aW9uIFRva2VuKHR5cGUsIGNvbnRlbnQsIGFsaWFzLCBtYXRjaGVkU3RyKSB7XG5cdFx0LyoqXG5cdFx0ICogVGhlIHR5cGUgb2YgdGhlIHRva2VuLlxuXHRcdCAqXG5cdFx0ICogVGhpcyBpcyB1c3VhbGx5IHRoZSBrZXkgb2YgYSBwYXR0ZXJuIGluIGEge0BsaW5rIEdyYW1tYXJ9LlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ31cblx0XHQgKiBAc2VlIEdyYW1tYXJUb2tlblxuXHRcdCAqIEBwdWJsaWNcblx0XHQgKi9cblx0XHR0aGlzLnR5cGUgPSB0eXBlO1xuXHRcdC8qKlxuXHRcdCAqIFRoZSBzdHJpbmdzIG9yIHRva2VucyBjb250YWluZWQgYnkgdGhpcyB0b2tlbi5cblx0XHQgKlxuXHRcdCAqIFRoaXMgd2lsbCBiZSBhIHRva2VuIHN0cmVhbSBpZiB0aGUgcGF0dGVybiBtYXRjaGVkIGFsc28gZGVmaW5lZCBhbiBgaW5zaWRlYCBncmFtbWFyLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZyB8IFRva2VuU3RyZWFtfVxuXHRcdCAqIEBwdWJsaWNcblx0XHQgKi9cblx0XHR0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuXHRcdC8qKlxuXHRcdCAqIFRoZSBhbGlhcyhlcykgb2YgdGhlIHRva2VuLlxuXHRcdCAqXG5cdFx0ICogQHR5cGUge3N0cmluZ3xzdHJpbmdbXX1cblx0XHQgKiBAc2VlIEdyYW1tYXJUb2tlblxuXHRcdCAqIEBwdWJsaWNcblx0XHQgKi9cblx0XHR0aGlzLmFsaWFzID0gYWxpYXM7XG5cdFx0Ly8gQ29weSBvZiB0aGUgZnVsbCBzdHJpbmcgdGhpcyB0b2tlbiB3YXMgY3JlYXRlZCBmcm9tXG5cdFx0dGhpcy5sZW5ndGggPSAobWF0Y2hlZFN0ciB8fCAnJykubGVuZ3RoIHwgMDtcblx0fVxuXG5cdC8qKlxuXHQgKiBBIHRva2VuIHN0cmVhbSBpcyBhbiBhcnJheSBvZiBzdHJpbmdzIGFuZCB7QGxpbmsgVG9rZW4gVG9rZW59IG9iamVjdHMuXG5cdCAqXG5cdCAqIFRva2VuIHN0cmVhbXMgaGF2ZSB0byBmdWxmaWxsIGEgZmV3IHByb3BlcnRpZXMgdGhhdCBhcmUgYXNzdW1lZCBieSBtb3N0IGZ1bmN0aW9ucyAobW9zdGx5IGludGVybmFsIG9uZXMpIHRoYXQgcHJvY2Vzc1xuXHQgKiB0aGVtLlxuXHQgKlxuXHQgKiAxLiBObyBhZGphY2VudCBzdHJpbmdzLlxuXHQgKiAyLiBObyBlbXB0eSBzdHJpbmdzLlxuXHQgKlxuXHQgKiAgICBUaGUgb25seSBleGNlcHRpb24gaGVyZSBpcyB0aGUgdG9rZW4gc3RyZWFtIHRoYXQgb25seSBjb250YWlucyB0aGUgZW1wdHkgc3RyaW5nIGFuZCBub3RoaW5nIGVsc2UuXG5cdCAqXG5cdCAqIEB0eXBlZGVmIHtBcnJheTxzdHJpbmcgfCBUb2tlbj59IFRva2VuU3RyZWFtXG5cdCAqIEBnbG9iYWxcblx0ICogQHB1YmxpY1xuXHQgKi9cblxuXHQvKipcblx0ICogQ29udmVydHMgdGhlIGdpdmVuIHRva2VuIG9yIHRva2VuIHN0cmVhbSB0byBhbiBIVE1MIHJlcHJlc2VudGF0aW9uLlxuXHQgKlxuXHQgKiBUaGUgZm9sbG93aW5nIGhvb2tzIHdpbGwgYmUgcnVuOlxuXHQgKiAxLiBgd3JhcGA6IE9uIGVhY2gge0BsaW5rIFRva2VufS5cblx0ICpcblx0ICogQHBhcmFtIHtzdHJpbmcgfCBUb2tlbiB8IFRva2VuU3RyZWFtfSBvIFRoZSB0b2tlbiBvciB0b2tlbiBzdHJlYW0gdG8gYmUgY29udmVydGVkLlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gbGFuZ3VhZ2UgVGhlIG5hbWUgb2YgY3VycmVudCBsYW5ndWFnZS5cblx0ICogQHJldHVybnMge3N0cmluZ30gVGhlIEhUTUwgcmVwcmVzZW50YXRpb24gb2YgdGhlIHRva2VuIG9yIHRva2VuIHN0cmVhbS5cblx0ICogQG1lbWJlcm9mIFRva2VuXG5cdCAqIEBzdGF0aWNcblx0ICovXG5cdFRva2VuLnN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeShvLCBsYW5ndWFnZSkge1xuXHRcdGlmICh0eXBlb2YgbyA9PSAnc3RyaW5nJykge1xuXHRcdFx0cmV0dXJuIG87XG5cdFx0fVxuXHRcdGlmIChBcnJheS5pc0FycmF5KG8pKSB7XG5cdFx0XHR2YXIgcyA9ICcnO1xuXHRcdFx0by5mb3JFYWNoKGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRcdHMgKz0gc3RyaW5naWZ5KGUsIGxhbmd1YWdlKTtcblx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIHM7XG5cdFx0fVxuXG5cdFx0dmFyIGVudiA9IHtcblx0XHRcdHR5cGU6IG8udHlwZSxcblx0XHRcdGNvbnRlbnQ6IHN0cmluZ2lmeShvLmNvbnRlbnQsIGxhbmd1YWdlKSxcblx0XHRcdHRhZzogJ3NwYW4nLFxuXHRcdFx0Y2xhc3NlczogWyd0b2tlbicsIG8udHlwZV0sXG5cdFx0XHRhdHRyaWJ1dGVzOiB7fSxcblx0XHRcdGxhbmd1YWdlOiBsYW5ndWFnZVxuXHRcdH07XG5cblx0XHR2YXIgYWxpYXNlcyA9IG8uYWxpYXM7XG5cdFx0aWYgKGFsaWFzZXMpIHtcblx0XHRcdGlmIChBcnJheS5pc0FycmF5KGFsaWFzZXMpKSB7XG5cdFx0XHRcdEFycmF5LnByb3RvdHlwZS5wdXNoLmFwcGx5KGVudi5jbGFzc2VzLCBhbGlhc2VzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVudi5jbGFzc2VzLnB1c2goYWxpYXNlcyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Xy5ob29rcy5ydW4oJ3dyYXAnLCBlbnYpO1xuXG5cdFx0dmFyIGF0dHJpYnV0ZXMgPSAnJztcblx0XHRmb3IgKHZhciBuYW1lIGluIGVudi5hdHRyaWJ1dGVzKSB7XG5cdFx0XHRhdHRyaWJ1dGVzICs9ICcgJyArIG5hbWUgKyAnPVwiJyArIChlbnYuYXR0cmlidXRlc1tuYW1lXSB8fCAnJykucmVwbGFjZSgvXCIvZywgJyZxdW90OycpICsgJ1wiJztcblx0XHR9XG5cblx0XHRyZXR1cm4gJzwnICsgZW52LnRhZyArICcgY2xhc3M9XCInICsgZW52LmNsYXNzZXMuam9pbignICcpICsgJ1wiJyArIGF0dHJpYnV0ZXMgKyAnPicgKyBlbnYuY29udGVudCArICc8LycgKyBlbnYudGFnICsgJz4nO1xuXHR9O1xuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge1JlZ0V4cH0gcGF0dGVyblxuXHQgKiBAcGFyYW0ge251bWJlcn0gcG9zXG5cdCAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0XG5cdCAqIEBwYXJhbSB7Ym9vbGVhbn0gbG9va2JlaGluZFxuXHQgKiBAcmV0dXJucyB7UmVnRXhwRXhlY0FycmF5IHwgbnVsbH1cblx0ICovXG5cdGZ1bmN0aW9uIG1hdGNoUGF0dGVybihwYXR0ZXJuLCBwb3MsIHRleHQsIGxvb2tiZWhpbmQpIHtcblx0XHRwYXR0ZXJuLmxhc3RJbmRleCA9IHBvcztcblx0XHR2YXIgbWF0Y2ggPSBwYXR0ZXJuLmV4ZWModGV4dCk7XG5cdFx0aWYgKG1hdGNoICYmIGxvb2tiZWhpbmQgJiYgbWF0Y2hbMV0pIHtcblx0XHRcdC8vIGNoYW5nZSB0aGUgbWF0Y2ggdG8gcmVtb3ZlIHRoZSB0ZXh0IG1hdGNoZWQgYnkgdGhlIFByaXNtIGxvb2tiZWhpbmQgZ3JvdXBcblx0XHRcdHZhciBsb29rYmVoaW5kTGVuZ3RoID0gbWF0Y2hbMV0ubGVuZ3RoO1xuXHRcdFx0bWF0Y2guaW5kZXggKz0gbG9va2JlaGluZExlbmd0aDtcblx0XHRcdG1hdGNoWzBdID0gbWF0Y2hbMF0uc2xpY2UobG9va2JlaGluZExlbmd0aCk7XG5cdFx0fVxuXHRcdHJldHVybiBtYXRjaDtcblx0fVxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge3N0cmluZ30gdGV4dFxuXHQgKiBAcGFyYW0ge0xpbmtlZExpc3Q8c3RyaW5nIHwgVG9rZW4+fSB0b2tlbkxpc3Rcblx0ICogQHBhcmFtIHthbnl9IGdyYW1tYXJcblx0ICogQHBhcmFtIHtMaW5rZWRMaXN0Tm9kZTxzdHJpbmcgfCBUb2tlbj59IHN0YXJ0Tm9kZVxuXHQgKiBAcGFyYW0ge251bWJlcn0gc3RhcnRQb3Ncblx0ICogQHBhcmFtIHtSZW1hdGNoT3B0aW9uc30gW3JlbWF0Y2hdXG5cdCAqIEByZXR1cm5zIHt2b2lkfVxuXHQgKiBAcHJpdmF0ZVxuXHQgKlxuXHQgKiBAdHlwZWRlZiBSZW1hdGNoT3B0aW9uc1xuXHQgKiBAcHJvcGVydHkge3N0cmluZ30gY2F1c2Vcblx0ICogQHByb3BlcnR5IHtudW1iZXJ9IHJlYWNoXG5cdCAqL1xuXHRmdW5jdGlvbiBtYXRjaEdyYW1tYXIodGV4dCwgdG9rZW5MaXN0LCBncmFtbWFyLCBzdGFydE5vZGUsIHN0YXJ0UG9zLCByZW1hdGNoKSB7XG5cdFx0Zm9yICh2YXIgdG9rZW4gaW4gZ3JhbW1hcikge1xuXHRcdFx0aWYgKCFncmFtbWFyLmhhc093blByb3BlcnR5KHRva2VuKSB8fCAhZ3JhbW1hclt0b2tlbl0pIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHZhciBwYXR0ZXJucyA9IGdyYW1tYXJbdG9rZW5dO1xuXHRcdFx0cGF0dGVybnMgPSBBcnJheS5pc0FycmF5KHBhdHRlcm5zKSA/IHBhdHRlcm5zIDogW3BhdHRlcm5zXTtcblxuXHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBwYXR0ZXJucy5sZW5ndGg7ICsraikge1xuXHRcdFx0XHRpZiAocmVtYXRjaCAmJiByZW1hdGNoLmNhdXNlID09IHRva2VuICsgJywnICsgaikge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciBwYXR0ZXJuT2JqID0gcGF0dGVybnNbal07XG5cdFx0XHRcdHZhciBpbnNpZGUgPSBwYXR0ZXJuT2JqLmluc2lkZTtcblx0XHRcdFx0dmFyIGxvb2tiZWhpbmQgPSAhIXBhdHRlcm5PYmoubG9va2JlaGluZDtcblx0XHRcdFx0dmFyIGdyZWVkeSA9ICEhcGF0dGVybk9iai5ncmVlZHk7XG5cdFx0XHRcdHZhciBhbGlhcyA9IHBhdHRlcm5PYmouYWxpYXM7XG5cblx0XHRcdFx0aWYgKGdyZWVkeSAmJiAhcGF0dGVybk9iai5wYXR0ZXJuLmdsb2JhbCkge1xuXHRcdFx0XHRcdC8vIFdpdGhvdXQgdGhlIGdsb2JhbCBmbGFnLCBsYXN0SW5kZXggd29uJ3Qgd29ya1xuXHRcdFx0XHRcdHZhciBmbGFncyA9IHBhdHRlcm5PYmoucGF0dGVybi50b1N0cmluZygpLm1hdGNoKC9baW1zdXldKiQvKVswXTtcblx0XHRcdFx0XHRwYXR0ZXJuT2JqLnBhdHRlcm4gPSBSZWdFeHAocGF0dGVybk9iai5wYXR0ZXJuLnNvdXJjZSwgZmxhZ3MgKyAnZycpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0LyoqIEB0eXBlIHtSZWdFeHB9ICovXG5cdFx0XHRcdHZhciBwYXR0ZXJuID0gcGF0dGVybk9iai5wYXR0ZXJuIHx8IHBhdHRlcm5PYmo7XG5cblx0XHRcdFx0Zm9yICggLy8gaXRlcmF0ZSB0aGUgdG9rZW4gbGlzdCBhbmQga2VlcCB0cmFjayBvZiB0aGUgY3VycmVudCB0b2tlbi9zdHJpbmcgcG9zaXRpb25cblx0XHRcdFx0XHR2YXIgY3VycmVudE5vZGUgPSBzdGFydE5vZGUubmV4dCwgcG9zID0gc3RhcnRQb3M7XG5cdFx0XHRcdFx0Y3VycmVudE5vZGUgIT09IHRva2VuTGlzdC50YWlsO1xuXHRcdFx0XHRcdHBvcyArPSBjdXJyZW50Tm9kZS52YWx1ZS5sZW5ndGgsIGN1cnJlbnROb2RlID0gY3VycmVudE5vZGUubmV4dFxuXHRcdFx0XHQpIHtcblxuXHRcdFx0XHRcdGlmIChyZW1hdGNoICYmIHBvcyA+PSByZW1hdGNoLnJlYWNoKSB7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgc3RyID0gY3VycmVudE5vZGUudmFsdWU7XG5cblx0XHRcdFx0XHRpZiAodG9rZW5MaXN0Lmxlbmd0aCA+IHRleHQubGVuZ3RoKSB7XG5cdFx0XHRcdFx0XHQvLyBTb21ldGhpbmcgd2VudCB0ZXJyaWJseSB3cm9uZywgQUJPUlQsIEFCT1JUIVxuXHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGlmIChzdHIgaW5zdGFuY2VvZiBUb2tlbikge1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIHJlbW92ZUNvdW50ID0gMTsgLy8gdGhpcyBpcyB0aGUgdG8gcGFyYW1ldGVyIG9mIHJlbW92ZUJldHdlZW5cblx0XHRcdFx0XHR2YXIgbWF0Y2g7XG5cblx0XHRcdFx0XHRpZiAoZ3JlZWR5KSB7XG5cdFx0XHRcdFx0XHRtYXRjaCA9IG1hdGNoUGF0dGVybihwYXR0ZXJuLCBwb3MsIHRleHQsIGxvb2tiZWhpbmQpO1xuXHRcdFx0XHRcdFx0aWYgKCFtYXRjaCB8fCBtYXRjaC5pbmRleCA+PSB0ZXh0Lmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dmFyIGZyb20gPSBtYXRjaC5pbmRleDtcblx0XHRcdFx0XHRcdHZhciB0byA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuXHRcdFx0XHRcdFx0dmFyIHAgPSBwb3M7XG5cblx0XHRcdFx0XHRcdC8vIGZpbmQgdGhlIG5vZGUgdGhhdCBjb250YWlucyB0aGUgbWF0Y2hcblx0XHRcdFx0XHRcdHAgKz0gY3VycmVudE5vZGUudmFsdWUubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKGZyb20gPj0gcCkge1xuXHRcdFx0XHRcdFx0XHRjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLm5leHQ7XG5cdFx0XHRcdFx0XHRcdHAgKz0gY3VycmVudE5vZGUudmFsdWUubGVuZ3RoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0Ly8gYWRqdXN0IHBvcyAoYW5kIHApXG5cdFx0XHRcdFx0XHRwIC09IGN1cnJlbnROb2RlLnZhbHVlLmxlbmd0aDtcblx0XHRcdFx0XHRcdHBvcyA9IHA7XG5cblx0XHRcdFx0XHRcdC8vIHRoZSBjdXJyZW50IG5vZGUgaXMgYSBUb2tlbiwgdGhlbiB0aGUgbWF0Y2ggc3RhcnRzIGluc2lkZSBhbm90aGVyIFRva2VuLCB3aGljaCBpcyBpbnZhbGlkXG5cdFx0XHRcdFx0XHRpZiAoY3VycmVudE5vZGUudmFsdWUgaW5zdGFuY2VvZiBUb2tlbikge1xuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gZmluZCB0aGUgbGFzdCBub2RlIHdoaWNoIGlzIGFmZmVjdGVkIGJ5IHRoaXMgbWF0Y2hcblx0XHRcdFx0XHRcdGZvciAoXG5cdFx0XHRcdFx0XHRcdHZhciBrID0gY3VycmVudE5vZGU7XG5cdFx0XHRcdFx0XHRcdGsgIT09IHRva2VuTGlzdC50YWlsICYmIChwIDwgdG8gfHwgdHlwZW9mIGsudmFsdWUgPT09ICdzdHJpbmcnKTtcblx0XHRcdFx0XHRcdFx0ayA9IGsubmV4dFxuXHRcdFx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0XHRcdHJlbW92ZUNvdW50Kys7XG5cdFx0XHRcdFx0XHRcdHAgKz0gay52YWx1ZS5sZW5ndGg7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRyZW1vdmVDb3VudC0tO1xuXG5cdFx0XHRcdFx0XHQvLyByZXBsYWNlIHdpdGggdGhlIG5ldyBtYXRjaFxuXHRcdFx0XHRcdFx0c3RyID0gdGV4dC5zbGljZShwb3MsIHApO1xuXHRcdFx0XHRcdFx0bWF0Y2guaW5kZXggLT0gcG9zO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRtYXRjaCA9IG1hdGNoUGF0dGVybihwYXR0ZXJuLCAwLCBzdHIsIGxvb2tiZWhpbmQpO1xuXHRcdFx0XHRcdFx0aWYgKCFtYXRjaCkge1xuXHRcdFx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcmVkZWNsYXJlXG5cdFx0XHRcdFx0dmFyIGZyb20gPSBtYXRjaC5pbmRleDtcblx0XHRcdFx0XHR2YXIgbWF0Y2hTdHIgPSBtYXRjaFswXTtcblx0XHRcdFx0XHR2YXIgYmVmb3JlID0gc3RyLnNsaWNlKDAsIGZyb20pO1xuXHRcdFx0XHRcdHZhciBhZnRlciA9IHN0ci5zbGljZShmcm9tICsgbWF0Y2hTdHIubGVuZ3RoKTtcblxuXHRcdFx0XHRcdHZhciByZWFjaCA9IHBvcyArIHN0ci5sZW5ndGg7XG5cdFx0XHRcdFx0aWYgKHJlbWF0Y2ggJiYgcmVhY2ggPiByZW1hdGNoLnJlYWNoKSB7XG5cdFx0XHRcdFx0XHRyZW1hdGNoLnJlYWNoID0gcmVhY2g7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIHJlbW92ZUZyb20gPSBjdXJyZW50Tm9kZS5wcmV2O1xuXG5cdFx0XHRcdFx0aWYgKGJlZm9yZSkge1xuXHRcdFx0XHRcdFx0cmVtb3ZlRnJvbSA9IGFkZEFmdGVyKHRva2VuTGlzdCwgcmVtb3ZlRnJvbSwgYmVmb3JlKTtcblx0XHRcdFx0XHRcdHBvcyArPSBiZWZvcmUubGVuZ3RoO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHJlbW92ZVJhbmdlKHRva2VuTGlzdCwgcmVtb3ZlRnJvbSwgcmVtb3ZlQ291bnQpO1xuXG5cdFx0XHRcdFx0dmFyIHdyYXBwZWQgPSBuZXcgVG9rZW4odG9rZW4sIGluc2lkZSA/IF8udG9rZW5pemUobWF0Y2hTdHIsIGluc2lkZSkgOiBtYXRjaFN0ciwgYWxpYXMsIG1hdGNoU3RyKTtcblx0XHRcdFx0XHRjdXJyZW50Tm9kZSA9IGFkZEFmdGVyKHRva2VuTGlzdCwgcmVtb3ZlRnJvbSwgd3JhcHBlZCk7XG5cblx0XHRcdFx0XHRpZiAoYWZ0ZXIpIHtcblx0XHRcdFx0XHRcdGFkZEFmdGVyKHRva2VuTGlzdCwgY3VycmVudE5vZGUsIGFmdGVyKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZiAocmVtb3ZlQ291bnQgPiAxKSB7XG5cdFx0XHRcdFx0XHQvLyBhdCBsZWFzdCBvbmUgVG9rZW4gb2JqZWN0IHdhcyByZW1vdmVkLCBzbyB3ZSBoYXZlIHRvIGRvIHNvbWUgcmVtYXRjaGluZ1xuXHRcdFx0XHRcdFx0Ly8gdGhpcyBjYW4gb25seSBoYXBwZW4gaWYgdGhlIGN1cnJlbnQgcGF0dGVybiBpcyBncmVlZHlcblxuXHRcdFx0XHRcdFx0LyoqIEB0eXBlIHtSZW1hdGNoT3B0aW9uc30gKi9cblx0XHRcdFx0XHRcdHZhciBuZXN0ZWRSZW1hdGNoID0ge1xuXHRcdFx0XHRcdFx0XHRjYXVzZTogdG9rZW4gKyAnLCcgKyBqLFxuXHRcdFx0XHRcdFx0XHRyZWFjaDogcmVhY2hcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHRtYXRjaEdyYW1tYXIodGV4dCwgdG9rZW5MaXN0LCBncmFtbWFyLCBjdXJyZW50Tm9kZS5wcmV2LCBwb3MsIG5lc3RlZFJlbWF0Y2gpO1xuXG5cdFx0XHRcdFx0XHQvLyB0aGUgcmVhY2ggbWlnaHQgaGF2ZSBiZWVuIGV4dGVuZGVkIGJlY2F1c2Ugb2YgdGhlIHJlbWF0Y2hpbmdcblx0XHRcdFx0XHRcdGlmIChyZW1hdGNoICYmIG5lc3RlZFJlbWF0Y2gucmVhY2ggPiByZW1hdGNoLnJlYWNoKSB7XG5cdFx0XHRcdFx0XHRcdHJlbWF0Y2gucmVhY2ggPSBuZXN0ZWRSZW1hdGNoLnJlYWNoO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBAdHlwZWRlZiBMaW5rZWRMaXN0Tm9kZVxuXHQgKiBAcHJvcGVydHkge1R9IHZhbHVlXG5cdCAqIEBwcm9wZXJ0eSB7TGlua2VkTGlzdE5vZGU8VD4gfCBudWxsfSBwcmV2IFRoZSBwcmV2aW91cyBub2RlLlxuXHQgKiBAcHJvcGVydHkge0xpbmtlZExpc3ROb2RlPFQ+IHwgbnVsbH0gbmV4dCBUaGUgbmV4dCBub2RlLlxuXHQgKiBAdGVtcGxhdGUgVFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblxuXHQvKipcblx0ICogQHRlbXBsYXRlIFRcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIExpbmtlZExpc3QoKSB7XG5cdFx0LyoqIEB0eXBlIHtMaW5rZWRMaXN0Tm9kZTxUPn0gKi9cblx0XHR2YXIgaGVhZCA9IHsgdmFsdWU6IG51bGwsIHByZXY6IG51bGwsIG5leHQ6IG51bGwgfTtcblx0XHQvKiogQHR5cGUge0xpbmtlZExpc3ROb2RlPFQ+fSAqL1xuXHRcdHZhciB0YWlsID0geyB2YWx1ZTogbnVsbCwgcHJldjogaGVhZCwgbmV4dDogbnVsbCB9O1xuXHRcdGhlYWQubmV4dCA9IHRhaWw7XG5cblx0XHQvKiogQHR5cGUge0xpbmtlZExpc3ROb2RlPFQ+fSAqL1xuXHRcdHRoaXMuaGVhZCA9IGhlYWQ7XG5cdFx0LyoqIEB0eXBlIHtMaW5rZWRMaXN0Tm9kZTxUPn0gKi9cblx0XHR0aGlzLnRhaWwgPSB0YWlsO1xuXHRcdHRoaXMubGVuZ3RoID0gMDtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGEgbmV3IG5vZGUgd2l0aCB0aGUgZ2l2ZW4gdmFsdWUgdG8gdGhlIGxpc3QuXG5cdCAqXG5cdCAqIEBwYXJhbSB7TGlua2VkTGlzdDxUPn0gbGlzdFxuXHQgKiBAcGFyYW0ge0xpbmtlZExpc3ROb2RlPFQ+fSBub2RlXG5cdCAqIEBwYXJhbSB7VH0gdmFsdWVcblx0ICogQHJldHVybnMge0xpbmtlZExpc3ROb2RlPFQ+fSBUaGUgYWRkZWQgbm9kZS5cblx0ICogQHRlbXBsYXRlIFRcblx0ICovXG5cdGZ1bmN0aW9uIGFkZEFmdGVyKGxpc3QsIG5vZGUsIHZhbHVlKSB7XG5cdFx0Ly8gYXNzdW1lcyB0aGF0IG5vZGUgIT0gbGlzdC50YWlsICYmIHZhbHVlcy5sZW5ndGggPj0gMFxuXHRcdHZhciBuZXh0ID0gbm9kZS5uZXh0O1xuXG5cdFx0dmFyIG5ld05vZGUgPSB7IHZhbHVlOiB2YWx1ZSwgcHJldjogbm9kZSwgbmV4dDogbmV4dCB9O1xuXHRcdG5vZGUubmV4dCA9IG5ld05vZGU7XG5cdFx0bmV4dC5wcmV2ID0gbmV3Tm9kZTtcblx0XHRsaXN0Lmxlbmd0aCsrO1xuXG5cdFx0cmV0dXJuIG5ld05vZGU7XG5cdH1cblx0LyoqXG5cdCAqIFJlbW92ZXMgYGNvdW50YCBub2RlcyBhZnRlciB0aGUgZ2l2ZW4gbm9kZS4gVGhlIGdpdmVuIG5vZGUgd2lsbCBub3QgYmUgcmVtb3ZlZC5cblx0ICpcblx0ICogQHBhcmFtIHtMaW5rZWRMaXN0PFQ+fSBsaXN0XG5cdCAqIEBwYXJhbSB7TGlua2VkTGlzdE5vZGU8VD59IG5vZGVcblx0ICogQHBhcmFtIHtudW1iZXJ9IGNvdW50XG5cdCAqIEB0ZW1wbGF0ZSBUXG5cdCAqL1xuXHRmdW5jdGlvbiByZW1vdmVSYW5nZShsaXN0LCBub2RlLCBjb3VudCkge1xuXHRcdHZhciBuZXh0ID0gbm9kZS5uZXh0O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQgJiYgbmV4dCAhPT0gbGlzdC50YWlsOyBpKyspIHtcblx0XHRcdG5leHQgPSBuZXh0Lm5leHQ7XG5cdFx0fVxuXHRcdG5vZGUubmV4dCA9IG5leHQ7XG5cdFx0bmV4dC5wcmV2ID0gbm9kZTtcblx0XHRsaXN0Lmxlbmd0aCAtPSBpO1xuXHR9XG5cdC8qKlxuXHQgKiBAcGFyYW0ge0xpbmtlZExpc3Q8VD59IGxpc3Rcblx0ICogQHJldHVybnMge1RbXX1cblx0ICogQHRlbXBsYXRlIFRcblx0ICovXG5cdGZ1bmN0aW9uIHRvQXJyYXkobGlzdCkge1xuXHRcdHZhciBhcnJheSA9IFtdO1xuXHRcdHZhciBub2RlID0gbGlzdC5oZWFkLm5leHQ7XG5cdFx0d2hpbGUgKG5vZGUgIT09IGxpc3QudGFpbCkge1xuXHRcdFx0YXJyYXkucHVzaChub2RlLnZhbHVlKTtcblx0XHRcdG5vZGUgPSBub2RlLm5leHQ7XG5cdFx0fVxuXHRcdHJldHVybiBhcnJheTtcblx0fVxuXG5cdHJldHVybiBfO1xuXG59KCkpO1xuXG52YXIgcHJpc20gPSBQcmlzbTtcblByaXNtLmRlZmF1bHQgPSBQcmlzbTtcblxuLyogVGhpcyBjb250ZW50IGlzIGF1dG8tZ2VuZXJhdGVkIHRvIGluY2x1ZGUgc29tZSBwcmlzbWpzIGxhbmd1YWdlIGNvbXBvbmVudHM6ICovXG5cbi8qIFwicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLW1hcmt1cFwiICovXG5cbnByaXNtLmxhbmd1YWdlcy5tYXJrdXAgPSB7XG4gICdjb21tZW50Jzoge1xuICAgIHBhdHRlcm46IC88IS0tKD86KD8hPCEtLSlbXFxzXFxTXSkqPy0tPi8sXG4gICAgZ3JlZWR5OiB0cnVlXG4gIH0sXG4gICdwcm9sb2cnOiB7XG4gICAgcGF0dGVybjogLzxcXD9bXFxzXFxTXSs/XFw/Pi8sXG4gICAgZ3JlZWR5OiB0cnVlXG4gIH0sXG4gICdkb2N0eXBlJzoge1xuICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi94bWwvI05ULWRvY3R5cGVkZWNsXG4gICAgcGF0dGVybjogLzwhRE9DVFlQRSg/OltePlwiJ1tcXF1dfFwiW15cIl0qXCJ8J1teJ10qJykrKD86XFxbKD86W148XCInXFxdXXxcIlteXCJdKlwifCdbXiddKid8PCg/ISEtLSl8PCEtLSg/OlteLV18LSg/IS0+KSkqLS0+KSpcXF1cXHMqKT8+L2ksXG4gICAgZ3JlZWR5OiB0cnVlLFxuICAgIGluc2lkZToge1xuICAgICAgJ2ludGVybmFsLXN1YnNldCc6IHtcbiAgICAgICAgcGF0dGVybjogLyheW15cXFtdKlxcWylbXFxzXFxTXSsoPz1cXF0+JCkvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBncmVlZHk6IHRydWUsXG4gICAgICAgIGluc2lkZTogbnVsbCAvLyBzZWUgYmVsb3dcblxuICAgICAgfSxcbiAgICAgICdzdHJpbmcnOiB7XG4gICAgICAgIHBhdHRlcm46IC9cIlteXCJdKlwifCdbXiddKicvLFxuICAgICAgICBncmVlZHk6IHRydWVcbiAgICAgIH0sXG4gICAgICAncHVuY3R1YXRpb24nOiAvXjwhfD4kfFtbXFxdXS8sXG4gICAgICAnZG9jdHlwZS10YWcnOiAvXkRPQ1RZUEUvaSxcbiAgICAgICduYW1lJzogL1teXFxzPD4nXCJdKy9cbiAgICB9XG4gIH0sXG4gICdjZGF0YSc6IHtcbiAgICBwYXR0ZXJuOiAvPCFcXFtDREFUQVxcW1tcXHNcXFNdKj9cXF1cXF0+L2ksXG4gICAgZ3JlZWR5OiB0cnVlXG4gIH0sXG4gICd0YWcnOiB7XG4gICAgcGF0dGVybjogLzxcXC8/KD8hXFxkKVteXFxzPlxcLz0kPCVdKyg/Olxccyg/OlxccypbXlxccz5cXC89XSsoPzpcXHMqPVxccyooPzpcIlteXCJdKlwifCdbXiddKid8W15cXHMnXCI+PV0rKD89W1xccz5dKSl8KD89W1xccy8+XSkpKSspP1xccypcXC8/Pi8sXG4gICAgZ3JlZWR5OiB0cnVlLFxuICAgIGluc2lkZToge1xuICAgICAgJ3RhZyc6IHtcbiAgICAgICAgcGF0dGVybjogL148XFwvP1teXFxzPlxcL10rLyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgJ3B1bmN0dWF0aW9uJzogL148XFwvPy8sXG4gICAgICAgICAgJ25hbWVzcGFjZSc6IC9eW15cXHM+XFwvOl0rOi9cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICdzcGVjaWFsLWF0dHInOiBbXSxcbiAgICAgICdhdHRyLXZhbHVlJzoge1xuICAgICAgICBwYXR0ZXJuOiAvPVxccyooPzpcIlteXCJdKlwifCdbXiddKid8W15cXHMnXCI+PV0rKS8sXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgICdwdW5jdHVhdGlvbic6IFt7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvXj0vLFxuICAgICAgICAgICAgYWxpYXM6ICdhdHRyLWVxdWFscydcbiAgICAgICAgICB9LCAvXCJ8Jy9dXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAncHVuY3R1YXRpb24nOiAvXFwvPz4vLFxuICAgICAgJ2F0dHItbmFtZSc6IHtcbiAgICAgICAgcGF0dGVybjogL1teXFxzPlxcL10rLyxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgJ25hbWVzcGFjZSc6IC9eW15cXHM+XFwvOl0rOi9cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgJ2VudGl0eSc6IFt7XG4gICAgcGF0dGVybjogLyZbXFxkYS16XXsxLDh9Oy9pLFxuICAgIGFsaWFzOiAnbmFtZWQtZW50aXR5J1xuICB9LCAvJiN4P1tcXGRhLWZdezEsOH07L2ldXG59O1xucHJpc20ubGFuZ3VhZ2VzLm1hcmt1cFsndGFnJ10uaW5zaWRlWydhdHRyLXZhbHVlJ10uaW5zaWRlWydlbnRpdHknXSA9IHByaXNtLmxhbmd1YWdlcy5tYXJrdXBbJ2VudGl0eSddO1xucHJpc20ubGFuZ3VhZ2VzLm1hcmt1cFsnZG9jdHlwZSddLmluc2lkZVsnaW50ZXJuYWwtc3Vic2V0J10uaW5zaWRlID0gcHJpc20ubGFuZ3VhZ2VzLm1hcmt1cDsgLy8gUGx1Z2luIHRvIG1ha2UgZW50aXR5IHRpdGxlIHNob3cgdGhlIHJlYWwgZW50aXR5LCBpZGVhIGJ5IFJvbWFuIEtvbWFyb3ZcblxucHJpc20uaG9va3MuYWRkKCd3cmFwJywgZnVuY3Rpb24gKGVudikge1xuICBpZiAoZW52LnR5cGUgPT09ICdlbnRpdHknKSB7XG4gICAgZW52LmF0dHJpYnV0ZXNbJ3RpdGxlJ10gPSBlbnYuY29udGVudC5yZXBsYWNlKC8mYW1wOy8sICcmJyk7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KHByaXNtLmxhbmd1YWdlcy5tYXJrdXAudGFnLCAnYWRkSW5saW5lZCcsIHtcbiAgLyoqXG4gICAqIEFkZHMgYW4gaW5saW5lZCBsYW5ndWFnZSB0byBtYXJrdXAuXG4gICAqXG4gICAqIEFuIGV4YW1wbGUgb2YgYW4gaW5saW5lZCBsYW5ndWFnZSBpcyBDU1Mgd2l0aCBgPHN0eWxlPmAgdGFncy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWUgVGhlIG5hbWUgb2YgdGhlIHRhZyB0aGF0IGNvbnRhaW5zIHRoZSBpbmxpbmVkIGxhbmd1YWdlLiBUaGlzIG5hbWUgd2lsbCBiZSB0cmVhdGVkIGFzXG4gICAqIGNhc2UgaW5zZW5zaXRpdmUuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsYW5nIFRoZSBsYW5ndWFnZSBrZXkuXG4gICAqIEBleGFtcGxlXG4gICAqIGFkZElubGluZWQoJ3N0eWxlJywgJ2NzcycpO1xuICAgKi9cbiAgdmFsdWU6IGZ1bmN0aW9uIGFkZElubGluZWQodGFnTmFtZSwgbGFuZykge1xuICAgIHZhciBpbmNsdWRlZENkYXRhSW5zaWRlID0ge307XG4gICAgaW5jbHVkZWRDZGF0YUluc2lkZVsnbGFuZ3VhZ2UtJyArIGxhbmddID0ge1xuICAgICAgcGF0dGVybjogLyhePCFcXFtDREFUQVxcWylbXFxzXFxTXSs/KD89XFxdXFxdPiQpL2ksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgaW5zaWRlOiBwcmlzbS5sYW5ndWFnZXNbbGFuZ11cbiAgICB9O1xuICAgIGluY2x1ZGVkQ2RhdGFJbnNpZGVbJ2NkYXRhJ10gPSAvXjwhXFxbQ0RBVEFcXFt8XFxdXFxdPiQvaTtcbiAgICB2YXIgaW5zaWRlID0ge1xuICAgICAgJ2luY2x1ZGVkLWNkYXRhJzoge1xuICAgICAgICBwYXR0ZXJuOiAvPCFcXFtDREFUQVxcW1tcXHNcXFNdKj9cXF1cXF0+L2ksXG4gICAgICAgIGluc2lkZTogaW5jbHVkZWRDZGF0YUluc2lkZVxuICAgICAgfVxuICAgIH07XG4gICAgaW5zaWRlWydsYW5ndWFnZS0nICsgbGFuZ10gPSB7XG4gICAgICBwYXR0ZXJuOiAvW1xcc1xcU10rLyxcbiAgICAgIGluc2lkZTogcHJpc20ubGFuZ3VhZ2VzW2xhbmddXG4gICAgfTtcbiAgICB2YXIgZGVmID0ge307XG4gICAgZGVmW3RhZ05hbWVdID0ge1xuICAgICAgcGF0dGVybjogUmVnRXhwKC8oPF9fW14+XSo+KSg/OjwhXFxbQ0RBVEFcXFsoPzpbXlxcXV18XFxdKD8hXFxdPikpKlxcXVxcXT58KD8hPCFcXFtDREFUQVxcWylbXFxzXFxTXSkqPyg/PTxcXC9fXz4pLy5zb3VyY2UucmVwbGFjZSgvX18vZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGFnTmFtZTtcbiAgICAgIH0pLCAnaScpLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZTogaW5zaWRlXG4gICAgfTtcbiAgICBwcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdtYXJrdXAnLCAnY2RhdGEnLCBkZWYpO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcmlzbS5sYW5ndWFnZXMubWFya3VwLnRhZywgJ2FkZEF0dHJpYnV0ZScsIHtcbiAgLyoqXG4gICAqIEFkZHMgYW4gcGF0dGVybiB0byBoaWdobGlnaHQgbGFuZ3VhZ2VzIGVtYmVkZGVkIGluIEhUTUwgYXR0cmlidXRlcy5cbiAgICpcbiAgICogQW4gZXhhbXBsZSBvZiBhbiBpbmxpbmVkIGxhbmd1YWdlIGlzIENTUyB3aXRoIGBzdHlsZWAgYXR0cmlidXRlcy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGF0dHJOYW1lIFRoZSBuYW1lIG9mIHRoZSB0YWcgdGhhdCBjb250YWlucyB0aGUgaW5saW5lZCBsYW5ndWFnZS4gVGhpcyBuYW1lIHdpbGwgYmUgdHJlYXRlZCBhc1xuICAgKiBjYXNlIGluc2Vuc2l0aXZlLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGFuZyBUaGUgbGFuZ3VhZ2Uga2V5LlxuICAgKiBAZXhhbXBsZVxuICAgKiBhZGRBdHRyaWJ1dGUoJ3N0eWxlJywgJ2NzcycpO1xuICAgKi9cbiAgdmFsdWU6IGZ1bmN0aW9uIChhdHRyTmFtZSwgbGFuZykge1xuICAgIHByaXNtLmxhbmd1YWdlcy5tYXJrdXAudGFnLmluc2lkZVsnc3BlY2lhbC1hdHRyJ10ucHVzaCh7XG4gICAgICBwYXR0ZXJuOiBSZWdFeHAoLyhefFtcIidcXHNdKS8uc291cmNlICsgJyg/OicgKyBhdHRyTmFtZSArICcpJyArIC9cXHMqPVxccyooPzpcIlteXCJdKlwifCdbXiddKid8W15cXHMnXCI+PV0rKD89W1xccz5dKSkvLnNvdXJjZSwgJ2knKSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgJ2F0dHItbmFtZSc6IC9eW15cXHM9XSsvLFxuICAgICAgICAnYXR0ci12YWx1ZSc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvPVtcXHNcXFNdKy8sXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAndmFsdWUnOiB7XG4gICAgICAgICAgICAgIHBhdHRlcm46IC8oXj1cXHMqKFtcIiddfCg/IVtcIiddKSkpXFxTW1xcc1xcU10qKD89XFwyJCkvLFxuICAgICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgICAgICBhbGlhczogW2xhbmcsICdsYW5ndWFnZS0nICsgbGFuZ10sXG4gICAgICAgICAgICAgIGluc2lkZTogcHJpc20ubGFuZ3VhZ2VzW2xhbmddXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgJ3B1bmN0dWF0aW9uJzogW3tcbiAgICAgICAgICAgICAgcGF0dGVybjogL149LyxcbiAgICAgICAgICAgICAgYWxpYXM6ICdhdHRyLWVxdWFscydcbiAgICAgICAgICAgIH0sIC9cInwnL11cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufSk7XG5wcmlzbS5sYW5ndWFnZXMuaHRtbCA9IHByaXNtLmxhbmd1YWdlcy5tYXJrdXA7XG5wcmlzbS5sYW5ndWFnZXMubWF0aG1sID0gcHJpc20ubGFuZ3VhZ2VzLm1hcmt1cDtcbnByaXNtLmxhbmd1YWdlcy5zdmcgPSBwcmlzbS5sYW5ndWFnZXMubWFya3VwO1xucHJpc20ubGFuZ3VhZ2VzLnhtbCA9IHByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ21hcmt1cCcsIHt9KTtcbnByaXNtLmxhbmd1YWdlcy5zc21sID0gcHJpc20ubGFuZ3VhZ2VzLnhtbDtcbnByaXNtLmxhbmd1YWdlcy5hdG9tID0gcHJpc20ubGFuZ3VhZ2VzLnhtbDtcbnByaXNtLmxhbmd1YWdlcy5yc3MgPSBwcmlzbS5sYW5ndWFnZXMueG1sO1xuLyogXCJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tYmFzaFwiICovXG5cbihmdW5jdGlvbiAoUHJpc20pIHtcbiAgLy8gJCBzZXQgfCBncmVwICdeW0EtWl1bXls6c3BhY2U6XV0qPScgfCBjdXQgLWQ9IC1mMSB8IHRyICdcXG4nICd8J1xuICAvLyArIExDX0FMTCwgUkFORE9NLCBSRVBMWSwgU0VDT05EUy5cbiAgLy8gKyBtYWtlIHN1cmUgUFMxLi40IGFyZSBoZXJlIGFzIHRoZXkgYXJlIG5vdCBhbHdheXMgc2V0LFxuICAvLyAtIHNvbWUgdXNlbGVzcyB0aGluZ3MuXG4gIHZhciBlbnZWYXJzID0gJ1xcXFxiKD86QkFTSHxCQVNIT1BUU3xCQVNIX0FMSUFTRVN8QkFTSF9BUkdDfEJBU0hfQVJHVnxCQVNIX0NNRFN8QkFTSF9DT01QTEVUSU9OX0NPTVBBVF9ESVJ8QkFTSF9MSU5FTk98QkFTSF9SRU1BVENIfEJBU0hfU09VUkNFfEJBU0hfVkVSU0lORk98QkFTSF9WRVJTSU9OfENPTE9SVEVSTXxDT0xVTU5TfENPTVBfV09SREJSRUFLU3xEQlVTX1NFU1NJT05fQlVTX0FERFJFU1N8REVGQVVMVFNfUEFUSHxERVNLVE9QX1NFU1NJT058RElSU1RBQ0t8RElTUExBWXxFVUlEfEdETVNFU1NJT058R0RNX0xBTkd8R05PTUVfS0VZUklOR19DT05UUk9MfEdOT01FX0tFWVJJTkdfUElEfEdQR19BR0VOVF9JTkZPfEdST1VQU3xISVNUQ09OVFJPTHxISVNURklMRXxISVNURklMRVNJWkV8SElTVFNJWkV8SE9NRXxIT1NUTkFNRXxIT1NUVFlQRXxJRlN8SU5TVEFOQ0V8Sk9CfExBTkd8TEFOR1VBR0V8TENfQUREUkVTU3xMQ19BTEx8TENfSURFTlRJRklDQVRJT058TENfTUVBU1VSRU1FTlR8TENfTU9ORVRBUll8TENfTkFNRXxMQ19OVU1FUklDfExDX1BBUEVSfExDX1RFTEVQSE9ORXxMQ19USU1FfExFU1NDTE9TRXxMRVNTT1BFTnxMSU5FU3xMT0dOQU1FfExTX0NPTE9SU3xNQUNIVFlQRXxNQUlMQ0hFQ0t8TUFOREFUT1JZX1BBVEh8Tk9fQVRfQlJJREdFfE9MRFBXRHxPUFRFUlJ8T1BUSU5EfE9SQklUX1NPQ0tFVERJUnxPU1RZUEV8UEFQRVJTSVpFfFBBVEh8UElQRVNUQVRVU3xQUElEfFBTMXxQUzJ8UFMzfFBTNHxQV0R8UkFORE9NfFJFUExZfFNFQ09ORFN8U0VMSU5VWF9JTklUfFNFU1NJT058U0VTU0lPTlRZUEV8U0VTU0lPTl9NQU5BR0VSfFNIRUxMfFNIRUxMT1BUU3xTSExWTHxTU0hfQVVUSF9TT0NLfFRFUk18VUlEfFVQU1RBUlRfRVZFTlRTfFVQU1RBUlRfSU5TVEFOQ0V8VVBTVEFSVF9KT0J8VVBTVEFSVF9TRVNTSU9OfFVTRVJ8V0lORE9XSUR8WEFVVEhPUklUWXxYREdfQ09ORklHX0RJUlN8WERHX0NVUlJFTlRfREVTS1RPUHxYREdfREFUQV9ESVJTfFhER19HUkVFVEVSX0RBVEFfRElSfFhER19NRU5VX1BSRUZJWHxYREdfUlVOVElNRV9ESVJ8WERHX1NFQVR8WERHX1NFQVRfUEFUSHxYREdfU0VTU0lPTl9ERVNLVE9QfFhER19TRVNTSU9OX0lEfFhER19TRVNTSU9OX1BBVEh8WERHX1NFU1NJT05fVFlQRXxYREdfVlROUnxYTU9ESUZJRVJTKVxcXFxiJztcbiAgdmFyIGNvbW1hbmRBZnRlckhlcmVkb2MgPSB7XG4gICAgcGF0dGVybjogLyheKFtcIiddPylcXHcrXFwyKVsgXFx0XStcXFMuKi8sXG4gICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICBhbGlhczogJ3B1bmN0dWF0aW9uJyxcbiAgICAvLyB0aGlzIGxvb2tzIHJlYXNvbmFibHkgd2VsbCBpbiBhbGwgdGhlbWVzXG4gICAgaW5zaWRlOiBudWxsIC8vIHNlZSBiZWxvd1xuXG4gIH07XG4gIHZhciBpbnNpZGVTdHJpbmcgPSB7XG4gICAgJ2Jhc2gnOiBjb21tYW5kQWZ0ZXJIZXJlZG9jLFxuICAgICdlbnZpcm9ubWVudCc6IHtcbiAgICAgIHBhdHRlcm46IFJlZ0V4cCgnXFxcXCQnICsgZW52VmFycyksXG4gICAgICBhbGlhczogJ2NvbnN0YW50J1xuICAgIH0sXG4gICAgJ3ZhcmlhYmxlJzogWy8vIFswXTogQXJpdGhtZXRpYyBFbnZpcm9ubWVudFxuICAgIHtcbiAgICAgIHBhdHRlcm46IC9cXCQ/XFwoXFwoW1xcc1xcU10rP1xcKVxcKS8sXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgLy8gSWYgdGhlcmUgaXMgYSAkIHNpZ24gYXQgdGhlIGJlZ2lubmluZyBoaWdobGlnaHQgJCgoIGFuZCApKSBhcyB2YXJpYWJsZVxuICAgICAgICAndmFyaWFibGUnOiBbe1xuICAgICAgICAgIHBhdHRlcm46IC8oXlxcJFxcKFxcKFtcXHNcXFNdKylcXClcXCkvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgfSwgL15cXCRcXChcXCgvXSxcbiAgICAgICAgJ251bWJlcic6IC9cXGIweFtcXGRBLUZhLWZdK1xcYnwoPzpcXGJcXGQrKD86XFwuXFxkKik/fFxcQlxcLlxcZCspKD86W0VlXS0/XFxkKyk/LyxcbiAgICAgICAgLy8gT3BlcmF0b3JzIGFjY29yZGluZyB0byBodHRwczovL3d3dy5nbnUub3JnL3NvZnR3YXJlL2Jhc2gvbWFudWFsL2Jhc2hyZWYuaHRtbCNTaGVsbC1Bcml0aG1ldGljXG4gICAgICAgICdvcGVyYXRvcic6IC8tLXxcXCtcXCt8XFwqXFwqPT98PDw9P3w+Pj0/fCYmfFxcfFxcfHxbPSErXFwtKi8lPD5eJnxdPT98Wz9+Ol0vLFxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyAkIHNpZ24gYXQgdGhlIGJlZ2lubmluZyBoaWdobGlnaHQgKCggYW5kICkpIGFzIHB1bmN0dWF0aW9uXG4gICAgICAgICdwdW5jdHVhdGlvbic6IC9cXChcXCg/fFxcKVxcKT98LHw7L1xuICAgICAgfVxuICAgIH0sIC8vIFsxXTogQ29tbWFuZCBTdWJzdGl0dXRpb25cbiAgICB7XG4gICAgICBwYXR0ZXJuOiAvXFwkXFwoKD86XFwoW14pXStcXCl8W14oKV0pK1xcKXxgW15gXStgLyxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAndmFyaWFibGUnOiAvXlxcJFxcKHxeYHxcXCkkfGAkL1xuICAgICAgfVxuICAgIH0sIC8vIFsyXTogQnJhY2UgZXhwYW5zaW9uXG4gICAge1xuICAgICAgcGF0dGVybjogL1xcJFxce1tefV0rXFx9LyxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAnb3BlcmF0b3InOiAvOlstPT8rXT98WyFcXC9dfCMjP3wlJT98XFxeXFxeP3wsLD8vLFxuICAgICAgICAncHVuY3R1YXRpb24nOiAvW1xcW1xcXV0vLFxuICAgICAgICAnZW52aXJvbm1lbnQnOiB7XG4gICAgICAgICAgcGF0dGVybjogUmVnRXhwKCcoXFxcXHspJyArIGVudlZhcnMpLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgYWxpYXM6ICdjb25zdGFudCdcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sIC9cXCQoPzpcXHcrfFsjPyohQCRdKS9dLFxuICAgIC8vIEVzY2FwZSBzZXF1ZW5jZXMgZnJvbSBlY2hvIGFuZCBwcmludGYncyBtYW51YWxzLCBhbmQgZXNjYXBlZCBxdW90ZXMuXG4gICAgJ2VudGl0eSc6IC9cXFxcKD86W2FiY2VFZm5ydHZcXFxcXCJdfE8/WzAtN117MSwzfXxVWzAtOWEtZkEtRl17OH18dVswLTlhLWZBLUZdezR9fHhbMC05YS1mQS1GXXsxLDJ9KS9cbiAgfTtcbiAgUHJpc20ubGFuZ3VhZ2VzLmJhc2ggPSB7XG4gICAgJ3NoZWJhbmcnOiB7XG4gICAgICBwYXR0ZXJuOiAvXiMhXFxzKlxcLy4qLyxcbiAgICAgIGFsaWFzOiAnaW1wb3J0YW50J1xuICAgIH0sXG4gICAgJ2NvbW1lbnQnOiB7XG4gICAgICBwYXR0ZXJuOiAvKF58W15cIntcXFxcJF0pIy4qLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgICdmdW5jdGlvbi1uYW1lJzogWy8vIGEpIGZ1bmN0aW9uIGZvbyB7XG4gICAgLy8gYikgZm9vKCkge1xuICAgIC8vIGMpIGZ1bmN0aW9uIGZvbygpIHtcbiAgICAvLyBidXQgbm90IOKAnGZvbyB74oCdXG4gICAge1xuICAgICAgLy8gYSkgYW5kIGMpXG4gICAgICBwYXR0ZXJuOiAvKFxcYmZ1bmN0aW9uXFxzKylbXFx3LV0rKD89KD86XFxzKlxcKD86XFxzKlxcKSk/XFxzKlxceykvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnZnVuY3Rpb24nXG4gICAgfSwge1xuICAgICAgLy8gYilcbiAgICAgIHBhdHRlcm46IC9cXGJbXFx3LV0rKD89XFxzKlxcKFxccypcXClcXHMqXFx7KS8sXG4gICAgICBhbGlhczogJ2Z1bmN0aW9uJ1xuICAgIH1dLFxuICAgIC8vIEhpZ2hsaWdodCB2YXJpYWJsZSBuYW1lcyBhcyB2YXJpYWJsZXMgaW4gZm9yIGFuZCBzZWxlY3QgYmVnaW5uaW5ncy5cbiAgICAnZm9yLW9yLXNlbGVjdCc6IHtcbiAgICAgIHBhdHRlcm46IC8oXFxiKD86Zm9yfHNlbGVjdClcXHMrKVxcdysoPz1cXHMraW5cXHMpLyxcbiAgICAgIGFsaWFzOiAndmFyaWFibGUnLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgLy8gSGlnaGxpZ2h0IHZhcmlhYmxlIG5hbWVzIGFzIHZhcmlhYmxlcyBpbiB0aGUgbGVmdC1oYW5kIHBhcnRcbiAgICAvLyBvZiBhc3NpZ25tZW50cyAo4oCcPeKAnSBhbmQg4oCcKz3igJ0pLlxuICAgICdhc3NpZ24tbGVmdCc6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXFxzO3wmXXxbPD5dXFwoKVxcdysoPz1cXCs/PSkvLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdlbnZpcm9ubWVudCc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoJyhefFtcXFxcczt8Jl18Wzw+XVxcXFwoKScgKyBlbnZWYXJzKSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGFsaWFzOiAnY29uc3RhbnQnXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBhbGlhczogJ3ZhcmlhYmxlJyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgICdzdHJpbmcnOiBbLy8gU3VwcG9ydCBmb3IgSGVyZS1kb2N1bWVudHMgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSGVyZV9kb2N1bWVudFxuICAgIHtcbiAgICAgIHBhdHRlcm46IC8oKD86XnxbXjxdKTw8LT9cXHMqKShcXHcrKVxcc1tcXHNcXFNdKj8oPzpcXHI/XFxufFxccilcXDIvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZTogaW5zaWRlU3RyaW5nXG4gICAgfSwgLy8gSGVyZS1kb2N1bWVudCB3aXRoIHF1b3RlcyBhcm91bmQgdGhlIHRhZ1xuICAgIC8vIOKGkiBObyBleHBhbnNpb24gKHNvIG5vIOKAnGluc2lkZeKAnSkuXG4gICAge1xuICAgICAgcGF0dGVybjogLygoPzpefFtePF0pPDwtP1xccyopKFtcIiddKShcXHcrKVxcMlxcc1tcXHNcXFNdKj8oPzpcXHI/XFxufFxccilcXDMvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAnYmFzaCc6IGNvbW1hbmRBZnRlckhlcmVkb2NcbiAgICAgIH1cbiAgICB9LCAvLyDigJxOb3JtYWzigJ0gc3RyaW5nXG4gICAge1xuICAgICAgLy8gaHR0cHM6Ly93d3cuZ251Lm9yZy9zb2Z0d2FyZS9iYXNoL21hbnVhbC9odG1sX25vZGUvRG91YmxlLVF1b3Rlcy5odG1sXG4gICAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSg/OlxcXFxcXFxcKSopXCIoPzpcXFxcW1xcc1xcU118XFwkXFwoW14pXStcXCl8XFwkKD8hXFwoKXxgW15gXStgfFteXCJcXFxcYCRdKSpcIi8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiBpbnNpZGVTdHJpbmdcbiAgICB9LCB7XG4gICAgICAvLyBodHRwczovL3d3dy5nbnUub3JnL3NvZnR3YXJlL2Jhc2gvbWFudWFsL2h0bWxfbm9kZS9TaW5nbGUtUXVvdGVzLmh0bWxcbiAgICAgIHBhdHRlcm46IC8oXnxbXiRcXFxcXSknW14nXSonLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LCB7XG4gICAgICAvLyBodHRwczovL3d3dy5nbnUub3JnL3NvZnR3YXJlL2Jhc2gvbWFudWFsL2h0bWxfbm9kZS9BTlNJXzAwMmRDLVF1b3RpbmcuaHRtbFxuICAgICAgcGF0dGVybjogL1xcJCcoPzpbXidcXFxcXXxcXFxcW1xcc1xcU10pKicvLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdlbnRpdHknOiBpbnNpZGVTdHJpbmcuZW50aXR5XG4gICAgICB9XG4gICAgfV0sXG4gICAgJ2Vudmlyb25tZW50Jzoge1xuICAgICAgcGF0dGVybjogUmVnRXhwKCdcXFxcJD8nICsgZW52VmFycyksXG4gICAgICBhbGlhczogJ2NvbnN0YW50J1xuICAgIH0sXG4gICAgJ3ZhcmlhYmxlJzogaW5zaWRlU3RyaW5nLnZhcmlhYmxlLFxuICAgICdmdW5jdGlvbic6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXFxzO3wmXXxbPD5dXFwoKSg/OmFkZHxhcHJvcG9zfGFwdHxhcHQtY2FjaGV8YXB0LWdldHxhcHRpdHVkZXxhc3BlbGx8YXV0b215c3FsYmFja3VwfGF3a3xiYXNlbmFtZXxiYXNofGJjfGJjb25zb2xlfGJnfGJ6aXAyfGNhbHxjYXR8Y2ZkaXNrfGNoZ3JwfGNoa2NvbmZpZ3xjaG1vZHxjaG93bnxjaHJvb3R8Y2tzdW18Y2xlYXJ8Y21wfGNvbHVtbnxjb21tfGNvbXBvc2VyfGNwfGNyb258Y3JvbnRhYnxjc3BsaXR8Y3VybHxjdXR8ZGF0ZXxkY3xkZHxkZHJlc2N1ZXxkZWJvb3RzdHJhcHxkZnxkaWZmfGRpZmYzfGRpZ3xkaXJ8ZGlyY29sb3JzfGRpcm5hbWV8ZGlyc3xkbWVzZ3xkb2NrZXJ8ZG9ja2VyLWNvbXBvc2V8ZHV8ZWdyZXB8ZWplY3R8ZW52fGV0aHRvb2x8ZXhwYW5kfGV4cGVjdHxleHByfGZkZm9ybWF0fGZkaXNrfGZnfGZncmVwfGZpbGV8ZmluZHxmbXR8Zm9sZHxmb3JtYXR8ZnJlZXxmc2NrfGZ0cHxmdXNlcnxnYXdrfGdpdHxncGFydGVkfGdyZXB8Z3JvdXBhZGR8Z3JvdXBkZWx8Z3JvdXBtb2R8Z3JvdXBzfGdydWItbWtjb25maWd8Z3ppcHxoYWx0fGhlYWR8aGd8aGlzdG9yeXxob3N0fGhvc3RuYW1lfGh0b3B8aWNvbnZ8aWR8aWZjb25maWd8aWZkb3dufGlmdXB8aW1wb3J0fGluc3RhbGx8aXB8am9ic3xqb2lufGtpbGx8a2lsbGFsbHxsZXNzfGxpbmt8bG58bG9jYXRlfGxvZ25hbWV8bG9ncm90YXRlfGxvb2t8bHBjfGxwcnxscHJpbnR8bHByaW50ZHxscHJpbnRxfGxwcm18bHN8bHNvZnxseW54fG1ha2V8bWFufG1jfG1kYWRtfG1rY29uZmlnfG1rZGlyfG1rZTJmc3xta2ZpZm98bWtmc3xta2lzb2ZzfG1rbm9kfG1rc3dhcHxtbXZ8bW9yZXxtb3N0fG1vdW50fG10b29sc3xtdHJ8bXV0dHxtdnxuYW5vfG5jfG5ldHN0YXR8bmljZXxubHxub2RlfG5vaHVwfG5vdGlmeS1zZW5kfG5wbXxuc2xvb2t1cHxvcHxvcGVufHBhcnRlZHxwYXNzd2R8cGFzdGV8cGF0aGNoa3xwaW5nfHBraWxsfHBucG18cG9kbWFufHBvZG1hbi1jb21wb3NlfHBvcGR8cHJ8cHJpbnRjYXB8cHJpbnRlbnZ8cHN8cHVzaGR8cHZ8cXVvdGF8cXVvdGFjaGVja3xxdW90YWN0bHxyYW18cmFyfHJjcHxyZWJvb3R8cmVtc3luY3xyZW5hbWV8cmVuaWNlfHJldnxybXxybWRpcnxycG18cnN5bmN8c2NwfHNjcmVlbnxzZGlmZnxzZWR8c2VuZG1haWx8c2VxfHNlcnZpY2V8c2Z0cHxzaHxzaGVsbGNoZWNrfHNodWZ8c2h1dGRvd258c2xlZXB8c2xvY2F0ZXxzb3J0fHNwbGl0fHNzaHxzdGF0fHN0cmFjZXxzdXxzdWRvfHN1bXxzdXNwZW5kfHN3YXBvbnxzeW5jfHRhY3x0YWlsfHRhcnx0ZWV8dGltZXx0aW1lb3V0fHRvcHx0b3VjaHx0cnx0cmFjZXJvdXRlfHRzb3J0fHR0eXx1bW91bnR8dW5hbWV8dW5leHBhbmR8dW5pcXx1bml0c3x1bnJhcnx1bnNoYXJ8dW56aXB8dXBkYXRlLWdydWJ8dXB0aW1lfHVzZXJhZGR8dXNlcmRlbHx1c2VybW9kfHVzZXJzfHV1ZGVjb2RlfHV1ZW5jb2RlfHZ8dmNwa2d8dmRpcnx2aXx2aW18dmlyc2h8dm1zdGF0fHdhaXR8d2F0Y2h8d2N8d2dldHx3aGVyZWlzfHdoaWNofHdob3x3aG9hbWl8d3JpdGV8eGFyZ3N8eGRnLW9wZW58eWFybnx5ZXN8emVuaXR5fHppcHx6c2h8enlwcGVyKSg/PSR8WylcXHM7fCZdKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICAna2V5d29yZCc6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXFxzO3wmXXxbPD5dXFwoKSg/OmNhc2V8ZG98ZG9uZXxlbGlmfGVsc2V8ZXNhY3xmaXxmb3J8ZnVuY3Rpb258aWZ8aW58c2VsZWN0fHRoZW58dW50aWx8d2hpbGUpKD89JHxbKVxcczt8Jl0pLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgIC8vIGh0dHBzOi8vd3d3LmdudS5vcmcvc29mdHdhcmUvYmFzaC9tYW51YWwvaHRtbF9ub2RlL1NoZWxsLUJ1aWx0aW4tQ29tbWFuZHMuaHRtbFxuICAgICdidWlsdGluJzoge1xuICAgICAgcGF0dGVybjogLyhefFtcXHM7fCZdfFs8Pl1cXCgpKD86XFwufDp8YWxpYXN8YmluZHxicmVha3xidWlsdGlufGNhbGxlcnxjZHxjb21tYW5kfGNvbnRpbnVlfGRlY2xhcmV8ZWNob3xlbmFibGV8ZXZhbHxleGVjfGV4aXR8ZXhwb3J0fGdldG9wdHN8aGFzaHxoZWxwfGxldHxsb2NhbHxsb2dvdXR8bWFwZmlsZXxwcmludGZ8cHdkfHJlYWR8cmVhZGFycmF5fHJlYWRvbmx5fHJldHVybnxzZXR8c2hpZnR8c2hvcHR8c291cmNlfHRlc3R8dGltZXN8dHJhcHx0eXBlfHR5cGVzZXR8dWxpbWl0fHVtYXNrfHVuYWxpYXN8dW5zZXQpKD89JHxbKVxcczt8Jl0pLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAvLyBBbGlhcyBhZGRlZCB0byBtYWtlIHRob3NlIGVhc2llciB0byBkaXN0aW5ndWlzaCBmcm9tIHN0cmluZ3MuXG4gICAgICBhbGlhczogJ2NsYXNzLW5hbWUnXG4gICAgfSxcbiAgICAnYm9vbGVhbic6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXFxzO3wmXXxbPD5dXFwoKSg/OmZhbHNlfHRydWUpKD89JHxbKVxcczt8Jl0pLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgICdmaWxlLWRlc2NyaXB0b3InOiB7XG4gICAgICBwYXR0ZXJuOiAvXFxCJlxcZFxcYi8sXG4gICAgICBhbGlhczogJ2ltcG9ydGFudCdcbiAgICB9LFxuICAgICdvcGVyYXRvcic6IHtcbiAgICAgIC8vIExvdHMgb2YgcmVkaXJlY3Rpb25zIGhlcmUsIGJ1dCBub3QganVzdCB0aGF0LlxuICAgICAgcGF0dGVybjogL1xcZD88Pnw+XFx8fFxcKz18PVs9fl0/fCE9P3w8PFs8LV0/fFsmXFxkXT8+PnxcXGRbPD5dJj98Wzw+XVsmPV0/fCZbPiZdP3xcXHxbJnxdPy8sXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgJ2ZpbGUtZGVzY3JpcHRvcic6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvXlxcZC8sXG4gICAgICAgICAgYWxpYXM6ICdpbXBvcnRhbnQnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgICdwdW5jdHVhdGlvbic6IC9cXCQ/XFwoXFwoP3xcXClcXCk/fFxcLlxcLnxbe31bXFxdO1xcXFxdLyxcbiAgICAnbnVtYmVyJzoge1xuICAgICAgcGF0dGVybjogLyhefFxccykoPzpbMS05XVxcZCp8MCkoPzpbLixdXFxkKyk/XFxiLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9XG4gIH07XG4gIGNvbW1hbmRBZnRlckhlcmVkb2MuaW5zaWRlID0gUHJpc20ubGFuZ3VhZ2VzLmJhc2g7XG4gIC8qIFBhdHRlcm5zIGluIGNvbW1hbmQgc3Vic3RpdHV0aW9uLiAqL1xuXG4gIHZhciB0b0JlQ29waWVkID0gWydjb21tZW50JywgJ2Z1bmN0aW9uLW5hbWUnLCAnZm9yLW9yLXNlbGVjdCcsICdhc3NpZ24tbGVmdCcsICdzdHJpbmcnLCAnZW52aXJvbm1lbnQnLCAnZnVuY3Rpb24nLCAna2V5d29yZCcsICdidWlsdGluJywgJ2Jvb2xlYW4nLCAnZmlsZS1kZXNjcmlwdG9yJywgJ29wZXJhdG9yJywgJ3B1bmN0dWF0aW9uJywgJ251bWJlciddO1xuICB2YXIgaW5zaWRlID0gaW5zaWRlU3RyaW5nLnZhcmlhYmxlWzFdLmluc2lkZTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRvQmVDb3BpZWQubGVuZ3RoOyBpKyspIHtcbiAgICBpbnNpZGVbdG9CZUNvcGllZFtpXV0gPSBQcmlzbS5sYW5ndWFnZXMuYmFzaFt0b0JlQ29waWVkW2ldXTtcbiAgfVxuXG4gIFByaXNtLmxhbmd1YWdlcy5zaGVsbCA9IFByaXNtLmxhbmd1YWdlcy5iYXNoO1xufSkocHJpc20pO1xuLyogXCJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tY2xpa2VcIiAqL1xuXG5cbnByaXNtLmxhbmd1YWdlcy5jbGlrZSA9IHtcbiAgJ2NvbW1lbnQnOiBbe1xuICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKVxcL1xcKltcXHNcXFNdKj8oPzpcXCpcXC98JCkvLFxuICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgZ3JlZWR5OiB0cnVlXG4gIH0sIHtcbiAgICBwYXR0ZXJuOiAvKF58W15cXFxcOl0pXFwvXFwvLiovLFxuICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgZ3JlZWR5OiB0cnVlXG4gIH1dLFxuICAnc3RyaW5nJzoge1xuICAgIHBhdHRlcm46IC8oW1wiJ10pKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS8sXG4gICAgZ3JlZWR5OiB0cnVlXG4gIH0sXG4gICdjbGFzcy1uYW1lJzoge1xuICAgIHBhdHRlcm46IC8oXFxiKD86Y2xhc3N8ZXh0ZW5kc3xpbXBsZW1lbnRzfGluc3RhbmNlb2Z8aW50ZXJmYWNlfG5ld3x0cmFpdClcXHMrfFxcYmNhdGNoXFxzK1xcKClbXFx3LlxcXFxdKy9pLFxuICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgaW5zaWRlOiB7XG4gICAgICAncHVuY3R1YXRpb24nOiAvWy5cXFxcXS9cbiAgICB9XG4gIH0sXG4gICdrZXl3b3JkJzogL1xcYig/OmJyZWFrfGNhdGNofGNvbnRpbnVlfGRvfGVsc2V8ZmluYWxseXxmb3J8ZnVuY3Rpb258aWZ8aW58aW5zdGFuY2VvZnxuZXd8bnVsbHxyZXR1cm58dGhyb3d8dHJ5fHdoaWxlKVxcYi8sXG4gICdib29sZWFuJzogL1xcYig/OmZhbHNlfHRydWUpXFxiLyxcbiAgJ2Z1bmN0aW9uJzogL1xcYlxcdysoPz1cXCgpLyxcbiAgJ251bWJlcic6IC9cXGIweFtcXGRhLWZdK1xcYnwoPzpcXGJcXGQrKD86XFwuXFxkKik/fFxcQlxcLlxcZCspKD86ZVsrLV0/XFxkKyk/L2ksXG4gICdvcGVyYXRvcic6IC9bPD5dPT98WyE9XT0/PT98LS0/fFxcK1xcKz98JiY/fFxcfFxcfD98Wz8qL35eJV0vLFxuICAncHVuY3R1YXRpb24nOiAvW3t9W1xcXTsoKSwuOl0vXG59O1xuLyogXCJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tY1wiICovXG5cbnByaXNtLmxhbmd1YWdlcy5jID0gcHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY2xpa2UnLCB7XG4gICdjb21tZW50Jzoge1xuICAgIHBhdHRlcm46IC9cXC9cXC8oPzpbXlxcclxcblxcXFxdfFxcXFwoPzpcXHJcXG4/fFxcbnwoPyFbXFxyXFxuXSkpKSp8XFwvXFwqW1xcc1xcU10qPyg/OlxcKlxcL3wkKS8sXG4gICAgZ3JlZWR5OiB0cnVlXG4gIH0sXG4gICdzdHJpbmcnOiB7XG4gICAgLy8gaHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvYy9sYW5ndWFnZS9zdHJpbmdfbGl0ZXJhbFxuICAgIHBhdHRlcm46IC9cIig/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfFteXCJcXFxcXFxyXFxuXSkqXCIvLFxuICAgIGdyZWVkeTogdHJ1ZVxuICB9LFxuICAnY2xhc3MtbmFtZSc6IHtcbiAgICBwYXR0ZXJuOiAvKFxcYig/OmVudW18c3RydWN0KVxccysoPzpfX2F0dHJpYnV0ZV9fXFxzKlxcKFxcKFtcXHNcXFNdKj9cXClcXClcXHMqKT8pXFx3K3xcXGJbYS16XVxcdypfdFxcYi8sXG4gICAgbG9va2JlaGluZDogdHJ1ZVxuICB9LFxuICAna2V5d29yZCc6IC9cXGIoPzpfQWxpZ25hc3xfQWxpZ25vZnxfQXRvbWljfF9Cb29sfF9Db21wbGV4fF9HZW5lcmljfF9JbWFnaW5hcnl8X05vcmV0dXJufF9TdGF0aWNfYXNzZXJ0fF9UaHJlYWRfbG9jYWx8X19hdHRyaWJ1dGVfX3xhc218YXV0b3xicmVha3xjYXNlfGNoYXJ8Y29uc3R8Y29udGludWV8ZGVmYXVsdHxkb3xkb3VibGV8ZWxzZXxlbnVtfGV4dGVybnxmbG9hdHxmb3J8Z290b3xpZnxpbmxpbmV8aW50fGxvbmd8cmVnaXN0ZXJ8cmV0dXJufHNob3J0fHNpZ25lZHxzaXplb2Z8c3RhdGljfHN0cnVjdHxzd2l0Y2h8dHlwZWRlZnx0eXBlb2Z8dW5pb258dW5zaWduZWR8dm9pZHx2b2xhdGlsZXx3aGlsZSlcXGIvLFxuICAnZnVuY3Rpb24nOiAvXFxiW2Etel9dXFx3Kig/PVxccypcXCgpL2ksXG4gICdudW1iZXInOiAvKD86XFxiMHgoPzpbXFxkYS1mXSsoPzpcXC5bXFxkYS1mXSopP3xcXC5bXFxkYS1mXSspKD86cFsrLV0/XFxkKyk/fCg/OlxcYlxcZCsoPzpcXC5cXGQqKT98XFxCXFwuXFxkKykoPzplWystXT9cXGQrKT8pW2Z1bF17MCw0fS9pLFxuICAnb3BlcmF0b3InOiAvPj49P3w8PD0/fC0+fChbLSsmfDpdKVxcMXxbPzp+XXxbLSsqLyUmfF4hPTw+XT0/L1xufSk7XG5wcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdjJywgJ3N0cmluZycsIHtcbiAgJ2NoYXInOiB7XG4gICAgLy8gaHR0cHM6Ly9lbi5jcHByZWZlcmVuY2UuY29tL3cvYy9sYW5ndWFnZS9jaGFyYWN0ZXJfY29uc3RhbnRcbiAgICBwYXR0ZXJuOiAvJyg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfFteJ1xcXFxcXHJcXG5dKXswLDMyfScvLFxuICAgIGdyZWVkeTogdHJ1ZVxuICB9XG59KTtcbnByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2MnLCAnc3RyaW5nJywge1xuICAnbWFjcm8nOiB7XG4gICAgLy8gYWxsb3cgZm9yIG11bHRpbGluZSBtYWNybyBkZWZpbml0aW9uc1xuICAgIC8vIHNwYWNlcyBhZnRlciB0aGUgIyBjaGFyYWN0ZXIgY29tcGlsZSBmaW5lIHdpdGggZ2NjXG4gICAgcGF0dGVybjogLyheW1xcdCBdKikjXFxzKlthLXpdKD86W15cXHJcXG5cXFxcL118XFwvKD8hXFwqKXxcXC9cXCooPzpbXipdfFxcKig/IVxcLykpKlxcKlxcL3xcXFxcKD86XFxyXFxufFtcXHNcXFNdKSkqL2ltLFxuICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgZ3JlZWR5OiB0cnVlLFxuICAgIGFsaWFzOiAncHJvcGVydHknLFxuICAgIGluc2lkZToge1xuICAgICAgJ3N0cmluZyc6IFt7XG4gICAgICAgIC8vIGhpZ2hsaWdodCB0aGUgcGF0aCBvZiB0aGUgaW5jbHVkZSBzdGF0ZW1lbnQgYXMgYSBzdHJpbmdcbiAgICAgICAgcGF0dGVybjogL14oI1xccyppbmNsdWRlXFxzKik8W14+XSs+LyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgfSwgcHJpc20ubGFuZ3VhZ2VzLmNbJ3N0cmluZyddXSxcbiAgICAgICdjaGFyJzogcHJpc20ubGFuZ3VhZ2VzLmNbJ2NoYXInXSxcbiAgICAgICdjb21tZW50JzogcHJpc20ubGFuZ3VhZ2VzLmNbJ2NvbW1lbnQnXSxcbiAgICAgICdtYWNyby1uYW1lJzogW3tcbiAgICAgICAgcGF0dGVybjogLyheI1xccypkZWZpbmVcXHMrKVxcdytcXGIoPyFcXCgpL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH0sIHtcbiAgICAgICAgcGF0dGVybjogLyheI1xccypkZWZpbmVcXHMrKVxcdytcXGIoPz1cXCgpL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGFsaWFzOiAnZnVuY3Rpb24nXG4gICAgICB9XSxcbiAgICAgIC8vIGhpZ2hsaWdodCBtYWNybyBkaXJlY3RpdmVzIGFzIGtleXdvcmRzXG4gICAgICAnZGlyZWN0aXZlJzoge1xuICAgICAgICBwYXR0ZXJuOiAvXigjXFxzKilbYS16XSsvLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICBhbGlhczogJ2tleXdvcmQnXG4gICAgICB9LFxuICAgICAgJ2RpcmVjdGl2ZS1oYXNoJzogL14jLyxcbiAgICAgICdwdW5jdHVhdGlvbic6IC8jI3xcXFxcKD89W1xcclxcbl0pLyxcbiAgICAgICdleHByZXNzaW9uJzoge1xuICAgICAgICBwYXR0ZXJuOiAvXFxTW1xcc1xcU10qLyxcbiAgICAgICAgaW5zaWRlOiBwcmlzbS5sYW5ndWFnZXMuY1xuICAgICAgfVxuICAgIH1cbiAgfVxufSk7XG5wcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdjJywgJ2Z1bmN0aW9uJywge1xuICAvLyBoaWdobGlnaHQgcHJlZGVmaW5lZCBtYWNyb3MgYXMgY29uc3RhbnRzXG4gICdjb25zdGFudCc6IC9cXGIoPzpFT0Z8TlVMTHxTRUVLX0NVUnxTRUVLX0VORHxTRUVLX1NFVHxfX0RBVEVfX3xfX0ZJTEVfX3xfX0xJTkVfX3xfX1RJTUVTVEFNUF9ffF9fVElNRV9ffF9fZnVuY19ffHN0ZGVycnxzdGRpbnxzdGRvdXQpXFxiL1xufSk7XG5kZWxldGUgcHJpc20ubGFuZ3VhZ2VzLmNbJ2Jvb2xlYW4nXTtcbi8qIFwicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWNwcFwiICovXG5cbihmdW5jdGlvbiAoUHJpc20pIHtcbiAgdmFyIGtleXdvcmQgPSAvXFxiKD86YWxpZ25hc3xhbGlnbm9mfGFzbXxhdXRvfGJvb2x8YnJlYWt8Y2FzZXxjYXRjaHxjaGFyfGNoYXIxNl90fGNoYXIzMl90fGNoYXI4X3R8Y2xhc3N8Y29fYXdhaXR8Y29fcmV0dXJufGNvX3lpZWxkfGNvbXBsfGNvbmNlcHR8Y29uc3R8Y29uc3RfY2FzdHxjb25zdGV2YWx8Y29uc3RleHByfGNvbnN0aW5pdHxjb250aW51ZXxkZWNsdHlwZXxkZWZhdWx0fGRlbGV0ZXxkb3xkb3VibGV8ZHluYW1pY19jYXN0fGVsc2V8ZW51bXxleHBsaWNpdHxleHBvcnR8ZXh0ZXJufGZpbmFsfGZsb2F0fGZvcnxmcmllbmR8Z290b3xpZnxpbXBvcnR8aW5saW5lfGludHxpbnQxNl90fGludDMyX3R8aW50NjRfdHxpbnQ4X3R8bG9uZ3xtb2R1bGV8bXV0YWJsZXxuYW1lc3BhY2V8bmV3fG5vZXhjZXB0fG51bGxwdHJ8b3BlcmF0b3J8b3ZlcnJpZGV8cHJpdmF0ZXxwcm90ZWN0ZWR8cHVibGljfHJlZ2lzdGVyfHJlaW50ZXJwcmV0X2Nhc3R8cmVxdWlyZXN8cmV0dXJufHNob3J0fHNpZ25lZHxzaXplb2Z8c3RhdGljfHN0YXRpY19hc3NlcnR8c3RhdGljX2Nhc3R8c3RydWN0fHN3aXRjaHx0ZW1wbGF0ZXx0aGlzfHRocmVhZF9sb2NhbHx0aHJvd3x0cnl8dHlwZWRlZnx0eXBlaWR8dHlwZW5hbWV8dWludDE2X3R8dWludDMyX3R8dWludDY0X3R8dWludDhfdHx1bmlvbnx1bnNpZ25lZHx1c2luZ3x2aXJ0dWFsfHZvaWR8dm9sYXRpbGV8d2NoYXJfdHx3aGlsZSlcXGIvO1xuICB2YXIgbW9kTmFtZSA9IC9cXGIoPyE8a2V5d29yZD4pXFx3Kyg/OlxccypcXC5cXHMqXFx3KykqXFxiLy5zb3VyY2UucmVwbGFjZSgvPGtleXdvcmQ+L2csIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ga2V5d29yZC5zb3VyY2U7XG4gIH0pO1xuICBQcmlzbS5sYW5ndWFnZXMuY3BwID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnYycsIHtcbiAgICAnY2xhc3MtbmFtZSc6IFt7XG4gICAgICBwYXR0ZXJuOiBSZWdFeHAoLyhcXGIoPzpjbGFzc3xjb25jZXB0fGVudW18c3RydWN0fHR5cGVuYW1lKVxccyspKD8hPGtleXdvcmQ+KVxcdysvLnNvdXJjZS5yZXBsYWNlKC88a2V5d29yZD4vZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ga2V5d29yZC5zb3VyY2U7XG4gICAgICB9KSksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSwgLy8gVGhpcyBpcyBpbnRlbmRlZCB0byBjYXB0dXJlIHRoZSBjbGFzcyBuYW1lIG9mIG1ldGhvZCBpbXBsZW1lbnRhdGlvbnMgbGlrZTpcbiAgICAvLyAgIHZvaWQgZm9vOjpiYXIoKSBjb25zdCB7fVxuICAgIC8vIEhvd2V2ZXIhIFRoZSBgZm9vYCBpbiB0aGUgYWJvdmUgZXhhbXBsZSBjb3VsZCBhbHNvIGJlIGEgbmFtZXNwYWNlLCBzbyB3ZSBvbmx5IGNhcHR1cmUgdGhlIGNsYXNzIG5hbWUgaWZcbiAgICAvLyBpdCBzdGFydHMgd2l0aCBhbiB1cHBlcmNhc2UgbGV0dGVyLiBUaGlzIGFwcHJveGltYXRpb24gc2hvdWxkIGdpdmUgZGVjZW50IHJlc3VsdHMuXG4gICAgL1xcYltBLVpdXFx3Kig/PVxccyo6OlxccypcXHcrXFxzKlxcKCkvLCAvLyBUaGlzIHdpbGwgY2FwdHVyZSB0aGUgY2xhc3MgbmFtZSBiZWZvcmUgZGVzdHJ1Y3RvcnMgbGlrZTpcbiAgICAvLyAgIEZvbzo6fkZvbygpIHt9XG4gICAgL1xcYltBLVpfXVxcdyooPz1cXHMqOjpcXHMqflxcdytcXHMqXFwoKS9pLCAvLyBUaGlzIGFsc28gaW50ZW5kcyB0byBjYXB0dXJlIHRoZSBjbGFzcyBuYW1lIG9mIG1ldGhvZCBpbXBsZW1lbnRhdGlvbnMgYnV0IGhlcmUgdGhlIGNsYXNzIGhhcyB0ZW1wbGF0ZVxuICAgIC8vIHBhcmFtZXRlcnMsIHNvIGl0IGNhbid0IGJlIGEgbmFtZXNwYWNlICh1bnRpbCBDKysgYWRkcyBnZW5lcmljIG5hbWVzcGFjZXMpLlxuICAgIC9cXGJcXHcrKD89XFxzKjwoPzpbXjw+XXw8KD86W148Pl18PFtePD5dKj4pKj4pKj5cXHMqOjpcXHMqXFx3K1xccypcXCgpL10sXG4gICAgJ2tleXdvcmQnOiBrZXl3b3JkLFxuICAgICdudW1iZXInOiB7XG4gICAgICBwYXR0ZXJuOiAvKD86XFxiMGJbMDEnXSt8XFxiMHgoPzpbXFxkYS1mJ10rKD86XFwuW1xcZGEtZiddKik/fFxcLltcXGRhLWYnXSspKD86cFsrLV0/W1xcZCddKyk/fCg/OlxcYltcXGQnXSsoPzpcXC5bXFxkJ10qKT98XFxCXFwuW1xcZCddKykoPzplWystXT9bXFxkJ10rKT8pW2Z1bF17MCw0fS9pLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfSxcbiAgICAnb3BlcmF0b3InOiAvPj49P3w8PD0/fC0+fC0tfFxcK1xcK3wmJnxcXHxcXHx8Wz86fl18PD0+fFstKyovJSZ8XiE9PD5dPT98XFxiKD86YW5kfGFuZF9lcXxiaXRhbmR8Yml0b3J8bm90fG5vdF9lcXxvcnxvcl9lcXx4b3J8eG9yX2VxKVxcYi8sXG4gICAgJ2Jvb2xlYW4nOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvXG4gIH0pO1xuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdjcHAnLCAnc3RyaW5nJywge1xuICAgICdtb2R1bGUnOiB7XG4gICAgICAvLyBodHRwczovL2VuLmNwcHJlZmVyZW5jZS5jb20vdy9jcHAvbGFuZ3VhZ2UvbW9kdWxlc1xuICAgICAgcGF0dGVybjogUmVnRXhwKC8oXFxiKD86aW1wb3J0fG1vZHVsZSlcXHMrKS8uc291cmNlICsgJyg/OicgKyAvLyBoZWFkZXItbmFtZVxuICAgICAgL1wiKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8W15cIlxcXFxcXHJcXG5dKSpcInw8W148Plxcclxcbl0qPi8uc291cmNlICsgJ3wnICsgLy8gbW9kdWxlIG5hbWUgb3IgcGFydGl0aW9uIG9yIGJvdGhcbiAgICAgIC88bW9kLW5hbWU+KD86XFxzKjpcXHMqPG1vZC1uYW1lPik/fDpcXHMqPG1vZC1uYW1lPi8uc291cmNlLnJlcGxhY2UoLzxtb2QtbmFtZT4vZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gbW9kTmFtZTtcbiAgICAgIH0pICsgJyknKSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgJ3N0cmluZyc6IC9eWzxcIl1bXFxzXFxTXSsvLFxuICAgICAgICAnb3BlcmF0b3InOiAvOi8sXG4gICAgICAgICdwdW5jdHVhdGlvbic6IC9cXC4vXG4gICAgICB9XG4gICAgfSxcbiAgICAncmF3LXN0cmluZyc6IHtcbiAgICAgIHBhdHRlcm46IC9SXCIoW14oKVxcXFwgXXswLDE2fSlcXChbXFxzXFxTXSo/XFwpXFwxXCIvLFxuICAgICAgYWxpYXM6ICdzdHJpbmcnLFxuICAgICAgZ3JlZWR5OiB0cnVlXG4gICAgfVxuICB9KTtcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnY3BwJywgJ2tleXdvcmQnLCB7XG4gICAgJ2dlbmVyaWMtZnVuY3Rpb24nOiB7XG4gICAgICBwYXR0ZXJuOiAvXFxiKD8hb3BlcmF0b3JcXGIpW2Etel9dXFx3Klxccyo8KD86W148Pl18PFtePD5dKj4pKj4oPz1cXHMqXFwoKS9pLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdmdW5jdGlvbic6IC9eXFx3Ky8sXG4gICAgICAgICdnZW5lcmljJzoge1xuICAgICAgICAgIHBhdHRlcm46IC88W1xcc1xcU10rLyxcbiAgICAgICAgICBhbGlhczogJ2NsYXNzLW5hbWUnLFxuICAgICAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmNwcFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnY3BwJywgJ29wZXJhdG9yJywge1xuICAgICdkb3VibGUtY29sb24nOiB7XG4gICAgICBwYXR0ZXJuOiAvOjovLFxuICAgICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgICB9XG4gIH0pO1xuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdjcHAnLCAnY2xhc3MtbmFtZScsIHtcbiAgICAvLyB0aGUgYmFzZSBjbGF1c2UgaXMgYW4gb3B0aW9uYWwgbGlzdCBvZiBwYXJlbnQgY2xhc3Nlc1xuICAgIC8vIGh0dHBzOi8vZW4uY3BwcmVmZXJlbmNlLmNvbS93L2NwcC9sYW5ndWFnZS9jbGFzc1xuICAgICdiYXNlLWNsYXVzZSc6IHtcbiAgICAgIHBhdHRlcm46IC8oXFxiKD86Y2xhc3N8c3RydWN0KVxccytcXHcrXFxzKjpcXHMqKVteO3t9XCInXFxzXSsoPzpcXHMrW147e31cIidcXHNdKykqKD89XFxzKls7e10pLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2NwcCcsIHt9KVxuICAgIH1cbiAgfSk7XG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2luc2lkZScsICdkb3VibGUtY29sb24nLCB7XG4gICAgLy8gQWxsIHVudG9rZW5pemVkIHdvcmRzIHRoYXQgYXJlIG5vdCBuYW1lc3BhY2VzIHNob3VsZCBiZSBjbGFzcyBuYW1lc1xuICAgICdjbGFzcy1uYW1lJzogL1xcYlthLXpfXVxcdypcXGIoPyFcXHMqOjopL2lcbiAgfSwgUHJpc20ubGFuZ3VhZ2VzLmNwcFsnYmFzZS1jbGF1c2UnXSk7XG59KShwcmlzbSk7XG4vKiBcInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1jc3NcIiAqL1xuXG5cbihmdW5jdGlvbiAoUHJpc20pIHtcbiAgdmFyIHN0cmluZyA9IC8oPzpcIig/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfFteXCJcXFxcXFxyXFxuXSkqXCJ8Jyg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfFteJ1xcXFxcXHJcXG5dKSonKS87XG4gIFByaXNtLmxhbmd1YWdlcy5jc3MgPSB7XG4gICAgJ2NvbW1lbnQnOiAvXFwvXFwqW1xcc1xcU10qP1xcKlxcLy8sXG4gICAgJ2F0cnVsZSc6IHtcbiAgICAgIHBhdHRlcm46IC9AW1xcdy1dKD86W147e1xcc118XFxzKyg/IVtcXHN7XSkpKig/Ojt8KD89XFxzKlxceykpLyxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAncnVsZSc6IC9eQFtcXHctXSsvLFxuICAgICAgICAnc2VsZWN0b3ItZnVuY3Rpb24tYXJndW1lbnQnOiB7XG4gICAgICAgICAgcGF0dGVybjogLyhcXGJzZWxlY3RvclxccypcXChcXHMqKD8hW1xccyldKSkoPzpbXigpXFxzXXxcXHMrKD8hW1xccyldKXxcXCgoPzpbXigpXXxcXChbXigpXSpcXCkpKlxcKSkrKD89XFxzKlxcKSkvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgYWxpYXM6ICdzZWxlY3RvcidcbiAgICAgICAgfSxcbiAgICAgICAgJ2tleXdvcmQnOiB7XG4gICAgICAgICAgcGF0dGVybjogLyhefFteXFx3LV0pKD86YW5kfG5vdHxvbmx5fG9yKSg/IVtcXHctXSkvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgfSAvLyBTZWUgcmVzdCBiZWxvd1xuXG4gICAgICB9XG4gICAgfSxcbiAgICAndXJsJzoge1xuICAgICAgLy8gaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy12YWx1ZXMtMy8jdXJsc1xuICAgICAgcGF0dGVybjogUmVnRXhwKCdcXFxcYnVybFxcXFwoKD86JyArIHN0cmluZy5zb3VyY2UgKyAnfCcgKyAvKD86W15cXFxcXFxyXFxuKClcIiddfFxcXFxbXFxzXFxTXSkqLy5zb3VyY2UgKyAnKVxcXFwpJywgJ2knKSxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAnZnVuY3Rpb24nOiAvXnVybC9pLFxuICAgICAgICAncHVuY3R1YXRpb24nOiAvXlxcKHxcXCkkLyxcbiAgICAgICAgJ3N0cmluZyc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoJ14nICsgc3RyaW5nLnNvdXJjZSArICckJyksXG4gICAgICAgICAgYWxpYXM6ICd1cmwnXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgICdzZWxlY3Rvcic6IHtcbiAgICAgIHBhdHRlcm46IFJlZ0V4cCgnKF58W3t9XFxcXHNdKVtee31cXFxcc10oPzpbXnt9O1wiXFwnXFxcXHNdfFxcXFxzKyg/IVtcXFxcc3tdKXwnICsgc3RyaW5nLnNvdXJjZSArICcpKig/PVxcXFxzKlxcXFx7KScpLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgJ3N0cmluZyc6IHtcbiAgICAgIHBhdHRlcm46IHN0cmluZyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgJ3Byb3BlcnR5Jzoge1xuICAgICAgcGF0dGVybjogLyhefFteLVxcd1xceEEwLVxcdUZGRkZdKSg/IVxccylbLV9hLXpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbLVxcd1xceEEwLVxcdUZGRkZdKSooPz1cXHMqOikvaSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgICdpbXBvcnRhbnQnOiAvIWltcG9ydGFudFxcYi9pLFxuICAgICdmdW5jdGlvbic6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXi1hLXowLTldKVstYS16MC05XSsoPz1cXCgpL2ksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICAncHVuY3R1YXRpb24nOiAvWygpe307OixdL1xuICB9O1xuICBQcmlzbS5sYW5ndWFnZXMuY3NzWydhdHJ1bGUnXS5pbnNpZGUucmVzdCA9IFByaXNtLmxhbmd1YWdlcy5jc3M7XG4gIHZhciBtYXJrdXAgPSBQcmlzbS5sYW5ndWFnZXMubWFya3VwO1xuXG4gIGlmIChtYXJrdXApIHtcbiAgICBtYXJrdXAudGFnLmFkZElubGluZWQoJ3N0eWxlJywgJ2NzcycpO1xuICAgIG1hcmt1cC50YWcuYWRkQXR0cmlidXRlKCdzdHlsZScsICdjc3MnKTtcbiAgfVxufSkocHJpc20pO1xuLyogXCJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tY3NzLWV4dHJhc1wiICovXG5cblxuKGZ1bmN0aW9uIChQcmlzbSkge1xuICB2YXIgc3RyaW5nID0gLyhcInwnKSg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfCg/IVxcMSlbXlxcXFxcXHJcXG5dKSpcXDEvO1xuICB2YXIgc2VsZWN0b3JJbnNpZGU7XG4gIFByaXNtLmxhbmd1YWdlcy5jc3Muc2VsZWN0b3IgPSB7XG4gICAgcGF0dGVybjogUHJpc20ubGFuZ3VhZ2VzLmNzcy5zZWxlY3Rvci5wYXR0ZXJuLFxuICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgaW5zaWRlOiBzZWxlY3Rvckluc2lkZSA9IHtcbiAgICAgICdwc2V1ZG8tZWxlbWVudCc6IC86KD86YWZ0ZXJ8YmVmb3JlfGZpcnN0LWxldHRlcnxmaXJzdC1saW5lfHNlbGVjdGlvbil8OjpbLVxcd10rLyxcbiAgICAgICdwc2V1ZG8tY2xhc3MnOiAvOlstXFx3XSsvLFxuICAgICAgJ2NsYXNzJzogL1xcLlstXFx3XSsvLFxuICAgICAgJ2lkJzogLyNbLVxcd10rLyxcbiAgICAgICdhdHRyaWJ1dGUnOiB7XG4gICAgICAgIHBhdHRlcm46IFJlZ0V4cCgnXFxcXFsoPzpbXltcXFxcXVwiXFwnXXwnICsgc3RyaW5nLnNvdXJjZSArICcpKlxcXFxdJyksXG4gICAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgJ3B1bmN0dWF0aW9uJzogL15cXFt8XFxdJC8sXG4gICAgICAgICAgJ2Nhc2Utc2Vuc2l0aXZpdHknOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvKFxccylbc2ldJC9pLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICAgIGFsaWFzOiAna2V5d29yZCdcbiAgICAgICAgICB9LFxuICAgICAgICAgICduYW1lc3BhY2UnOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvXihcXHMqKSg/Oig/IVxccylbLSpcXHdcXHhBMC1cXHVGRkZGXSkqXFx8KD8hPSkvLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgICAncHVuY3R1YXRpb24nOiAvXFx8JC9cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9LFxuICAgICAgICAgICdhdHRyLW5hbWUnOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvXihcXHMqKSg/Oig/IVxccylbLVxcd1xceEEwLVxcdUZGRkZdKSsvLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgJ2F0dHItdmFsdWUnOiBbc3RyaW5nLCB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvKD1cXHMqKSg/Oig/IVxccylbLVxcd1xceEEwLVxcdUZGRkZdKSsoPz1cXHMqJCkvLFxuICAgICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICAgIH1dLFxuICAgICAgICAgICdvcGVyYXRvcic6IC9bfH4qXiRdPz0vXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnbi10aCc6IFt7XG4gICAgICAgIHBhdHRlcm46IC8oXFwoXFxzKilbKy1dP1xcZCpbXFxkbl0oPzpcXHMqWystXVxccypcXGQrKT8oPz1cXHMqXFwpKS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgICdudW1iZXInOiAvW1xcZG5dKy8sXG4gICAgICAgICAgJ29wZXJhdG9yJzogL1srLV0vXG4gICAgICAgIH1cbiAgICAgIH0sIHtcbiAgICAgICAgcGF0dGVybjogLyhcXChcXHMqKSg/OmV2ZW58b2RkKSg/PVxccypcXCkpL2ksXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgIH1dLFxuICAgICAgJ2NvbWJpbmF0b3InOiAvPnxcXCt8fnxcXHxcXHwvLFxuICAgICAgLy8gdGhlIGB0YWdgIHRva2VuIGhhcyBiZWVuIGV4aXN0ZWQgYW5kIHJlbW92ZWQuXG4gICAgICAvLyBiZWNhdXNlIHdlIGNhbid0IGZpbmQgYSBwZXJmZWN0IHRva2VuaXplIHRvIG1hdGNoIGl0LlxuICAgICAgLy8gaWYgeW91IHdhbnQgdG8gYWRkIGl0LCBwbGVhc2UgcmVhZCBodHRwczovL2dpdGh1Yi5jb20vUHJpc21KUy9wcmlzbS9wdWxsLzIzNzMgZmlyc3QuXG4gICAgICAncHVuY3R1YXRpb24nOiAvWygpLF0vXG4gICAgfVxuICB9O1xuICBQcmlzbS5sYW5ndWFnZXMuY3NzWydhdHJ1bGUnXS5pbnNpZGVbJ3NlbGVjdG9yLWZ1bmN0aW9uLWFyZ3VtZW50J10uaW5zaWRlID0gc2VsZWN0b3JJbnNpZGU7XG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2NzcycsICdwcm9wZXJ0eScsIHtcbiAgICAndmFyaWFibGUnOiB7XG4gICAgICBwYXR0ZXJuOiAvKF58W14tXFx3XFx4QTAtXFx1RkZGRl0pLS0oPyFcXHMpWy1fYS16XFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWy1cXHdcXHhBMC1cXHVGRkZGXSkqL2ksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfVxuICB9KTtcbiAgdmFyIHVuaXQgPSB7XG4gICAgcGF0dGVybjogLyhcXGJcXGQrKSg/OiV8W2Etel0rKD8hW1xcdy1dKSkvLFxuICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgfTsgLy8gMTIzIC0xMjMgLjEyMyAtLjEyMyAxMi4zIC0xMi4zXG5cbiAgdmFyIG51bWJlciA9IHtcbiAgICBwYXR0ZXJuOiAvKF58W15cXHcuLV0pLT8oPzpcXGQrKD86XFwuXFxkKyk/fFxcLlxcZCspLyxcbiAgICBsb29rYmVoaW5kOiB0cnVlXG4gIH07XG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2NzcycsICdmdW5jdGlvbicsIHtcbiAgICAnb3BlcmF0b3InOiB7XG4gICAgICBwYXR0ZXJuOiAvKFxccylbK1xcLSpcXC9dKD89XFxzKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICAvLyBDQVJFRlVMIVxuICAgIC8vIFByZXZpZXdlcnMgYW5kIElubGluZSBjb2xvciB1c2UgaGV4Y29kZSBhbmQgY29sb3IuXG4gICAgJ2hleGNvZGUnOiB7XG4gICAgICBwYXR0ZXJuOiAvXFxCI1tcXGRhLWZdezMsOH1cXGIvaSxcbiAgICAgIGFsaWFzOiAnY29sb3InXG4gICAgfSxcbiAgICAnY29sb3InOiBbe1xuICAgICAgcGF0dGVybjogLyhefFteXFx3LV0pKD86QWxpY2VCbHVlfEFudGlxdWVXaGl0ZXxBcXVhfEFxdWFtYXJpbmV8QXp1cmV8QmVpZ2V8QmlzcXVlfEJsYWNrfEJsYW5jaGVkQWxtb25kfEJsdWV8Qmx1ZVZpb2xldHxCcm93bnxCdXJseVdvb2R8Q2FkZXRCbHVlfENoYXJ0cmV1c2V8Q2hvY29sYXRlfENvcmFsfENvcm5mbG93ZXJCbHVlfENvcm5zaWxrfENyaW1zb258Q3lhbnxEYXJrQmx1ZXxEYXJrQ3lhbnxEYXJrR29sZGVuUm9kfERhcmtHclthZV15fERhcmtHcmVlbnxEYXJrS2hha2l8RGFya01hZ2VudGF8RGFya09saXZlR3JlZW58RGFya09yYW5nZXxEYXJrT3JjaGlkfERhcmtSZWR8RGFya1NhbG1vbnxEYXJrU2VhR3JlZW58RGFya1NsYXRlQmx1ZXxEYXJrU2xhdGVHclthZV15fERhcmtUdXJxdW9pc2V8RGFya1Zpb2xldHxEZWVwUGlua3xEZWVwU2t5Qmx1ZXxEaW1HclthZV15fERvZGdlckJsdWV8RmlyZUJyaWNrfEZsb3JhbFdoaXRlfEZvcmVzdEdyZWVufEZ1Y2hzaWF8R2FpbnNib3JvfEdob3N0V2hpdGV8R29sZHxHb2xkZW5Sb2R8R3JbYWVdeXxHcmVlbnxHcmVlblllbGxvd3xIb25leURld3xIb3RQaW5rfEluZGlhblJlZHxJbmRpZ298SXZvcnl8S2hha2l8TGF2ZW5kZXJ8TGF2ZW5kZXJCbHVzaHxMYXduR3JlZW58TGVtb25DaGlmZm9ufExpZ2h0Qmx1ZXxMaWdodENvcmFsfExpZ2h0Q3lhbnxMaWdodEdvbGRlblJvZFllbGxvd3xMaWdodEdyW2FlXXl8TGlnaHRHcmVlbnxMaWdodFBpbmt8TGlnaHRTYWxtb258TGlnaHRTZWFHcmVlbnxMaWdodFNreUJsdWV8TGlnaHRTbGF0ZUdyW2FlXXl8TGlnaHRTdGVlbEJsdWV8TGlnaHRZZWxsb3d8TGltZXxMaW1lR3JlZW58TGluZW58TWFnZW50YXxNYXJvb258TWVkaXVtQXF1YU1hcmluZXxNZWRpdW1CbHVlfE1lZGl1bU9yY2hpZHxNZWRpdW1QdXJwbGV8TWVkaXVtU2VhR3JlZW58TWVkaXVtU2xhdGVCbHVlfE1lZGl1bVNwcmluZ0dyZWVufE1lZGl1bVR1cnF1b2lzZXxNZWRpdW1WaW9sZXRSZWR8TWlkbmlnaHRCbHVlfE1pbnRDcmVhbXxNaXN0eVJvc2V8TW9jY2FzaW58TmF2YWpvV2hpdGV8TmF2eXxPbGRMYWNlfE9saXZlfE9saXZlRHJhYnxPcmFuZ2V8T3JhbmdlUmVkfE9yY2hpZHxQYWxlR29sZGVuUm9kfFBhbGVHcmVlbnxQYWxlVHVycXVvaXNlfFBhbGVWaW9sZXRSZWR8UGFwYXlhV2hpcHxQZWFjaFB1ZmZ8UGVydXxQaW5rfFBsdW18UG93ZGVyQmx1ZXxQdXJwbGV8UmVkfFJvc3lCcm93bnxSb3lhbEJsdWV8U2FkZGxlQnJvd258U2FsbW9ufFNhbmR5QnJvd258U2VhR3JlZW58U2VhU2hlbGx8U2llbm5hfFNpbHZlcnxTa3lCbHVlfFNsYXRlQmx1ZXxTbGF0ZUdyW2FlXXl8U25vd3xTcHJpbmdHcmVlbnxTdGVlbEJsdWV8VGFufFRlYWx8VGhpc3RsZXxUb21hdG98VHJhbnNwYXJlbnR8VHVycXVvaXNlfFZpb2xldHxXaGVhdHxXaGl0ZXxXaGl0ZVNtb2tlfFllbGxvd3xZZWxsb3dHcmVlbikoPyFbXFx3LV0pL2ksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSwge1xuICAgICAgcGF0dGVybjogL1xcYig/OmhzbHxyZ2IpXFwoXFxzKlxcZHsxLDN9XFxzKixcXHMqXFxkezEsM30lP1xccyosXFxzKlxcZHsxLDN9JT9cXHMqXFwpXFxCfFxcYig/OmhzbHxyZ2IpYVxcKFxccypcXGR7MSwzfVxccyosXFxzKlxcZHsxLDN9JT9cXHMqLFxccypcXGR7MSwzfSU/XFxzKixcXHMqKD86MHwwP1xcLlxcZCt8MSlcXHMqXFwpXFxCL2ksXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgJ3VuaXQnOiB1bml0LFxuICAgICAgICAnbnVtYmVyJzogbnVtYmVyLFxuICAgICAgICAnZnVuY3Rpb24nOiAvW1xcdy1dKyg/PVxcKCkvLFxuICAgICAgICAncHVuY3R1YXRpb24nOiAvWygpLF0vXG4gICAgICB9XG4gICAgfV0sXG4gICAgLy8gaXQncyBpbXBvcnRhbnQgdGhhdCB0aGVyZSBpcyBubyBib3VuZGFyeSBhc3NlcnRpb24gYWZ0ZXIgdGhlIGhleCBkaWdpdHNcbiAgICAnZW50aXR5JzogL1xcXFxbXFxkYS1mXXsxLDh9L2ksXG4gICAgJ3VuaXQnOiB1bml0LFxuICAgICdudW1iZXInOiBudW1iZXJcbiAgfSk7XG59KShwcmlzbSk7XG4vKiBcInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1qYXZhc2NyaXB0XCIgKi9cblxuXG5wcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdCA9IHByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2NsaWtlJywge1xuICAnY2xhc3MtbmFtZSc6IFtwcmlzbS5sYW5ndWFnZXMuY2xpa2VbJ2NsYXNzLW5hbWUnXSwge1xuICAgIHBhdHRlcm46IC8oXnxbXiRcXHdcXHhBMC1cXHVGRkZGXSkoPyFcXHMpW18kQS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqKD89XFwuKD86Y29uc3RydWN0b3J8cHJvdG90eXBlKSkvLFxuICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgfV0sXG4gICdrZXl3b3JkJzogW3tcbiAgICBwYXR0ZXJuOiAvKCg/Ol58XFx9KVxccyopY2F0Y2hcXGIvLFxuICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgfSwge1xuICAgIHBhdHRlcm46IC8oXnxbXi5dfFxcLlxcLlxcLlxccyopXFxiKD86YXN8YXNzZXJ0KD89XFxzKlxceyl8YXN5bmMoPz1cXHMqKD86ZnVuY3Rpb25cXGJ8XFwofFskXFx3XFx4QTAtXFx1RkZGRl18JCkpfGF3YWl0fGJyZWFrfGNhc2V8Y2xhc3N8Y29uc3R8Y29udGludWV8ZGVidWdnZXJ8ZGVmYXVsdHxkZWxldGV8ZG98ZWxzZXxlbnVtfGV4cG9ydHxleHRlbmRzfGZpbmFsbHkoPz1cXHMqKD86XFx7fCQpKXxmb3J8ZnJvbSg/PVxccyooPzpbJ1wiXXwkKSl8ZnVuY3Rpb258KD86Z2V0fHNldCkoPz1cXHMqKD86WyNcXFskXFx3XFx4QTAtXFx1RkZGRl18JCkpfGlmfGltcGxlbWVudHN8aW1wb3J0fGlufGluc3RhbmNlb2Z8aW50ZXJmYWNlfGxldHxuZXd8bnVsbHxvZnxwYWNrYWdlfHByaXZhdGV8cHJvdGVjdGVkfHB1YmxpY3xyZXR1cm58c3RhdGljfHN1cGVyfHN3aXRjaHx0aGlzfHRocm93fHRyeXx0eXBlb2Z8dW5kZWZpbmVkfHZhcnx2b2lkfHdoaWxlfHdpdGh8eWllbGQpXFxiLyxcbiAgICBsb29rYmVoaW5kOiB0cnVlXG4gIH1dLFxuICAvLyBBbGxvdyBmb3IgYWxsIG5vbi1BU0NJSSBjaGFyYWN0ZXJzIChTZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjAwODQ0NClcbiAgJ2Z1bmN0aW9uJzogLyM/KD8hXFxzKVtfJGEtekEtWlxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVskXFx3XFx4QTAtXFx1RkZGRl0pKig/PVxccyooPzpcXC5cXHMqKD86YXBwbHl8YmluZHxjYWxsKVxccyopP1xcKCkvLFxuICAnbnVtYmVyJzoge1xuICAgIHBhdHRlcm46IFJlZ0V4cCgvKF58W15cXHckXSkvLnNvdXJjZSArICcoPzonICsgKCAvLyBjb25zdGFudFxuICAgIC9OYU58SW5maW5pdHkvLnNvdXJjZSArICd8JyArIC8vIGJpbmFyeSBpbnRlZ2VyXG4gICAgLzBbYkJdWzAxXSsoPzpfWzAxXSspKm4/Ly5zb3VyY2UgKyAnfCcgKyAvLyBvY3RhbCBpbnRlZ2VyXG4gICAgLzBbb09dWzAtN10rKD86X1swLTddKykqbj8vLnNvdXJjZSArICd8JyArIC8vIGhleGFkZWNpbWFsIGludGVnZXJcbiAgICAvMFt4WF1bXFxkQS1GYS1mXSsoPzpfW1xcZEEtRmEtZl0rKSpuPy8uc291cmNlICsgJ3wnICsgLy8gZGVjaW1hbCBiaWdpbnRcbiAgICAvXFxkKyg/Ol9cXGQrKSpuLy5zb3VyY2UgKyAnfCcgKyAvLyBkZWNpbWFsIG51bWJlciAoaW50ZWdlciBvciBmbG9hdCkgYnV0IG5vIGJpZ2ludFxuICAgIC8oPzpcXGQrKD86X1xcZCspKig/OlxcLig/OlxcZCsoPzpfXFxkKykqKT8pP3xcXC5cXGQrKD86X1xcZCspKikoPzpbRWVdWystXT9cXGQrKD86X1xcZCspKik/Ly5zb3VyY2UpICsgJyknICsgLyg/IVtcXHckXSkvLnNvdXJjZSksXG4gICAgbG9va2JlaGluZDogdHJ1ZVxuICB9LFxuICAnb3BlcmF0b3InOiAvLS18XFwrXFwrfFxcKlxcKj0/fD0+fCYmPT98XFx8XFx8PT98WyE9XT09fDw8PT98Pj4+Pz0/fFstKyovJSZ8XiE9PD5dPT98XFwuezN9fFxcP1xcPz0/fFxcP1xcLj98W346XS9cbn0pO1xucHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRbJ2NsYXNzLW5hbWUnXVswXS5wYXR0ZXJuID0gLyhcXGIoPzpjbGFzc3xleHRlbmRzfGltcGxlbWVudHN8aW5zdGFuY2VvZnxpbnRlcmZhY2V8bmV3KVxccyspW1xcdy5cXFxcXSsvO1xucHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnamF2YXNjcmlwdCcsICdrZXl3b3JkJywge1xuICAncmVnZXgnOiB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9uby1kdXBlLWNoYXJhY3RlcnMtY2hhcmFjdGVyLWNsYXNzXG4gICAgcGF0dGVybjogLygoPzpefFteJFxcd1xceEEwLVxcdUZGRkYuXCInXFxdKVxcc118XFxiKD86cmV0dXJufHlpZWxkKSlcXHMqKVxcLyg/OlxcWyg/OlteXFxdXFxcXFxcclxcbl18XFxcXC4pKlxcXXxcXFxcLnxbXi9cXFxcXFxbXFxyXFxuXSkrXFwvW2RnaW15dXNdezAsN30oPz0oPzpcXHN8XFwvXFwqKD86W14qXXxcXCooPyFcXC8pKSpcXCpcXC8pKig/OiR8W1xcclxcbiwuOzp9KVxcXV18XFwvXFwvKSkvLFxuICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgZ3JlZWR5OiB0cnVlLFxuICAgIGluc2lkZToge1xuICAgICAgJ3JlZ2V4LXNvdXJjZSc6IHtcbiAgICAgICAgcGF0dGVybjogL14oXFwvKVtcXHNcXFNdKyg/PVxcL1thLXpdKiQpLyxcbiAgICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgICAgYWxpYXM6ICdsYW5ndWFnZS1yZWdleCcsXG4gICAgICAgIGluc2lkZTogcHJpc20ubGFuZ3VhZ2VzLnJlZ2V4XG4gICAgICB9LFxuICAgICAgJ3JlZ2V4LWRlbGltaXRlcic6IC9eXFwvfFxcLyQvLFxuICAgICAgJ3JlZ2V4LWZsYWdzJzogL15bYS16XSskL1xuICAgIH1cbiAgfSxcbiAgLy8gVGhpcyBtdXN0IGJlIGRlY2xhcmVkIGJlZm9yZSBrZXl3b3JkIGJlY2F1c2Ugd2UgdXNlIFwiZnVuY3Rpb25cIiBpbnNpZGUgdGhlIGxvb2stZm9yd2FyZFxuICAnZnVuY3Rpb24tdmFyaWFibGUnOiB7XG4gICAgcGF0dGVybjogLyM/KD8hXFxzKVtfJGEtekEtWlxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVskXFx3XFx4QTAtXFx1RkZGRl0pKig/PVxccypbPTpdXFxzKig/OmFzeW5jXFxzKik/KD86XFxiZnVuY3Rpb25cXGJ8KD86XFwoKD86W14oKV18XFwoW14oKV0qXFwpKSpcXCl8KD8hXFxzKVtfJGEtekEtWlxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVskXFx3XFx4QTAtXFx1RkZGRl0pKilcXHMqPT4pKS8sXG4gICAgYWxpYXM6ICdmdW5jdGlvbidcbiAgfSxcbiAgJ3BhcmFtZXRlcic6IFt7XG4gICAgcGF0dGVybjogLyhmdW5jdGlvbig/OlxccysoPyFcXHMpW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqKT9cXHMqXFwoXFxzKikoPyFcXHMpKD86W14oKVxcc118XFxzKyg/IVtcXHMpXSl8XFwoW14oKV0qXFwpKSsoPz1cXHMqXFwpKS8sXG4gICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICBpbnNpZGU6IHByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0XG4gIH0sIHtcbiAgICBwYXR0ZXJuOiAvKF58W14kXFx3XFx4QTAtXFx1RkZGRl0pKD8hXFxzKVtfJGEtelxceEEwLVxcdUZGRkZdKD86KD8hXFxzKVskXFx3XFx4QTAtXFx1RkZGRl0pKig/PVxccyo9PikvaSxcbiAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgIGluc2lkZTogcHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRcbiAgfSwge1xuICAgIHBhdHRlcm46IC8oXFwoXFxzKikoPyFcXHMpKD86W14oKVxcc118XFxzKyg/IVtcXHMpXSl8XFwoW14oKV0qXFwpKSsoPz1cXHMqXFwpXFxzKj0+KS8sXG4gICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICBpbnNpZGU6IHByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0XG4gIH0sIHtcbiAgICBwYXR0ZXJuOiAvKCg/OlxcYnxcXHN8XikoPyEoPzphc3xhc3luY3xhd2FpdHxicmVha3xjYXNlfGNhdGNofGNsYXNzfGNvbnN0fGNvbnRpbnVlfGRlYnVnZ2VyfGRlZmF1bHR8ZGVsZXRlfGRvfGVsc2V8ZW51bXxleHBvcnR8ZXh0ZW5kc3xmaW5hbGx5fGZvcnxmcm9tfGZ1bmN0aW9ufGdldHxpZnxpbXBsZW1lbnRzfGltcG9ydHxpbnxpbnN0YW5jZW9mfGludGVyZmFjZXxsZXR8bmV3fG51bGx8b2Z8cGFja2FnZXxwcml2YXRlfHByb3RlY3RlZHxwdWJsaWN8cmV0dXJufHNldHxzdGF0aWN8c3VwZXJ8c3dpdGNofHRoaXN8dGhyb3d8dHJ5fHR5cGVvZnx1bmRlZmluZWR8dmFyfHZvaWR8d2hpbGV8d2l0aHx5aWVsZCkoPyFbJFxcd1xceEEwLVxcdUZGRkZdKSkoPzooPyFcXHMpW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqXFxzKilcXChcXHMqfFxcXVxccypcXChcXHMqKSg/IVxccykoPzpbXigpXFxzXXxcXHMrKD8hW1xccyldKXxcXChbXigpXSpcXCkpKyg/PVxccypcXClcXHMqXFx7KS8sXG4gICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICBpbnNpZGU6IHByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0XG4gIH1dLFxuICAnY29uc3RhbnQnOiAvXFxiW0EtWl0oPzpbQS1aX118XFxkeD8pKlxcYi9cbn0pO1xucHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnamF2YXNjcmlwdCcsICdzdHJpbmcnLCB7XG4gICdoYXNoYmFuZyc6IHtcbiAgICBwYXR0ZXJuOiAvXiMhLiovLFxuICAgIGdyZWVkeTogdHJ1ZSxcbiAgICBhbGlhczogJ2NvbW1lbnQnXG4gIH0sXG4gICd0ZW1wbGF0ZS1zdHJpbmcnOiB7XG4gICAgcGF0dGVybjogL2AoPzpcXFxcW1xcc1xcU118XFwkXFx7KD86W157fV18XFx7KD86W157fV18XFx7W159XSpcXH0pKlxcfSkrXFx9fCg/IVxcJFxceylbXlxcXFxgXSkqYC8sXG4gICAgZ3JlZWR5OiB0cnVlLFxuICAgIGluc2lkZToge1xuICAgICAgJ3RlbXBsYXRlLXB1bmN0dWF0aW9uJzoge1xuICAgICAgICBwYXR0ZXJuOiAvXmB8YCQvLFxuICAgICAgICBhbGlhczogJ3N0cmluZydcbiAgICAgIH0sXG4gICAgICAnaW50ZXJwb2xhdGlvbic6IHtcbiAgICAgICAgcGF0dGVybjogLygoPzpefFteXFxcXF0pKD86XFxcXHsyfSkqKVxcJFxceyg/Oltee31dfFxceyg/Oltee31dfFxce1tefV0qXFx9KSpcXH0pK1xcfS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgICdpbnRlcnBvbGF0aW9uLXB1bmN0dWF0aW9uJzoge1xuICAgICAgICAgICAgcGF0dGVybjogL15cXCRcXHt8XFx9JC8sXG4gICAgICAgICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVzdDogcHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgICdzdHJpbmcnOiAvW1xcc1xcU10rL1xuICAgIH1cbiAgfSxcbiAgJ3N0cmluZy1wcm9wZXJ0eSc6IHtcbiAgICBwYXR0ZXJuOiAvKCg/Ol58Wyx7XSlbIFxcdF0qKShbXCInXSkoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXwoPyFcXDIpW15cXFxcXFxyXFxuXSkqXFwyKD89XFxzKjopL20sXG4gICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICBncmVlZHk6IHRydWUsXG4gICAgYWxpYXM6ICdwcm9wZXJ0eSdcbiAgfVxufSk7XG5wcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdqYXZhc2NyaXB0JywgJ29wZXJhdG9yJywge1xuICAnbGl0ZXJhbC1wcm9wZXJ0eSc6IHtcbiAgICBwYXR0ZXJuOiAvKCg/Ol58Wyx7XSlbIFxcdF0qKSg/IVxccylbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkZdKSooPz1cXHMqOikvbSxcbiAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgIGFsaWFzOiAncHJvcGVydHknXG4gIH1cbn0pO1xuXG5pZiAocHJpc20ubGFuZ3VhZ2VzLm1hcmt1cCkge1xuICBwcmlzbS5sYW5ndWFnZXMubWFya3VwLnRhZy5hZGRJbmxpbmVkKCdzY3JpcHQnLCAnamF2YXNjcmlwdCcpOyAvLyBhZGQgYXR0cmlidXRlIHN1cHBvcnQgZm9yIGFsbCBET00gZXZlbnRzLlxuICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9FdmVudHMjU3RhbmRhcmRfZXZlbnRzXG5cbiAgcHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC50YWcuYWRkQXR0cmlidXRlKC9vbig/OmFib3J0fGJsdXJ8Y2hhbmdlfGNsaWNrfGNvbXBvc2l0aW9uKD86ZW5kfHN0YXJ0fHVwZGF0ZSl8ZGJsY2xpY2t8ZXJyb3J8Zm9jdXMoPzppbnxvdXQpP3xrZXkoPzpkb3dufHVwKXxsb2FkfG1vdXNlKD86ZG93bnxlbnRlcnxsZWF2ZXxtb3ZlfG91dHxvdmVyfHVwKXxyZXNldHxyZXNpemV8c2Nyb2xsfHNlbGVjdHxzbG90Y2hhbmdlfHN1Ym1pdHx1bmxvYWR8d2hlZWwpLy5zb3VyY2UsICdqYXZhc2NyaXB0Jyk7XG59XG5cbnByaXNtLmxhbmd1YWdlcy5qcyA9IHByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0O1xuLyogXCJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tanN4XCIgKi9cblxuKGZ1bmN0aW9uIChQcmlzbSkge1xuICB2YXIgamF2YXNjcmlwdCA9IFByaXNtLnV0aWwuY2xvbmUoUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHQpO1xuICB2YXIgc3BhY2UgPSAvKD86XFxzfFxcL1xcLy4qKD8hLil8XFwvXFwqKD86W14qXXxcXCooPyFcXC8pKVxcKlxcLykvLnNvdXJjZTtcbiAgdmFyIGJyYWNlcyA9IC8oPzpcXHsoPzpcXHsoPzpcXHtbXnt9XSpcXH18W157fV0pKlxcfXxbXnt9XSkqXFx9KS8uc291cmNlO1xuICB2YXIgc3ByZWFkID0gLyg/OlxcezxTPipcXC57M30oPzpbXnt9XXw8QlJBQ0VTPikqXFx9KS8uc291cmNlO1xuICAvKipcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2ZsYWdzXVxuICAgKi9cblxuICBmdW5jdGlvbiByZShzb3VyY2UsIGZsYWdzKSB7XG4gICAgc291cmNlID0gc291cmNlLnJlcGxhY2UoLzxTPi9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3BhY2U7XG4gICAgfSkucmVwbGFjZSgvPEJSQUNFUz4vZywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIGJyYWNlcztcbiAgICB9KS5yZXBsYWNlKC88U1BSRUFEPi9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gc3ByZWFkO1xuICAgIH0pO1xuICAgIHJldHVybiBSZWdFeHAoc291cmNlLCBmbGFncyk7XG4gIH1cblxuICBzcHJlYWQgPSByZShzcHJlYWQpLnNvdXJjZTtcbiAgUHJpc20ubGFuZ3VhZ2VzLmpzeCA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ21hcmt1cCcsIGphdmFzY3JpcHQpO1xuICBQcmlzbS5sYW5ndWFnZXMuanN4LnRhZy5wYXR0ZXJuID0gcmUoLzxcXC8/KD86W1xcdy46LV0rKD86PFM+Kyg/OltcXHcuOiQtXSsoPzo9KD86XCIoPzpcXFxcW1xcc1xcU118W15cXFxcXCJdKSpcInwnKD86XFxcXFtcXHNcXFNdfFteXFxcXCddKSonfFteXFxzeydcIi8+PV0rfDxCUkFDRVM+KSk/fDxTUFJFQUQ+KSkqPFM+KlxcLz8pPz4vLnNvdXJjZSk7XG4gIFByaXNtLmxhbmd1YWdlcy5qc3gudGFnLmluc2lkZVsndGFnJ10ucGF0dGVybiA9IC9ePFxcLz9bXlxccz5cXC9dKi87XG4gIFByaXNtLmxhbmd1YWdlcy5qc3gudGFnLmluc2lkZVsnYXR0ci12YWx1ZSddLnBhdHRlcm4gPSAvPSg/IVxceykoPzpcIig/OlxcXFxbXFxzXFxTXXxbXlxcXFxcIl0pKlwifCcoPzpcXFxcW1xcc1xcU118W15cXFxcJ10pKid8W15cXHMnXCI+XSspLztcbiAgUHJpc20ubGFuZ3VhZ2VzLmpzeC50YWcuaW5zaWRlWyd0YWcnXS5pbnNpZGVbJ2NsYXNzLW5hbWUnXSA9IC9eW0EtWl1cXHcqKD86XFwuW0EtWl1cXHcqKSokLztcbiAgUHJpc20ubGFuZ3VhZ2VzLmpzeC50YWcuaW5zaWRlWydjb21tZW50J10gPSBqYXZhc2NyaXB0Wydjb21tZW50J107XG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2luc2lkZScsICdhdHRyLW5hbWUnLCB7XG4gICAgJ3NwcmVhZCc6IHtcbiAgICAgIHBhdHRlcm46IHJlKC88U1BSRUFEPi8uc291cmNlKSxcbiAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmpzeFxuICAgIH1cbiAgfSwgUHJpc20ubGFuZ3VhZ2VzLmpzeC50YWcpO1xuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdpbnNpZGUnLCAnc3BlY2lhbC1hdHRyJywge1xuICAgICdzY3JpcHQnOiB7XG4gICAgICAvLyBBbGxvdyBmb3IgdHdvIGxldmVscyBvZiBuZXN0aW5nXG4gICAgICBwYXR0ZXJuOiByZSgvPTxCUkFDRVM+Ly5zb3VyY2UpLFxuICAgICAgYWxpYXM6ICdsYW5ndWFnZS1qYXZhc2NyaXB0JyxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAnc2NyaXB0LXB1bmN0dWF0aW9uJzoge1xuICAgICAgICAgIHBhdHRlcm46IC9ePSg/PVxceykvLFxuICAgICAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgICAgIH0sXG4gICAgICAgIHJlc3Q6IFByaXNtLmxhbmd1YWdlcy5qc3hcbiAgICAgIH1cbiAgICB9XG4gIH0sIFByaXNtLmxhbmd1YWdlcy5qc3gudGFnKTsgLy8gVGhlIGZvbGxvd2luZyB3aWxsIGhhbmRsZSBwbGFpbiB0ZXh0IGluc2lkZSB0YWdzXG5cbiAgdmFyIHN0cmluZ2lmeVRva2VuID0gZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgaWYgKCF0b2tlbikge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gdG9rZW47XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB0b2tlbi5jb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHRva2VuLmNvbnRlbnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRva2VuLmNvbnRlbnQubWFwKHN0cmluZ2lmeVRva2VuKS5qb2luKCcnKTtcbiAgfTtcblxuICB2YXIgd2Fsa1Rva2VucyA9IGZ1bmN0aW9uICh0b2tlbnMpIHtcbiAgICB2YXIgb3BlbmVkVGFncyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgIHZhciBub3RUYWdOb3JCcmFjZSA9IGZhbHNlO1xuXG4gICAgICBpZiAodHlwZW9mIHRva2VuICE9PSAnc3RyaW5nJykge1xuICAgICAgICBpZiAodG9rZW4udHlwZSA9PT0gJ3RhZycgJiYgdG9rZW4uY29udGVudFswXSAmJiB0b2tlbi5jb250ZW50WzBdLnR5cGUgPT09ICd0YWcnKSB7XG4gICAgICAgICAgLy8gV2UgZm91bmQgYSB0YWcsIG5vdyBmaW5kIGl0cyBraW5kXG4gICAgICAgICAgaWYgKHRva2VuLmNvbnRlbnRbMF0uY29udGVudFswXS5jb250ZW50ID09PSAnPC8nKSB7XG4gICAgICAgICAgICAvLyBDbG9zaW5nIHRhZ1xuICAgICAgICAgICAgaWYgKG9wZW5lZFRhZ3MubGVuZ3RoID4gMCAmJiBvcGVuZWRUYWdzW29wZW5lZFRhZ3MubGVuZ3RoIC0gMV0udGFnTmFtZSA9PT0gc3RyaW5naWZ5VG9rZW4odG9rZW4uY29udGVudFswXS5jb250ZW50WzFdKSkge1xuICAgICAgICAgICAgICAvLyBQb3AgbWF0Y2hpbmcgb3BlbmluZyB0YWdcbiAgICAgICAgICAgICAgb3BlbmVkVGFncy5wb3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHRva2VuLmNvbnRlbnRbdG9rZW4uY29udGVudC5sZW5ndGggLSAxXS5jb250ZW50ID09PSAnLz4nKSA7IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBPcGVuaW5nIHRhZ1xuICAgICAgICAgICAgICBvcGVuZWRUYWdzLnB1c2goe1xuICAgICAgICAgICAgICAgIHRhZ05hbWU6IHN0cmluZ2lmeVRva2VuKHRva2VuLmNvbnRlbnRbMF0uY29udGVudFsxXSksXG4gICAgICAgICAgICAgICAgb3BlbmVkQnJhY2VzOiAwXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChvcGVuZWRUYWdzLmxlbmd0aCA+IDAgJiYgdG9rZW4udHlwZSA9PT0gJ3B1bmN0dWF0aW9uJyAmJiB0b2tlbi5jb250ZW50ID09PSAneycpIHtcbiAgICAgICAgICAvLyBIZXJlIHdlIG1pZ2h0IGhhdmUgZW50ZXJlZCBhIEpTWCBjb250ZXh0IGluc2lkZSBhIHRhZ1xuICAgICAgICAgIG9wZW5lZFRhZ3Nbb3BlbmVkVGFncy5sZW5ndGggLSAxXS5vcGVuZWRCcmFjZXMrKztcbiAgICAgICAgfSBlbHNlIGlmIChvcGVuZWRUYWdzLmxlbmd0aCA+IDAgJiYgb3BlbmVkVGFnc1tvcGVuZWRUYWdzLmxlbmd0aCAtIDFdLm9wZW5lZEJyYWNlcyA+IDAgJiYgdG9rZW4udHlwZSA9PT0gJ3B1bmN0dWF0aW9uJyAmJiB0b2tlbi5jb250ZW50ID09PSAnfScpIHtcbiAgICAgICAgICAvLyBIZXJlIHdlIG1pZ2h0IGhhdmUgbGVmdCBhIEpTWCBjb250ZXh0IGluc2lkZSBhIHRhZ1xuICAgICAgICAgIG9wZW5lZFRhZ3Nbb3BlbmVkVGFncy5sZW5ndGggLSAxXS5vcGVuZWRCcmFjZXMtLTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub3RUYWdOb3JCcmFjZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG5vdFRhZ05vckJyYWNlIHx8IHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKG9wZW5lZFRhZ3MubGVuZ3RoID4gMCAmJiBvcGVuZWRUYWdzW29wZW5lZFRhZ3MubGVuZ3RoIC0gMV0ub3BlbmVkQnJhY2VzID09PSAwKSB7XG4gICAgICAgICAgLy8gSGVyZSB3ZSBhcmUgaW5zaWRlIGEgdGFnLCBhbmQgbm90IGluc2lkZSBhIEpTWCBjb250ZXh0LlxuICAgICAgICAgIC8vIFRoYXQncyBwbGFpbiB0ZXh0OiBkcm9wIGFueSB0b2tlbnMgbWF0Y2hlZC5cbiAgICAgICAgICB2YXIgcGxhaW5UZXh0ID0gc3RyaW5naWZ5VG9rZW4odG9rZW4pOyAvLyBBbmQgbWVyZ2UgdGV4dCB3aXRoIGFkamFjZW50IHRleHRcblxuICAgICAgICAgIGlmIChpIDwgdG9rZW5zLmxlbmd0aCAtIDEgJiYgKHR5cGVvZiB0b2tlbnNbaSArIDFdID09PSAnc3RyaW5nJyB8fCB0b2tlbnNbaSArIDFdLnR5cGUgPT09ICdwbGFpbi10ZXh0JykpIHtcbiAgICAgICAgICAgIHBsYWluVGV4dCArPSBzdHJpbmdpZnlUb2tlbih0b2tlbnNbaSArIDFdKTtcbiAgICAgICAgICAgIHRva2Vucy5zcGxpY2UoaSArIDEsIDEpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpID4gMCAmJiAodHlwZW9mIHRva2Vuc1tpIC0gMV0gPT09ICdzdHJpbmcnIHx8IHRva2Vuc1tpIC0gMV0udHlwZSA9PT0gJ3BsYWluLXRleHQnKSkge1xuICAgICAgICAgICAgcGxhaW5UZXh0ID0gc3RyaW5naWZ5VG9rZW4odG9rZW5zW2kgLSAxXSkgKyBwbGFpblRleHQ7XG4gICAgICAgICAgICB0b2tlbnMuc3BsaWNlKGkgLSAxLCAxKTtcbiAgICAgICAgICAgIGktLTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICB0b2tlbnNbaV0gPSBuZXcgUHJpc20uVG9rZW4oJ3BsYWluLXRleHQnLCBwbGFpblRleHQsIG51bGwsIHBsYWluVGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLmNvbnRlbnQgJiYgdHlwZW9mIHRva2VuLmNvbnRlbnQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHdhbGtUb2tlbnModG9rZW4uY29udGVudCk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIFByaXNtLmhvb2tzLmFkZCgnYWZ0ZXItdG9rZW5pemUnLCBmdW5jdGlvbiAoZW52KSB7XG4gICAgaWYgKGVudi5sYW5ndWFnZSAhPT0gJ2pzeCcgJiYgZW52Lmxhbmd1YWdlICE9PSAndHN4Jykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHdhbGtUb2tlbnMoZW52LnRva2Vucyk7XG4gIH0pO1xufSkocHJpc20pO1xuLyogXCJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tanMtZXh0cmFzXCIgKi9cblxuXG4oZnVuY3Rpb24gKFByaXNtKSB7XG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2phdmFzY3JpcHQnLCAnZnVuY3Rpb24tdmFyaWFibGUnLCB7XG4gICAgJ21ldGhvZC12YXJpYWJsZSc6IHtcbiAgICAgIHBhdHRlcm46IFJlZ0V4cCgnKFxcXFwuXFxcXHMqKScgKyBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdFsnZnVuY3Rpb24tdmFyaWFibGUnXS5wYXR0ZXJuLnNvdXJjZSksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6IFsnZnVuY3Rpb24tdmFyaWFibGUnLCAnbWV0aG9kJywgJ2Z1bmN0aW9uJywgJ3Byb3BlcnR5LWFjY2VzcyddXG4gICAgfVxuICB9KTtcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnamF2YXNjcmlwdCcsICdmdW5jdGlvbicsIHtcbiAgICAnbWV0aG9kJzoge1xuICAgICAgcGF0dGVybjogUmVnRXhwKCcoXFxcXC5cXFxccyopJyArIFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0WydmdW5jdGlvbiddLnNvdXJjZSksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6IFsnZnVuY3Rpb24nLCAncHJvcGVydHktYWNjZXNzJ11cbiAgICB9XG4gIH0pO1xuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdqYXZhc2NyaXB0JywgJ2NvbnN0YW50Jywge1xuICAgICdrbm93bi1jbGFzcy1uYW1lJzogW3tcbiAgICAgIC8vIHN0YW5kYXJkIGJ1aWx0LWluc1xuICAgICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHNcbiAgICAgIHBhdHRlcm46IC9cXGIoPzooPzpGbG9hdCg/OjMyfDY0KXwoPzpJbnR8VWludCkoPzo4fDE2fDMyKXxVaW50OENsYW1wZWQpP0FycmF5fEFycmF5QnVmZmVyfEJpZ0ludHxCb29sZWFufERhdGFWaWV3fERhdGV8RXJyb3J8RnVuY3Rpb258SW50bHxKU09OfCg/OldlYWspPyg/Ok1hcHxTZXQpfE1hdGh8TnVtYmVyfE9iamVjdHxQcm9taXNlfFByb3h5fFJlZmxlY3R8UmVnRXhwfFN0cmluZ3xTeW1ib2x8V2ViQXNzZW1ibHkpXFxiLyxcbiAgICAgIGFsaWFzOiAnY2xhc3MtbmFtZSdcbiAgICB9LCB7XG4gICAgICAvLyBlcnJvcnNcbiAgICAgIHBhdHRlcm46IC9cXGIoPzpbQS1aXVxcdyopRXJyb3JcXGIvLFxuICAgICAgYWxpYXM6ICdjbGFzcy1uYW1lJ1xuICAgIH1dXG4gIH0pO1xuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIGA8SUQ+YCBwbGFjZWhvbGRlciBpbiB0aGUgZ2l2ZW4gcGF0dGVybiB3aXRoIGEgcGF0dGVybiBmb3IgZ2VuZXJhbCBKUyBpZGVudGlmaWVycy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNvdXJjZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2ZsYWdzXVxuICAgKiBAcmV0dXJucyB7UmVnRXhwfVxuICAgKi9cblxuICBmdW5jdGlvbiB3aXRoSWQoc291cmNlLCBmbGFncykge1xuICAgIHJldHVybiBSZWdFeHAoc291cmNlLnJlcGxhY2UoLzxJRD4vZywgZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIC8oPyFcXHMpW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqLy5zb3VyY2U7XG4gICAgfSksIGZsYWdzKTtcbiAgfVxuXG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2phdmFzY3JpcHQnLCAna2V5d29yZCcsIHtcbiAgICAnaW1wb3J0cyc6IHtcbiAgICAgIC8vIGh0dHBzOi8vdGMzOS5lcy9lY21hMjYyLyNzZWMtaW1wb3J0c1xuICAgICAgcGF0dGVybjogd2l0aElkKC8oXFxiaW1wb3J0XFxiXFxzKikoPzo8SUQ+KD86XFxzKixcXHMqKD86XFwqXFxzKmFzXFxzKzxJRD58XFx7W157fV0qXFx9KSk/fFxcKlxccyphc1xccys8SUQ+fFxce1tee31dKlxcfSkoPz1cXHMqXFxiZnJvbVxcYikvLnNvdXJjZSksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdFxuICAgIH0sXG4gICAgJ2V4cG9ydHMnOiB7XG4gICAgICAvLyBodHRwczovL3RjMzkuZXMvZWNtYTI2Mi8jc2VjLWV4cG9ydHNcbiAgICAgIHBhdHRlcm46IHdpdGhJZCgvKFxcYmV4cG9ydFxcYlxccyopKD86XFwqKD86XFxzKmFzXFxzKzxJRD4pPyg/PVxccypcXGJmcm9tXFxiKXxcXHtbXnt9XSpcXH0pLy5zb3VyY2UpLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGluc2lkZTogUHJpc20ubGFuZ3VhZ2VzLmphdmFzY3JpcHRcbiAgICB9XG4gIH0pO1xuICBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdFsna2V5d29yZCddLnVuc2hpZnQoe1xuICAgIHBhdHRlcm46IC9cXGIoPzphc3xkZWZhdWx0fGV4cG9ydHxmcm9tfGltcG9ydClcXGIvLFxuICAgIGFsaWFzOiAnbW9kdWxlJ1xuICB9LCB7XG4gICAgcGF0dGVybjogL1xcYig/OmF3YWl0fGJyZWFrfGNhdGNofGNvbnRpbnVlfGRvfGVsc2V8ZmluYWxseXxmb3J8aWZ8cmV0dXJufHN3aXRjaHx0aHJvd3x0cnl8d2hpbGV8eWllbGQpXFxiLyxcbiAgICBhbGlhczogJ2NvbnRyb2wtZmxvdydcbiAgfSwge1xuICAgIHBhdHRlcm46IC9cXGJudWxsXFxiLyxcbiAgICBhbGlhczogWydudWxsJywgJ25pbCddXG4gIH0sIHtcbiAgICBwYXR0ZXJuOiAvXFxidW5kZWZpbmVkXFxiLyxcbiAgICBhbGlhczogJ25pbCdcbiAgfSk7XG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2phdmFzY3JpcHQnLCAnb3BlcmF0b3InLCB7XG4gICAgJ3NwcmVhZCc6IHtcbiAgICAgIHBhdHRlcm46IC9cXC57M30vLFxuICAgICAgYWxpYXM6ICdvcGVyYXRvcidcbiAgICB9LFxuICAgICdhcnJvdyc6IHtcbiAgICAgIHBhdHRlcm46IC89Pi8sXG4gICAgICBhbGlhczogJ29wZXJhdG9yJ1xuICAgIH1cbiAgfSk7XG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2phdmFzY3JpcHQnLCAncHVuY3R1YXRpb24nLCB7XG4gICAgJ3Byb3BlcnR5LWFjY2Vzcyc6IHtcbiAgICAgIHBhdHRlcm46IHdpdGhJZCgvKFxcLlxccyopIz88SUQ+Ly5zb3VyY2UpLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgJ21heWJlLWNsYXNzLW5hbWUnOiB7XG4gICAgICBwYXR0ZXJuOiAvKF58W14kXFx3XFx4QTAtXFx1RkZGRl0pW0EtWl1bJFxcd1xceEEwLVxcdUZGRkZdKy8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgfSxcbiAgICAnZG9tJzoge1xuICAgICAgLy8gdGhpcyBjb250YWlucyBvbmx5IGEgZmV3IGNvbW1vbmx5IHVzZWQgRE9NIHZhcmlhYmxlc1xuICAgICAgcGF0dGVybjogL1xcYig/OmRvY3VtZW50fCg/OmxvY2FsfHNlc3Npb24pU3RvcmFnZXxsb2NhdGlvbnxuYXZpZ2F0b3J8cGVyZm9ybWFuY2V8d2luZG93KVxcYi8sXG4gICAgICBhbGlhczogJ3ZhcmlhYmxlJ1xuICAgIH0sXG4gICAgJ2NvbnNvbGUnOiB7XG4gICAgICBwYXR0ZXJuOiAvXFxiY29uc29sZSg/PVxccypcXC4pLyxcbiAgICAgIGFsaWFzOiAnY2xhc3MtbmFtZSdcbiAgICB9XG4gIH0pOyAvLyBhZGQgJ21heWJlLWNsYXNzLW5hbWUnIHRvIHRva2VucyB3aGljaCBtaWdodCBiZSBhIGNsYXNzIG5hbWVcblxuICB2YXIgbWF5YmVDbGFzc05hbWVUb2tlbnMgPSBbJ2Z1bmN0aW9uJywgJ2Z1bmN0aW9uLXZhcmlhYmxlJywgJ21ldGhvZCcsICdtZXRob2QtdmFyaWFibGUnLCAncHJvcGVydHktYWNjZXNzJ107XG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBtYXliZUNsYXNzTmFtZVRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IG1heWJlQ2xhc3NOYW1lVG9rZW5zW2ldO1xuICAgIHZhciB2YWx1ZSA9IFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0W3Rva2VuXTsgLy8gY29udmVydCByZWdleCB0byBvYmplY3RcblxuICAgIGlmIChQcmlzbS51dGlsLnR5cGUodmFsdWUpID09PSAnUmVnRXhwJykge1xuICAgICAgdmFsdWUgPSBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdFt0b2tlbl0gPSB7XG4gICAgICAgIHBhdHRlcm46IHZhbHVlXG4gICAgICB9O1xuICAgIH0gLy8ga2VlcCBpbiBtaW5kIHRoYXQgd2UgZG9uJ3Qgc3VwcG9ydCBhcnJheXNcblxuXG4gICAgdmFyIGluc2lkZSA9IHZhbHVlLmluc2lkZSB8fCB7fTtcbiAgICB2YWx1ZS5pbnNpZGUgPSBpbnNpZGU7XG4gICAgaW5zaWRlWydtYXliZS1jbGFzcy1uYW1lJ10gPSAvXltBLVpdW1xcc1xcU10qLztcbiAgfVxufSkocHJpc20pO1xuLyogXCJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tanMtdGVtcGxhdGVzXCIgKi9cblxuXG4oZnVuY3Rpb24gKFByaXNtKSB7XG4gIHZhciB0ZW1wbGF0ZVN0cmluZyA9IFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0Wyd0ZW1wbGF0ZS1zdHJpbmcnXTsgLy8gc2VlIHRoZSBwYXR0ZXJuIGluIHByaXNtLWphdmFzY3JpcHQuanNcblxuICB2YXIgdGVtcGxhdGVMaXRlcmFsUGF0dGVybiA9IHRlbXBsYXRlU3RyaW5nLnBhdHRlcm4uc291cmNlO1xuICB2YXIgaW50ZXJwb2xhdGlvbk9iamVjdCA9IHRlbXBsYXRlU3RyaW5nLmluc2lkZVsnaW50ZXJwb2xhdGlvbiddO1xuICB2YXIgaW50ZXJwb2xhdGlvblB1bmN0dWF0aW9uT2JqZWN0ID0gaW50ZXJwb2xhdGlvbk9iamVjdC5pbnNpZGVbJ2ludGVycG9sYXRpb24tcHVuY3R1YXRpb24nXTtcbiAgdmFyIGludGVycG9sYXRpb25QYXR0ZXJuID0gaW50ZXJwb2xhdGlvbk9iamVjdC5wYXR0ZXJuLnNvdXJjZTtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgcGF0dGVybiB0byBtYXRjaCBhIHRlbXBsYXRlIHN0cmluZyB3aXRoIGEgc3BlY2lhbCB0YWcuXG4gICAqXG4gICAqIFRoaXMgd2lsbCByZXR1cm4gYHVuZGVmaW5lZGAgaWYgdGhlcmUgaXMgbm8gZ3JhbW1hciB3aXRoIHRoZSBnaXZlbiBsYW5ndWFnZSBpZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxhbmd1YWdlIFRoZSBsYW5ndWFnZSBpZCBvZiB0aGUgZW1iZWRkZWQgbGFuZ3VhZ2UuIEUuZy4gYG1hcmtkb3duYC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgcmVnZXggcGF0dGVybiB0byBtYXRjaCB0aGUgdGFnLlxuICAgKiBAcmV0dXJucyB7b2JqZWN0IHwgdW5kZWZpbmVkfVxuICAgKiBAZXhhbXBsZVxuICAgKiBjcmVhdGVUZW1wbGF0ZSgnY3NzJywgL1xcYmNzcy8uc291cmNlKTtcbiAgICovXG5cbiAgZnVuY3Rpb24gY3JlYXRlVGVtcGxhdGUobGFuZ3VhZ2UsIHRhZykge1xuICAgIGlmICghUHJpc20ubGFuZ3VhZ2VzW2xhbmd1YWdlXSkge1xuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgcGF0dGVybjogUmVnRXhwKCcoKD86JyArIHRhZyArICcpXFxcXHMqKScgKyB0ZW1wbGF0ZUxpdGVyYWxQYXR0ZXJuKSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgJ3RlbXBsYXRlLXB1bmN0dWF0aW9uJzoge1xuICAgICAgICAgIHBhdHRlcm46IC9eYHxgJC8sXG4gICAgICAgICAgYWxpYXM6ICdzdHJpbmcnXG4gICAgICAgIH0sXG4gICAgICAgICdlbWJlZGRlZC1jb2RlJzoge1xuICAgICAgICAgIHBhdHRlcm46IC9bXFxzXFxTXSsvLFxuICAgICAgICAgIGFsaWFzOiBsYW5ndWFnZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0Wyd0ZW1wbGF0ZS1zdHJpbmcnXSA9IFsvLyBzdHlsZWQtanN4OlxuICAvLyAgIGNzc2BhIHsgY29sb3I6ICMyNUY7IH1gXG4gIC8vIHN0eWxlZC1jb21wb25lbnRzOlxuICAvLyAgIHN0eWxlZC5oMWBjb2xvcjogcmVkO2BcbiAgY3JlYXRlVGVtcGxhdGUoJ2NzcycsIC9cXGIoPzpzdHlsZWQoPzpcXChbXildKlxcKSk/KD86XFxzKlxcLlxccypcXHcrKD86XFwoW14pXSpcXCkpKikqfGNzcyg/OlxccypcXC5cXHMqKD86Z2xvYmFsfHJlc29sdmUpKT98Y3JlYXRlR2xvYmFsU3R5bGV8a2V5ZnJhbWVzKS8uc291cmNlKSwgLy8gaHRtbGA8cD48L3A+YFxuICAvLyBkaXYuaW5uZXJIVE1MID0gYDxwPjwvcD5gXG4gIGNyZWF0ZVRlbXBsYXRlKCdodG1sJywgL1xcYmh0bWx8XFwuXFxzKig/OmlubmVyfG91dGVyKUhUTUxcXHMqXFwrPz0vLnNvdXJjZSksIC8vIHN2Z2A8cGF0aCBmaWxsPVwiI2ZmZlwiIGQ9XCJNNTUuMzcgLi4uXCIvPmBcbiAgY3JlYXRlVGVtcGxhdGUoJ3N2ZycsIC9cXGJzdmcvLnNvdXJjZSksIC8vIG1kYCMgaDFgLCBtYXJrZG93bmAjIyBoMmBcbiAgY3JlYXRlVGVtcGxhdGUoJ21hcmtkb3duJywgL1xcYig/Om1hcmtkb3dufG1kKS8uc291cmNlKSwgLy8gZ3FsYC4uLmAsIGdyYXBocWxgLi4uYCwgZ3JhcGhxbC5leHBlcmltZW50YWxgLi4uYFxuICBjcmVhdGVUZW1wbGF0ZSgnZ3JhcGhxbCcsIC9cXGIoPzpncWx8Z3JhcGhxbCg/OlxccypcXC5cXHMqZXhwZXJpbWVudGFsKT8pLy5zb3VyY2UpLCAvLyBzcWxgLi4uYFxuICBjcmVhdGVUZW1wbGF0ZSgnc3FsJywgL1xcYnNxbC8uc291cmNlKSwgLy8gdmFuaWxsYSB0ZW1wbGF0ZSBzdHJpbmdcbiAgdGVtcGxhdGVTdHJpbmddLmZpbHRlcihCb29sZWFuKTtcbiAgLyoqXG4gICAqIFJldHVybnMgYSBzcGVjaWZpYyBwbGFjZWhvbGRlciBsaXRlcmFsIGZvciB0aGUgZ2l2ZW4gbGFuZ3VhZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudGVyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsYW5ndWFnZVxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cblxuICBmdW5jdGlvbiBnZXRQbGFjZWhvbGRlcihjb3VudGVyLCBsYW5ndWFnZSkge1xuICAgIHJldHVybiAnX19fJyArIGxhbmd1YWdlLnRvVXBwZXJDYXNlKCkgKyAnXycgKyBjb3VudGVyICsgJ19fXyc7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIHRva2VucyBvZiBgUHJpc20udG9rZW5pemVgIGJ1dCBhbHNvIHJ1bnMgdGhlIGBiZWZvcmUtdG9rZW5pemVgIGFuZCBgYWZ0ZXItdG9rZW5pemVgIGhvb2tzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29kZVxuICAgKiBAcGFyYW0ge2FueX0gZ3JhbW1hclxuICAgKiBAcGFyYW0ge3N0cmluZ30gbGFuZ3VhZ2VcbiAgICogQHJldHVybnMgeyhzdHJpbmd8VG9rZW4pW119XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gdG9rZW5pemVXaXRoSG9va3MoY29kZSwgZ3JhbW1hciwgbGFuZ3VhZ2UpIHtcbiAgICB2YXIgZW52ID0ge1xuICAgICAgY29kZTogY29kZSxcbiAgICAgIGdyYW1tYXI6IGdyYW1tYXIsXG4gICAgICBsYW5ndWFnZTogbGFuZ3VhZ2VcbiAgICB9O1xuICAgIFByaXNtLmhvb2tzLnJ1bignYmVmb3JlLXRva2VuaXplJywgZW52KTtcbiAgICBlbnYudG9rZW5zID0gUHJpc20udG9rZW5pemUoZW52LmNvZGUsIGVudi5ncmFtbWFyKTtcbiAgICBQcmlzbS5ob29rcy5ydW4oJ2FmdGVyLXRva2VuaXplJywgZW52KTtcbiAgICByZXR1cm4gZW52LnRva2VucztcbiAgfVxuICAvKipcbiAgICogUmV0dXJucyB0aGUgdG9rZW4gb2YgdGhlIGdpdmVuIEphdmFTY3JpcHQgaW50ZXJwb2xhdGlvbiBleHByZXNzaW9uLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZXhwcmVzc2lvbiBUaGUgY29kZSBvZiB0aGUgZXhwcmVzc2lvbi4gRS5nLiBgXCIkezQyfVwiYFxuICAgKiBAcmV0dXJucyB7VG9rZW59XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gdG9rZW5pemVJbnRlcnBvbGF0aW9uRXhwcmVzc2lvbihleHByZXNzaW9uKSB7XG4gICAgdmFyIHRlbXBHcmFtbWFyID0ge307XG4gICAgdGVtcEdyYW1tYXJbJ2ludGVycG9sYXRpb24tcHVuY3R1YXRpb24nXSA9IGludGVycG9sYXRpb25QdW5jdHVhdGlvbk9iamVjdDtcbiAgICAvKiogQHR5cGUge0FycmF5fSAqL1xuXG4gICAgdmFyIHRva2VucyA9IFByaXNtLnRva2VuaXplKGV4cHJlc3Npb24sIHRlbXBHcmFtbWFyKTtcblxuICAgIGlmICh0b2tlbnMubGVuZ3RoID09PSAzKSB7XG4gICAgICAvKipcbiAgICAgICAqIFRoZSB0b2tlbiBhcnJheSB3aWxsIGxvb2sgbGlrZSB0aGlzXG4gICAgICAgKiBbXG4gICAgICAgKiAgICAgW1wiaW50ZXJwb2xhdGlvbi1wdW5jdHVhdGlvblwiLCBcIiR7XCJdXG4gICAgICAgKiAgICAgXCIuLi5cIiAvLyBKYXZhU2NyaXB0IGV4cHJlc3Npb24gb2YgdGhlIGludGVycG9sYXRpb25cbiAgICAgICAqICAgICBbXCJpbnRlcnBvbGF0aW9uLXB1bmN0dWF0aW9uXCIsIFwifVwiXVxuICAgICAgICogXVxuICAgICAgICovXG4gICAgICB2YXIgYXJncyA9IFsxLCAxXTtcbiAgICAgIGFyZ3MucHVzaC5hcHBseShhcmdzLCB0b2tlbml6ZVdpdGhIb29rcyh0b2tlbnNbMV0sIFByaXNtLmxhbmd1YWdlcy5qYXZhc2NyaXB0LCAnamF2YXNjcmlwdCcpKTtcbiAgICAgIHRva2Vucy5zcGxpY2UuYXBwbHkodG9rZW5zLCBhcmdzKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IFByaXNtLlRva2VuKCdpbnRlcnBvbGF0aW9uJywgdG9rZW5zLCBpbnRlcnBvbGF0aW9uT2JqZWN0LmFsaWFzLCBleHByZXNzaW9uKTtcbiAgfVxuICAvKipcbiAgICogVG9rZW5pemVzIHRoZSBnaXZlbiBjb2RlIHdpdGggc3VwcG9ydCBmb3IgSmF2YVNjcmlwdCBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb25zIG1peGVkIGluLlxuICAgKlxuICAgKiBUaGlzIGZ1bmN0aW9uIGhhcyAzIHBoYXNlczpcbiAgICpcbiAgICogMS4gUmVwbGFjZSBhbGwgSmF2YVNjcmlwdCBpbnRlcnBvbGF0aW9uIGV4cHJlc3Npb24gd2l0aCBhIHBsYWNlaG9sZGVyLlxuICAgKiAgICBUaGUgcGxhY2Vob2xkZXIgd2lsbCBoYXZlIHRoZSBzeW50YXggb2YgYSBpZGVudGlmeSBvZiB0aGUgdGFyZ2V0IGxhbmd1YWdlLlxuICAgKiAyLiBUb2tlbml6ZSB0aGUgY29kZSB3aXRoIHBsYWNlaG9sZGVycy5cbiAgICogMy4gVG9rZW5pemUgdGhlIGludGVycG9sYXRpb24gZXhwcmVzc2lvbnMgYW5kIHJlLWluc2VydCB0aGVtIGludG8gdGhlIHRva2VuaXplIGNvZGUuXG4gICAqICAgIFRoZSBpbnNlcnRpb24gb25seSB3b3JrcyBpZiBhIHBsYWNlaG9sZGVyIGhhc24ndCBiZWVuIFwicmlwcGVkIGFwYXJ0XCIgbWVhbmluZyB0aGF0IHRoZSBwbGFjZWhvbGRlciBoYXMgYmVlblxuICAgKiAgICB0b2tlbml6ZWQgYXMgdHdvIHRva2VucyBieSB0aGUgZ3JhbW1hciBvZiB0aGUgZW1iZWRkZWQgbGFuZ3VhZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb2RlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBncmFtbWFyXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsYW5ndWFnZVxuICAgKiBAcmV0dXJucyB7VG9rZW59XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gdG9rZW5pemVFbWJlZGRlZChjb2RlLCBncmFtbWFyLCBsYW5ndWFnZSkge1xuICAgIC8vIDEuIEZpcnN0IGZpbHRlciBvdXQgYWxsIGludGVycG9sYXRpb25zXG4gICAgLy8gYmVjYXVzZSB0aGV5IG1pZ2h0IGJlIGVzY2FwZWQsIHdlIG5lZWQgYSBsb29rYmVoaW5kLCBzbyB3ZSB1c2UgUHJpc21cblxuICAgIC8qKiBAdHlwZSB7KFRva2VufHN0cmluZylbXX0gKi9cbiAgICB2YXIgX3Rva2VucyA9IFByaXNtLnRva2VuaXplKGNvZGUsIHtcbiAgICAgICdpbnRlcnBvbGF0aW9uJzoge1xuICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoaW50ZXJwb2xhdGlvblBhdHRlcm4pLFxuICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICB9XG4gICAgfSk7IC8vIHJlcGxhY2UgYWxsIGludGVycG9sYXRpb25zIHdpdGggYSBwbGFjZWhvbGRlciB3aGljaCBpcyBub3QgaW4gdGhlIGNvZGUgYWxyZWFkeVxuXG5cbiAgICB2YXIgcGxhY2Vob2xkZXJDb3VudGVyID0gMDtcbiAgICAvKiogQHR5cGUge09iamVjdDxzdHJpbmcsIHN0cmluZz59ICovXG5cbiAgICB2YXIgcGxhY2Vob2xkZXJNYXAgPSB7fTtcblxuICAgIHZhciBlbWJlZGRlZENvZGUgPSBfdG9rZW5zLm1hcChmdW5jdGlvbiAodG9rZW4pIHtcbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB0b2tlbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpbnRlcnBvbGF0aW9uRXhwcmVzc2lvbiA9IHRva2VuLmNvbnRlbnQ7XG4gICAgICAgIHZhciBwbGFjZWhvbGRlcjtcblxuICAgICAgICB3aGlsZSAoY29kZS5pbmRleE9mKHBsYWNlaG9sZGVyID0gZ2V0UGxhY2Vob2xkZXIocGxhY2Vob2xkZXJDb3VudGVyKyssIGxhbmd1YWdlKSkgIT09IC0xKSB7XG4gICAgICAgICAgLyogbm9vcCAqL1xuICAgICAgICB9XG5cbiAgICAgICAgcGxhY2Vob2xkZXJNYXBbcGxhY2Vob2xkZXJdID0gaW50ZXJwb2xhdGlvbkV4cHJlc3Npb247XG4gICAgICAgIHJldHVybiBwbGFjZWhvbGRlcjtcbiAgICAgIH1cbiAgICB9KS5qb2luKCcnKTsgLy8gMi4gVG9rZW5pemUgdGhlIGVtYmVkZGVkIGNvZGVcblxuXG4gICAgdmFyIGVtYmVkZGVkVG9rZW5zID0gdG9rZW5pemVXaXRoSG9va3MoZW1iZWRkZWRDb2RlLCBncmFtbWFyLCBsYW5ndWFnZSk7IC8vIDMuIFJlLWluc2VydCB0aGUgaW50ZXJwb2xhdGlvblxuXG4gICAgdmFyIHBsYWNlaG9sZGVycyA9IE9iamVjdC5rZXlzKHBsYWNlaG9sZGVyTWFwKTtcbiAgICBwbGFjZWhvbGRlckNvdW50ZXIgPSAwO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHsoVG9rZW58c3RyaW5nKVtdfSB0b2tlbnNcbiAgICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICAgKi9cblxuICAgIGZ1bmN0aW9uIHdhbGtUb2tlbnModG9rZW5zKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocGxhY2Vob2xkZXJDb3VudGVyID49IHBsYWNlaG9sZGVycy5sZW5ndGgpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV07XG5cbiAgICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycgfHwgdHlwZW9mIHRva2VuLmNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gcGxhY2Vob2xkZXJzW3BsYWNlaG9sZGVyQ291bnRlcl07XG4gICAgICAgICAgdmFyIHMgPSB0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnID8gdG9rZW4gOlxuICAgICAgICAgIC8qKiBAdHlwZSB7c3RyaW5nfSAqL1xuICAgICAgICAgIHRva2VuLmNvbnRlbnQ7XG4gICAgICAgICAgdmFyIGluZGV4ID0gcy5pbmRleE9mKHBsYWNlaG9sZGVyKTtcblxuICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICsrcGxhY2Vob2xkZXJDb3VudGVyO1xuICAgICAgICAgICAgdmFyIGJlZm9yZSA9IHMuc3Vic3RyaW5nKDAsIGluZGV4KTtcbiAgICAgICAgICAgIHZhciBtaWRkbGUgPSB0b2tlbml6ZUludGVycG9sYXRpb25FeHByZXNzaW9uKHBsYWNlaG9sZGVyTWFwW3BsYWNlaG9sZGVyXSk7XG4gICAgICAgICAgICB2YXIgYWZ0ZXIgPSBzLnN1YnN0cmluZyhpbmRleCArIHBsYWNlaG9sZGVyLmxlbmd0aCk7XG4gICAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBbXTtcblxuICAgICAgICAgICAgaWYgKGJlZm9yZSkge1xuICAgICAgICAgICAgICByZXBsYWNlbWVudC5wdXNoKGJlZm9yZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJlcGxhY2VtZW50LnB1c2gobWlkZGxlKTtcblxuICAgICAgICAgICAgaWYgKGFmdGVyKSB7XG4gICAgICAgICAgICAgIHZhciBhZnRlclRva2VucyA9IFthZnRlcl07XG4gICAgICAgICAgICAgIHdhbGtUb2tlbnMoYWZ0ZXJUb2tlbnMpO1xuICAgICAgICAgICAgICByZXBsYWNlbWVudC5wdXNoLmFwcGx5KHJlcGxhY2VtZW50LCBhZnRlclRva2Vucyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgIHRva2Vucy5zcGxpY2UuYXBwbHkodG9rZW5zLCBbaSwgMV0uY29uY2F0KHJlcGxhY2VtZW50KSk7XG4gICAgICAgICAgICAgIGkgKz0gcmVwbGFjZW1lbnQubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRva2VuLmNvbnRlbnQgPSByZXBsYWNlbWVudDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIGNvbnRlbnQgPSB0b2tlbi5jb250ZW50O1xuXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY29udGVudCkpIHtcbiAgICAgICAgICAgIHdhbGtUb2tlbnMoY29udGVudCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdhbGtUb2tlbnMoW2NvbnRlbnRdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB3YWxrVG9rZW5zKGVtYmVkZGVkVG9rZW5zKTtcbiAgICByZXR1cm4gbmV3IFByaXNtLlRva2VuKGxhbmd1YWdlLCBlbWJlZGRlZFRva2VucywgJ2xhbmd1YWdlLScgKyBsYW5ndWFnZSwgY29kZSk7XG4gIH1cbiAgLyoqXG4gICAqIFRoZSBsYW5ndWFnZXMgZm9yIHdoaWNoIEpTIHRlbXBsYXRpbmcgd2lsbCBoYW5kbGUgdGFnZ2VkIHRlbXBsYXRlIGxpdGVyYWxzLlxuICAgKlxuICAgKiBKUyB0ZW1wbGF0aW5nIGlzbid0IGFjdGl2ZSBmb3Igb25seSBKYXZhU2NyaXB0IGJ1dCBhbHNvIHJlbGF0ZWQgbGFuZ3VhZ2VzIGxpa2UgVHlwZVNjcmlwdCwgSlNYLCBhbmQgVFNYLlxuICAgKi9cblxuXG4gIHZhciBzdXBwb3J0ZWRMYW5ndWFnZXMgPSB7XG4gICAgJ2phdmFzY3JpcHQnOiB0cnVlLFxuICAgICdqcyc6IHRydWUsXG4gICAgJ3R5cGVzY3JpcHQnOiB0cnVlLFxuICAgICd0cyc6IHRydWUsXG4gICAgJ2pzeCc6IHRydWUsXG4gICAgJ3RzeCc6IHRydWVcbiAgfTtcbiAgUHJpc20uaG9va3MuYWRkKCdhZnRlci10b2tlbml6ZScsIGZ1bmN0aW9uIChlbnYpIHtcbiAgICBpZiAoIShlbnYubGFuZ3VhZ2UgaW4gc3VwcG9ydGVkTGFuZ3VhZ2VzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBGaW5kcyBhbmQgdG9rZW5pemVzIGFsbCB0ZW1wbGF0ZSBzdHJpbmdzIHdpdGggYW4gZW1iZWRkZWQgbGFuZ3VhZ2VzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHsoVG9rZW4gfCBzdHJpbmcpW119IHRva2Vuc1xuICAgICAqIEByZXR1cm5zIHt2b2lkfVxuICAgICAqL1xuXG5cbiAgICBmdW5jdGlvbiBmaW5kVGVtcGxhdGVTdHJpbmdzKHRva2Vucykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0b2tlbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNvbnRlbnQgPSB0b2tlbi5jb250ZW50O1xuXG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShjb250ZW50KSkge1xuICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGZpbmRUZW1wbGF0ZVN0cmluZ3MoW2NvbnRlbnRdKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b2tlbi50eXBlID09PSAndGVtcGxhdGUtc3RyaW5nJykge1xuICAgICAgICAgIC8qKlxuICAgICAgICAgICAqIEEgSmF2YVNjcmlwdCB0ZW1wbGF0ZS1zdHJpbmcgdG9rZW4gd2lsbCBsb29rIGxpa2UgdGhpczpcbiAgICAgICAgICAgKlxuICAgICAgICAgICAqIFtcInRlbXBsYXRlLXN0cmluZ1wiLCBbXG4gICAgICAgICAgICogICAgIFtcInRlbXBsYXRlLXB1bmN0dWF0aW9uXCIsIFwiYFwiXSxcbiAgICAgICAgICAgKiAgICAgKFxuICAgICAgICAgICAqICAgICAgICAgQW4gYXJyYXkgb2YgXCJzdHJpbmdcIiBhbmQgXCJpbnRlcnBvbGF0aW9uXCIgdG9rZW5zLiBUaGlzIGlzIHRoZSBzaW1wbGUgc3RyaW5nIGNhc2UuXG4gICAgICAgICAgICogICAgICAgICBvclxuICAgICAgICAgICAqICAgICAgICAgW1wiZW1iZWRkZWQtY29kZVwiLCBcIi4uLlwiXSBUaGlzIGlzIHRoZSB0b2tlbiBjb250YWluaW5nIHRoZSBlbWJlZGRlZCBjb2RlLlxuICAgICAgICAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEl0IGFsc28gaGFzIGFuIGFsaWFzIHdoaWNoIGlzIHRoZSBsYW5ndWFnZSBvZiB0aGUgZW1iZWRkZWQgY29kZS5cbiAgICAgICAgICAgKiAgICAgKSxcbiAgICAgICAgICAgKiAgICAgW1widGVtcGxhdGUtcHVuY3R1YXRpb25cIiwgXCJgXCJdXG4gICAgICAgICAgICogXV1cbiAgICAgICAgICAgKi9cbiAgICAgICAgICB2YXIgZW1iZWRkZWQgPSBjb250ZW50WzFdO1xuXG4gICAgICAgICAgaWYgKGNvbnRlbnQubGVuZ3RoID09PSAzICYmIHR5cGVvZiBlbWJlZGRlZCAhPT0gJ3N0cmluZycgJiYgZW1iZWRkZWQudHlwZSA9PT0gJ2VtYmVkZGVkLWNvZGUnKSB7XG4gICAgICAgICAgICAvLyBnZXQgc3RyaW5nIGNvbnRlbnRcbiAgICAgICAgICAgIHZhciBjb2RlID0gc3RyaW5nQ29udGVudChlbWJlZGRlZCk7XG4gICAgICAgICAgICB2YXIgYWxpYXMgPSBlbWJlZGRlZC5hbGlhcztcbiAgICAgICAgICAgIHZhciBsYW5ndWFnZSA9IEFycmF5LmlzQXJyYXkoYWxpYXMpID8gYWxpYXNbMF0gOiBhbGlhcztcbiAgICAgICAgICAgIHZhciBncmFtbWFyID0gUHJpc20ubGFuZ3VhZ2VzW2xhbmd1YWdlXTtcblxuICAgICAgICAgICAgaWYgKCFncmFtbWFyKSB7XG4gICAgICAgICAgICAgIC8vIHRoZSBlbWJlZGRlZCBsYW5ndWFnZSBpc24ndCByZWdpc3RlcmVkLlxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29udGVudFsxXSA9IHRva2VuaXplRW1iZWRkZWQoY29kZSwgZ3JhbW1hciwgbGFuZ3VhZ2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBmaW5kVGVtcGxhdGVTdHJpbmdzKGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZmluZFRlbXBsYXRlU3RyaW5ncyhlbnYudG9rZW5zKTtcbiAgfSk7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzdHJpbmcgY29udGVudCBvZiBhIHRva2VuIG9yIHRva2VuIHN0cmVhbS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmcgfCBUb2tlbiB8IChzdHJpbmcgfCBUb2tlbilbXX0gdmFsdWVcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG5cbiAgZnVuY3Rpb24gc3RyaW5nQ29udGVudCh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlLm1hcChzdHJpbmdDb250ZW50KS5qb2luKCcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN0cmluZ0NvbnRlbnQodmFsdWUuY29udGVudCk7XG4gICAgfVxuICB9XG59KShwcmlzbSk7XG4vKiBcInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1jb2ZmZWVzY3JpcHRcIiAqL1xuXG5cbihmdW5jdGlvbiAoUHJpc20pIHtcbiAgLy8gSWdub3JlIGNvbW1lbnRzIHN0YXJ0aW5nIHdpdGggeyB0byBwcml2aWxlZ2Ugc3RyaW5nIGludGVycG9sYXRpb24gaGlnaGxpZ2h0aW5nXG4gIHZhciBjb21tZW50ID0gLyMoPyFcXHspLisvO1xuICB2YXIgaW50ZXJwb2xhdGlvbiA9IHtcbiAgICBwYXR0ZXJuOiAvI1xce1tefV0rXFx9LyxcbiAgICBhbGlhczogJ3ZhcmlhYmxlJ1xuICB9O1xuICBQcmlzbS5sYW5ndWFnZXMuY29mZmVlc2NyaXB0ID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnamF2YXNjcmlwdCcsIHtcbiAgICAnY29tbWVudCc6IGNvbW1lbnQsXG4gICAgJ3N0cmluZyc6IFsvLyBTdHJpbmdzIGFyZSBtdWx0aWxpbmVcbiAgICB7XG4gICAgICBwYXR0ZXJuOiAvJyg/OlxcXFxbXFxzXFxTXXxbXlxcXFwnXSkqJy8sXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LCB7XG4gICAgICAvLyBTdHJpbmdzIGFyZSBtdWx0aWxpbmVcbiAgICAgIHBhdHRlcm46IC9cIig/OlxcXFxbXFxzXFxTXXxbXlxcXFxcIl0pKlwiLyxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAnaW50ZXJwb2xhdGlvbic6IGludGVycG9sYXRpb25cbiAgICAgIH1cbiAgICB9XSxcbiAgICAna2V5d29yZCc6IC9cXGIoPzphbmR8YnJlYWt8Ynl8Y2F0Y2h8Y2xhc3N8Y29udGludWV8ZGVidWdnZXJ8ZGVsZXRlfGRvfGVhY2h8ZWxzZXxleHRlbmR8ZXh0ZW5kc3xmYWxzZXxmaW5hbGx5fGZvcnxpZnxpbnxpbnN0YW5jZW9mfGlzfGlzbnR8bGV0fGxvb3B8bmFtZXNwYWNlfG5ld3xub3xub3R8bnVsbHxvZnxvZmZ8b258b3J8b3dufHJldHVybnxzdXBlcnxzd2l0Y2h8dGhlbnx0aGlzfHRocm93fHRydWV8dHJ5fHR5cGVvZnx1bmRlZmluZWR8dW5sZXNzfHVudGlsfHdoZW58d2hpbGV8d2luZG93fHdpdGh8eWVzfHlpZWxkKVxcYi8sXG4gICAgJ2NsYXNzLW1lbWJlcic6IHtcbiAgICAgIHBhdHRlcm46IC9AKD8hXFxkKVxcdysvLFxuICAgICAgYWxpYXM6ICd2YXJpYWJsZSdcbiAgICB9XG4gIH0pO1xuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdjb2ZmZWVzY3JpcHQnLCAnY29tbWVudCcsIHtcbiAgICAnbXVsdGlsaW5lLWNvbW1lbnQnOiB7XG4gICAgICBwYXR0ZXJuOiAvIyMjW1xcc1xcU10rPyMjIy8sXG4gICAgICBhbGlhczogJ2NvbW1lbnQnXG4gICAgfSxcbiAgICAvLyBCbG9jayByZWdleHAgY2FuIGNvbnRhaW4gY29tbWVudHMgYW5kIGludGVycG9sYXRpb25cbiAgICAnYmxvY2stcmVnZXgnOiB7XG4gICAgICBwYXR0ZXJuOiAvXFwvezN9W1xcc1xcU10qP1xcL3szfS8sXG4gICAgICBhbGlhczogJ3JlZ2V4JyxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAnY29tbWVudCc6IGNvbW1lbnQsXG4gICAgICAgICdpbnRlcnBvbGF0aW9uJzogaW50ZXJwb2xhdGlvblxuICAgICAgfVxuICAgIH1cbiAgfSk7XG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ2NvZmZlZXNjcmlwdCcsICdzdHJpbmcnLCB7XG4gICAgJ2lubGluZS1qYXZhc2NyaXB0Jzoge1xuICAgICAgcGF0dGVybjogL2AoPzpcXFxcW1xcc1xcU118W15cXFxcYF0pKmAvLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdkZWxpbWl0ZXInOiB7XG4gICAgICAgICAgcGF0dGVybjogL15gfGAkLyxcbiAgICAgICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgICAgICB9LFxuICAgICAgICAnc2NyaXB0Jzoge1xuICAgICAgICAgIHBhdHRlcm46IC9bXFxzXFxTXSsvLFxuICAgICAgICAgIGFsaWFzOiAnbGFuZ3VhZ2UtamF2YXNjcmlwdCcsXG4gICAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMuamF2YXNjcmlwdFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICAvLyBCbG9jayBzdHJpbmdzXG4gICAgJ211bHRpbGluZS1zdHJpbmcnOiBbe1xuICAgICAgcGF0dGVybjogLycnJ1tcXHNcXFNdKj8nJycvLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgYWxpYXM6ICdzdHJpbmcnXG4gICAgfSwge1xuICAgICAgcGF0dGVybjogL1wiXCJcIltcXHNcXFNdKj9cIlwiXCIvLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgYWxpYXM6ICdzdHJpbmcnLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIGludGVycG9sYXRpb246IGludGVycG9sYXRpb25cbiAgICAgIH1cbiAgICB9XVxuICB9KTtcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnY29mZmVlc2NyaXB0JywgJ2tleXdvcmQnLCB7XG4gICAgLy8gT2JqZWN0IHByb3BlcnR5XG4gICAgJ3Byb3BlcnR5JzogLyg/IVxcZClcXHcrKD89XFxzKjooPyE6KSkvXG4gIH0pO1xuICBkZWxldGUgUHJpc20ubGFuZ3VhZ2VzLmNvZmZlZXNjcmlwdFsndGVtcGxhdGUtc3RyaW5nJ107XG4gIFByaXNtLmxhbmd1YWdlcy5jb2ZmZWUgPSBQcmlzbS5sYW5ndWFnZXMuY29mZmVlc2NyaXB0O1xufSkocHJpc20pO1xuLyogXCJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tZGlmZlwiICovXG5cblxuKGZ1bmN0aW9uIChQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuZGlmZiA9IHtcbiAgICAnY29vcmQnOiBbLy8gTWF0Y2ggYWxsIGtpbmRzIG9mIGNvb3JkIGxpbmVzIChwcmVmaXhlZCBieSBcIisrK1wiLCBcIi0tLVwiIG9yIFwiKioqXCIpLlxuICAgIC9eKD86XFwqezN9fC17M318XFwrezN9KS4qJC9tLCAvLyBNYXRjaCBcIkBAIC4uLiBAQFwiIGNvb3JkIGxpbmVzIGluIHVuaWZpZWQgZGlmZi5cbiAgICAvXkBALipAQCQvbSwgLy8gTWF0Y2ggY29vcmQgbGluZXMgaW4gbm9ybWFsIGRpZmYgKHN0YXJ0cyB3aXRoIGEgbnVtYmVyKS5cbiAgICAvXlxcZC4qJC9tXSAvLyBkZWxldGVkLCBpbnNlcnRlZCwgdW5jaGFuZ2VkLCBkaWZmXG5cbiAgfTtcbiAgLyoqXG4gICAqIEEgbWFwIGZyb20gdGhlIG5hbWUgb2YgYSBibG9jayB0byBpdHMgbGluZSBwcmVmaXguXG4gICAqXG4gICAqIEB0eXBlIHtPYmplY3Q8c3RyaW5nLCBzdHJpbmc+fVxuICAgKi9cblxuICB2YXIgUFJFRklYRVMgPSB7XG4gICAgJ2RlbGV0ZWQtc2lnbic6ICctJyxcbiAgICAnZGVsZXRlZC1hcnJvdyc6ICc8JyxcbiAgICAnaW5zZXJ0ZWQtc2lnbic6ICcrJyxcbiAgICAnaW5zZXJ0ZWQtYXJyb3cnOiAnPicsXG4gICAgJ3VuY2hhbmdlZCc6ICcgJyxcbiAgICAnZGlmZic6ICchJ1xuICB9OyAvLyBhZGQgYSB0b2tlbiBmb3IgZWFjaCBwcmVmaXhcblxuICBPYmplY3Qua2V5cyhQUkVGSVhFUykuZm9yRWFjaChmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBwcmVmaXggPSBQUkVGSVhFU1tuYW1lXTtcbiAgICB2YXIgYWxpYXMgPSBbXTtcblxuICAgIGlmICghL15cXHcrJC8udGVzdChuYW1lKSkge1xuICAgICAgLy8gXCJkZWxldGVkLXNpZ25cIiAtPiBcImRlbGV0ZWRcIlxuICAgICAgYWxpYXMucHVzaCgvXFx3Ky8uZXhlYyhuYW1lKVswXSk7XG4gICAgfVxuXG4gICAgaWYgKG5hbWUgPT09ICdkaWZmJykge1xuICAgICAgYWxpYXMucHVzaCgnYm9sZCcpO1xuICAgIH1cblxuICAgIFByaXNtLmxhbmd1YWdlcy5kaWZmW25hbWVdID0ge1xuICAgICAgcGF0dGVybjogUmVnRXhwKCdeKD86WycgKyBwcmVmaXggKyAnXS4qKD86XFxyXFxuP3xcXG58KD8hW1xcXFxzXFxcXFNdKSkpKycsICdtJyksXG4gICAgICBhbGlhczogYWxpYXMsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgJ2xpbmUnOiB7XG4gICAgICAgICAgcGF0dGVybjogLyguKSg/PVtcXHNcXFNdKS4qKD86XFxyXFxuP3xcXG4pPy8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICAncHJlZml4Jzoge1xuICAgICAgICAgIHBhdHRlcm46IC9bXFxzXFxTXS8sXG4gICAgICAgICAgYWxpYXM6IC9cXHcrLy5leGVjKG5hbWUpWzBdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuICB9KTsgLy8gbWFrZSBwcmVmaXhlcyBhdmFpbGFibGUgdG8gRGlmZiBwbHVnaW5cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUHJpc20ubGFuZ3VhZ2VzLmRpZmYsICdQUkVGSVhFUycsIHtcbiAgICB2YWx1ZTogUFJFRklYRVNcbiAgfSk7XG59KShwcmlzbSk7XG4vKiBcInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1naXRcIiAqL1xuXG5cbnByaXNtLmxhbmd1YWdlcy5naXQgPSB7XG4gIC8qXG4gICAqIEEgc2ltcGxlIG9uZSBsaW5lIGNvbW1lbnQgbGlrZSBpbiBhIGdpdCBzdGF0dXMgY29tbWFuZFxuICAgKiBGb3IgaW5zdGFuY2U6XG4gICAqICQgZ2l0IHN0YXR1c1xuICAgKiAjIE9uIGJyYW5jaCBpbmZpbml0ZS1zY3JvbGxcbiAgICogIyBZb3VyIGJyYW5jaCBhbmQgJ29yaWdpbi9zaGFyZWRCcmFuY2hlcy9mcm9udGVuZFRlYW0vaW5maW5pdGUtc2Nyb2xsJyBoYXZlIGRpdmVyZ2VkLFxuICAgKiAjIGFuZCBoYXZlIDEgYW5kIDIgZGlmZmVyZW50IGNvbW1pdHMgZWFjaCwgcmVzcGVjdGl2ZWx5LlxuICAgKiBub3RoaW5nIHRvIGNvbW1pdCAod29ya2luZyBkaXJlY3RvcnkgY2xlYW4pXG4gICAqL1xuICAnY29tbWVudCc6IC9eIy4qL20sXG5cbiAgLypcbiAgICogUmVnZXhwIHRvIG1hdGNoIHRoZSBjaGFuZ2VkIGxpbmVzIGluIGEgZ2l0IGRpZmYgb3V0cHV0LiBDaGVjayB0aGUgZXhhbXBsZSBiZWxvdy5cbiAgICovXG4gICdkZWxldGVkJzogL15bLeKAk10uKi9tLFxuICAnaW5zZXJ0ZWQnOiAvXlxcKy4qL20sXG5cbiAgLypcbiAgICogYSBzdHJpbmcgKGRvdWJsZSBhbmQgc2ltcGxlIHF1b3RlKVxuICAgKi9cbiAgJ3N0cmluZyc6IC8oXCJ8JykoPzpcXFxcLnwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxLyxcblxuICAvKlxuICAgKiBhIGdpdCBjb21tYW5kLiBJdCBzdGFydHMgd2l0aCBhIHJhbmRvbSBwcm9tcHQgZmluaXNoaW5nIGJ5IGEgJCwgdGhlbiBcImdpdFwiIHRoZW4gc29tZSBvdGhlciBwYXJhbWV0ZXJzXG4gICAqIEZvciBpbnN0YW5jZTpcbiAgICogJCBnaXQgYWRkIGZpbGUudHh0XG4gICAqL1xuICAnY29tbWFuZCc6IHtcbiAgICBwYXR0ZXJuOiAvXi4qXFwkIGdpdCAuKiQvbSxcbiAgICBpbnNpZGU6IHtcbiAgICAgIC8qXG4gICAgICAgKiBBIGdpdCBjb21tYW5kIGNhbiBjb250YWluIGEgcGFyYW1ldGVyIHN0YXJ0aW5nIGJ5IGEgc2luZ2xlIG9yIGEgZG91YmxlIGRhc2ggZm9sbG93ZWQgYnkgYSBzdHJpbmdcbiAgICAgICAqIEZvciBpbnN0YW5jZTpcbiAgICAgICAqICQgZ2l0IGRpZmYgLS1jYWNoZWRcbiAgICAgICAqICQgZ2l0IGxvZyAtcFxuICAgICAgICovXG4gICAgICAncGFyYW1ldGVyJzogL1xccy0tP1xcdysvXG4gICAgfVxuICB9LFxuXG4gIC8qXG4gICAqIENvb3JkaW5hdGVzIGRpc3BsYXllZCBpbiBhIGdpdCBkaWZmIGNvbW1hbmRcbiAgICogRm9yIGluc3RhbmNlOlxuICAgKiAkIGdpdCBkaWZmXG4gICAqIGRpZmYgLS1naXQgZmlsZS50eHQgZmlsZS50eHRcbiAgICogaW5kZXggNjIxNDk1My4uMWQ1NGE1MiAxMDA2NDRcbiAgICogLS0tIGZpbGUudHh0XG4gICAqICsrKyBmaWxlLnR4dFxuICAgKiBAQCAtMSArMSwyIEBAXG4gICAqIC1IZXJlJ3MgbXkgdGV0eCBmaWxlXG4gICAqICtIZXJlJ3MgbXkgdGV4dCBmaWxlXG4gICAqICtBbmQgdGhpcyBpcyB0aGUgc2Vjb25kIGxpbmVcbiAgICovXG4gICdjb29yZCc6IC9eQEAuKkBAJC9tLFxuXG4gIC8qXG4gICAqIE1hdGNoIGEgXCJjb21taXQgW1NIQTFdXCIgbGluZSBpbiBhIGdpdCBsb2cgb3V0cHV0LlxuICAgKiBGb3IgaW5zdGFuY2U6XG4gICAqICQgZ2l0IGxvZ1xuICAgKiBjb21taXQgYTExYTE0ZWY3ZTI2ZjJjYTYyZDRiMzVlYWM0NTVjZTYzNmQwZGMwOVxuICAgKiBBdXRob3I6IGxnaXJhdWRlbFxuICAgKiBEYXRlOiAgIE1vbiBGZWIgMTcgMTE6MTg6MzQgMjAxNCArMDEwMFxuICAgKlxuICAgKiAgICAgQWRkIG9mIGEgbmV3IGxpbmVcbiAgICovXG4gICdjb21taXQtc2hhMSc6IC9eY29tbWl0IFxcd3s0MH0kL21cbn07XG4vKiBcInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1nb1wiICovXG5cbnByaXNtLmxhbmd1YWdlcy5nbyA9IHByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2NsaWtlJywge1xuICAnc3RyaW5nJzoge1xuICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKVwiKD86XFxcXC58W15cIlxcXFxcXHJcXG5dKSpcInxgW15gXSpgLyxcbiAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgIGdyZWVkeTogdHJ1ZVxuICB9LFxuICAna2V5d29yZCc6IC9cXGIoPzpicmVha3xjYXNlfGNoYW58Y29uc3R8Y29udGludWV8ZGVmYXVsdHxkZWZlcnxlbHNlfGZhbGx0aHJvdWdofGZvcnxmdW5jfGdvKD86dG8pP3xpZnxpbXBvcnR8aW50ZXJmYWNlfG1hcHxwYWNrYWdlfHJhbmdlfHJldHVybnxzZWxlY3R8c3RydWN0fHN3aXRjaHx0eXBlfHZhcilcXGIvLFxuICAnYm9vbGVhbic6IC9cXGIoPzpffGZhbHNlfGlvdGF8bmlsfHRydWUpXFxiLyxcbiAgJ251bWJlcic6IFsvLyBiaW5hcnkgYW5kIG9jdGFsIGludGVnZXJzXG4gIC9cXGIwKD86YlswMV9dK3xvWzAtN19dKylpP1xcYi9pLCAvLyBoZXhhZGVjaW1hbCBpbnRlZ2VycyBhbmQgZmxvYXRzXG4gIC9cXGIweCg/OlthLWZcXGRfXSsoPzpcXC5bYS1mXFxkX10qKT98XFwuW2EtZlxcZF9dKykoPzpwWystXT9cXGQrKD86X1xcZCspKik/aT8oPyFcXHcpL2ksIC8vIGRlY2ltYWwgaW50ZWdlcnMgYW5kIGZsb2F0c1xuICAvKD86XFxiXFxkW1xcZF9dKig/OlxcLltcXGRfXSopP3xcXEJcXC5cXGRbXFxkX10qKSg/OmVbKy1dP1tcXGRfXSspP2k/KD8hXFx3KS9pXSxcbiAgJ29wZXJhdG9yJzogL1sqXFwvJV4hPV09P3xcXCtbPStdP3wtWz0tXT98XFx8Wz18XT98Jig/Oj18JnxcXF49Pyk/fD4oPzo+PT98PSk/fDwoPzo8PT98PXwtKT98Oj18XFwuXFwuXFwuLyxcbiAgJ2J1aWx0aW4nOiAvXFxiKD86YXBwZW5kfGJvb2x8Ynl0ZXxjYXB8Y2xvc2V8Y29tcGxleHxjb21wbGV4KD86NjR8MTI4KXxjb3B5fGRlbGV0ZXxlcnJvcnxmbG9hdCg/OjMyfDY0KXx1P2ludCg/Ojh8MTZ8MzJ8NjQpP3xpbWFnfGxlbnxtYWtlfG5ld3xwYW5pY3xwcmludCg/OmxuKT98cmVhbHxyZWNvdmVyfHJ1bmV8c3RyaW5nfHVpbnRwdHIpXFxiL1xufSk7XG5wcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdnbycsICdzdHJpbmcnLCB7XG4gICdjaGFyJzoge1xuICAgIHBhdHRlcm46IC8nKD86XFxcXC58W14nXFxcXFxcclxcbl0pezAsMTB9Jy8sXG4gICAgZ3JlZWR5OiB0cnVlXG4gIH1cbn0pO1xuZGVsZXRlIHByaXNtLmxhbmd1YWdlcy5nb1snY2xhc3MtbmFtZSddO1xuLyogXCJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tZ3JhcGhxbFwiICovXG5cbnByaXNtLmxhbmd1YWdlcy5ncmFwaHFsID0ge1xuICAnY29tbWVudCc6IC8jLiovLFxuICAnZGVzY3JpcHRpb24nOiB7XG4gICAgcGF0dGVybjogLyg/OlwiXCJcIig/OlteXCJdfCg/IVwiXCJcIilcIikqXCJcIlwifFwiKD86XFxcXC58W15cXFxcXCJcXHJcXG5dKSpcIikoPz1cXHMqW2Etel9dKS9pLFxuICAgIGdyZWVkeTogdHJ1ZSxcbiAgICBhbGlhczogJ3N0cmluZycsXG4gICAgaW5zaWRlOiB7XG4gICAgICAnbGFuZ3VhZ2UtbWFya2Rvd24nOiB7XG4gICAgICAgIHBhdHRlcm46IC8oXlwiKD86XCJcIik/KSg/IVxcMSlbXFxzXFxTXSsoPz1cXDEkKS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGluc2lkZTogcHJpc20ubGFuZ3VhZ2VzLm1hcmtkb3duXG4gICAgICB9XG4gICAgfVxuICB9LFxuICAnc3RyaW5nJzoge1xuICAgIHBhdHRlcm46IC9cIlwiXCIoPzpbXlwiXXwoPyFcIlwiXCIpXCIpKlwiXCJcInxcIig/OlxcXFwufFteXFxcXFwiXFxyXFxuXSkqXCIvLFxuICAgIGdyZWVkeTogdHJ1ZVxuICB9LFxuICAnbnVtYmVyJzogLyg/OlxcQi18XFxiKVxcZCsoPzpcXC5cXGQrKT8oPzplWystXT9cXGQrKT9cXGIvaSxcbiAgJ2Jvb2xlYW4nOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvLFxuICAndmFyaWFibGUnOiAvXFwkW2Etel9dXFx3Ki9pLFxuICAnZGlyZWN0aXZlJzoge1xuICAgIHBhdHRlcm46IC9AW2Etel9dXFx3Ki9pLFxuICAgIGFsaWFzOiAnZnVuY3Rpb24nXG4gIH0sXG4gICdhdHRyLW5hbWUnOiB7XG4gICAgcGF0dGVybjogL1xcYlthLXpfXVxcdyooPz1cXHMqKD86XFwoKD86W14oKVwiXXxcIig/OlxcXFwufFteXFxcXFwiXFxyXFxuXSkqXCIpKlxcKSk/OikvaSxcbiAgICBncmVlZHk6IHRydWVcbiAgfSxcbiAgJ2F0b20taW5wdXQnOiB7XG4gICAgcGF0dGVybjogL1xcYltBLVpdXFx3KklucHV0XFxiLyxcbiAgICBhbGlhczogJ2NsYXNzLW5hbWUnXG4gIH0sXG4gICdzY2FsYXInOiAvXFxiKD86Qm9vbGVhbnxGbG9hdHxJRHxJbnR8U3RyaW5nKVxcYi8sXG4gICdjb25zdGFudCc6IC9cXGJbQS1aXVtBLVpfXFxkXSpcXGIvLFxuICAnY2xhc3MtbmFtZSc6IHtcbiAgICBwYXR0ZXJuOiAvKFxcYig/OmVudW18aW1wbGVtZW50c3xpbnRlcmZhY2V8b258c2NhbGFyfHR5cGV8dW5pb24pXFxzK3wmXFxzKnw6XFxzKnxcXFspW0EtWl9dXFx3Ki8sXG4gICAgbG9va2JlaGluZDogdHJ1ZVxuICB9LFxuICAnZnJhZ21lbnQnOiB7XG4gICAgcGF0dGVybjogLyhcXGJmcmFnbWVudFxccyt8XFwuezN9XFxzKig/IW9uXFxiKSlbYS16QS1aX11cXHcqLyxcbiAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgIGFsaWFzOiAnZnVuY3Rpb24nXG4gIH0sXG4gICdkZWZpbml0aW9uLW11dGF0aW9uJzoge1xuICAgIHBhdHRlcm46IC8oXFxibXV0YXRpb25cXHMrKVthLXpBLVpfXVxcdyovLFxuICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgYWxpYXM6ICdmdW5jdGlvbidcbiAgfSxcbiAgJ2RlZmluaXRpb24tcXVlcnknOiB7XG4gICAgcGF0dGVybjogLyhcXGJxdWVyeVxccyspW2EtekEtWl9dXFx3Ki8sXG4gICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICBhbGlhczogJ2Z1bmN0aW9uJ1xuICB9LFxuICAna2V5d29yZCc6IC9cXGIoPzpkaXJlY3RpdmV8ZW51bXxleHRlbmR8ZnJhZ21lbnR8aW1wbGVtZW50c3xpbnB1dHxpbnRlcmZhY2V8bXV0YXRpb258b258cXVlcnl8cmVwZWF0YWJsZXxzY2FsYXJ8c2NoZW1hfHN1YnNjcmlwdGlvbnx0eXBlfHVuaW9uKVxcYi8sXG4gICdvcGVyYXRvcic6IC9bIT18Jl18XFwuezN9LyxcbiAgJ3Byb3BlcnR5LXF1ZXJ5JzogL1xcdysoPz1cXHMqXFwoKS8sXG4gICdvYmplY3QnOiAvXFx3Kyg/PVxccypcXHspLyxcbiAgJ3B1bmN0dWF0aW9uJzogL1shKCl7fVxcW1xcXTo9LF0vLFxuICAncHJvcGVydHknOiAvXFx3Ky9cbn07XG5wcmlzbS5ob29rcy5hZGQoJ2FmdGVyLXRva2VuaXplJywgZnVuY3Rpb24gYWZ0ZXJUb2tlbml6ZUdyYXBocWwoZW52KSB7XG4gIGlmIChlbnYubGFuZ3VhZ2UgIT09ICdncmFwaHFsJykge1xuICAgIHJldHVybjtcbiAgfVxuICAvKipcbiAgICogZ2V0IHRoZSBncmFwaHFsIHRva2VuIHN0cmVhbSB0aGF0IHdlIHdhbnQgdG8gY3VzdG9taXplXG4gICAqXG4gICAqIEB0eXBlZGVmIHtJbnN0YW5jZVR5cGU8aW1wb3J0KFwiLi9wcmlzbS1jb3JlXCIpW1wiVG9rZW5cIl0+fSBUb2tlblxuICAgKiBAdHlwZSB7VG9rZW5bXX1cbiAgICovXG5cblxuICB2YXIgdmFsaWRUb2tlbnMgPSBlbnYudG9rZW5zLmZpbHRlcihmdW5jdGlvbiAodG9rZW4pIHtcbiAgICByZXR1cm4gdHlwZW9mIHRva2VuICE9PSAnc3RyaW5nJyAmJiB0b2tlbi50eXBlICE9PSAnY29tbWVudCcgJiYgdG9rZW4udHlwZSAhPT0gJ3NjYWxhcic7XG4gIH0pO1xuICB2YXIgY3VycmVudEluZGV4ID0gMDtcbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgdG9rZW4gcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgaW5kZXggaGFzIHRoZSBnaXZlbiB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gb2Zmc2V0XG4gICAqIEByZXR1cm5zIHtUb2tlbiB8IHVuZGVmaW5lZH1cbiAgICovXG5cbiAgZnVuY3Rpb24gZ2V0VG9rZW4ob2Zmc2V0KSB7XG4gICAgcmV0dXJuIHZhbGlkVG9rZW5zW2N1cnJlbnRJbmRleCArIG9mZnNldF07XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgdG9rZW4gcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgaW5kZXggaGFzIHRoZSBnaXZlbiB0eXBlLlxuICAgKlxuICAgKiBAcGFyYW0ge3JlYWRvbmx5IHN0cmluZ1tdfSB0eXBlc1xuICAgKiBAcGFyYW0ge251bWJlcn0gW29mZnNldD0wXVxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICovXG5cblxuICBmdW5jdGlvbiBpc1Rva2VuVHlwZSh0eXBlcywgb2Zmc2V0KSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHR5cGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSBnZXRUb2tlbihpICsgb2Zmc2V0KTtcblxuICAgICAgaWYgKCF0b2tlbiB8fCB0b2tlbi50eXBlICE9PSB0eXBlc1tpXSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBjbG9zaW5nIGJyYWNrZXQgdG8gYW4gb3BlbmluZyBicmFja2V0LlxuICAgKlxuICAgKiBJdCBpcyBhc3N1bWVkIHRoYXQgYHRva2VuW2N1cnJlbnRJbmRleCAtIDFdYCBpcyBhbiBvcGVuaW5nIGJyYWNrZXQuXG4gICAqXG4gICAqIElmIG5vIGNsb3NpbmcgYnJhY2tldCBjb3VsZCBiZSBmb3VuZCwgYC0xYCB3aWxsIGJlIHJldHVybmVkLlxuICAgKlxuICAgKiBAcGFyYW0ge1JlZ0V4cH0gb3BlblxuICAgKiBAcGFyYW0ge1JlZ0V4cH0gY2xvc2VcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG5cblxuICBmdW5jdGlvbiBmaW5kQ2xvc2luZ0JyYWNrZXQob3BlbiwgY2xvc2UpIHtcbiAgICB2YXIgc3RhY2tIZWlnaHQgPSAxO1xuXG4gICAgZm9yICh2YXIgaSA9IGN1cnJlbnRJbmRleDsgaSA8IHZhbGlkVG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB2YWxpZFRva2Vuc1tpXTtcbiAgICAgIHZhciBjb250ZW50ID0gdG9rZW4uY29udGVudDtcblxuICAgICAgaWYgKHRva2VuLnR5cGUgPT09ICdwdW5jdHVhdGlvbicgJiYgdHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmIChvcGVuLnRlc3QoY29udGVudCkpIHtcbiAgICAgICAgICBzdGFja0hlaWdodCsrO1xuICAgICAgICB9IGVsc2UgaWYgKGNsb3NlLnRlc3QoY29udGVudCkpIHtcbiAgICAgICAgICBzdGFja0hlaWdodC0tO1xuXG4gICAgICAgICAgaWYgKHN0YWNrSGVpZ2h0ID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gLTE7XG4gIH1cbiAgLyoqXG4gICAqIEFkZHMgYW4gYWxpYXMgdG8gdGhlIGdpdmVuIHRva2VuLlxuICAgKlxuICAgKiBAcGFyYW0ge1Rva2VufSB0b2tlblxuICAgKiBAcGFyYW0ge3N0cmluZ30gYWxpYXNcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gYWRkQWxpYXModG9rZW4sIGFsaWFzKSB7XG4gICAgdmFyIGFsaWFzZXMgPSB0b2tlbi5hbGlhcztcblxuICAgIGlmICghYWxpYXNlcykge1xuICAgICAgdG9rZW4uYWxpYXMgPSBhbGlhc2VzID0gW107XG4gICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShhbGlhc2VzKSkge1xuICAgICAgdG9rZW4uYWxpYXMgPSBhbGlhc2VzID0gW2FsaWFzZXNdO1xuICAgIH1cblxuICAgIGFsaWFzZXMucHVzaChhbGlhcyk7XG4gIH1cblxuICBmb3IgKDsgY3VycmVudEluZGV4IDwgdmFsaWRUb2tlbnMubGVuZ3RoOykge1xuICAgIHZhciBzdGFydFRva2VuID0gdmFsaWRUb2tlbnNbY3VycmVudEluZGV4KytdOyAvLyBhZGQgc3BlY2lhbCBhbGlhc2VzIGZvciBtdXRhdGlvbiB0b2tlbnNcblxuICAgIGlmIChzdGFydFRva2VuLnR5cGUgPT09ICdrZXl3b3JkJyAmJiBzdGFydFRva2VuLmNvbnRlbnQgPT09ICdtdXRhdGlvbicpIHtcbiAgICAgIC8vIGFueSBhcnJheSBvZiB0aGUgbmFtZXMgb2YgYWxsIGlucHV0IHZhcmlhYmxlcyAoaWYgYW55KVxuICAgICAgdmFyIGlucHV0VmFyaWFibGVzID0gW107XG5cbiAgICAgIGlmIChpc1Rva2VuVHlwZShbJ2RlZmluaXRpb24tbXV0YXRpb24nLCAncHVuY3R1YXRpb24nXSkgJiYgZ2V0VG9rZW4oMSkuY29udGVudCA9PT0gJygnKSB7XG4gICAgICAgIC8vIGRlZmluaXRpb25cbiAgICAgICAgY3VycmVudEluZGV4ICs9IDI7IC8vIHNraXAgJ2RlZmluaXRpb24tbXV0YXRpb24nIGFuZCAncHVuY3R1YXRpb24nXG5cbiAgICAgICAgdmFyIGRlZmluaXRpb25FbmQgPSBmaW5kQ2xvc2luZ0JyYWNrZXQoL15cXCgkLywgL15cXCkkLyk7XG5cbiAgICAgICAgaWYgKGRlZmluaXRpb25FbmQgPT09IC0xKSB7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gLy8gZmluZCBhbGwgaW5wdXQgdmFyaWFibGVzXG5cblxuICAgICAgICBmb3IgKDsgY3VycmVudEluZGV4IDwgZGVmaW5pdGlvbkVuZDsgY3VycmVudEluZGV4KyspIHtcbiAgICAgICAgICB2YXIgdCA9IGdldFRva2VuKDApO1xuXG4gICAgICAgICAgaWYgKHQudHlwZSA9PT0gJ3ZhcmlhYmxlJykge1xuICAgICAgICAgICAgYWRkQWxpYXModCwgJ3ZhcmlhYmxlLWlucHV0Jyk7XG4gICAgICAgICAgICBpbnB1dFZhcmlhYmxlcy5wdXNoKHQuY29udGVudCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudEluZGV4ID0gZGVmaW5pdGlvbkVuZCArIDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc1Rva2VuVHlwZShbJ3B1bmN0dWF0aW9uJywgJ3Byb3BlcnR5LXF1ZXJ5J10pICYmIGdldFRva2VuKDApLmNvbnRlbnQgPT09ICd7Jykge1xuICAgICAgICBjdXJyZW50SW5kZXgrKzsgLy8gc2tpcCBvcGVuaW5nIGJyYWNrZXRcblxuICAgICAgICBhZGRBbGlhcyhnZXRUb2tlbigwKSwgJ3Byb3BlcnR5LW11dGF0aW9uJyk7XG5cbiAgICAgICAgaWYgKGlucHV0VmFyaWFibGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICB2YXIgbXV0YXRpb25FbmQgPSBmaW5kQ2xvc2luZ0JyYWNrZXQoL15cXHskLywgL15cXH0kLyk7XG5cbiAgICAgICAgICBpZiAobXV0YXRpb25FbmQgPT09IC0xKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9IC8vIGdpdmUgcmVmZXJlbmNlcyB0byBpbnB1dCB2YXJpYWJsZXMgYSBzcGVjaWFsIGFsaWFzXG5cblxuICAgICAgICAgIGZvciAodmFyIGkgPSBjdXJyZW50SW5kZXg7IGkgPCBtdXRhdGlvbkVuZDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgdmFyVG9rZW4gPSB2YWxpZFRva2Vuc1tpXTtcblxuICAgICAgICAgICAgaWYgKHZhclRva2VuLnR5cGUgPT09ICd2YXJpYWJsZScgJiYgaW5wdXRWYXJpYWJsZXMuaW5kZXhPZih2YXJUb2tlbi5jb250ZW50KSA+PSAwKSB7XG4gICAgICAgICAgICAgIGFkZEFsaWFzKHZhclRva2VuLCAndmFyaWFibGUtaW5wdXQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pO1xuLyogXCJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tbWFya3VwLXRlbXBsYXRpbmdcIiAqL1xuXG4oZnVuY3Rpb24gKFByaXNtKSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwbGFjZWhvbGRlciBmb3IgdGhlIGdpdmVuIGxhbmd1YWdlIGlkIGFuZCBpbmRleC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGxhbmd1YWdlXG4gICAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gaW5kZXhcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIGZ1bmN0aW9uIGdldFBsYWNlaG9sZGVyKGxhbmd1YWdlLCBpbmRleCkge1xuICAgIHJldHVybiAnX19fJyArIGxhbmd1YWdlLnRvVXBwZXJDYXNlKCkgKyBpbmRleCArICdfX18nO1xuICB9XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnRpZXMoUHJpc20ubGFuZ3VhZ2VzWydtYXJrdXAtdGVtcGxhdGluZyddID0ge30sIHtcbiAgICBidWlsZFBsYWNlaG9sZGVyczoge1xuICAgICAgLyoqXG4gICAgICAgKiBUb2tlbml6ZSBhbGwgaW5saW5lIHRlbXBsYXRpbmcgZXhwcmVzc2lvbnMgbWF0Y2hpbmcgYHBsYWNlaG9sZGVyUGF0dGVybmAuXG4gICAgICAgKlxuICAgICAgICogSWYgYHJlcGxhY2VGaWx0ZXJgIGlzIHByb3ZpZGVkLCBvbmx5IG1hdGNoZXMgb2YgYHBsYWNlaG9sZGVyUGF0dGVybmAgZm9yIHdoaWNoIGByZXBsYWNlRmlsdGVyYCByZXR1cm5zXG4gICAgICAgKiBgdHJ1ZWAgd2lsbCBiZSByZXBsYWNlZC5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge29iamVjdH0gZW52IFRoZSBlbnZpcm9ubWVudCBvZiB0aGUgYGJlZm9yZS10b2tlbml6ZWAgaG9vay5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYW5ndWFnZSBUaGUgbGFuZ3VhZ2UgaWQuXG4gICAgICAgKiBAcGFyYW0ge1JlZ0V4cH0gcGxhY2Vob2xkZXJQYXR0ZXJuIFRoZSBtYXRjaGVzIG9mIHRoaXMgcGF0dGVybiB3aWxsIGJlIHJlcGxhY2VkIGJ5IHBsYWNlaG9sZGVycy5cbiAgICAgICAqIEBwYXJhbSB7KG1hdGNoOiBzdHJpbmcpID0+IGJvb2xlYW59IFtyZXBsYWNlRmlsdGVyXVxuICAgICAgICovXG4gICAgICB2YWx1ZTogZnVuY3Rpb24gKGVudiwgbGFuZ3VhZ2UsIHBsYWNlaG9sZGVyUGF0dGVybiwgcmVwbGFjZUZpbHRlcikge1xuICAgICAgICBpZiAoZW52Lmxhbmd1YWdlICE9PSBsYW5ndWFnZSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b2tlblN0YWNrID0gZW52LnRva2VuU3RhY2sgPSBbXTtcbiAgICAgICAgZW52LmNvZGUgPSBlbnYuY29kZS5yZXBsYWNlKHBsYWNlaG9sZGVyUGF0dGVybiwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgICAgaWYgKHR5cGVvZiByZXBsYWNlRmlsdGVyID09PSAnZnVuY3Rpb24nICYmICFyZXBsYWNlRmlsdGVyKG1hdGNoKSkge1xuICAgICAgICAgICAgcmV0dXJuIG1hdGNoO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHZhciBpID0gdG9rZW5TdGFjay5sZW5ndGg7XG4gICAgICAgICAgdmFyIHBsYWNlaG9sZGVyOyAvLyBDaGVjayBmb3IgZXhpc3Rpbmcgc3RyaW5nc1xuXG4gICAgICAgICAgd2hpbGUgKGVudi5jb2RlLmluZGV4T2YocGxhY2Vob2xkZXIgPSBnZXRQbGFjZWhvbGRlcihsYW5ndWFnZSwgaSkpICE9PSAtMSkge1xuICAgICAgICAgICAgKytpO1xuICAgICAgICAgIH0gLy8gQ3JlYXRlIGEgc3BhcnNlIGFycmF5XG5cblxuICAgICAgICAgIHRva2VuU3RhY2tbaV0gPSBtYXRjaDtcbiAgICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gICAgICAgIH0pOyAvLyBTd2l0Y2ggdGhlIGdyYW1tYXIgdG8gbWFya3VwXG5cbiAgICAgICAgZW52LmdyYW1tYXIgPSBQcmlzbS5sYW5ndWFnZXMubWFya3VwO1xuICAgICAgfVxuICAgIH0sXG4gICAgdG9rZW5pemVQbGFjZWhvbGRlcnM6IHtcbiAgICAgIC8qKlxuICAgICAgICogUmVwbGFjZSBwbGFjZWhvbGRlcnMgd2l0aCBwcm9wZXIgdG9rZW5zIGFmdGVyIHRva2VuaXppbmcuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtvYmplY3R9IGVudiBUaGUgZW52aXJvbm1lbnQgb2YgdGhlIGBhZnRlci10b2tlbml6ZWAgaG9vay5cbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYW5ndWFnZSBUaGUgbGFuZ3VhZ2UgaWQuXG4gICAgICAgKi9cbiAgICAgIHZhbHVlOiBmdW5jdGlvbiAoZW52LCBsYW5ndWFnZSkge1xuICAgICAgICBpZiAoZW52Lmxhbmd1YWdlICE9PSBsYW5ndWFnZSB8fCAhZW52LnRva2VuU3RhY2spIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gLy8gU3dpdGNoIHRoZSBncmFtbWFyIGJhY2tcblxuXG4gICAgICAgIGVudi5ncmFtbWFyID0gUHJpc20ubGFuZ3VhZ2VzW2xhbmd1YWdlXTtcbiAgICAgICAgdmFyIGogPSAwO1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGVudi50b2tlblN0YWNrKTtcblxuICAgICAgICBmdW5jdGlvbiB3YWxrVG9rZW5zKHRva2Vucykge1xuICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAvLyBhbGwgcGxhY2Vob2xkZXJzIGFyZSByZXBsYWNlZCBhbHJlYWR5XG4gICAgICAgICAgICBpZiAoaiA+PSBrZXlzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldO1xuXG4gICAgICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJyB8fCB0b2tlbi5jb250ZW50ICYmIHR5cGVvZiB0b2tlbi5jb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICB2YXIgayA9IGtleXNbal07XG4gICAgICAgICAgICAgIHZhciB0ID0gZW52LnRva2VuU3RhY2tba107XG4gICAgICAgICAgICAgIHZhciBzID0gdHlwZW9mIHRva2VuID09PSAnc3RyaW5nJyA/IHRva2VuIDogdG9rZW4uY29udGVudDtcbiAgICAgICAgICAgICAgdmFyIHBsYWNlaG9sZGVyID0gZ2V0UGxhY2Vob2xkZXIobGFuZ3VhZ2UsIGspO1xuICAgICAgICAgICAgICB2YXIgaW5kZXggPSBzLmluZGV4T2YocGxhY2Vob2xkZXIpO1xuXG4gICAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgKytqO1xuICAgICAgICAgICAgICAgIHZhciBiZWZvcmUgPSBzLnN1YnN0cmluZygwLCBpbmRleCk7XG4gICAgICAgICAgICAgICAgdmFyIG1pZGRsZSA9IG5ldyBQcmlzbS5Ub2tlbihsYW5ndWFnZSwgUHJpc20udG9rZW5pemUodCwgZW52LmdyYW1tYXIpLCAnbGFuZ3VhZ2UtJyArIGxhbmd1YWdlLCB0KTtcbiAgICAgICAgICAgICAgICB2YXIgYWZ0ZXIgPSBzLnN1YnN0cmluZyhpbmRleCArIHBsYWNlaG9sZGVyLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgdmFyIHJlcGxhY2VtZW50ID0gW107XG5cbiAgICAgICAgICAgICAgICBpZiAoYmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgICByZXBsYWNlbWVudC5wdXNoLmFwcGx5KHJlcGxhY2VtZW50LCB3YWxrVG9rZW5zKFtiZWZvcmVdKSk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQucHVzaChtaWRkbGUpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFmdGVyKSB7XG4gICAgICAgICAgICAgICAgICByZXBsYWNlbWVudC5wdXNoLmFwcGx5KHJlcGxhY2VtZW50LCB3YWxrVG9rZW5zKFthZnRlcl0pKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgICAgdG9rZW5zLnNwbGljZS5hcHBseSh0b2tlbnMsIFtpLCAxXS5jb25jYXQocmVwbGFjZW1lbnQpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgdG9rZW4uY29udGVudCA9IHJlcGxhY2VtZW50O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh0b2tlbi5jb250ZW50XG4gICAgICAgICAgICAvKiAmJiB0eXBlb2YgdG9rZW4uY29udGVudCAhPT0gJ3N0cmluZycgKi9cbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHdhbGtUb2tlbnModG9rZW4uY29udGVudCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gdG9rZW5zO1xuICAgICAgICB9XG5cbiAgICAgICAgd2Fsa1Rva2VucyhlbnYudG9rZW5zKTtcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xufSkocHJpc20pO1xuLyogXCJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20taGFuZGxlYmFyc1wiICovXG5cblxuKGZ1bmN0aW9uIChQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuaGFuZGxlYmFycyA9IHtcbiAgICAnY29tbWVudCc6IC9cXHtcXHshW1xcc1xcU10qP1xcfVxcfS8sXG4gICAgJ2RlbGltaXRlcic6IHtcbiAgICAgIHBhdHRlcm46IC9eXFx7XFx7XFx7P3xcXH1cXH1cXH0/JC8sXG4gICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgIH0sXG4gICAgJ3N0cmluZyc6IC8oW1wiJ10pKD86XFxcXC58KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS8sXG4gICAgJ251bWJlcic6IC9cXGIweFtcXGRBLUZhLWZdK1xcYnwoPzpcXGJcXGQrKD86XFwuXFxkKik/fFxcQlxcLlxcZCspKD86W0VlXVsrLV0/XFxkKyk/LyxcbiAgICAnYm9vbGVhbic6IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi8sXG4gICAgJ2Jsb2NrJzoge1xuICAgICAgcGF0dGVybjogL14oXFxzKig/On5cXHMqKT8pWyNcXC9dXFxTKz8oPz1cXHMqKD86flxccyopPyR8XFxzKS8sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgYWxpYXM6ICdrZXl3b3JkJ1xuICAgIH0sXG4gICAgJ2JyYWNrZXRzJzoge1xuICAgICAgcGF0dGVybjogL1xcW1teXFxdXStcXF0vLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgIHB1bmN0dWF0aW9uOiAvXFxbfFxcXS8sXG4gICAgICAgIHZhcmlhYmxlOiAvW1xcc1xcU10rL1xuICAgICAgfVxuICAgIH0sXG4gICAgJ3B1bmN0dWF0aW9uJzogL1shXCIjJSYnOigpKissLlxcLzs8PT5AXFxbXFxcXFxcXV5ge3x9fl0vLFxuICAgICd2YXJpYWJsZSc6IC9bXiFcIiMlJicoKSorLFxcLzs8PT5AXFxbXFxcXFxcXV5ge3x9flxcc10rL1xuICB9O1xuICBQcmlzbS5ob29rcy5hZGQoJ2JlZm9yZS10b2tlbml6ZScsIGZ1bmN0aW9uIChlbnYpIHtcbiAgICB2YXIgaGFuZGxlYmFyc1BhdHRlcm4gPSAvXFx7XFx7XFx7W1xcc1xcU10rP1xcfVxcfVxcfXxcXHtcXHtbXFxzXFxTXSs/XFx9XFx9L2c7XG4gICAgUHJpc20ubGFuZ3VhZ2VzWydtYXJrdXAtdGVtcGxhdGluZyddLmJ1aWxkUGxhY2Vob2xkZXJzKGVudiwgJ2hhbmRsZWJhcnMnLCBoYW5kbGViYXJzUGF0dGVybik7XG4gIH0pO1xuICBQcmlzbS5ob29rcy5hZGQoJ2FmdGVyLXRva2VuaXplJywgZnVuY3Rpb24gKGVudikge1xuICAgIFByaXNtLmxhbmd1YWdlc1snbWFya3VwLXRlbXBsYXRpbmcnXS50b2tlbml6ZVBsYWNlaG9sZGVycyhlbnYsICdoYW5kbGViYXJzJyk7XG4gIH0pO1xuICBQcmlzbS5sYW5ndWFnZXMuaGJzID0gUHJpc20ubGFuZ3VhZ2VzLmhhbmRsZWJhcnM7XG59KShwcmlzbSk7XG4vKiBcInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1qc29uXCIgKi9cbi8vIGh0dHBzOi8vd3d3Lmpzb24ub3JnL2pzb24tZW4uaHRtbFxuXG5cbnByaXNtLmxhbmd1YWdlcy5qc29uID0ge1xuICAncHJvcGVydHknOiB7XG4gICAgcGF0dGVybjogLyhefFteXFxcXF0pXCIoPzpcXFxcLnxbXlxcXFxcIlxcclxcbl0pKlwiKD89XFxzKjopLyxcbiAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgIGdyZWVkeTogdHJ1ZVxuICB9LFxuICAnc3RyaW5nJzoge1xuICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKVwiKD86XFxcXC58W15cXFxcXCJcXHJcXG5dKSpcIig/IVxccyo6KS8sXG4gICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICBncmVlZHk6IHRydWVcbiAgfSxcbiAgJ2NvbW1lbnQnOiB7XG4gICAgcGF0dGVybjogL1xcL1xcLy4qfFxcL1xcKltcXHNcXFNdKj8oPzpcXCpcXC98JCkvLFxuICAgIGdyZWVkeTogdHJ1ZVxuICB9LFxuICAnbnVtYmVyJzogLy0/XFxiXFxkKyg/OlxcLlxcZCspPyg/OmVbKy1dP1xcZCspP1xcYi9pLFxuICAncHVuY3R1YXRpb24nOiAvW3t9W1xcXSxdLyxcbiAgJ29wZXJhdG9yJzogLzovLFxuICAnYm9vbGVhbic6IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi8sXG4gICdudWxsJzoge1xuICAgIHBhdHRlcm46IC9cXGJudWxsXFxiLyxcbiAgICBhbGlhczogJ2tleXdvcmQnXG4gIH1cbn07XG5wcmlzbS5sYW5ndWFnZXMud2VibWFuaWZlc3QgPSBwcmlzbS5sYW5ndWFnZXMuanNvbjtcbi8qIFwicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLWxlc3NcIiAqL1xuXG4vKiBGSVhNRSA6XG4gOmV4dGVuZCgpIGlzIG5vdCBoYW5kbGVkIHNwZWNpZmljYWxseSA6IGl0cyBoaWdobGlnaHRpbmcgaXMgYnVnZ3kuXG4gTWl4aW4gdXNhZ2UgbXVzdCBiZSBpbnNpZGUgYSBydWxlc2V0IHRvIGJlIGhpZ2hsaWdodGVkLlxuIEF0LXJ1bGVzIChlLmcuIGltcG9ydCkgY29udGFpbmluZyBpbnRlcnBvbGF0aW9ucyBhcmUgYnVnZ3kuXG4gRGV0YWNoZWQgcnVsZXNldHMgYXJlIGhpZ2hsaWdodGVkIGFzIGF0LXJ1bGVzLlxuIEEgY29tbWVudCBiZWZvcmUgYSBtaXhpbiB1c2FnZSBwcmV2ZW50cyB0aGUgbGF0dGVyIHRvIGJlIHByb3Blcmx5IGhpZ2hsaWdodGVkLlxuICovXG5cbnByaXNtLmxhbmd1YWdlcy5sZXNzID0gcHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY3NzJywge1xuICAnY29tbWVudCc6IFsvXFwvXFwqW1xcc1xcU10qP1xcKlxcLy8sIHtcbiAgICBwYXR0ZXJuOiAvKF58W15cXFxcXSlcXC9cXC8uKi8sXG4gICAgbG9va2JlaGluZDogdHJ1ZVxuICB9XSxcbiAgJ2F0cnVsZSc6IHtcbiAgICBwYXR0ZXJuOiAvQFtcXHctXSg/OlxcKCg/OlteKCl7fV18XFwoW14oKXt9XSpcXCkpKlxcKXxbXigpe307XFxzXXxcXHMrKD8hXFxzKSkqPyg/PVxccypcXHspLyxcbiAgICBpbnNpZGU6IHtcbiAgICAgICdwdW5jdHVhdGlvbic6IC9bOigpXS9cbiAgICB9XG4gIH0sXG4gIC8vIHNlbGVjdG9ycyBhbmQgbWl4aW5zIGFyZSBjb25zaWRlcmVkIHRoZSBzYW1lXG4gICdzZWxlY3Rvcic6IHtcbiAgICBwYXR0ZXJuOiAvKD86QFxce1tcXHctXStcXH18W157fTtcXHNAXSkoPzpAXFx7W1xcdy1dK1xcfXxcXCgoPzpbXigpe31dfFxcKFteKCl7fV0qXFwpKSpcXCl8W14oKXt9O0BcXHNdfFxccysoPyFcXHMpKSo/KD89XFxzKlxceykvLFxuICAgIGluc2lkZToge1xuICAgICAgLy8gbWl4aW4gcGFyYW1ldGVyc1xuICAgICAgJ3ZhcmlhYmxlJzogL0ArW1xcdy1dKy9cbiAgICB9XG4gIH0sXG4gICdwcm9wZXJ0eSc6IC8oPzpAXFx7W1xcdy1dK1xcfXxbXFx3LV0pKyg/OlxcK18/KT8oPz1cXHMqOikvLFxuICAnb3BlcmF0b3InOiAvWytcXC0qXFwvXS9cbn0pO1xucHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnbGVzcycsICdwcm9wZXJ0eScsIHtcbiAgJ3ZhcmlhYmxlJzogWy8vIFZhcmlhYmxlIGRlY2xhcmF0aW9uICh0aGUgY29sb24gbXVzdCBiZSBjb25zdW1lZCEpXG4gIHtcbiAgICBwYXR0ZXJuOiAvQFtcXHctXStcXHMqOi8sXG4gICAgaW5zaWRlOiB7XG4gICAgICAncHVuY3R1YXRpb24nOiAvOi9cbiAgICB9XG4gIH0sIC8vIFZhcmlhYmxlIHVzYWdlXG4gIC9AQD9bXFx3LV0rL10sXG4gICdtaXhpbi11c2FnZSc6IHtcbiAgICBwYXR0ZXJuOiAvKFt7O11cXHMqKVsuI10oPyFcXGQpW1xcdy1dLio/KD89Wyg7XSkvLFxuICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgYWxpYXM6ICdmdW5jdGlvbidcbiAgfVxufSk7XG4vKiBcInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1tYWtlZmlsZVwiICovXG5cbnByaXNtLmxhbmd1YWdlcy5tYWtlZmlsZSA9IHtcbiAgJ2NvbW1lbnQnOiB7XG4gICAgcGF0dGVybjogLyhefFteXFxcXF0pIyg/OlxcXFwoPzpcXHJcXG58W1xcc1xcU10pfFteXFxcXFxcclxcbl0pKi8sXG4gICAgbG9va2JlaGluZDogdHJ1ZVxuICB9LFxuICAnc3RyaW5nJzoge1xuICAgIHBhdHRlcm46IC8oW1wiJ10pKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8KD8hXFwxKVteXFxcXFxcclxcbl0pKlxcMS8sXG4gICAgZ3JlZWR5OiB0cnVlXG4gIH0sXG4gICdidWlsdGluLXRhcmdldCc6IHtcbiAgICBwYXR0ZXJuOiAvXFwuW0EtWl1bXjojPVxcc10rKD89XFxzKjooPyE9KSkvLFxuICAgIGFsaWFzOiAnYnVpbHRpbidcbiAgfSxcbiAgJ3RhcmdldCc6IHtcbiAgICBwYXR0ZXJuOiAvXig/OlteOj1cXHNdfFsgXFx0XSsoPyFbXFxzOl0pKSsoPz1cXHMqOig/IT0pKS9tLFxuICAgIGFsaWFzOiAnc3ltYm9sJyxcbiAgICBpbnNpZGU6IHtcbiAgICAgICd2YXJpYWJsZSc6IC9cXCQrKD86KD8hXFwkKVteKCl7fTojPVxcc10rfCg/PVsoe10pKS9cbiAgICB9XG4gIH0sXG4gICd2YXJpYWJsZSc6IC9cXCQrKD86KD8hXFwkKVteKCl7fTojPVxcc10rfFxcKFtAKiU8Xis/XVtERl1cXCl8KD89Wyh7XSkpLyxcbiAgLy8gRGlyZWN0aXZlc1xuICAna2V5d29yZCc6IC8taW5jbHVkZVxcYnxcXGIoPzpkZWZpbmV8ZWxzZXxlbmRlZnxlbmRpZnxleHBvcnR8aWZuP2RlZnxpZm4/ZXF8aW5jbHVkZXxvdmVycmlkZXxwcml2YXRlfHNpbmNsdWRlfHVuZGVmaW5lfHVuZXhwb3J0fHZwYXRoKVxcYi8sXG4gICdmdW5jdGlvbic6IHtcbiAgICBwYXR0ZXJuOiAvKFxcKCkoPzphYnNwYXRofGFkZHN1ZmZpeHxhbmR8YmFzZW5hbWV8Y2FsbHxkaXJ8ZXJyb3J8ZXZhbHxmaWxlfGZpbHRlcig/Oi1vdXQpP3xmaW5kc3RyaW5nfGZpcnN0d29yZHxmbGF2b3J8Zm9yZWFjaHxndWlsZXxpZnxpbmZvfGpvaW58bGFzdHdvcmR8bG9hZHxub3RkaXJ8b3J8b3JpZ2lufHBhdHN1YnN0fHJlYWxwYXRofHNoZWxsfHNvcnR8c3RyaXB8c3Vic3R8c3VmZml4fHZhbHVlfHdhcm5pbmd8d2lsZGNhcmR8d29yZCg/Omxpc3R8cyk/KSg/PVsgXFx0XSkvLFxuICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgfSxcbiAgJ29wZXJhdG9yJzogLyg/Ojo6fFs/OishXSk/PXxbfEBdLyxcbiAgJ3B1bmN0dWF0aW9uJzogL1s6Oygpe31dL1xufTtcbi8qIFwicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLW1hcmtkb3duXCIgKi9cblxuKGZ1bmN0aW9uIChQcmlzbSkge1xuICAvLyBBbGxvdyBvbmx5IG9uZSBsaW5lIGJyZWFrXG4gIHZhciBpbm5lciA9IC8oPzpcXFxcLnxbXlxcXFxcXG5cXHJdfCg/OlxcbnxcXHJcXG4/KSg/IVtcXHJcXG5dKSkvLnNvdXJjZTtcbiAgLyoqXG4gICAqIFRoaXMgZnVuY3Rpb24gaXMgaW50ZW5kZWQgZm9yIHRoZSBjcmVhdGlvbiBvZiB0aGUgYm9sZCBvciBpdGFsaWMgcGF0dGVybi5cbiAgICpcbiAgICogVGhpcyBhbHNvIGFkZHMgYSBsb29rYmVoaW5kIGdyb3VwIHRvIHRoZSBnaXZlbiBwYXR0ZXJuIHRvIGVuc3VyZSB0aGF0IHRoZSBwYXR0ZXJuIGlzIG5vdCBiYWNrc2xhc2gtZXNjYXBlZC5cbiAgICpcbiAgICogX05vdGU6XyBLZWVwIGluIG1pbmQgdGhhdCB0aGlzIGFkZHMgYSBjYXB0dXJpbmcgZ3JvdXAuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXR0ZXJuXG4gICAqIEByZXR1cm5zIHtSZWdFeHB9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUlubGluZShwYXR0ZXJuKSB7XG4gICAgcGF0dGVybiA9IHBhdHRlcm4ucmVwbGFjZSgvPGlubmVyPi9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gaW5uZXI7XG4gICAgfSk7XG4gICAgcmV0dXJuIFJlZ0V4cCgvKCg/Ol58W15cXFxcXSkoPzpcXFxcezJ9KSopLy5zb3VyY2UgKyAnKD86JyArIHBhdHRlcm4gKyAnKScpO1xuICB9XG5cbiAgdmFyIHRhYmxlQ2VsbCA9IC8oPzpcXFxcLnxgYCg/OlteYFxcclxcbl18YCg/IWApKStgYHxgW15gXFxyXFxuXStgfFteXFxcXHxcXHJcXG5gXSkrLy5zb3VyY2U7XG4gIHZhciB0YWJsZVJvdyA9IC9cXHw/X18oPzpcXHxfXykrXFx8Pyg/Oig/OlxcbnxcXHJcXG4/KXwoPyFbXFxzXFxTXSkpLy5zb3VyY2UucmVwbGFjZSgvX18vZywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0YWJsZUNlbGw7XG4gIH0pO1xuICB2YXIgdGFibGVMaW5lID0gL1xcfD9bIFxcdF0qOj8tezMsfTo/WyBcXHRdKig/OlxcfFsgXFx0XSo6Py17Myx9Oj9bIFxcdF0qKStcXHw/KD86XFxufFxcclxcbj8pLy5zb3VyY2U7XG4gIFByaXNtLmxhbmd1YWdlcy5tYXJrZG93biA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ21hcmt1cCcsIHt9KTtcbiAgUHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnbWFya2Rvd24nLCAncHJvbG9nJywge1xuICAgICdmcm9udC1tYXR0ZXItYmxvY2snOiB7XG4gICAgICBwYXR0ZXJuOiAvKF4oPzpcXHMqW1xcclxcbl0pPyktLS0oPyEuKVtcXHNcXFNdKj9bXFxyXFxuXS0tLSg/IS4pLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgJ3B1bmN0dWF0aW9uJzogL14tLS18LS0tJC8sXG4gICAgICAgICdmcm9udC1tYXR0ZXInOiB7XG4gICAgICAgICAgcGF0dGVybjogL1xcUysoPzpcXHMrXFxTKykqLyxcbiAgICAgICAgICBhbGlhczogWyd5YW1sJywgJ2xhbmd1YWdlLXlhbWwnXSxcbiAgICAgICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy55YW1sXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgICdibG9ja3F1b3RlJzoge1xuICAgICAgLy8gPiAuLi5cbiAgICAgIHBhdHRlcm46IC9ePig/OltcXHQgXSo+KSovbSxcbiAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgfSxcbiAgICAndGFibGUnOiB7XG4gICAgICBwYXR0ZXJuOiBSZWdFeHAoJ14nICsgdGFibGVSb3cgKyB0YWJsZUxpbmUgKyAnKD86JyArIHRhYmxlUm93ICsgJykqJywgJ20nKSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAndGFibGUtZGF0YS1yb3dzJzoge1xuICAgICAgICAgIHBhdHRlcm46IFJlZ0V4cCgnXignICsgdGFibGVSb3cgKyB0YWJsZUxpbmUgKyAnKSg/OicgKyB0YWJsZVJvdyArICcpKiQnKSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgJ3RhYmxlLWRhdGEnOiB7XG4gICAgICAgICAgICAgIHBhdHRlcm46IFJlZ0V4cCh0YWJsZUNlbGwpLFxuICAgICAgICAgICAgICBpbnNpZGU6IFByaXNtLmxhbmd1YWdlcy5tYXJrZG93blxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICdwdW5jdHVhdGlvbic6IC9cXHwvXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAndGFibGUtbGluZSc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoJ14oJyArIHRhYmxlUm93ICsgJyknICsgdGFibGVMaW5lICsgJyQnKSxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgJ3B1bmN0dWF0aW9uJzogL1xcfHw6Py17Myx9Oj8vXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAndGFibGUtaGVhZGVyLXJvdyc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiBSZWdFeHAoJ14nICsgdGFibGVSb3cgKyAnJCcpLFxuICAgICAgICAgIGluc2lkZToge1xuICAgICAgICAgICAgJ3RhYmxlLWhlYWRlcic6IHtcbiAgICAgICAgICAgICAgcGF0dGVybjogUmVnRXhwKHRhYmxlQ2VsbCksXG4gICAgICAgICAgICAgIGFsaWFzOiAnaW1wb3J0YW50JyxcbiAgICAgICAgICAgICAgaW5zaWRlOiBQcmlzbS5sYW5ndWFnZXMubWFya2Rvd25cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAncHVuY3R1YXRpb24nOiAvXFx8L1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgJ2NvZGUnOiBbe1xuICAgICAgLy8gUHJlZml4ZWQgYnkgNCBzcGFjZXMgb3IgMSB0YWIgYW5kIHByZWNlZGVkIGJ5IGFuIGVtcHR5IGxpbmVcbiAgICAgIHBhdHRlcm46IC8oKD86XnxcXG4pWyBcXHRdKlxcbnwoPzpefFxcclxcbj8pWyBcXHRdKlxcclxcbj8pKD86IHs0fXxcXHQpLisoPzooPzpcXG58XFxyXFxuPykoPzogezR9fFxcdCkuKykqLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ2tleXdvcmQnXG4gICAgfSwge1xuICAgICAgLy8gYGBgb3B0aW9uYWwgbGFuZ3VhZ2VcbiAgICAgIC8vIGNvZGUgYmxvY2tcbiAgICAgIC8vIGBgYFxuICAgICAgcGF0dGVybjogL15gYGBbXFxzXFxTXSo/XmBgYCQvbSxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAnY29kZS1ibG9jayc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvXihgYGAuKig/OlxcbnxcXHJcXG4/KSlbXFxzXFxTXSs/KD89KD86XFxufFxcclxcbj8pXmBgYCQpL20sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICB9LFxuICAgICAgICAnY29kZS1sYW5ndWFnZSc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvXihgYGApLisvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgJ3B1bmN0dWF0aW9uJzogL2BgYC9cbiAgICAgIH1cbiAgICB9XSxcbiAgICAndGl0bGUnOiBbe1xuICAgICAgLy8gdGl0bGUgMVxuICAgICAgLy8gPT09PT09PVxuICAgICAgLy8gdGl0bGUgMlxuICAgICAgLy8gLS0tLS0tLVxuICAgICAgcGF0dGVybjogL1xcUy4qKD86XFxufFxcclxcbj8pKD86PT0rfC0tKykoPz1bIFxcdF0qJCkvbSxcbiAgICAgIGFsaWFzOiAnaW1wb3J0YW50JyxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBwdW5jdHVhdGlvbjogLz09KyR8LS0rJC9cbiAgICAgIH1cbiAgICB9LCB7XG4gICAgICAvLyAjIHRpdGxlIDFcbiAgICAgIC8vICMjIyMjIyB0aXRsZSA2XG4gICAgICBwYXR0ZXJuOiAvKF5cXHMqKSMuKy9tLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnaW1wb3J0YW50JyxcbiAgICAgIGluc2lkZToge1xuICAgICAgICBwdW5jdHVhdGlvbjogL14jK3wjKyQvXG4gICAgICB9XG4gICAgfV0sXG4gICAgJ2hyJzoge1xuICAgICAgLy8gKioqXG4gICAgICAvLyAtLS1cbiAgICAgIC8vICogKiAqXG4gICAgICAvLyAtLS0tLS0tLS0tLVxuICAgICAgcGF0dGVybjogLyheXFxzKikoWyotXSkoPzpbXFx0IF0qXFwyKXsyLH0oPz1cXHMqJCkvbSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgIH0sXG4gICAgJ2xpc3QnOiB7XG4gICAgICAvLyAqIGl0ZW1cbiAgICAgIC8vICsgaXRlbVxuICAgICAgLy8gLSBpdGVtXG4gICAgICAvLyAxLiBpdGVtXG4gICAgICBwYXR0ZXJuOiAvKF5cXHMqKSg/OlsqKy1dfFxcZCtcXC4pKD89W1xcdCBdLikvbSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ3B1bmN0dWF0aW9uJ1xuICAgIH0sXG4gICAgJ3VybC1yZWZlcmVuY2UnOiB7XG4gICAgICAvLyBbaWRdOiBodHRwOi8vZXhhbXBsZS5jb20gXCJPcHRpb25hbCB0aXRsZVwiXG4gICAgICAvLyBbaWRdOiBodHRwOi8vZXhhbXBsZS5jb20gJ09wdGlvbmFsIHRpdGxlJ1xuICAgICAgLy8gW2lkXTogaHR0cDovL2V4YW1wbGUuY29tIChPcHRpb25hbCB0aXRsZSlcbiAgICAgIC8vIFtpZF06IDxodHRwOi8vZXhhbXBsZS5jb20+IFwiT3B0aW9uYWwgdGl0bGVcIlxuICAgICAgcGF0dGVybjogLyE/XFxbW15cXF1dK1xcXTpbXFx0IF0rKD86XFxTK3w8KD86XFxcXC58W14+XFxcXF0pKz4pKD86W1xcdCBdKyg/OlwiKD86XFxcXC58W15cIlxcXFxdKSpcInwnKD86XFxcXC58W14nXFxcXF0pKid8XFwoKD86XFxcXC58W14pXFxcXF0pKlxcKSkpPy8sXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgJ3ZhcmlhYmxlJzoge1xuICAgICAgICAgIHBhdHRlcm46IC9eKCE/XFxbKVteXFxdXSsvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgJ3N0cmluZyc6IC8oPzpcIig/OlxcXFwufFteXCJcXFxcXSkqXCJ8Jyg/OlxcXFwufFteJ1xcXFxdKSonfFxcKCg/OlxcXFwufFteKVxcXFxdKSpcXCkpJC8sXG4gICAgICAgICdwdW5jdHVhdGlvbic6IC9eW1xcW1xcXSE6XXxbPD5dL1xuICAgICAgfSxcbiAgICAgIGFsaWFzOiAndXJsJ1xuICAgIH0sXG4gICAgJ2JvbGQnOiB7XG4gICAgICAvLyAqKnN0cm9uZyoqXG4gICAgICAvLyBfX3N0cm9uZ19fXG4gICAgICAvLyBhbGxvdyBvbmUgbmVzdGVkIGluc3RhbmNlIG9mIGl0YWxpYyB0ZXh0IHVzaW5nIHRoZSBzYW1lIGRlbGltaXRlclxuICAgICAgcGF0dGVybjogY3JlYXRlSW5saW5lKC9cXGJfXyg/Oig/IV8pPGlubmVyPnxfKD86KD8hXyk8aW5uZXI+KStfKStfX1xcYnxcXCpcXCooPzooPyFcXCopPGlubmVyPnxcXCooPzooPyFcXCopPGlubmVyPikrXFwqKStcXCpcXCovLnNvdXJjZSksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgIHBhdHRlcm46IC8oXi4uKVtcXHNcXFNdKyg/PS4uJCkvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiB7fSAvLyBzZWUgYmVsb3dcblxuICAgICAgICB9LFxuICAgICAgICAncHVuY3R1YXRpb24nOiAvXFwqXFwqfF9fL1xuICAgICAgfVxuICAgIH0sXG4gICAgJ2l0YWxpYyc6IHtcbiAgICAgIC8vICplbSpcbiAgICAgIC8vIF9lbV9cbiAgICAgIC8vIGFsbG93IG9uZSBuZXN0ZWQgaW5zdGFuY2Ugb2YgYm9sZCB0ZXh0IHVzaW5nIHRoZSBzYW1lIGRlbGltaXRlclxuICAgICAgcGF0dGVybjogY3JlYXRlSW5saW5lKC9cXGJfKD86KD8hXyk8aW5uZXI+fF9fKD86KD8hXyk8aW5uZXI+KStfXykrX1xcYnxcXCooPzooPyFcXCopPGlubmVyPnxcXCpcXCooPzooPyFcXCopPGlubmVyPikrXFwqXFwqKStcXCovLnNvdXJjZSksXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdjb250ZW50Jzoge1xuICAgICAgICAgIHBhdHRlcm46IC8oXi4pW1xcc1xcU10rKD89LiQpLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZToge30gLy8gc2VlIGJlbG93XG5cbiAgICAgICAgfSxcbiAgICAgICAgJ3B1bmN0dWF0aW9uJzogL1sqX10vXG4gICAgICB9XG4gICAgfSxcbiAgICAnc3RyaWtlJzoge1xuICAgICAgLy8gfn5zdHJpa2UgdGhyb3VnaH5+XG4gICAgICAvLyB+c3RyaWtlflxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlZ2V4cC9zdHJpY3RcbiAgICAgIHBhdHRlcm46IGNyZWF0ZUlubGluZSgvKH5+PykoPzooPyF+KTxpbm5lcj4pK1xcMi8uc291cmNlKSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgJ2NvbnRlbnQnOiB7XG4gICAgICAgICAgcGF0dGVybjogLyhefn4/KVtcXHNcXFNdKyg/PVxcMSQpLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgICAgIGluc2lkZToge30gLy8gc2VlIGJlbG93XG5cbiAgICAgICAgfSxcbiAgICAgICAgJ3B1bmN0dWF0aW9uJzogL35+Py9cbiAgICAgIH1cbiAgICB9LFxuICAgICdjb2RlLXNuaXBwZXQnOiB7XG4gICAgICAvLyBgY29kZWBcbiAgICAgIC8vIGBgY29kZWBgXG4gICAgICBwYXR0ZXJuOiAvKF58W15cXFxcYF0pKD86YGBbXmBcXHJcXG5dKyg/OmBbXmBcXHJcXG5dKykqYGAoPyFgKXxgW15gXFxyXFxuXStgKD8hYCkpLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBhbGlhczogWydjb2RlJywgJ2tleXdvcmQnXVxuICAgIH0sXG4gICAgJ3VybCc6IHtcbiAgICAgIC8vIFtleGFtcGxlXShodHRwOi8vZXhhbXBsZS5jb20gXCJPcHRpb25hbCB0aXRsZVwiKVxuICAgICAgLy8gW2V4YW1wbGVdW2lkXVxuICAgICAgLy8gW2V4YW1wbGVdIFtpZF1cbiAgICAgIHBhdHRlcm46IGNyZWF0ZUlubGluZSgvIT9cXFsoPzooPyFcXF0pPGlubmVyPikrXFxdKD86XFwoW15cXHMpXSsoPzpbXFx0IF0rXCIoPzpcXFxcLnxbXlwiXFxcXF0pKlwiKT9cXCl8WyBcXHRdP1xcWyg/Oig/IVxcXSk8aW5uZXI+KStcXF0pLy5zb3VyY2UpLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAnb3BlcmF0b3InOiAvXiEvLFxuICAgICAgICAnY29udGVudCc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvKF5cXFspW15cXF1dKyg/PVxcXSkvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgICAgaW5zaWRlOiB7fSAvLyBzZWUgYmVsb3dcblxuICAgICAgICB9LFxuICAgICAgICAndmFyaWFibGUnOiB7XG4gICAgICAgICAgcGF0dGVybjogLyheXFxdWyBcXHRdP1xcWylbXlxcXV0rKD89XFxdJCkvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgJ3VybCc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvKF5cXF1cXCgpW15cXHMpXSsvLFxuICAgICAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgJ3N0cmluZyc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvKF5bIFxcdF0rKVwiKD86XFxcXC58W15cIlxcXFxdKSpcIig/PVxcKSQpLyxcbiAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBbJ3VybCcsICdib2xkJywgJ2l0YWxpYycsICdzdHJpa2UnXS5mb3JFYWNoKGZ1bmN0aW9uICh0b2tlbikge1xuICAgIFsndXJsJywgJ2JvbGQnLCAnaXRhbGljJywgJ3N0cmlrZScsICdjb2RlLXNuaXBwZXQnXS5mb3JFYWNoKGZ1bmN0aW9uIChpbnNpZGUpIHtcbiAgICAgIGlmICh0b2tlbiAhPT0gaW5zaWRlKSB7XG4gICAgICAgIFByaXNtLmxhbmd1YWdlcy5tYXJrZG93blt0b2tlbl0uaW5zaWRlLmNvbnRlbnQuaW5zaWRlW2luc2lkZV0gPSBQcmlzbS5sYW5ndWFnZXMubWFya2Rvd25baW5zaWRlXTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG4gIFByaXNtLmhvb2tzLmFkZCgnYWZ0ZXItdG9rZW5pemUnLCBmdW5jdGlvbiAoZW52KSB7XG4gICAgaWYgKGVudi5sYW5ndWFnZSAhPT0gJ21hcmtkb3duJyAmJiBlbnYubGFuZ3VhZ2UgIT09ICdtZCcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB3YWxrVG9rZW5zKHRva2Vucykge1xuICAgICAgaWYgKCF0b2tlbnMgfHwgdHlwZW9mIHRva2VucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHRva2Vucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldO1xuXG4gICAgICAgIGlmICh0b2tlbi50eXBlICE9PSAnY29kZScpIHtcbiAgICAgICAgICB3YWxrVG9rZW5zKHRva2VuLmNvbnRlbnQpO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8qXG4gICAgICAgICAqIEFkZCB0aGUgY29ycmVjdCBgbGFuZ3VhZ2UteHh4eGAgY2xhc3MgdG8gdGhpcyBjb2RlIGJsb2NrLiBLZWVwIGluIG1pbmQgdGhhdCB0aGUgYGNvZGUtbGFuZ3VhZ2VgIHRva2VuXG4gICAgICAgICAqIGlzIG9wdGlvbmFsLiBCdXQgdGhlIGdyYW1tYXIgaXMgZGVmaW5lZCBzbyB0aGF0IHRoZXJlIGlzIG9ubHkgb25lIGNhc2Ugd2UgaGF2ZSB0byBoYW5kbGU6XG4gICAgICAgICAqXG4gICAgICAgICAqIHRva2VuLmNvbnRlbnQgPSBbXG4gICAgICAgICAqICAgICA8c3BhbiBjbGFzcz1cInB1bmN0dWF0aW9uXCI+YGBgPC9zcGFuPixcbiAgICAgICAgICogICAgIDxzcGFuIGNsYXNzPVwiY29kZS1sYW5ndWFnZVwiPnh4eHg8L3NwYW4+LFxuICAgICAgICAgKiAgICAgJ1xcbicsIC8vIGV4YWN0bHkgb25lIG5ldyBsaW5lcyAoXFxyIG9yIFxcbiBvciBcXHJcXG4pXG4gICAgICAgICAqICAgICA8c3BhbiBjbGFzcz1cImNvZGUtYmxvY2tcIj4uLi48L3NwYW4+LFxuICAgICAgICAgKiAgICAgJ1xcbicsIC8vIGV4YWN0bHkgb25lIG5ldyBsaW5lcyBhZ2FpblxuICAgICAgICAgKiAgICAgPHNwYW4gY2xhc3M9XCJwdW5jdHVhdGlvblwiPmBgYDwvc3Bhbj5cbiAgICAgICAgICogXTtcbiAgICAgICAgICovXG5cblxuICAgICAgICB2YXIgY29kZUxhbmcgPSB0b2tlbi5jb250ZW50WzFdO1xuICAgICAgICB2YXIgY29kZUJsb2NrID0gdG9rZW4uY29udGVudFszXTtcblxuICAgICAgICBpZiAoY29kZUxhbmcgJiYgY29kZUJsb2NrICYmIGNvZGVMYW5nLnR5cGUgPT09ICdjb2RlLWxhbmd1YWdlJyAmJiBjb2RlQmxvY2sudHlwZSA9PT0gJ2NvZGUtYmxvY2snICYmIHR5cGVvZiBjb2RlTGFuZy5jb250ZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIC8vIHRoaXMgbWlnaHQgYmUgYSBsYW5ndWFnZSB0aGF0IFByaXNtIGRvZXMgbm90IHN1cHBvcnRcbiAgICAgICAgICAvLyBkbyBzb21lIHJlcGxhY2VtZW50cyB0byBzdXBwb3J0IEMrKywgQyMsIGFuZCBGI1xuICAgICAgICAgIHZhciBsYW5nID0gY29kZUxhbmcuY29udGVudC5yZXBsYWNlKC9cXGIjL2csICdzaGFycCcpLnJlcGxhY2UoL1xcYlxcK1xcKy9nLCAncHAnKTsgLy8gb25seSB1c2UgdGhlIGZpcnN0IHdvcmRcblxuICAgICAgICAgIGxhbmcgPSAoL1thLXpdW1xcdy1dKi9pLmV4ZWMobGFuZykgfHwgWycnXSlbMF0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgICB2YXIgYWxpYXMgPSAnbGFuZ3VhZ2UtJyArIGxhbmc7IC8vIGFkZCBhbGlhc1xuXG4gICAgICAgICAgaWYgKCFjb2RlQmxvY2suYWxpYXMpIHtcbiAgICAgICAgICAgIGNvZGVCbG9jay5hbGlhcyA9IFthbGlhc107XG4gICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29kZUJsb2NrLmFsaWFzID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgY29kZUJsb2NrLmFsaWFzID0gW2NvZGVCbG9jay5hbGlhcywgYWxpYXNdO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb2RlQmxvY2suYWxpYXMucHVzaChhbGlhcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgd2Fsa1Rva2VucyhlbnYudG9rZW5zKTtcbiAgfSk7XG4gIFByaXNtLmhvb2tzLmFkZCgnd3JhcCcsIGZ1bmN0aW9uIChlbnYpIHtcbiAgICBpZiAoZW52LnR5cGUgIT09ICdjb2RlLWJsb2NrJykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBjb2RlTGFuZyA9ICcnO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBlbnYuY2xhc3Nlcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjbHMgPSBlbnYuY2xhc3Nlc1tpXTtcbiAgICAgIHZhciBtYXRjaCA9IC9sYW5ndWFnZS0oLispLy5leGVjKGNscyk7XG5cbiAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICBjb2RlTGFuZyA9IG1hdGNoWzFdO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZ3JhbW1hciA9IFByaXNtLmxhbmd1YWdlc1tjb2RlTGFuZ107XG5cbiAgICBpZiAoIWdyYW1tYXIpIHtcbiAgICAgIGlmIChjb2RlTGFuZyAmJiBjb2RlTGFuZyAhPT0gJ25vbmUnICYmIFByaXNtLnBsdWdpbnMuYXV0b2xvYWRlcikge1xuICAgICAgICB2YXIgaWQgPSAnbWQtJyArIG5ldyBEYXRlKCkudmFsdWVPZigpICsgJy0nICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMWUxNik7XG4gICAgICAgIGVudi5hdHRyaWJ1dGVzWydpZCddID0gaWQ7XG4gICAgICAgIFByaXNtLnBsdWdpbnMuYXV0b2xvYWRlci5sb2FkTGFuZ3VhZ2VzKGNvZGVMYW5nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgdmFyIGVsZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcblxuICAgICAgICAgIGlmIChlbGUpIHtcbiAgICAgICAgICAgIGVsZS5pbm5lckhUTUwgPSBQcmlzbS5oaWdobGlnaHQoZWxlLnRleHRDb250ZW50LCBQcmlzbS5sYW5ndWFnZXNbY29kZUxhbmddLCBjb2RlTGFuZyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZW52LmNvbnRlbnQgPSBQcmlzbS5oaWdobGlnaHQodGV4dENvbnRlbnQoZW52LmNvbnRlbnQpLCBncmFtbWFyLCBjb2RlTGFuZyk7XG4gICAgfVxuICB9KTtcbiAgdmFyIHRhZ1BhdHRlcm4gPSBSZWdFeHAoUHJpc20ubGFuZ3VhZ2VzLm1hcmt1cC50YWcucGF0dGVybi5zb3VyY2UsICdnaScpO1xuICAvKipcbiAgICogQSBsaXN0IG9mIGtub3duIGVudGl0eSBuYW1lcy5cbiAgICpcbiAgICogVGhpcyB3aWxsIGFsd2F5cyBiZSBpbmNvbXBsZXRlIHRvIHNhdmUgc3BhY2UuIFRoZSBjdXJyZW50IGxpc3QgaXMgdGhlIG9uZSB1c2VkIGJ5IGxvd2Rhc2gncyB1bmVzY2FwZSBmdW5jdGlvbi5cbiAgICpcbiAgICogQHNlZSB7QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2xvZGFzaC9sb2Rhc2gvYmxvYi8yZGEwMjRjM2I0Zjk5NDdhNDg1MTc2MzlkZTc1NjA0NTdjZDRlYzZjL3VuZXNjYXBlLmpzI0wyfVxuICAgKi9cblxuICB2YXIgS05PV05fRU5USVRZX05BTUVTID0ge1xuICAgICdhbXAnOiAnJicsXG4gICAgJ2x0JzogJzwnLFxuICAgICdndCc6ICc+JyxcbiAgICAncXVvdCc6ICdcIidcbiAgfTsgLy8gSUUgMTEgZG9lc24ndCBzdXBwb3J0IGBTdHJpbmcuZnJvbUNvZGVQb2ludGBcblxuICB2YXIgZnJvbUNvZGVQb2ludCA9IFN0cmluZy5mcm9tQ29kZVBvaW50IHx8IFN0cmluZy5mcm9tQ2hhckNvZGU7XG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB0ZXh0IGNvbnRlbnQgb2YgYSBnaXZlbiBIVE1MIHNvdXJjZSBjb2RlIHN0cmluZy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGh0bWxcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG5cbiAgZnVuY3Rpb24gdGV4dENvbnRlbnQoaHRtbCkge1xuICAgIC8vIHJlbW92ZSBhbGwgdGFnc1xuICAgIHZhciB0ZXh0ID0gaHRtbC5yZXBsYWNlKHRhZ1BhdHRlcm4sICcnKTsgLy8gZGVjb2RlIGtub3duIGVudGl0aWVzXG5cbiAgICB0ZXh0ID0gdGV4dC5yZXBsYWNlKC8mKFxcd3sxLDh9fCN4P1tcXGRhLWZdezEsOH0pOy9naSwgZnVuY3Rpb24gKG0sIGNvZGUpIHtcbiAgICAgIGNvZGUgPSBjb2RlLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGlmIChjb2RlWzBdID09PSAnIycpIHtcbiAgICAgICAgdmFyIHZhbHVlO1xuXG4gICAgICAgIGlmIChjb2RlWzFdID09PSAneCcpIHtcbiAgICAgICAgICB2YWx1ZSA9IHBhcnNlSW50KGNvZGUuc2xpY2UoMiksIDE2KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWx1ZSA9IE51bWJlcihjb2RlLnNsaWNlKDEpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmcm9tQ29kZVBvaW50KHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBrbm93biA9IEtOT1dOX0VOVElUWV9OQU1FU1tjb2RlXTtcblxuICAgICAgICBpZiAoa25vd24pIHtcbiAgICAgICAgICByZXR1cm4ga25vd247XG4gICAgICAgIH0gLy8gdW5hYmxlIHRvIGRlY29kZVxuXG5cbiAgICAgICAgcmV0dXJuIG07XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICBQcmlzbS5sYW5ndWFnZXMubWQgPSBQcmlzbS5sYW5ndWFnZXMubWFya2Rvd247XG59KShwcmlzbSk7XG4vKiBcInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1vYmplY3RpdmVjXCIgKi9cblxuXG5wcmlzbS5sYW5ndWFnZXMub2JqZWN0aXZlYyA9IHByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2MnLCB7XG4gICdzdHJpbmcnOiB7XG4gICAgcGF0dGVybjogL0A/XCIoPzpcXFxcKD86XFxyXFxufFtcXHNcXFNdKXxbXlwiXFxcXFxcclxcbl0pKlwiLyxcbiAgICBncmVlZHk6IHRydWVcbiAgfSxcbiAgJ2tleXdvcmQnOiAvXFxiKD86YXNtfGF1dG98YnJlYWt8Y2FzZXxjaGFyfGNvbnN0fGNvbnRpbnVlfGRlZmF1bHR8ZG98ZG91YmxlfGVsc2V8ZW51bXxleHRlcm58ZmxvYXR8Zm9yfGdvdG98aWZ8aW58aW5saW5lfGludHxsb25nfHJlZ2lzdGVyfHJldHVybnxzZWxmfHNob3J0fHNpZ25lZHxzaXplb2Z8c3RhdGljfHN0cnVjdHxzdXBlcnxzd2l0Y2h8dHlwZWRlZnx0eXBlb2Z8dW5pb258dW5zaWduZWR8dm9pZHx2b2xhdGlsZXx3aGlsZSlcXGJ8KD86QGludGVyZmFjZXxAZW5kfEBpbXBsZW1lbnRhdGlvbnxAcHJvdG9jb2x8QGNsYXNzfEBwdWJsaWN8QHByb3RlY3RlZHxAcHJpdmF0ZXxAcHJvcGVydHl8QHRyeXxAY2F0Y2h8QGZpbmFsbHl8QHRocm93fEBzeW50aGVzaXplfEBkeW5hbWljfEBzZWxlY3RvcilcXGIvLFxuICAnb3BlcmF0b3InOiAvLVstPl0/fFxcK1xcKz98IT0/fDw8Pz0/fD4+Pz0/fD09P3wmJj98XFx8XFx8P3xbfl4lPypcXC9AXS9cbn0pO1xuZGVsZXRlIHByaXNtLmxhbmd1YWdlcy5vYmplY3RpdmVjWydjbGFzcy1uYW1lJ107XG5wcmlzbS5sYW5ndWFnZXMub2JqYyA9IHByaXNtLmxhbmd1YWdlcy5vYmplY3RpdmVjO1xuLyogXCJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tb2NhbWxcIiAqL1xuLy8gaHR0cHM6Ly9vY2FtbC5vcmcvbWFudWFsL2xleC5odG1sXG5cbnByaXNtLmxhbmd1YWdlcy5vY2FtbCA9IHtcbiAgJ2NvbW1lbnQnOiB7XG4gICAgcGF0dGVybjogL1xcKFxcKltcXHNcXFNdKj9cXCpcXCkvLFxuICAgIGdyZWVkeTogdHJ1ZVxuICB9LFxuICAnY2hhcic6IHtcbiAgICBwYXR0ZXJuOiAvJyg/OlteXFxcXFxcclxcbiddfFxcXFwoPzoufFtveF0/WzAtOWEtZl17MSwzfSkpJy9pLFxuICAgIGdyZWVkeTogdHJ1ZVxuICB9LFxuICAnc3RyaW5nJzogW3tcbiAgICBwYXR0ZXJuOiAvXCIoPzpcXFxcKD86W1xcc1xcU118XFxyXFxuKXxbXlxcXFxcXHJcXG5cIl0pKlwiLyxcbiAgICBncmVlZHk6IHRydWVcbiAgfSwge1xuICAgIHBhdHRlcm46IC9cXHsoW2Etel9dKilcXHxbXFxzXFxTXSo/XFx8XFwxXFx9LyxcbiAgICBncmVlZHk6IHRydWVcbiAgfV0sXG4gICdudW1iZXInOiBbLy8gYmluYXJ5IGFuZCBvY3RhbFxuICAvXFxiKD86MGJbMDFdWzAxX10qfDBvWzAtN11bMC03X10qKVxcYi9pLCAvLyBoZXhhZGVjaW1hbFxuICAvXFxiMHhbYS1mMC05XVthLWYwLTlfXSooPzpcXC5bYS1mMC05X10qKT8oPzpwWystXT9cXGRbXFxkX10qKT8oPyFcXHcpL2ksIC8vIGRlY2ltYWxcbiAgL1xcYlxcZFtcXGRfXSooPzpcXC5bXFxkX10qKT8oPzplWystXT9cXGRbXFxkX10qKT8oPyFcXHcpL2ldLFxuICAnZGlyZWN0aXZlJzoge1xuICAgIHBhdHRlcm46IC9cXEIjXFx3Ky8sXG4gICAgYWxpYXM6ICdwcm9wZXJ0eSdcbiAgfSxcbiAgJ2xhYmVsJzoge1xuICAgIHBhdHRlcm46IC9cXEJ+XFx3Ky8sXG4gICAgYWxpYXM6ICdwcm9wZXJ0eSdcbiAgfSxcbiAgJ3R5cGUtdmFyaWFibGUnOiB7XG4gICAgcGF0dGVybjogL1xcQidcXHcrLyxcbiAgICBhbGlhczogJ2Z1bmN0aW9uJ1xuICB9LFxuICAndmFyaWFudCc6IHtcbiAgICBwYXR0ZXJuOiAvYFxcdysvLFxuICAgIGFsaWFzOiAnc3ltYm9sJ1xuICB9LFxuICAvLyBGb3IgdGhlIGxpc3Qgb2Yga2V5d29yZHMgYW5kIG9wZXJhdG9ycyxcbiAgLy8gc2VlOiBodHRwOi8vY2FtbC5pbnJpYS5mci9wdWIvZG9jcy9tYW51YWwtb2NhbWwvbGV4Lmh0bWwjc2VjODRcbiAgJ2tleXdvcmQnOiAvXFxiKD86YXN8YXNzZXJ0fGJlZ2lufGNsYXNzfGNvbnN0cmFpbnR8ZG98ZG9uZXxkb3dudG98ZWxzZXxlbmR8ZXhjZXB0aW9ufGV4dGVybmFsfGZvcnxmdW58ZnVuY3Rpb258ZnVuY3RvcnxpZnxpbnxpbmNsdWRlfGluaGVyaXR8aW5pdGlhbGl6ZXJ8bGF6eXxsZXR8bWF0Y2h8bWV0aG9kfG1vZHVsZXxtdXRhYmxlfG5ld3xub25yZWN8b2JqZWN0fG9mfG9wZW58cHJpdmF0ZXxyZWN8c2lnfHN0cnVjdHx0aGVufHRvfHRyeXx0eXBlfHZhbHx2YWx1ZXx2aXJ0dWFsfHdoZW58d2hlcmV8d2hpbGV8d2l0aClcXGIvLFxuICAnYm9vbGVhbic6IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi8sXG4gICdvcGVyYXRvci1saWtlLXB1bmN0dWF0aW9uJzoge1xuICAgIHBhdHRlcm46IC9cXFtbPD58XXxbPnxdXFxdfFxcezx8PlxcfS8sXG4gICAgYWxpYXM6ICdwdW5jdHVhdGlvbidcbiAgfSxcbiAgLy8gQ3VzdG9tIG9wZXJhdG9ycyBhcmUgYWxsb3dlZFxuICAnb3BlcmF0b3InOiAvXFwuWy5+XXw6Wz0+XXxbPTw+QF58JitcXC0qXFwvJCUhP35dWyEkJSYqK1xcLS5cXC86PD0+P0BefH5dKnxcXGIoPzphbmR8YXNyfGxhbmR8bG9yfGxzbHxsc3J8bHhvcnxtb2R8b3IpXFxiLyxcbiAgJ3B1bmN0dWF0aW9uJzogLzs7fDo6fFsoKXt9XFxbXFxdLiw6OyNdfFxcYl9cXGIvXG59O1xuLyogXCJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tcHl0aG9uXCIgKi9cblxucHJpc20ubGFuZ3VhZ2VzLnB5dGhvbiA9IHtcbiAgJ2NvbW1lbnQnOiB7XG4gICAgcGF0dGVybjogLyhefFteXFxcXF0pIy4qLyxcbiAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgIGdyZWVkeTogdHJ1ZVxuICB9LFxuICAnc3RyaW5nLWludGVycG9sYXRpb24nOiB7XG4gICAgcGF0dGVybjogLyg/OmZ8ZnJ8cmYpKD86KFwiXCJcInwnJycpW1xcc1xcU10qP1xcMXwoXCJ8JykoPzpcXFxcLnwoPyFcXDIpW15cXFxcXFxyXFxuXSkqXFwyKS9pLFxuICAgIGdyZWVkeTogdHJ1ZSxcbiAgICBpbnNpZGU6IHtcbiAgICAgICdpbnRlcnBvbGF0aW9uJzoge1xuICAgICAgICAvLyBcIntcIiA8ZXhwcmVzc2lvbj4gPG9wdGlvbmFsIFwiIXNcIiwgXCIhclwiLCBvciBcIiFhXCI+IDxvcHRpb25hbCBcIjpcIiBmb3JtYXQgc3BlY2lmaWVyPiBcIn1cIlxuICAgICAgICBwYXR0ZXJuOiAvKCg/Ol58W157XSkoPzpcXHtcXHspKilcXHsoPyFcXHspKD86W157fV18XFx7KD8hXFx7KSg/Oltee31dfFxceyg/IVxceykoPzpbXnt9XSkrXFx9KStcXH0pK1xcfS8sXG4gICAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICAgIGluc2lkZToge1xuICAgICAgICAgICdmb3JtYXQtc3BlYyc6IHtcbiAgICAgICAgICAgIHBhdHRlcm46IC8oOilbXjooKXt9XSsoPz1cXH0kKS8sXG4gICAgICAgICAgICBsb29rYmVoaW5kOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICAnY29udmVyc2lvbi1vcHRpb24nOiB7XG4gICAgICAgICAgICBwYXR0ZXJuOiAvIVtzcmFdKD89Wzp9XSQpLyxcbiAgICAgICAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgICAgICAgfSxcbiAgICAgICAgICByZXN0OiBudWxsXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICAnc3RyaW5nJzogL1tcXHNcXFNdKy9cbiAgICB9XG4gIH0sXG4gICd0cmlwbGUtcXVvdGVkLXN0cmluZyc6IHtcbiAgICBwYXR0ZXJuOiAvKD86W3J1Yl18YnJ8cmIpPyhcIlwiXCJ8JycnKVtcXHNcXFNdKj9cXDEvaSxcbiAgICBncmVlZHk6IHRydWUsXG4gICAgYWxpYXM6ICdzdHJpbmcnXG4gIH0sXG4gICdzdHJpbmcnOiB7XG4gICAgcGF0dGVybjogLyg/OltydWJdfGJyfHJiKT8oXCJ8JykoPzpcXFxcLnwoPyFcXDEpW15cXFxcXFxyXFxuXSkqXFwxL2ksXG4gICAgZ3JlZWR5OiB0cnVlXG4gIH0sXG4gICdmdW5jdGlvbic6IHtcbiAgICBwYXR0ZXJuOiAvKCg/Ol58XFxzKWRlZlsgXFx0XSspW2EtekEtWl9dXFx3Kig/PVxccypcXCgpL2csXG4gICAgbG9va2JlaGluZDogdHJ1ZVxuICB9LFxuICAnY2xhc3MtbmFtZSc6IHtcbiAgICBwYXR0ZXJuOiAvKFxcYmNsYXNzXFxzKylcXHcrL2ksXG4gICAgbG9va2JlaGluZDogdHJ1ZVxuICB9LFxuICAnZGVjb3JhdG9yJzoge1xuICAgIHBhdHRlcm46IC8oXltcXHQgXSopQFxcdysoPzpcXC5cXHcrKSovbSxcbiAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgIGFsaWFzOiBbJ2Fubm90YXRpb24nLCAncHVuY3R1YXRpb24nXSxcbiAgICBpbnNpZGU6IHtcbiAgICAgICdwdW5jdHVhdGlvbic6IC9cXC4vXG4gICAgfVxuICB9LFxuICAna2V5d29yZCc6IC9cXGIoPzpfKD89XFxzKjopfGFuZHxhc3xhc3NlcnR8YXN5bmN8YXdhaXR8YnJlYWt8Y2FzZXxjbGFzc3xjb250aW51ZXxkZWZ8ZGVsfGVsaWZ8ZWxzZXxleGNlcHR8ZXhlY3xmaW5hbGx5fGZvcnxmcm9tfGdsb2JhbHxpZnxpbXBvcnR8aW58aXN8bGFtYmRhfG1hdGNofG5vbmxvY2FsfG5vdHxvcnxwYXNzfHByaW50fHJhaXNlfHJldHVybnx0cnl8d2hpbGV8d2l0aHx5aWVsZClcXGIvLFxuICAnYnVpbHRpbic6IC9cXGIoPzpfX2ltcG9ydF9ffGFic3xhbGx8YW55fGFwcGx5fGFzY2lpfGJhc2VzdHJpbmd8YmlufGJvb2x8YnVmZmVyfGJ5dGVhcnJheXxieXRlc3xjYWxsYWJsZXxjaHJ8Y2xhc3NtZXRob2R8Y21wfGNvZXJjZXxjb21waWxlfGNvbXBsZXh8ZGVsYXR0cnxkaWN0fGRpcnxkaXZtb2R8ZW51bWVyYXRlfGV2YWx8ZXhlY2ZpbGV8ZmlsZXxmaWx0ZXJ8ZmxvYXR8Zm9ybWF0fGZyb3plbnNldHxnZXRhdHRyfGdsb2JhbHN8aGFzYXR0cnxoYXNofGhlbHB8aGV4fGlkfGlucHV0fGludHxpbnRlcm58aXNpbnN0YW5jZXxpc3N1YmNsYXNzfGl0ZXJ8bGVufGxpc3R8bG9jYWxzfGxvbmd8bWFwfG1heHxtZW1vcnl2aWV3fG1pbnxuZXh0fG9iamVjdHxvY3R8b3BlbnxvcmR8cG93fHByb3BlcnR5fHJhbmdlfHJhd19pbnB1dHxyZWR1Y2V8cmVsb2FkfHJlcHJ8cmV2ZXJzZWR8cm91bmR8c2V0fHNldGF0dHJ8c2xpY2V8c29ydGVkfHN0YXRpY21ldGhvZHxzdHJ8c3VtfHN1cGVyfHR1cGxlfHR5cGV8dW5pY2hyfHVuaWNvZGV8dmFyc3x4cmFuZ2V8emlwKVxcYi8sXG4gICdib29sZWFuJzogL1xcYig/OkZhbHNlfE5vbmV8VHJ1ZSlcXGIvLFxuICAnbnVtYmVyJzogL1xcYjAoPzpiKD86Xz9bMDFdKSt8byg/Ol8/WzAtN10pK3x4KD86Xz9bYS1mMC05XSkrKVxcYnwoPzpcXGJcXGQrKD86X1xcZCspKig/OlxcLig/OlxcZCsoPzpfXFxkKykqKT8pP3xcXEJcXC5cXGQrKD86X1xcZCspKikoPzplWystXT9cXGQrKD86X1xcZCspKik/aj8oPyFcXHcpL2ksXG4gICdvcGVyYXRvcic6IC9bLSslPV09P3whPXw6PXxcXCpcXCo/PT98XFwvXFwvPz0/fDxbPD0+XT98Pls9Pl0/fFsmfF5+XS8sXG4gICdwdW5jdHVhdGlvbic6IC9be31bXFxdOygpLC46XS9cbn07XG5wcmlzbS5sYW5ndWFnZXMucHl0aG9uWydzdHJpbmctaW50ZXJwb2xhdGlvbiddLmluc2lkZVsnaW50ZXJwb2xhdGlvbiddLmluc2lkZS5yZXN0ID0gcHJpc20ubGFuZ3VhZ2VzLnB5dGhvbjtcbnByaXNtLmxhbmd1YWdlcy5weSA9IHByaXNtLmxhbmd1YWdlcy5weXRob247XG4vKiBcInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1yZWFzb25cIiAqL1xuXG5wcmlzbS5sYW5ndWFnZXMucmVhc29uID0gcHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnY2xpa2UnLCB7XG4gICdzdHJpbmcnOiB7XG4gICAgcGF0dGVybjogL1wiKD86XFxcXCg/OlxcclxcbnxbXFxzXFxTXSl8W15cXFxcXFxyXFxuXCJdKSpcIi8sXG4gICAgZ3JlZWR5OiB0cnVlXG4gIH0sXG4gIC8vICdjbGFzcy1uYW1lJyBtdXN0IGJlIG1hdGNoZWQgKmFmdGVyKiAnY29uc3RydWN0b3InIGRlZmluZWQgYmVsb3dcbiAgJ2NsYXNzLW5hbWUnOiAvXFxiW0EtWl1cXHcqLyxcbiAgJ2tleXdvcmQnOiAvXFxiKD86YW5kfGFzfGFzc2VydHxiZWdpbnxjbGFzc3xjb25zdHJhaW50fGRvfGRvbmV8ZG93bnRvfGVsc2V8ZW5kfGV4Y2VwdGlvbnxleHRlcm5hbHxmb3J8ZnVufGZ1bmN0aW9ufGZ1bmN0b3J8aWZ8aW58aW5jbHVkZXxpbmhlcml0fGluaXRpYWxpemVyfGxhenl8bGV0fG1ldGhvZHxtb2R1bGV8bXV0YWJsZXxuZXd8bm9ucmVjfG9iamVjdHxvZnxvcGVufG9yfHByaXZhdGV8cmVjfHNpZ3xzdHJ1Y3R8c3dpdGNofHRoZW58dG98dHJ5fHR5cGV8dmFsfHZpcnR1YWx8d2hlbnx3aGlsZXx3aXRoKVxcYi8sXG4gICdvcGVyYXRvcic6IC9cXC57M318Ols6PV18XFx8PnwtPnw9KD86PT0/fD4pP3w8PT98Pj0/fFt8Xj8nIyF+YF18WytcXC0qXFwvXVxcLj98XFxiKD86YXNyfGxhbmR8bG9yfGxzbHxsc3J8bHhvcnxtb2QpXFxiL1xufSk7XG5wcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdyZWFzb24nLCAnY2xhc3MtbmFtZScsIHtcbiAgJ2NoYXInOiB7XG4gICAgcGF0dGVybjogLycoPzpcXFxceFtcXGRhLWZdezJ9fFxcXFxvWzAtM11bMC03XVswLTddfFxcXFxcXGR7M318XFxcXC58W14nXFxcXFxcclxcbl0pJy8sXG4gICAgZ3JlZWR5OiB0cnVlXG4gIH0sXG4gIC8vIE5lZ2F0aXZlIGxvb2stYWhlYWQgcHJldmVudHMgZnJvbSBtYXRjaGluZyB0aGluZ3MgbGlrZSBTdHJpbmcuY2FwaXRhbGl6ZVxuICAnY29uc3RydWN0b3InOiAvXFxiW0EtWl1cXHcqXFxiKD8hXFxzKlxcLikvLFxuICAnbGFiZWwnOiB7XG4gICAgcGF0dGVybjogL1xcYlthLXpdXFx3Kig/PTo6KS8sXG4gICAgYWxpYXM6ICdzeW1ib2wnXG4gIH1cbn0pOyAvLyBXZSBjYW4ndCBtYXRjaCBmdW5jdGlvbnMgcHJvcGVydHksIHNvIGxldCdzIG5vdCBldmVuIHRyeS5cblxuZGVsZXRlIHByaXNtLmxhbmd1YWdlcy5yZWFzb24uZnVuY3Rpb247XG4vKiBcInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1zYXNzXCIgKi9cblxuKGZ1bmN0aW9uIChQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMuc2FzcyA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2NzcycsIHtcbiAgICAvLyBTYXNzIGNvbW1lbnRzIGRvbid0IG5lZWQgdG8gYmUgY2xvc2VkLCBvbmx5IGluZGVudGVkXG4gICAgJ2NvbW1lbnQnOiB7XG4gICAgICBwYXR0ZXJuOiAvXihbIFxcdF0qKVxcL1tcXC8qXS4qKD86KD86XFxyP1xcbnxcXHIpXFwxWyBcXHRdLispKi9tLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ3Nhc3MnLCAnYXRydWxlJywge1xuICAgIC8vIFdlIHdhbnQgdG8gY29uc3VtZSB0aGUgd2hvbGUgbGluZVxuICAgICdhdHJ1bGUtbGluZSc6IHtcbiAgICAgIC8vIEluY2x1ZGVzIHN1cHBvcnQgZm9yID0gYW5kICsgc2hvcnRjdXRzXG4gICAgICBwYXR0ZXJuOiAvXig/OlsgXFx0XSopW0ArPV0uKy9tLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdhdHJ1bGUnOiAvKD86QFtcXHctXSt8Wys9XSkvXG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgZGVsZXRlIFByaXNtLmxhbmd1YWdlcy5zYXNzLmF0cnVsZTtcbiAgdmFyIHZhcmlhYmxlID0gL1xcJFstXFx3XSt8I1xce1xcJFstXFx3XStcXH0vO1xuICB2YXIgb3BlcmF0b3IgPSBbL1srKlxcLyVdfFs9IV09fDw9P3w+PT98XFxiKD86YW5kfG5vdHxvcilcXGIvLCB7XG4gICAgcGF0dGVybjogLyhcXHMpLSg/PVxccykvLFxuICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgfV07XG4gIFByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ3Nhc3MnLCAncHJvcGVydHknLCB7XG4gICAgLy8gV2Ugd2FudCB0byBjb25zdW1lIHRoZSB3aG9sZSBsaW5lXG4gICAgJ3ZhcmlhYmxlLWxpbmUnOiB7XG4gICAgICBwYXR0ZXJuOiAvXlsgXFx0XSpcXCQuKy9tLFxuICAgICAgZ3JlZWR5OiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdwdW5jdHVhdGlvbic6IC86LyxcbiAgICAgICAgJ3ZhcmlhYmxlJzogdmFyaWFibGUsXG4gICAgICAgICdvcGVyYXRvcic6IG9wZXJhdG9yXG4gICAgICB9XG4gICAgfSxcbiAgICAvLyBXZSB3YW50IHRvIGNvbnN1bWUgdGhlIHdob2xlIGxpbmVcbiAgICAncHJvcGVydHktbGluZSc6IHtcbiAgICAgIHBhdHRlcm46IC9eWyBcXHRdKig/OlteOlxcc10rICo6Lip8OlteOlxcc10uKikvbSxcbiAgICAgIGdyZWVkeTogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAncHJvcGVydHknOiBbL1teOlxcc10rKD89XFxzKjopLywge1xuICAgICAgICAgIHBhdHRlcm46IC8oOilbXjpcXHNdKy8sXG4gICAgICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgICAgICB9XSxcbiAgICAgICAgJ3B1bmN0dWF0aW9uJzogLzovLFxuICAgICAgICAndmFyaWFibGUnOiB2YXJpYWJsZSxcbiAgICAgICAgJ29wZXJhdG9yJzogb3BlcmF0b3IsXG4gICAgICAgICdpbXBvcnRhbnQnOiBQcmlzbS5sYW5ndWFnZXMuc2Fzcy5pbXBvcnRhbnRcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBkZWxldGUgUHJpc20ubGFuZ3VhZ2VzLnNhc3MucHJvcGVydHk7XG4gIGRlbGV0ZSBQcmlzbS5sYW5ndWFnZXMuc2Fzcy5pbXBvcnRhbnQ7IC8vIE5vdyB0aGF0IHdob2xlIGxpbmVzIGZvciBvdGhlciBwYXR0ZXJucyBhcmUgY29uc3VtZWQsXG4gIC8vIHdoYXQncyBsZWZ0IHNob3VsZCBiZSBzZWxlY3RvcnNcblxuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCdzYXNzJywgJ3B1bmN0dWF0aW9uJywge1xuICAgICdzZWxlY3Rvcic6IHtcbiAgICAgIHBhdHRlcm46IC9eKFsgXFx0XSopXFxTKD86LFteLFxcclxcbl0rfFteLFxcclxcbl0qKSg/OixbXixcXHJcXG5dKykqKD86LCg/Olxccj9cXG58XFxyKVxcMVsgXFx0XStcXFMoPzosW14sXFxyXFxuXSt8W14sXFxyXFxuXSopKD86LFteLFxcclxcbl0rKSopKi9tLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH1cbiAgfSk7XG59KShwcmlzbSk7XG4vKiBcInByaXNtanMvY29tcG9uZW50cy9wcmlzbS1zY3NzXCIgKi9cblxuXG5wcmlzbS5sYW5ndWFnZXMuc2NzcyA9IHByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2NzcycsIHtcbiAgJ2NvbW1lbnQnOiB7XG4gICAgcGF0dGVybjogLyhefFteXFxcXF0pKD86XFwvXFwqW1xcc1xcU10qP1xcKlxcL3xcXC9cXC8uKikvLFxuICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgfSxcbiAgJ2F0cnVsZSc6IHtcbiAgICBwYXR0ZXJuOiAvQFtcXHctXSg/OlxcKFteKCldK1xcKXxbXigpXFxzXXxcXHMrKD8hXFxzKSkqPyg/PVxccytbeztdKS8sXG4gICAgaW5zaWRlOiB7XG4gICAgICAncnVsZSc6IC9AW1xcdy1dKy8gLy8gU2VlIHJlc3QgYmVsb3dcblxuICAgIH1cbiAgfSxcbiAgLy8gdXJsLCBjb21wYXNzaWZpZWRcbiAgJ3VybCc6IC8oPzpbLWEtel0rLSk/dXJsKD89XFwoKS9pLFxuICAvLyBDU1Mgc2VsZWN0b3IgcmVnZXggaXMgbm90IGFwcHJvcHJpYXRlIGZvciBTYXNzXG4gIC8vIHNpbmNlIHRoZXJlIGNhbiBiZSBsb3QgbW9yZSB0aGluZ3MgKHZhciwgQCBkaXJlY3RpdmUsIG5lc3RpbmcuLilcbiAgLy8gYSBzZWxlY3RvciBtdXN0IHN0YXJ0IGF0IHRoZSBlbmQgb2YgYSBwcm9wZXJ0eSBvciBhZnRlciBhIGJyYWNlIChlbmQgb2Ygb3RoZXIgcnVsZXMgb3IgbmVzdGluZylcbiAgLy8gaXQgY2FuIGNvbnRhaW4gc29tZSBjaGFyYWN0ZXJzIHRoYXQgYXJlbid0IHVzZWQgZm9yIGRlZmluaW5nIHJ1bGVzIG9yIGVuZCBvZiBzZWxlY3RvciwgJiAocGFyZW50IHNlbGVjdG9yKSwgb3IgaW50ZXJwb2xhdGVkIHZhcmlhYmxlXG4gIC8vIHRoZSBlbmQgb2YgYSBzZWxlY3RvciBpcyBmb3VuZCB3aGVuIHRoZXJlIGlzIG5vIHJ1bGVzIGluIGl0ICgge30gb3Ige1xcc30pIG9yIGlmIHRoZXJlIGlzIGEgcHJvcGVydHkgKGJlY2F1c2UgYW4gaW50ZXJwb2xhdGVkIHZhclxuICAvLyBjYW4gXCJwYXNzXCIgYXMgYSBzZWxlY3Rvci0gZS5nOiBwcm9wZXIjeyRlcnR5fSlcbiAgLy8gdGhpcyBvbmUgd2FzIGhhcmQgdG8gZG8sIHNvIHBsZWFzZSBiZSBjYXJlZnVsIGlmIHlvdSBlZGl0IHRoaXMgb25lIDopXG4gICdzZWxlY3Rvcic6IHtcbiAgICAvLyBJbml0aWFsIGxvb2stYWhlYWQgaXMgdXNlZCB0byBwcmV2ZW50IG1hdGNoaW5nIG9mIGJsYW5rIHNlbGVjdG9yc1xuICAgIHBhdHRlcm46IC8oPz1cXFMpW15AO3t9KCldPyg/OlteQDt7fSgpXFxzXXxcXHMrKD8hXFxzKXwjXFx7XFwkWy1cXHddK1xcfSkrKD89XFxzKlxceyg/OlxcfXxcXHN8W159XVteOnt9XSpbOntdW159XSkpLyxcbiAgICBpbnNpZGU6IHtcbiAgICAgICdwYXJlbnQnOiB7XG4gICAgICAgIHBhdHRlcm46IC8mLyxcbiAgICAgICAgYWxpYXM6ICdpbXBvcnRhbnQnXG4gICAgICB9LFxuICAgICAgJ3BsYWNlaG9sZGVyJzogLyVbLVxcd10rLyxcbiAgICAgICd2YXJpYWJsZSc6IC9cXCRbLVxcd10rfCNcXHtcXCRbLVxcd10rXFx9L1xuICAgIH1cbiAgfSxcbiAgJ3Byb3BlcnR5Jzoge1xuICAgIHBhdHRlcm46IC8oPzpbLVxcd118XFwkWy1cXHddfCNcXHtcXCRbLVxcd10rXFx9KSsoPz1cXHMqOikvLFxuICAgIGluc2lkZToge1xuICAgICAgJ3ZhcmlhYmxlJzogL1xcJFstXFx3XSt8I1xce1xcJFstXFx3XStcXH0vXG4gICAgfVxuICB9XG59KTtcbnByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ3Njc3MnLCAnYXRydWxlJywge1xuICAna2V5d29yZCc6IFsvQCg/OmNvbnRlbnR8ZGVidWd8ZWFjaHxlbHNlKD86IGlmKT98ZXh0ZW5kfGZvcnxmb3J3YXJkfGZ1bmN0aW9ufGlmfGltcG9ydHxpbmNsdWRlfG1peGlufHJldHVybnx1c2V8d2Fybnx3aGlsZSlcXGIvaSwge1xuICAgIHBhdHRlcm46IC8oICkoPzpmcm9tfHRocm91Z2gpKD89ICkvLFxuICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgfV1cbn0pO1xucHJpc20ubGFuZ3VhZ2VzLmluc2VydEJlZm9yZSgnc2NzcycsICdpbXBvcnRhbnQnLCB7XG4gIC8vIHZhciBhbmQgaW50ZXJwb2xhdGVkIHZhcnNcbiAgJ3ZhcmlhYmxlJzogL1xcJFstXFx3XSt8I1xce1xcJFstXFx3XStcXH0vXG59KTtcbnByaXNtLmxhbmd1YWdlcy5pbnNlcnRCZWZvcmUoJ3Njc3MnLCAnZnVuY3Rpb24nLCB7XG4gICdtb2R1bGUtbW9kaWZpZXInOiB7XG4gICAgcGF0dGVybjogL1xcYig/OmFzfGhpZGV8c2hvd3x3aXRoKVxcYi9pLFxuICAgIGFsaWFzOiAna2V5d29yZCdcbiAgfSxcbiAgJ3BsYWNlaG9sZGVyJzoge1xuICAgIHBhdHRlcm46IC8lWy1cXHddKy8sXG4gICAgYWxpYXM6ICdzZWxlY3RvcidcbiAgfSxcbiAgJ3N0YXRlbWVudCc6IHtcbiAgICBwYXR0ZXJuOiAvXFxCISg/OmRlZmF1bHR8b3B0aW9uYWwpXFxiL2ksXG4gICAgYWxpYXM6ICdrZXl3b3JkJ1xuICB9LFxuICAnYm9vbGVhbic6IC9cXGIoPzpmYWxzZXx0cnVlKVxcYi8sXG4gICdudWxsJzoge1xuICAgIHBhdHRlcm46IC9cXGJudWxsXFxiLyxcbiAgICBhbGlhczogJ2tleXdvcmQnXG4gIH0sXG4gICdvcGVyYXRvcic6IHtcbiAgICBwYXR0ZXJuOiAvKFxccykoPzpbLSsqXFwvJV18Wz0hXT18PD0/fD49P3xhbmR8bm90fG9yKSg/PVxccykvLFxuICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgfVxufSk7XG5wcmlzbS5sYW5ndWFnZXMuc2Nzc1snYXRydWxlJ10uaW5zaWRlLnJlc3QgPSBwcmlzbS5sYW5ndWFnZXMuc2Nzcztcbi8qIFwicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLXNxbFwiICovXG5cbnByaXNtLmxhbmd1YWdlcy5zcWwgPSB7XG4gICdjb21tZW50Jzoge1xuICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKSg/OlxcL1xcKltcXHNcXFNdKj9cXCpcXC98KD86LS18XFwvXFwvfCMpLiopLyxcbiAgICBsb29rYmVoaW5kOiB0cnVlXG4gIH0sXG4gICd2YXJpYWJsZSc6IFt7XG4gICAgcGF0dGVybjogL0AoW1wiJ2BdKSg/OlxcXFxbXFxzXFxTXXwoPyFcXDEpW15cXFxcXSkrXFwxLyxcbiAgICBncmVlZHk6IHRydWVcbiAgfSwgL0BbXFx3LiRdKy9dLFxuICAnc3RyaW5nJzoge1xuICAgIHBhdHRlcm46IC8oXnxbXkBcXFxcXSkoXCJ8JykoPzpcXFxcW1xcc1xcU118KD8hXFwyKVteXFxcXF18XFwyXFwyKSpcXDIvLFxuICAgIGdyZWVkeTogdHJ1ZSxcbiAgICBsb29rYmVoaW5kOiB0cnVlXG4gIH0sXG4gICdpZGVudGlmaWVyJzoge1xuICAgIHBhdHRlcm46IC8oXnxbXkBcXFxcXSlgKD86XFxcXFtcXHNcXFNdfFteYFxcXFxdfGBgKSpgLyxcbiAgICBncmVlZHk6IHRydWUsXG4gICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICBpbnNpZGU6IHtcbiAgICAgICdwdW5jdHVhdGlvbic6IC9eYHxgJC9cbiAgICB9XG4gIH0sXG4gICdmdW5jdGlvbic6IC9cXGIoPzpBVkd8Q09VTlR8RklSU1R8Rk9STUFUfExBU1R8TENBU0V8TEVOfE1BWHxNSUR8TUlOfE1PRHxOT1d8Uk9VTkR8U1VNfFVDQVNFKSg/PVxccypcXCgpL2ksXG4gIC8vIFNob3VsZCB3ZSBoaWdobGlnaHQgdXNlciBkZWZpbmVkIGZ1bmN0aW9ucyB0b28/XG4gICdrZXl3b3JkJzogL1xcYig/OkFDVElPTnxBRER8QUZURVJ8QUxHT1JJVEhNfEFMTHxBTFRFUnxBTkFMWVpFfEFOWXxBUFBMWXxBU3xBU0N8QVVUSE9SSVpBVElPTnxBVVRPX0lOQ1JFTUVOVHxCQUNLVVB8QkRCfEJFR0lOfEJFUktFTEVZREJ8QklHSU5UfEJJTkFSWXxCSVR8QkxPQnxCT09MfEJPT0xFQU58QlJFQUt8QlJPV1NFfEJUUkVFfEJVTEt8Qll8Q0FMTHxDQVNDQURFRD98Q0FTRXxDSEFJTnxDSEFSKD86QUNURVJ8U0VUKT98Q0hFQ0soPzpQT0lOVCk/fENMT1NFfENMVVNURVJFRHxDT0FMRVNDRXxDT0xMQVRFfENPTFVNTlM/fENPTU1FTlR8Q09NTUlUKD86VEVEKT98Q09NUFVURXxDT05ORUNUfENPTlNJU1RFTlR8Q09OU1RSQUlOVHxDT05UQUlOUyg/OlRBQkxFKT98Q09OVElOVUV8Q09OVkVSVHxDUkVBVEV8Q1JPU1N8Q1VSUkVOVCg/Ol9EQVRFfF9USU1FfF9USU1FU1RBTVB8X1VTRVIpP3xDVVJTT1J8Q1lDTEV8REFUQSg/OkJBU0VTPyk/fERBVEUoPzpUSU1FKT98REFZfERCQ0N8REVBTExPQ0FURXxERUN8REVDSU1BTHxERUNMQVJFfERFRkFVTFR8REVGSU5FUnxERUxBWUVEfERFTEVURXxERUxJTUlURVJTP3xERU5ZfERFU0N8REVTQ1JJQkV8REVURVJNSU5JU1RJQ3xESVNBQkxFfERJU0NBUkR8RElTS3xESVNUSU5DVHxESVNUSU5DVFJPV3xESVNUUklCVVRFRHxET3xET1VCTEV8RFJPUHxEVU1NWXxEVU1QKD86RklMRSk/fERVUExJQ0FURXxFTFNFKD86SUYpP3xFTkFCTEV8RU5DTE9TRUR8RU5EfEVOR0lORXxFTlVNfEVSUkxWTHxFUlJPUlN8RVNDQVBFRD98RVhDRVBUfEVYRUMoPzpVVEUpP3xFWElTVFN8RVhJVHxFWFBMQUlOfEVYVEVOREVEfEZFVENIfEZJRUxEU3xGSUxFfEZJTExGQUNUT1J8RklSU1R8RklYRUR8RkxPQVR8Rk9MTE9XSU5HfEZPUig/OiBFQUNIIFJPVyk/fEZPUkNFfEZPUkVJR058RlJFRVRFWFQoPzpUQUJMRSk/fEZST018RlVMTHxGVU5DVElPTnxHRU9NRVRSWSg/OkNPTExFQ1RJT04pP3xHTE9CQUx8R09UT3xHUkFOVHxHUk9VUHxIQU5ETEVSfEhBU0h8SEFWSU5HfEhPTERMT0NLfEhPVVJ8SURFTlRJVFkoPzpDT0x8X0lOU0VSVCk/fElGfElHTk9SRXxJTVBPUlR8SU5ERVh8SU5GSUxFfElOTkVSfElOTk9EQnxJTk9VVHxJTlNFUlR8SU5UfElOVEVHRVJ8SU5URVJTRUNUfElOVEVSVkFMfElOVE98SU5WT0tFUnxJU09MQVRJT058SVRFUkFURXxKT0lOfEtFWVM/fEtJTEx8TEFOR1VBR0V8TEFTVHxMRUFWRXxMRUZUfExFVkVMfExJTUlUfExJTkVOT3xMSU5FU3xMSU5FU1RSSU5HfExPQUR8TE9DQUx8TE9DS3xMT05HKD86QkxPQnxURVhUKXxMT09QfE1BVENIKD86RUQpP3xNRURJVU0oPzpCTE9CfElOVHxURVhUKXxNRVJHRXxNSURETEVJTlR8TUlOVVRFfE1PREV8TU9ESUZJRVN8TU9ESUZZfE1PTlRIfE1VTFRJKD86TElORVNUUklOR3xQT0lOVHxQT0xZR09OKXxOQVRJT05BTHxOQVRVUkFMfE5DSEFSfE5FWFR8Tk98Tk9OQ0xVU1RFUkVEfE5VTExJRnxOVU1FUklDfE9GRj98T0ZGU0VUUz98T058T1BFTig/OkRBVEFTT1VSQ0V8UVVFUll8Uk9XU0VUKT98T1BUSU1JWkV8T1BUSU9OKD86QUxMWSk/fE9SREVSfE9VVCg/OkVSfEZJTEUpP3xPVkVSfFBBUlRJQUx8UEFSVElUSU9OfFBFUkNFTlR8UElWT1R8UExBTnxQT0lOVHxQT0xZR09OfFBSRUNFRElOR3xQUkVDSVNJT058UFJFUEFSRXxQUkVWfFBSSU1BUll8UFJJTlR8UFJJVklMRUdFU3xQUk9DKD86RURVUkUpP3xQVUJMSUN8UFVSR0V8UVVJQ0t8UkFJU0VSUk9SfFJFQURTP3xSRUFMfFJFQ09ORklHVVJFfFJFRkVSRU5DRVN8UkVMRUFTRXxSRU5BTUV8UkVQRUFUKD86QUJMRSk/fFJFUExBQ0V8UkVQTElDQVRJT058UkVRVUlSRXxSRVNJR05BTHxSRVNUT1JFfFJFU1RSSUNUfFJFVFVSTig/OklOR3xTKT98UkVWT0tFfFJJR0hUfFJPTExCQUNLfFJPVVRJTkV8Uk9XKD86Q09VTlR8R1VJRENPTHxTKT98UlRSRUV8UlVMRXxTQVZFKD86UE9JTlQpP3xTQ0hFTUF8U0VDT05EfFNFTEVDVHxTRVJJQUwoPzpJWkFCTEUpP3xTRVNTSU9OKD86X1VTRVIpP3xTRVQoPzpVU0VSKT98U0hBUkV8U0hPV3xTSFVURE9XTnxTSU1QTEV8U01BTExJTlR8U05BUFNIT1R8U09NRXxTT05BTUV8U1FMfFNUQVJUKD86SU5HKT98U1RBVElTVElDU3xTVEFUVVN8U1RSSVBFRHxTWVNURU1fVVNFUnxUQUJMRVM/fFRBQkxFU1BBQ0V8VEVNUCg/Ok9SQVJZfFRBQkxFKT98VEVSTUlOQVRFRHxURVhUKD86U0laRSk/fFRIRU58VElNRSg/OlNUQU1QKT98VElOWSg/OkJMT0J8SU5UfFRFWFQpfFRPUD98VFJBTig/OlNBQ1RJT05TPyk/fFRSSUdHRVJ8VFJVTkNBVEV8VFNFUVVBTHxUWVBFUz98VU5CT1VOREVEfFVOQ09NTUlUVEVEfFVOREVGSU5FRHxVTklPTnxVTklRVUV8VU5MT0NLfFVOUElWT1R8VU5TSUdORUR8VVBEQVRFKD86VEVYVCk/fFVTQUdFfFVTRXxVU0VSfFVTSU5HfFZBTFVFUz98VkFSKD86QklOQVJZfENIQVJ8Q0hBUkFDVEVSfFlJTkcpfFZJRVd8V0FJVEZPUnxXQVJOSU5HU3xXSEVOfFdIRVJFfFdISUxFfFdJVEgoPzogUk9MTFVQfElOKT98V09SS3xXUklURSg/OlRFWFQpP3xZRUFSKVxcYi9pLFxuICAnYm9vbGVhbic6IC9cXGIoPzpGQUxTRXxOVUxMfFRSVUUpXFxiL2ksXG4gICdudW1iZXInOiAvXFxiMHhbXFxkYS1mXStcXGJ8XFxiXFxkKyg/OlxcLlxcZCopP3xcXEJcXC5cXGQrXFxiL2ksXG4gICdvcGVyYXRvcic6IC9bLSsqXFwvPSVefl18JiY/fFxcfFxcfD98IT0/fDwoPzo9Pj98PHw+KT98Pls+PV0/fFxcYig/OkFORHxCRVRXRUVOfERJVnxJTElLRXxJTnxJU3xMSUtFfE5PVHxPUnxSRUdFWFB8UkxJS0V8U09VTkRTIExJS0V8WE9SKVxcYi9pLFxuICAncHVuY3R1YXRpb24nOiAvWztbXFxdKClgLC5dL1xufTtcbi8qIFwicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLXN0eWx1c1wiICovXG5cbihmdW5jdGlvbiAoUHJpc20pIHtcbiAgdmFyIHVuaXQgPSB7XG4gICAgcGF0dGVybjogLyhcXGJcXGQrKSg/OiV8W2Etel0rKS8sXG4gICAgbG9va2JlaGluZDogdHJ1ZVxuICB9OyAvLyAxMjMgLTEyMyAuMTIzIC0uMTIzIDEyLjMgLTEyLjNcblxuICB2YXIgbnVtYmVyID0ge1xuICAgIHBhdHRlcm46IC8oXnxbXlxcdy4tXSktPyg/OlxcZCsoPzpcXC5cXGQrKT98XFwuXFxkKykvLFxuICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgfTtcbiAgdmFyIGluc2lkZSA9IHtcbiAgICAnY29tbWVudCc6IHtcbiAgICAgIHBhdHRlcm46IC8oXnxbXlxcXFxdKSg/OlxcL1xcKltcXHNcXFNdKj9cXCpcXC98XFwvXFwvLiopLyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWVcbiAgICB9LFxuICAgICd1cmwnOiB7XG4gICAgICBwYXR0ZXJuOiAvXFxidXJsXFwoKFtcIiddPykuKj9cXDFcXCkvaSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgJ3N0cmluZyc6IHtcbiAgICAgIHBhdHRlcm46IC8oXCJ8JykoPzooPyFcXDEpW15cXFxcXFxyXFxuXXxcXFxcKD86XFxyXFxufFtcXHNcXFNdKSkqXFwxLyxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgJ2ludGVycG9sYXRpb24nOiBudWxsLFxuICAgIC8vIFNlZSBiZWxvd1xuICAgICdmdW5jJzogbnVsbCxcbiAgICAvLyBTZWUgYmVsb3dcbiAgICAnaW1wb3J0YW50JzogL1xcQiEoPzppbXBvcnRhbnR8b3B0aW9uYWwpXFxiL2ksXG4gICAgJ2tleXdvcmQnOiB7XG4gICAgICBwYXR0ZXJuOiAvKF58XFxzKykoPzooPzplbHNlfGZvcnxpZnxyZXR1cm58dW5sZXNzKSg/PVxcc3wkKXxAW1xcdy1dKykvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgJ2hleGNvZGUnOiAvI1tcXGRhLWZdezMsNn0vaSxcbiAgICAnY29sb3InOiBbL1xcYig/OkFsaWNlQmx1ZXxBbnRpcXVlV2hpdGV8QXF1YXxBcXVhbWFyaW5lfEF6dXJlfEJlaWdlfEJpc3F1ZXxCbGFja3xCbGFuY2hlZEFsbW9uZHxCbHVlfEJsdWVWaW9sZXR8QnJvd258QnVybHlXb29kfENhZGV0Qmx1ZXxDaGFydHJldXNlfENob2NvbGF0ZXxDb3JhbHxDb3JuZmxvd2VyQmx1ZXxDb3Juc2lsa3xDcmltc29ufEN5YW58RGFya0JsdWV8RGFya0N5YW58RGFya0dvbGRlblJvZHxEYXJrR3JbYWVdeXxEYXJrR3JlZW58RGFya0toYWtpfERhcmtNYWdlbnRhfERhcmtPbGl2ZUdyZWVufERhcmtPcmFuZ2V8RGFya09yY2hpZHxEYXJrUmVkfERhcmtTYWxtb258RGFya1NlYUdyZWVufERhcmtTbGF0ZUJsdWV8RGFya1NsYXRlR3JbYWVdeXxEYXJrVHVycXVvaXNlfERhcmtWaW9sZXR8RGVlcFBpbmt8RGVlcFNreUJsdWV8RGltR3JbYWVdeXxEb2RnZXJCbHVlfEZpcmVCcmlja3xGbG9yYWxXaGl0ZXxGb3Jlc3RHcmVlbnxGdWNoc2lhfEdhaW5zYm9yb3xHaG9zdFdoaXRlfEdvbGR8R29sZGVuUm9kfEdyW2FlXXl8R3JlZW58R3JlZW5ZZWxsb3d8SG9uZXlEZXd8SG90UGlua3xJbmRpYW5SZWR8SW5kaWdvfEl2b3J5fEtoYWtpfExhdmVuZGVyfExhdmVuZGVyQmx1c2h8TGF3bkdyZWVufExlbW9uQ2hpZmZvbnxMaWdodEJsdWV8TGlnaHRDb3JhbHxMaWdodEN5YW58TGlnaHRHb2xkZW5Sb2RZZWxsb3d8TGlnaHRHclthZV15fExpZ2h0R3JlZW58TGlnaHRQaW5rfExpZ2h0U2FsbW9ufExpZ2h0U2VhR3JlZW58TGlnaHRTa3lCbHVlfExpZ2h0U2xhdGVHclthZV15fExpZ2h0U3RlZWxCbHVlfExpZ2h0WWVsbG93fExpbWV8TGltZUdyZWVufExpbmVufE1hZ2VudGF8TWFyb29ufE1lZGl1bUFxdWFNYXJpbmV8TWVkaXVtQmx1ZXxNZWRpdW1PcmNoaWR8TWVkaXVtUHVycGxlfE1lZGl1bVNlYUdyZWVufE1lZGl1bVNsYXRlQmx1ZXxNZWRpdW1TcHJpbmdHcmVlbnxNZWRpdW1UdXJxdW9pc2V8TWVkaXVtVmlvbGV0UmVkfE1pZG5pZ2h0Qmx1ZXxNaW50Q3JlYW18TWlzdHlSb3NlfE1vY2Nhc2lufE5hdmFqb1doaXRlfE5hdnl8T2xkTGFjZXxPbGl2ZXxPbGl2ZURyYWJ8T3JhbmdlfE9yYW5nZVJlZHxPcmNoaWR8UGFsZUdvbGRlblJvZHxQYWxlR3JlZW58UGFsZVR1cnF1b2lzZXxQYWxlVmlvbGV0UmVkfFBhcGF5YVdoaXB8UGVhY2hQdWZmfFBlcnV8UGlua3xQbHVtfFBvd2RlckJsdWV8UHVycGxlfFJlZHxSb3N5QnJvd258Um95YWxCbHVlfFNhZGRsZUJyb3dufFNhbG1vbnxTYW5keUJyb3dufFNlYUdyZWVufFNlYVNoZWxsfFNpZW5uYXxTaWx2ZXJ8U2t5Qmx1ZXxTbGF0ZUJsdWV8U2xhdGVHclthZV15fFNub3d8U3ByaW5nR3JlZW58U3RlZWxCbHVlfFRhbnxUZWFsfFRoaXN0bGV8VG9tYXRvfFRyYW5zcGFyZW50fFR1cnF1b2lzZXxWaW9sZXR8V2hlYXR8V2hpdGV8V2hpdGVTbW9rZXxZZWxsb3d8WWVsbG93R3JlZW4pXFxiL2ksIHtcbiAgICAgIHBhdHRlcm46IC9cXGIoPzpoc2x8cmdiKVxcKFxccypcXGR7MSwzfVxccyosXFxzKlxcZHsxLDN9JT9cXHMqLFxccypcXGR7MSwzfSU/XFxzKlxcKVxcQnxcXGIoPzpoc2x8cmdiKWFcXChcXHMqXFxkezEsM31cXHMqLFxccypcXGR7MSwzfSU/XFxzKixcXHMqXFxkezEsM30lP1xccyosXFxzKig/OjB8MD9cXC5cXGQrfDEpXFxzKlxcKVxcQi9pLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICd1bml0JzogdW5pdCxcbiAgICAgICAgJ251bWJlcic6IG51bWJlcixcbiAgICAgICAgJ2Z1bmN0aW9uJzogL1tcXHctXSsoPz1cXCgpLyxcbiAgICAgICAgJ3B1bmN0dWF0aW9uJzogL1soKSxdL1xuICAgICAgfVxuICAgIH1dLFxuICAgICdlbnRpdHknOiAvXFxcXFtcXGRhLWZdezEsOH0vaSxcbiAgICAndW5pdCc6IHVuaXQsXG4gICAgJ2Jvb2xlYW4nOiAvXFxiKD86ZmFsc2V8dHJ1ZSlcXGIvLFxuICAgICdvcGVyYXRvcic6IFsvLyBXZSB3YW50IG5vbi13b3JkIGNoYXJzIGFyb3VuZCBcIi1cIiBiZWNhdXNlIGl0IGlzXG4gICAgLy8gYWNjZXB0ZWQgaW4gcHJvcGVydHkgbmFtZXMuXG4gICAgL358WyshXFwvJTw+Pz1dPT98Wy06XT18XFwqWyo9XT98XFwuezIsM318JiZ8XFx8XFx8fFxcQi1cXEJ8XFxiKD86YW5kfGlufGlzKD86IGF8IGRlZmluZWR8IG5vdHxudCk/fG5vdHxvcilcXGIvXSxcbiAgICAnbnVtYmVyJzogbnVtYmVyLFxuICAgICdwdW5jdHVhdGlvbic6IC9be30oKVxcW1xcXTs6LF0vXG4gIH07XG4gIGluc2lkZVsnaW50ZXJwb2xhdGlvbiddID0ge1xuICAgIHBhdHRlcm46IC9cXHtbXlxcclxcbn06XStcXH0vLFxuICAgIGFsaWFzOiAndmFyaWFibGUnLFxuICAgIGluc2lkZToge1xuICAgICAgJ2RlbGltaXRlcic6IHtcbiAgICAgICAgcGF0dGVybjogL15cXHt8XFx9JC8sXG4gICAgICAgIGFsaWFzOiAncHVuY3R1YXRpb24nXG4gICAgICB9LFxuICAgICAgcmVzdDogaW5zaWRlXG4gICAgfVxuICB9O1xuICBpbnNpZGVbJ2Z1bmMnXSA9IHtcbiAgICBwYXR0ZXJuOiAvW1xcdy1dK1xcKFteKV0qXFwpLiovLFxuICAgIGluc2lkZToge1xuICAgICAgJ2Z1bmN0aW9uJzogL15bXihdKy8sXG4gICAgICByZXN0OiBpbnNpZGVcbiAgICB9XG4gIH07XG4gIFByaXNtLmxhbmd1YWdlcy5zdHlsdXMgPSB7XG4gICAgJ2F0cnVsZS1kZWNsYXJhdGlvbic6IHtcbiAgICAgIHBhdHRlcm46IC8oXlsgXFx0XSopQC4rL20sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdhdHJ1bGUnOiAvXkBbXFx3LV0rLyxcbiAgICAgICAgcmVzdDogaW5zaWRlXG4gICAgICB9XG4gICAgfSxcbiAgICAndmFyaWFibGUtZGVjbGFyYXRpb24nOiB7XG4gICAgICBwYXR0ZXJuOiAvKF5bIFxcdF0qKVtcXHckLV0rXFxzKi4/PVsgXFx0XSooPzpcXHtbXnt9XSpcXH18XFxTLip8JCkvbSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgJ3ZhcmlhYmxlJzogL15cXFMrLyxcbiAgICAgICAgcmVzdDogaW5zaWRlXG4gICAgICB9XG4gICAgfSxcbiAgICAnc3RhdGVtZW50Jzoge1xuICAgICAgcGF0dGVybjogLyheWyBcXHRdKikoPzplbHNlfGZvcnxpZnxyZXR1cm58dW5sZXNzKVsgXFx0XS4rL20sXG4gICAgICBsb29rYmVoaW5kOiB0cnVlLFxuICAgICAgaW5zaWRlOiB7XG4gICAgICAgICdrZXl3b3JkJzogL15cXFMrLyxcbiAgICAgICAgcmVzdDogaW5zaWRlXG4gICAgICB9XG4gICAgfSxcbiAgICAvLyBBIHByb3BlcnR5L3ZhbHVlIHBhaXIgY2Fubm90IGVuZCB3aXRoIGEgY29tbWEgb3IgYSBicmFjZVxuICAgIC8vIEl0IGNhbm5vdCBoYXZlIGluZGVudGVkIGNvbnRlbnQgdW5sZXNzIGl0IGVuZGVkIHdpdGggYSBzZW1pY29sb25cbiAgICAncHJvcGVydHktZGVjbGFyYXRpb24nOiB7XG4gICAgICBwYXR0ZXJuOiAvKCg/Ol58XFx7KShbIFxcdF0qKSkoPzpbXFx3LV18XFx7W159XFxyXFxuXStcXH0pKyg/Olxccyo6XFxzKnxbIFxcdF0rKSg/IVxccylbXntcXHJcXG5dKig/Ojt8W157XFxyXFxuLF0kKD8hKD86XFxyP1xcbnxcXHIpKD86XFx7fFxcMlsgXFx0XSkpKS9tLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAncHJvcGVydHknOiB7XG4gICAgICAgICAgcGF0dGVybjogL15bXlxcczpdKy8sXG4gICAgICAgICAgaW5zaWRlOiB7XG4gICAgICAgICAgICAnaW50ZXJwb2xhdGlvbic6IGluc2lkZS5pbnRlcnBvbGF0aW9uXG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICByZXN0OiBpbnNpZGVcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIEEgc2VsZWN0b3IgY2FuIGNvbnRhaW4gcGFyZW50aGVzZXMgb25seSBhcyBwYXJ0IG9mIGEgcHNldWRvLWVsZW1lbnRcbiAgICAvLyBJdCBjYW4gc3BhbiBtdWx0aXBsZSBsaW5lcy5cbiAgICAvLyBJdCBtdXN0IGVuZCB3aXRoIGEgY29tbWEgb3IgYW4gYWNjb2xhZGUgb3IgaGF2ZSBpbmRlbnRlZCBjb250ZW50LlxuICAgICdzZWxlY3Rvcic6IHtcbiAgICAgIHBhdHRlcm46IC8oXlsgXFx0XSopKD86KD89XFxTKSg/Oltee31cXHJcXG46KCldfDo6P1tcXHctXSsoPzpcXChbXilcXHJcXG5dKlxcKXwoPyFbXFx3LV0pKXxcXHtbXn1cXHJcXG5dK1xcfSkrKSg/Oig/Olxccj9cXG58XFxyKSg/OlxcMSg/Oig/PVxcUykoPzpbXnt9XFxyXFxuOigpXXw6Oj9bXFx3LV0rKD86XFwoW14pXFxyXFxuXSpcXCl8KD8hW1xcdy1dKSl8XFx7W159XFxyXFxuXStcXH0pKykpKSooPzosJHxcXHt8KD89KD86XFxyP1xcbnxcXHIpKD86XFx7fFxcMVsgXFx0XSkpKS9tLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAnaW50ZXJwb2xhdGlvbic6IGluc2lkZS5pbnRlcnBvbGF0aW9uLFxuICAgICAgICAnY29tbWVudCc6IGluc2lkZS5jb21tZW50LFxuICAgICAgICAncHVuY3R1YXRpb24nOiAvW3t9LF0vXG4gICAgICB9XG4gICAgfSxcbiAgICAnZnVuYyc6IGluc2lkZS5mdW5jLFxuICAgICdzdHJpbmcnOiBpbnNpZGUuc3RyaW5nLFxuICAgICdjb21tZW50Jzoge1xuICAgICAgcGF0dGVybjogLyhefFteXFxcXF0pKD86XFwvXFwqW1xcc1xcU10qP1xcKlxcL3xcXC9cXC8uKikvLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGdyZWVkeTogdHJ1ZVxuICAgIH0sXG4gICAgJ2ludGVycG9sYXRpb24nOiBpbnNpZGUuaW50ZXJwb2xhdGlvbixcbiAgICAncHVuY3R1YXRpb24nOiAvW3t9KClcXFtcXF07Oi5dL1xuICB9O1xufSkocHJpc20pO1xuLyogXCJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20tdHlwZXNjcmlwdFwiICovXG5cblxuKGZ1bmN0aW9uIChQcmlzbSkge1xuICBQcmlzbS5sYW5ndWFnZXMudHlwZXNjcmlwdCA9IFByaXNtLmxhbmd1YWdlcy5leHRlbmQoJ2phdmFzY3JpcHQnLCB7XG4gICAgJ2NsYXNzLW5hbWUnOiB7XG4gICAgICBwYXR0ZXJuOiAvKFxcYig/OmNsYXNzfGV4dGVuZHN8aW1wbGVtZW50c3xpbnN0YW5jZW9mfGludGVyZmFjZXxuZXd8dHlwZSlcXHMrKSg/IWtleW9mXFxiKSg/IVxccylbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkZdKSooPzpcXHMqPCg/OltePD5dfDwoPzpbXjw+XXw8W148Pl0qPikqPikqPik/LyxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBpbnNpZGU6IG51bGwgLy8gc2VlIGJlbG93XG5cbiAgICB9LFxuICAgICdidWlsdGluJzogL1xcYig/OkFycmF5fEZ1bmN0aW9ufFByb21pc2V8YW55fGJvb2xlYW58Y29uc29sZXxuZXZlcnxudW1iZXJ8c3RyaW5nfHN5bWJvbHx1bmtub3duKVxcYi9cbiAgfSk7IC8vIFRoZSBrZXl3b3JkcyBUeXBlU2NyaXB0IGFkZHMgdG8gSmF2YVNjcmlwdFxuXG4gIFByaXNtLmxhbmd1YWdlcy50eXBlc2NyaXB0LmtleXdvcmQucHVzaCgvXFxiKD86YWJzdHJhY3R8ZGVjbGFyZXxpc3xrZXlvZnxyZWFkb25seXxyZXF1aXJlKVxcYi8sIC8vIGtleXdvcmRzIHRoYXQgaGF2ZSB0byBiZSBmb2xsb3dlZCBieSBhbiBpZGVudGlmaWVyXG4gIC9cXGIoPzphc3NlcnRzfGluZmVyfGludGVyZmFjZXxtb2R1bGV8bmFtZXNwYWNlfHR5cGUpXFxiKD89XFxzKig/Olt7XyRhLXpBLVpcXHhBMC1cXHVGRkZGXXwkKSkvLCAvLyBUaGlzIGlzIGZvciBgaW1wb3J0IHR5cGUgKiwge31gXG4gIC9cXGJ0eXBlXFxiKD89XFxzKig/OltcXHsqXXwkKSkvKTsgLy8gZG9lc24ndCB3b3JrIHdpdGggVFMgYmVjYXVzZSBUUyBpcyB0b28gY29tcGxleFxuXG4gIGRlbGV0ZSBQcmlzbS5sYW5ndWFnZXMudHlwZXNjcmlwdFsncGFyYW1ldGVyJ107XG4gIGRlbGV0ZSBQcmlzbS5sYW5ndWFnZXMudHlwZXNjcmlwdFsnbGl0ZXJhbC1wcm9wZXJ0eSddOyAvLyBhIHZlcnNpb24gb2YgdHlwZXNjcmlwdCBzcGVjaWZpY2FsbHkgZm9yIGhpZ2hsaWdodGluZyB0eXBlc1xuXG4gIHZhciB0eXBlSW5zaWRlID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgndHlwZXNjcmlwdCcsIHt9KTtcbiAgZGVsZXRlIHR5cGVJbnNpZGVbJ2NsYXNzLW5hbWUnXTtcbiAgUHJpc20ubGFuZ3VhZ2VzLnR5cGVzY3JpcHRbJ2NsYXNzLW5hbWUnXS5pbnNpZGUgPSB0eXBlSW5zaWRlO1xuICBQcmlzbS5sYW5ndWFnZXMuaW5zZXJ0QmVmb3JlKCd0eXBlc2NyaXB0JywgJ2Z1bmN0aW9uJywge1xuICAgICdkZWNvcmF0b3InOiB7XG4gICAgICBwYXR0ZXJuOiAvQFskXFx3XFx4QTAtXFx1RkZGRl0rLyxcbiAgICAgIGluc2lkZToge1xuICAgICAgICAnYXQnOiB7XG4gICAgICAgICAgcGF0dGVybjogL15ALyxcbiAgICAgICAgICBhbGlhczogJ29wZXJhdG9yJ1xuICAgICAgICB9LFxuICAgICAgICAnZnVuY3Rpb24nOiAvXltcXHNcXFNdKy9cbiAgICAgIH1cbiAgICB9LFxuICAgICdnZW5lcmljLWZ1bmN0aW9uJzoge1xuICAgICAgLy8gZS5nLiBmb288VCBleHRlbmRzIFwiYmFyXCIgfCBcImJhelwiPiggLi4uXG4gICAgICBwYXR0ZXJuOiAvIz8oPyFcXHMpW18kYS16QS1aXFx4QTAtXFx1RkZGRl0oPzooPyFcXHMpWyRcXHdcXHhBMC1cXHVGRkZGXSkqXFxzKjwoPzpbXjw+XXw8KD86W148Pl18PFtePD5dKj4pKj4pKj4oPz1cXHMqXFwoKS8sXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBpbnNpZGU6IHtcbiAgICAgICAgJ2Z1bmN0aW9uJzogL14jPyg/IVxccylbXyRhLXpBLVpcXHhBMC1cXHVGRkZGXSg/Oig/IVxccylbJFxcd1xceEEwLVxcdUZGRkZdKSovLFxuICAgICAgICAnZ2VuZXJpYyc6IHtcbiAgICAgICAgICBwYXR0ZXJuOiAvPFtcXHNcXFNdKy8sXG4gICAgICAgICAgLy8gZXZlcnl0aGluZyBhZnRlciB0aGUgZmlyc3QgPFxuICAgICAgICAgIGFsaWFzOiAnY2xhc3MtbmFtZScsXG4gICAgICAgICAgaW5zaWRlOiB0eXBlSW5zaWRlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuICBQcmlzbS5sYW5ndWFnZXMudHMgPSBQcmlzbS5sYW5ndWFnZXMudHlwZXNjcmlwdDtcbn0pKHByaXNtKTtcbi8qIFwicHJpc21qcy9jb21wb25lbnRzL3ByaXNtLXRzeFwiICovXG5cblxuKGZ1bmN0aW9uIChQcmlzbSkge1xuICB2YXIgdHlwZXNjcmlwdCA9IFByaXNtLnV0aWwuY2xvbmUoUHJpc20ubGFuZ3VhZ2VzLnR5cGVzY3JpcHQpO1xuICBQcmlzbS5sYW5ndWFnZXMudHN4ID0gUHJpc20ubGFuZ3VhZ2VzLmV4dGVuZCgnanN4JywgdHlwZXNjcmlwdCk7IC8vIGRvZXNuJ3Qgd29yayB3aXRoIFRTIGJlY2F1c2UgVFMgaXMgdG9vIGNvbXBsZXhcblxuICBkZWxldGUgUHJpc20ubGFuZ3VhZ2VzLnRzeFsncGFyYW1ldGVyJ107XG4gIGRlbGV0ZSBQcmlzbS5sYW5ndWFnZXMudHN4WydsaXRlcmFsLXByb3BlcnR5J107IC8vIFRoaXMgd2lsbCBwcmV2ZW50IGNvbGxpc2lvbnMgYmV0d2VlbiBUU1ggdGFncyBhbmQgVFMgZ2VuZXJpYyB0eXBlcy5cbiAgLy8gSWRlYSBieSBodHRwczovL2dpdGh1Yi5jb20va2FybGhvcmt5XG4gIC8vIERpc2N1c3Npb246IGh0dHBzOi8vZ2l0aHViLmNvbS9QcmlzbUpTL3ByaXNtL2lzc3Vlcy8yNTk0I2lzc3VlY29tbWVudC03MTA2NjY5MjhcblxuICB2YXIgdGFnID0gUHJpc20ubGFuZ3VhZ2VzLnRzeC50YWc7XG4gIHRhZy5wYXR0ZXJuID0gUmVnRXhwKC8oXnxbXlxcdyRdfCg/PTxcXC8pKS8uc291cmNlICsgJyg/OicgKyB0YWcucGF0dGVybi5zb3VyY2UgKyAnKScsIHRhZy5wYXR0ZXJuLmZsYWdzKTtcbiAgdGFnLmxvb2tiZWhpbmQgPSB0cnVlO1xufSkocHJpc20pO1xuLyogXCJwcmlzbWpzL2NvbXBvbmVudHMvcHJpc20td2FzbVwiICovXG5cblxucHJpc20ubGFuZ3VhZ2VzLndhc20gPSB7XG4gICdjb21tZW50JzogWy9cXCg7W1xcc1xcU10qPztcXCkvLCB7XG4gICAgcGF0dGVybjogLzs7LiovLFxuICAgIGdyZWVkeTogdHJ1ZVxuICB9XSxcbiAgJ3N0cmluZyc6IHtcbiAgICBwYXR0ZXJuOiAvXCIoPzpcXFxcW1xcc1xcU118W15cIlxcXFxdKSpcIi8sXG4gICAgZ3JlZWR5OiB0cnVlXG4gIH0sXG4gICdrZXl3b3JkJzogW3tcbiAgICBwYXR0ZXJuOiAvXFxiKD86YWxpZ258b2Zmc2V0KT0vLFxuICAgIGluc2lkZToge1xuICAgICAgJ29wZXJhdG9yJzogLz0vXG4gICAgfVxuICB9LCB7XG4gICAgcGF0dGVybjogL1xcYig/Oig/OmYzMnxmNjR8aTMyfGk2NCkoPzpcXC4oPzphYnN8YWRkfGFuZHxjZWlsfGNsenxjb25zdHxjb252ZXJ0X1tzdV1cXC9pKD86MzJ8NjQpfGNvcHlzaWdufGN0enxkZW1vdGVcXC9mNjR8ZGl2KD86X1tzdV0pP3xlcXo/fGV4dGVuZF9bc3VdXFwvaTMyfGZsb29yfGdlKD86X1tzdV0pP3xndCg/Ol9bc3VdKT98bGUoPzpfW3N1XSk/fGxvYWQoPzooPzo4fDE2fDMyKV9bc3VdKT98bHQoPzpfW3N1XSk/fG1heHxtaW58bXVsfG5lZz98bmVhcmVzdHxvcnxwb3BjbnR8cHJvbW90ZVxcL2YzMnxyZWludGVycHJldFxcL1tmaV0oPzozMnw2NCl8cmVtX1tzdV18cm90W2xyXXxzaGx8c2hyX1tzdV18c3FydHxzdG9yZSg/Ojh8MTZ8MzIpP3xzdWJ8dHJ1bmMoPzpfW3N1XVxcL2YoPzozMnw2NCkpP3x3cmFwXFwvaTY0fHhvcikpP3xtZW1vcnlcXC4oPzpncm93fHNpemUpKVxcYi8sXG4gICAgaW5zaWRlOiB7XG4gICAgICAncHVuY3R1YXRpb24nOiAvXFwuL1xuICAgIH1cbiAgfSwgL1xcYig/OmFueWZ1bmN8YmxvY2t8YnIoPzpfaWZ8X3RhYmxlKT98Y2FsbCg/Ol9pbmRpcmVjdCk/fGRhdGF8ZHJvcHxlbGVtfGVsc2V8ZW5kfGV4cG9ydHxmdW5jfGdldF8oPzpnbG9iYWx8bG9jYWwpfGdsb2JhbHxpZnxpbXBvcnR8bG9jYWx8bG9vcHxtZW1vcnl8bW9kdWxlfG11dHxub3B8b2Zmc2V0fHBhcmFtfHJlc3VsdHxyZXR1cm58c2VsZWN0fHNldF8oPzpnbG9iYWx8bG9jYWwpfHN0YXJ0fHRhYmxlfHRlZV9sb2NhbHx0aGVufHR5cGV8dW5yZWFjaGFibGUpXFxiL10sXG4gICd2YXJpYWJsZSc6IC9cXCRbXFx3ISMkJSYnKitcXC0uLzo8PT4/QFxcXFxeYHx+XSsvLFxuICAnbnVtYmVyJzogL1srLV0/XFxiKD86XFxkKD86Xz9cXGQpKig/OlxcLlxcZCg/Ol8/XFxkKSopPyg/OltlRV1bKy1dP1xcZCg/Ol8/XFxkKSopP3wweFtcXGRhLWZBLUZdKD86Xz9bXFxkYS1mQS1GXSkqKD86XFwuW1xcZGEtZkEtRl0oPzpfP1tcXGRhLWZBLURdKSopPyg/OltwUF1bKy1dP1xcZCg/Ol8/XFxkKSopPylcXGJ8XFxiaW5mXFxifFxcYm5hbig/OjoweFtcXGRhLWZBLUZdKD86Xz9bXFxkYS1mQS1EXSkqKT9cXGIvLFxuICAncHVuY3R1YXRpb24nOiAvWygpXS9cbn07XG4vKiBcInByaXNtanMvY29tcG9uZW50cy9wcmlzbS15YW1sXCIgKi9cblxuKGZ1bmN0aW9uIChQcmlzbSkge1xuICAvLyBodHRwczovL3lhbWwub3JnL3NwZWMvMS4yL3NwZWMuaHRtbCNjLW5zLWFuY2hvci1wcm9wZXJ0eVxuICAvLyBodHRwczovL3lhbWwub3JnL3NwZWMvMS4yL3NwZWMuaHRtbCNjLW5zLWFsaWFzLW5vZGVcbiAgdmFyIGFuY2hvck9yQWxpYXMgPSAvWyomXVteXFxzW1xcXXt9LF0rLzsgLy8gaHR0cHM6Ly95YW1sLm9yZy9zcGVjLzEuMi9zcGVjLmh0bWwjYy1ucy10YWctcHJvcGVydHlcblxuICB2YXIgdGFnID0gLyEoPzo8W1xcd1xcLSUjOy8/OkAmPSskLC4hfionKClbXFxdXSs+fCg/OlthLXpBLVpcXGQtXSohKT9bXFx3XFwtJSM7Lz86QCY9KyQufionKCldKyk/LzsgLy8gaHR0cHM6Ly95YW1sLm9yZy9zcGVjLzEuMi9zcGVjLmh0bWwjYy1ucy1wcm9wZXJ0aWVzKG4sYylcblxuICB2YXIgcHJvcGVydGllcyA9ICcoPzonICsgdGFnLnNvdXJjZSArICcoPzpbIFxcdF0rJyArIGFuY2hvck9yQWxpYXMuc291cmNlICsgJyk/fCcgKyBhbmNob3JPckFsaWFzLnNvdXJjZSArICcoPzpbIFxcdF0rJyArIHRhZy5zb3VyY2UgKyAnKT8pJzsgLy8gaHR0cHM6Ly95YW1sLm9yZy9zcGVjLzEuMi9zcGVjLmh0bWwjbnMtcGxhaW4obixjKVxuICAvLyBUaGlzIGlzIGEgc2ltcGxpZmllZCB2ZXJzaW9uIHRoYXQgZG9lc24ndCBzdXBwb3J0IFwiI1wiIGFuZCBtdWx0aWxpbmUga2V5c1xuICAvLyBBbGwgdGhlc2UgbG9uZyBzY2FycnkgY2hhcmFjdGVyIGNsYXNzZXMgYXJlIHNpbXBsaWZpZWQgdmVyc2lvbnMgb2YgWUFNTCdzIGNoYXJhY3RlcnNcblxuICB2YXIgcGxhaW5LZXkgPSAvKD86W15cXHNcXHgwMC1cXHgwOFxceDBlLVxceDFmIVwiIyUmJyosXFwtOj4/QFtcXF1ge3x9XFx4N2YtXFx4ODRcXHg4Ni1cXHg5ZlxcdWQ4MDAtXFx1ZGZmZlxcdWZmZmVcXHVmZmZmXXxbPzotXTxQTEFJTj4pKD86WyBcXHRdKig/Oig/IVsjOl0pPFBMQUlOPnw6PFBMQUlOPikpKi8uc291cmNlLnJlcGxhY2UoLzxQTEFJTj4vZywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAvW15cXHNcXHgwMC1cXHgwOFxceDBlLVxceDFmLFtcXF17fVxceDdmLVxceDg0XFx4ODYtXFx4OWZcXHVkODAwLVxcdWRmZmZcXHVmZmZlXFx1ZmZmZl0vLnNvdXJjZTtcbiAgfSk7XG4gIHZhciBzdHJpbmcgPSAvXCIoPzpbXlwiXFxcXFxcclxcbl18XFxcXC4pKlwifCcoPzpbXidcXFxcXFxyXFxuXXxcXFxcLikqJy8uc291cmNlO1xuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHZhbHVlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZmxhZ3NdXG4gICAqIEByZXR1cm5zIHtSZWdFeHB9XG4gICAqL1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZVZhbHVlUGF0dGVybih2YWx1ZSwgZmxhZ3MpIHtcbiAgICBmbGFncyA9IChmbGFncyB8fCAnJykucmVwbGFjZSgvbS9nLCAnJykgKyAnbSc7IC8vIGFkZCBtIGZsYWdcblxuICAgIHZhciBwYXR0ZXJuID0gLyhbOlxcLSxbe11cXHMqKD86XFxzPDxwcm9wPj5bIFxcdF0rKT8pKD86PDx2YWx1ZT4+KSg/PVsgXFx0XSooPzokfCx8XFxdfFxcfXwoPzpbXFxyXFxuXVxccyopPyMpKS8uc291cmNlLnJlcGxhY2UoLzw8cHJvcD4+L2csIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBwcm9wZXJ0aWVzO1xuICAgIH0pLnJlcGxhY2UoLzw8dmFsdWU+Pi9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIFJlZ0V4cChwYXR0ZXJuLCBmbGFncyk7XG4gIH1cblxuICBQcmlzbS5sYW5ndWFnZXMueWFtbCA9IHtcbiAgICAnc2NhbGFyJzoge1xuICAgICAgcGF0dGVybjogUmVnRXhwKC8oW1xcLTpdXFxzKig/Olxcczw8cHJvcD4+WyBcXHRdKyk/W3w+XSlbIFxcdF0qKD86KCg/Olxccj9cXG58XFxyKVsgXFx0XSspXFxTW15cXHJcXG5dKig/OlxcMlteXFxyXFxuXSspKikvLnNvdXJjZS5yZXBsYWNlKC88PHByb3A+Pi9nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBwcm9wZXJ0aWVzO1xuICAgICAgfSkpLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnc3RyaW5nJ1xuICAgIH0sXG4gICAgJ2NvbW1lbnQnOiAvIy4qLyxcbiAgICAna2V5Jzoge1xuICAgICAgcGF0dGVybjogUmVnRXhwKC8oKD86XnxbOlxcLSxbe1xcclxcbj9dKVsgXFx0XSooPzo8PHByb3A+PlsgXFx0XSspPyk8PGtleT4+KD89XFxzKjpcXHMpLy5zb3VyY2UucmVwbGFjZSgvPDxwcm9wPj4vZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gcHJvcGVydGllcztcbiAgICAgIH0pLnJlcGxhY2UoLzw8a2V5Pj4vZywgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJyg/OicgKyBwbGFpbktleSArICd8JyArIHN0cmluZyArICcpJztcbiAgICAgIH0pKSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWUsXG4gICAgICBhbGlhczogJ2F0cnVsZSdcbiAgICB9LFxuICAgICdkaXJlY3RpdmUnOiB7XG4gICAgICBwYXR0ZXJuOiAvKF5bIFxcdF0qKSUuKy9tLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnaW1wb3J0YW50J1xuICAgIH0sXG4gICAgJ2RhdGV0aW1lJzoge1xuICAgICAgcGF0dGVybjogY3JlYXRlVmFsdWVQYXR0ZXJuKC9cXGR7NH0tXFxkXFxkPy1cXGRcXGQ/KD86W3RUXXxbIFxcdF0rKVxcZFxcZD86XFxkezJ9OlxcZHsyfSg/OlxcLlxcZCopPyg/OlsgXFx0XSooPzpafFstK11cXGRcXGQ/KD86OlxcZHsyfSk/KSk/fFxcZHs0fS1cXGR7Mn0tXFxkezJ9fFxcZFxcZD86XFxkezJ9KD86OlxcZHsyfSg/OlxcLlxcZCopPyk/Ly5zb3VyY2UpLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZSxcbiAgICAgIGFsaWFzOiAnbnVtYmVyJ1xuICAgIH0sXG4gICAgJ2Jvb2xlYW4nOiB7XG4gICAgICBwYXR0ZXJuOiBjcmVhdGVWYWx1ZVBhdHRlcm4oL2ZhbHNlfHRydWUvLnNvdXJjZSwgJ2knKSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ2ltcG9ydGFudCdcbiAgICB9LFxuICAgICdudWxsJzoge1xuICAgICAgcGF0dGVybjogY3JlYXRlVmFsdWVQYXR0ZXJuKC9udWxsfH4vLnNvdXJjZSwgJ2knKSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBhbGlhczogJ2ltcG9ydGFudCdcbiAgICB9LFxuICAgICdzdHJpbmcnOiB7XG4gICAgICBwYXR0ZXJuOiBjcmVhdGVWYWx1ZVBhdHRlcm4oc3RyaW5nKSxcbiAgICAgIGxvb2tiZWhpbmQ6IHRydWUsXG4gICAgICBncmVlZHk6IHRydWVcbiAgICB9LFxuICAgICdudW1iZXInOiB7XG4gICAgICBwYXR0ZXJuOiBjcmVhdGVWYWx1ZVBhdHRlcm4oL1srLV0/KD86MHhbXFxkYS1mXSt8MG9bMC03XSt8KD86XFxkKyg/OlxcLlxcZCopP3xcXC5cXGQrKSg/OmVbKy1dP1xcZCspP3xcXC5pbmZ8XFwubmFuKS8uc291cmNlLCAnaScpLFxuICAgICAgbG9va2JlaGluZDogdHJ1ZVxuICAgIH0sXG4gICAgJ3RhZyc6IHRhZyxcbiAgICAnaW1wb3J0YW50JzogYW5jaG9yT3JBbGlhcyxcbiAgICAncHVuY3R1YXRpb24nOiAvLS0tfFs6W1xcXXt9XFwtLHw+P118XFwuXFwuXFwuL1xuICB9O1xuICBQcmlzbS5sYW5ndWFnZXMueW1sID0gUHJpc20ubGFuZ3VhZ2VzLnlhbWw7XG59KShwcmlzbSk7XG5cbmV4cG9ydCBkZWZhdWx0IHByaXNtO1xuIiwiaW1wb3J0IHByaXNtIGZyb20gJy4uL3ByaXNtL2luZGV4LmpzJztcbmV4cG9ydCB7IGRlZmF1bHQgYXMgUHJpc20gfSBmcm9tICcuLi9wcmlzbS9pbmRleC5qcyc7XG5pbXBvcnQgdGhlbWUgZnJvbSAnLi4vdGhlbWVzL2R1b3RvbmVEYXJrJztcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcblxudmFyIGRlZmF1bHRQcm9wcyA9IHtcbiAgLy8gJEZsb3dGaXhNZVxuICBQcmlzbTogcHJpc20sXG4gIHRoZW1lOiB0aGVtZVxufTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5IGluIG9iaikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqW2tleV0gPSB2YWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbnZhciBuZXdsaW5lUmUgPSAvXFxyXFxufFxccnxcXG4vOyAvLyBFbXB0eSBsaW5lcyBuZWVkIHRvIGNvbnRhaW4gYSBzaW5nbGUgZW1wdHkgdG9rZW4sIGRlbm90ZWQgd2l0aCB7IGVtcHR5OiB0cnVlIH1cblxudmFyIG5vcm1hbGl6ZUVtcHR5TGluZXMgPSBmdW5jdGlvbiAobGluZSkge1xuICBpZiAobGluZS5sZW5ndGggPT09IDApIHtcbiAgICBsaW5lLnB1c2goe1xuICAgICAgdHlwZXM6IFtcInBsYWluXCJdLFxuICAgICAgY29udGVudDogXCJcXG5cIixcbiAgICAgIGVtcHR5OiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSBpZiAobGluZS5sZW5ndGggPT09IDEgJiYgbGluZVswXS5jb250ZW50ID09PSBcIlwiKSB7XG4gICAgbGluZVswXS5jb250ZW50ID0gXCJcXG5cIjtcbiAgICBsaW5lWzBdLmVtcHR5ID0gdHJ1ZTtcbiAgfVxufTtcblxudmFyIGFwcGVuZFR5cGVzID0gZnVuY3Rpb24gKHR5cGVzLCBhZGQpIHtcbiAgdmFyIHR5cGVzU2l6ZSA9IHR5cGVzLmxlbmd0aDtcblxuICBpZiAodHlwZXNTaXplID4gMCAmJiB0eXBlc1t0eXBlc1NpemUgLSAxXSA9PT0gYWRkKSB7XG4gICAgcmV0dXJuIHR5cGVzO1xuICB9XG5cbiAgcmV0dXJuIHR5cGVzLmNvbmNhdChhZGQpO1xufTsgLy8gVGFrZXMgYW4gYXJyYXkgb2YgUHJpc20ncyB0b2tlbnMgYW5kIGdyb3VwcyB0aGVtIGJ5IGxpbmUsIHR1cm5pbmcgcGxhaW5cbi8vIHN0cmluZ3MgaW50byB0b2tlbnMgYXMgd2VsbC4gVG9rZW5zIGNhbiBiZWNvbWUgcmVjdXJzaXZlIGluIHNvbWUgY2FzZXMsXG4vLyB3aGljaCBtZWFucyB0aGF0IHRoZWlyIHR5cGVzIGFyZSBjb25jYXRlbmF0ZWQuIFBsYWluLXN0cmluZyB0b2tlbnMgaG93ZXZlclxuLy8gYXJlIGFsd2F5cyBvZiB0eXBlIFwicGxhaW5cIi5cbi8vIFRoaXMgaXMgbm90IHJlY3Vyc2l2ZSB0byBhdm9pZCBleGNlZWRpbmcgdGhlIGNhbGwtc3RhY2sgbGltaXQsIHNpbmNlIGl0J3MgdW5jbGVhclxuLy8gaG93IG5lc3RlZCBQcmlzbSdzIHRva2VucyBjYW4gYmVjb21lXG5cblxudmFyIG5vcm1hbGl6ZVRva2VucyA9IGZ1bmN0aW9uICh0b2tlbnMpIHtcbiAgdmFyIHR5cGVBcnJTdGFjayA9IFtbXV07XG4gIHZhciB0b2tlbkFyclN0YWNrID0gW3Rva2Vuc107XG4gIHZhciB0b2tlbkFyckluZGV4U3RhY2sgPSBbMF07XG4gIHZhciB0b2tlbkFyclNpemVTdGFjayA9IFt0b2tlbnMubGVuZ3RoXTtcbiAgdmFyIGkgPSAwO1xuICB2YXIgc3RhY2tJbmRleCA9IDA7XG4gIHZhciBjdXJyZW50TGluZSA9IFtdO1xuICB2YXIgYWNjID0gW2N1cnJlbnRMaW5lXTtcblxuICB3aGlsZSAoc3RhY2tJbmRleCA+IC0xKSB7XG4gICAgd2hpbGUgKChpID0gdG9rZW5BcnJJbmRleFN0YWNrW3N0YWNrSW5kZXhdKyspIDwgdG9rZW5BcnJTaXplU3RhY2tbc3RhY2tJbmRleF0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gdm9pZCAwO1xuICAgICAgdmFyIHR5cGVzID0gdHlwZUFyclN0YWNrW3N0YWNrSW5kZXhdO1xuICAgICAgdmFyIHRva2VuQXJyID0gdG9rZW5BcnJTdGFja1tzdGFja0luZGV4XTtcbiAgICAgIHZhciB0b2tlbiA9IHRva2VuQXJyW2ldOyAvLyBEZXRlcm1pbmUgY29udGVudCBhbmQgYXBwZW5kIHR5cGUgdG8gdHlwZXMgaWYgbmVjZXNzYXJ5XG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgdHlwZXMgPSBzdGFja0luZGV4ID4gMCA/IHR5cGVzIDogW1wicGxhaW5cIl07XG4gICAgICAgIGNvbnRlbnQgPSB0b2tlbjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHR5cGVzID0gYXBwZW5kVHlwZXModHlwZXMsIHRva2VuLnR5cGUpO1xuXG4gICAgICAgIGlmICh0b2tlbi5hbGlhcykge1xuICAgICAgICAgIHR5cGVzID0gYXBwZW5kVHlwZXModHlwZXMsIHRva2VuLmFsaWFzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRlbnQgPSB0b2tlbi5jb250ZW50O1xuICAgICAgfSAvLyBJZiB0b2tlbi5jb250ZW50IGlzIGFuIGFycmF5LCBpbmNyZWFzZSB0aGUgc3RhY2sgZGVwdGggYW5kIHJlcGVhdCB0aGlzIHdoaWxlLWxvb3BcblxuXG4gICAgICBpZiAodHlwZW9mIGNvbnRlbnQgIT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgc3RhY2tJbmRleCsrO1xuICAgICAgICB0eXBlQXJyU3RhY2sucHVzaCh0eXBlcyk7XG4gICAgICAgIHRva2VuQXJyU3RhY2sucHVzaChjb250ZW50KTtcbiAgICAgICAgdG9rZW5BcnJJbmRleFN0YWNrLnB1c2goMCk7XG4gICAgICAgIHRva2VuQXJyU2l6ZVN0YWNrLnB1c2goY29udGVudC5sZW5ndGgpO1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gLy8gU3BsaXQgYnkgbmV3bGluZXNcblxuXG4gICAgICB2YXIgc3BsaXRCeU5ld2xpbmVzID0gY29udGVudC5zcGxpdChuZXdsaW5lUmUpO1xuICAgICAgdmFyIG5ld2xpbmVDb3VudCA9IHNwbGl0QnlOZXdsaW5lcy5sZW5ndGg7XG4gICAgICBjdXJyZW50TGluZS5wdXNoKHtcbiAgICAgICAgdHlwZXM6IHR5cGVzLFxuICAgICAgICBjb250ZW50OiBzcGxpdEJ5TmV3bGluZXNbMF1cbiAgICAgIH0pOyAvLyBDcmVhdGUgYSBuZXcgbGluZSBmb3IgZWFjaCBzdHJpbmcgb24gYSBuZXcgbGluZVxuXG4gICAgICBmb3IgKHZhciBpJDEgPSAxOyBpJDEgPCBuZXdsaW5lQ291bnQ7IGkkMSsrKSB7XG4gICAgICAgIG5vcm1hbGl6ZUVtcHR5TGluZXMoY3VycmVudExpbmUpO1xuICAgICAgICBhY2MucHVzaChjdXJyZW50TGluZSA9IFtdKTtcbiAgICAgICAgY3VycmVudExpbmUucHVzaCh7XG4gICAgICAgICAgdHlwZXM6IHR5cGVzLFxuICAgICAgICAgIGNvbnRlbnQ6IHNwbGl0QnlOZXdsaW5lc1tpJDFdXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gLy8gRGVjcmVhdGUgdGhlIHN0YWNrIGRlcHRoXG5cblxuICAgIHN0YWNrSW5kZXgtLTtcbiAgICB0eXBlQXJyU3RhY2sucG9wKCk7XG4gICAgdG9rZW5BcnJTdGFjay5wb3AoKTtcbiAgICB0b2tlbkFyckluZGV4U3RhY2sucG9wKCk7XG4gICAgdG9rZW5BcnJTaXplU3RhY2sucG9wKCk7XG4gIH1cblxuICBub3JtYWxpemVFbXB0eUxpbmVzKGN1cnJlbnRMaW5lKTtcbiAgcmV0dXJuIGFjYztcbn07XG5cbnZhciB0aGVtZVRvRGljdCA9IGZ1bmN0aW9uICh0aGVtZSwgbGFuZ3VhZ2UpIHtcbiAgdmFyIHBsYWluID0gdGhlbWUucGxhaW47IC8vICRGbG93Rml4TWVcblxuICB2YXIgYmFzZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHZhciB0aGVtZURpY3QgPSB0aGVtZS5zdHlsZXMucmVkdWNlKGZ1bmN0aW9uIChhY2MsIHRoZW1lRW50cnkpIHtcbiAgICB2YXIgbGFuZ3VhZ2VzID0gdGhlbWVFbnRyeS5sYW5ndWFnZXM7XG4gICAgdmFyIHN0eWxlID0gdGhlbWVFbnRyeS5zdHlsZTtcblxuICAgIGlmIChsYW5ndWFnZXMgJiYgIWxhbmd1YWdlcy5pbmNsdWRlcyhsYW5ndWFnZSkpIHtcbiAgICAgIHJldHVybiBhY2M7XG4gICAgfVxuXG4gICAgdGhlbWVFbnRyeS50eXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICB2YXIgYWNjU3R5bGUgPSBfZXh0ZW5kcyh7fSwgYWNjW3R5cGVdLCBzdHlsZSk7XG5cbiAgICAgIGFjY1t0eXBlXSA9IGFjY1N0eWxlO1xuICAgIH0pO1xuICAgIHJldHVybiBhY2M7XG4gIH0sIGJhc2UpOyAvLyAkRmxvd0ZpeE1lXG5cbiAgdGhlbWVEaWN0LnJvb3QgPSBwbGFpbjsgLy8gJEZsb3dGaXhNZVxuXG4gIHRoZW1lRGljdC5wbGFpbiA9IF9leHRlbmRzKHt9LCBwbGFpbiwge1xuICAgIGJhY2tncm91bmRDb2xvcjogbnVsbFxuICB9KTtcbiAgcmV0dXJuIHRoZW1lRGljdDtcbn07XG5cbmZ1bmN0aW9uIG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwgZXhjbHVkZSkge1xuICB2YXIgdGFyZ2V0ID0ge307XG5cbiAgZm9yICh2YXIgayBpbiBvYmopIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrKSAmJiBleGNsdWRlLmluZGV4T2YoaykgPT09IC0xKSB0YXJnZXRba10gPSBvYmpba107XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxudmFyIEhpZ2hsaWdodCA9IC8qQF9fUFVSRV9fKi9mdW5jdGlvbiAoQ29tcG9uZW50KSB7XG4gIGZ1bmN0aW9uIEhpZ2hsaWdodCgpIHtcbiAgICB2YXIgdGhpcyQxID0gdGhpcztcbiAgICB2YXIgYXJncyA9IFtdLFxuICAgICAgICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbi0tKSBhcmdzW2xlbl0gPSBhcmd1bWVudHNbbGVuXTtcblxuICAgIENvbXBvbmVudC5hcHBseSh0aGlzLCBhcmdzKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdldFRoZW1lRGljdFwiLCBmdW5jdGlvbiAocHJvcHMpIHtcbiAgICAgIGlmICh0aGlzJDEudGhlbWVEaWN0ICE9PSB1bmRlZmluZWQgJiYgcHJvcHMudGhlbWUgPT09IHRoaXMkMS5wcmV2VGhlbWUgJiYgcHJvcHMubGFuZ3VhZ2UgPT09IHRoaXMkMS5wcmV2TGFuZ3VhZ2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMkMS50aGVtZURpY3Q7XG4gICAgICB9XG5cbiAgICAgIHRoaXMkMS5wcmV2VGhlbWUgPSBwcm9wcy50aGVtZTtcbiAgICAgIHRoaXMkMS5wcmV2TGFuZ3VhZ2UgPSBwcm9wcy5sYW5ndWFnZTtcbiAgICAgIHZhciB0aGVtZURpY3QgPSBwcm9wcy50aGVtZSA/IHRoZW1lVG9EaWN0KHByb3BzLnRoZW1lLCBwcm9wcy5sYW5ndWFnZSkgOiB1bmRlZmluZWQ7XG4gICAgICByZXR1cm4gdGhpcyQxLnRoZW1lRGljdCA9IHRoZW1lRGljdDtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdldExpbmVQcm9wc1wiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICB2YXIga2V5ID0gcmVmLmtleTtcbiAgICAgIHZhciBjbGFzc05hbWUgPSByZWYuY2xhc3NOYW1lO1xuICAgICAgdmFyIHN0eWxlID0gcmVmLnN0eWxlO1xuICAgICAgdmFyIHJlc3QkMSA9IG9iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHJlZiwgW1wia2V5XCIsIFwiY2xhc3NOYW1lXCIsIFwic3R5bGVcIiwgXCJsaW5lXCJdKTtcbiAgICAgIHZhciByZXN0ID0gcmVzdCQxO1xuXG4gICAgICB2YXIgb3V0cHV0ID0gX2V4dGVuZHMoe30sIHJlc3QsIHtcbiAgICAgICAgY2xhc3NOYW1lOiBcInRva2VuLWxpbmVcIixcbiAgICAgICAgc3R5bGU6IHVuZGVmaW5lZCxcbiAgICAgICAga2V5OiB1bmRlZmluZWRcbiAgICAgIH0pO1xuXG4gICAgICB2YXIgdGhlbWVEaWN0ID0gdGhpcyQxLmdldFRoZW1lRGljdCh0aGlzJDEucHJvcHMpO1xuXG4gICAgICBpZiAodGhlbWVEaWN0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb3V0cHV0LnN0eWxlID0gdGhlbWVEaWN0LnBsYWluO1xuICAgICAgfVxuXG4gICAgICBpZiAoc3R5bGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBvdXRwdXQuc3R5bGUgPSBvdXRwdXQuc3R5bGUgIT09IHVuZGVmaW5lZCA/IF9leHRlbmRzKHt9LCBvdXRwdXQuc3R5bGUsIHN0eWxlKSA6IHN0eWxlO1xuICAgICAgfVxuXG4gICAgICBpZiAoa2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb3V0cHV0LmtleSA9IGtleTtcbiAgICAgIH1cblxuICAgICAgaWYgKGNsYXNzTmFtZSkge1xuICAgICAgICBvdXRwdXQuY2xhc3NOYW1lICs9IFwiIFwiICsgY2xhc3NOYW1lO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH0pO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZ2V0U3R5bGVGb3JUb2tlblwiLCBmdW5jdGlvbiAocmVmKSB7XG4gICAgICB2YXIgdHlwZXMgPSByZWYudHlwZXM7XG4gICAgICB2YXIgZW1wdHkgPSByZWYuZW1wdHk7XG4gICAgICB2YXIgdHlwZXNTaXplID0gdHlwZXMubGVuZ3RoO1xuICAgICAgdmFyIHRoZW1lRGljdCA9IHRoaXMkMS5nZXRUaGVtZURpY3QodGhpcyQxLnByb3BzKTtcblxuICAgICAgaWYgKHRoZW1lRGljdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVzU2l6ZSA9PT0gMSAmJiB0eXBlc1swXSA9PT0gXCJwbGFpblwiKSB7XG4gICAgICAgIHJldHVybiBlbXB0eSA/IHtcbiAgICAgICAgICBkaXNwbGF5OiBcImlubGluZS1ibG9ja1wiXG4gICAgICAgIH0gOiB1bmRlZmluZWQ7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVzU2l6ZSA9PT0gMSAmJiAhZW1wdHkpIHtcbiAgICAgICAgcmV0dXJuIHRoZW1lRGljdFt0eXBlc1swXV07XG4gICAgICB9XG5cbiAgICAgIHZhciBiYXNlU3R5bGUgPSBlbXB0eSA/IHtcbiAgICAgICAgZGlzcGxheTogXCJpbmxpbmUtYmxvY2tcIlxuICAgICAgfSA6IHt9OyAvLyAkRmxvd0ZpeE1lXG5cbiAgICAgIHZhciB0eXBlU3R5bGVzID0gdHlwZXMubWFwKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIHJldHVybiB0aGVtZURpY3RbdHlwZV07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBPYmplY3QuYXNzaWduLmFwcGx5KE9iamVjdCwgW2Jhc2VTdHlsZV0uY29uY2F0KHR5cGVTdHlsZXMpKTtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImdldFRva2VuUHJvcHNcIiwgZnVuY3Rpb24gKHJlZikge1xuICAgICAgdmFyIGtleSA9IHJlZi5rZXk7XG4gICAgICB2YXIgY2xhc3NOYW1lID0gcmVmLmNsYXNzTmFtZTtcbiAgICAgIHZhciBzdHlsZSA9IHJlZi5zdHlsZTtcbiAgICAgIHZhciB0b2tlbiA9IHJlZi50b2tlbjtcbiAgICAgIHZhciByZXN0JDEgPSBvYmplY3RXaXRob3V0UHJvcGVydGllcyhyZWYsIFtcImtleVwiLCBcImNsYXNzTmFtZVwiLCBcInN0eWxlXCIsIFwidG9rZW5cIl0pO1xuICAgICAgdmFyIHJlc3QgPSByZXN0JDE7XG5cbiAgICAgIHZhciBvdXRwdXQgPSBfZXh0ZW5kcyh7fSwgcmVzdCwge1xuICAgICAgICBjbGFzc05hbWU6IFwidG9rZW4gXCIgKyB0b2tlbi50eXBlcy5qb2luKFwiIFwiKSxcbiAgICAgICAgY2hpbGRyZW46IHRva2VuLmNvbnRlbnQsXG4gICAgICAgIHN0eWxlOiB0aGlzJDEuZ2V0U3R5bGVGb3JUb2tlbih0b2tlbiksXG4gICAgICAgIGtleTogdW5kZWZpbmVkXG4gICAgICB9KTtcblxuICAgICAgaWYgKHN0eWxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgb3V0cHV0LnN0eWxlID0gb3V0cHV0LnN0eWxlICE9PSB1bmRlZmluZWQgPyBfZXh0ZW5kcyh7fSwgb3V0cHV0LnN0eWxlLCBzdHlsZSkgOiBzdHlsZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG91dHB1dC5rZXkgPSBrZXk7XG4gICAgICB9XG5cbiAgICAgIGlmIChjbGFzc05hbWUpIHtcbiAgICAgICAgb3V0cHV0LmNsYXNzTmFtZSArPSBcIiBcIiArIGNsYXNzTmFtZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9KTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRva2VuaXplXCIsIGZ1bmN0aW9uIChQcmlzbSwgY29kZSwgZ3JhbW1hciwgbGFuZ3VhZ2UpIHtcbiAgICAgIHZhciBlbnYgPSB7XG4gICAgICAgIGNvZGU6IGNvZGUsXG4gICAgICAgIGdyYW1tYXI6IGdyYW1tYXIsXG4gICAgICAgIGxhbmd1YWdlOiBsYW5ndWFnZSxcbiAgICAgICAgdG9rZW5zOiBbXVxuICAgICAgfTtcbiAgICAgIFByaXNtLmhvb2tzLnJ1bihcImJlZm9yZS10b2tlbml6ZVwiLCBlbnYpO1xuICAgICAgdmFyIHRva2VucyA9IGVudi50b2tlbnMgPSBQcmlzbS50b2tlbml6ZShlbnYuY29kZSwgZW52LmdyYW1tYXIsIGVudi5sYW5ndWFnZSk7XG4gICAgICBQcmlzbS5ob29rcy5ydW4oXCJhZnRlci10b2tlbml6ZVwiLCBlbnYpO1xuICAgICAgcmV0dXJuIHRva2VucztcbiAgICB9KTtcbiAgfVxuXG4gIGlmIChDb21wb25lbnQpIEhpZ2hsaWdodC5fX3Byb3RvX18gPSBDb21wb25lbnQ7XG4gIEhpZ2hsaWdodC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKENvbXBvbmVudCAmJiBDb21wb25lbnQucHJvdG90eXBlKTtcbiAgSGlnaGxpZ2h0LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IEhpZ2hsaWdodDtcblxuICBIaWdobGlnaHQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB2YXIgcmVmID0gdGhpcy5wcm9wcztcbiAgICB2YXIgUHJpc20gPSByZWYuUHJpc207XG4gICAgdmFyIGxhbmd1YWdlID0gcmVmLmxhbmd1YWdlO1xuICAgIHZhciBjb2RlID0gcmVmLmNvZGU7XG4gICAgdmFyIGNoaWxkcmVuID0gcmVmLmNoaWxkcmVuO1xuICAgIHZhciB0aGVtZURpY3QgPSB0aGlzLmdldFRoZW1lRGljdCh0aGlzLnByb3BzKTtcbiAgICB2YXIgZ3JhbW1hciA9IFByaXNtLmxhbmd1YWdlc1tsYW5ndWFnZV07XG4gICAgdmFyIG1peGVkVG9rZW5zID0gZ3JhbW1hciAhPT0gdW5kZWZpbmVkID8gdGhpcy50b2tlbml6ZShQcmlzbSwgY29kZSwgZ3JhbW1hciwgbGFuZ3VhZ2UpIDogW2NvZGVdO1xuICAgIHZhciB0b2tlbnMgPSBub3JtYWxpemVUb2tlbnMobWl4ZWRUb2tlbnMpO1xuICAgIHJldHVybiBjaGlsZHJlbih7XG4gICAgICB0b2tlbnM6IHRva2VucyxcbiAgICAgIGNsYXNzTmFtZTogXCJwcmlzbS1jb2RlIGxhbmd1YWdlLVwiICsgbGFuZ3VhZ2UsXG4gICAgICBzdHlsZTogdGhlbWVEaWN0ICE9PSB1bmRlZmluZWQgPyB0aGVtZURpY3Qucm9vdCA6IHt9LFxuICAgICAgZ2V0TGluZVByb3BzOiB0aGlzLmdldExpbmVQcm9wcyxcbiAgICAgIGdldFRva2VuUHJvcHM6IHRoaXMuZ2V0VG9rZW5Qcm9wc1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiBIaWdobGlnaHQ7XG59KENvbXBvbmVudCk7XG5cbmV4cG9ydCBkZWZhdWx0IEhpZ2hsaWdodDtcbmV4cG9ydCB7IGRlZmF1bHRQcm9wcyB9O1xuIiwiLy8gRHVvdG9uZSBEYXJrXG4vLyBBdXRob3I6IFNpbXVyYWksIGFkYXB0ZWQgZnJvbSBEdW9Ub25lIHRoZW1lcyBmb3IgQXRvbSAoaHR0cDovL3NpbXVyYWkuY29tL3Byb2plY3RzLzIwMTYvMDEvMDEvZHVvdG9uZS10aGVtZXMpXG4vLyBDb252ZXJzaW9uOiBCcmFtIGRlIEhhYW4gKGh0dHA6Ly9hdGVsaWVyYnJhbS5naXRodWIuaW8vQmFzZTJUb25lLXByaXNtL291dHB1dC9wcmlzbS9wcmlzbS1iYXNlMnRvbmUtZXZlbmluZy1kYXJrLmNzcylcbi8vIEdlbmVyYXRlZCB3aXRoIEJhc2UxNiBCdWlsZGVyIChodHRwczovL2dpdGh1Yi5jb20vYmFzZTE2LWJ1aWxkZXIvYmFzZTE2LWJ1aWxkZXIpXG52YXIgdGhlbWUgPSB7XG4gIHBsYWluOiB7XG4gICAgYmFja2dyb3VuZENvbG9yOiBcIiMyYTI3MzRcIixcbiAgICBjb2xvcjogXCIjOWE4NmZkXCJcbiAgfSxcbiAgc3R5bGVzOiBbe1xuICAgIHR5cGVzOiBbXCJjb21tZW50XCIsIFwicHJvbG9nXCIsIFwiZG9jdHlwZVwiLCBcImNkYXRhXCIsIFwicHVuY3R1YXRpb25cIl0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGNvbG9yOiBcIiM2YzY3ODNcIlxuICAgIH1cbiAgfSwge1xuICAgIHR5cGVzOiBbXCJuYW1lc3BhY2VcIl0sXG4gICAgc3R5bGU6IHtcbiAgICAgIG9wYWNpdHk6IDAuN1xuICAgIH1cbiAgfSwge1xuICAgIHR5cGVzOiBbXCJ0YWdcIiwgXCJvcGVyYXRvclwiLCBcIm51bWJlclwiXSxcbiAgICBzdHlsZToge1xuICAgICAgY29sb3I6IFwiI2UwOTE0MlwiXG4gICAgfVxuICB9LCB7XG4gICAgdHlwZXM6IFtcInByb3BlcnR5XCIsIFwiZnVuY3Rpb25cIl0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGNvbG9yOiBcIiM5YTg2ZmRcIlxuICAgIH1cbiAgfSwge1xuICAgIHR5cGVzOiBbXCJ0YWctaWRcIiwgXCJzZWxlY3RvclwiLCBcImF0cnVsZS1pZFwiXSxcbiAgICBzdHlsZToge1xuICAgICAgY29sb3I6IFwiI2VlZWJmZlwiXG4gICAgfVxuICB9LCB7XG4gICAgdHlwZXM6IFtcImF0dHItbmFtZVwiXSxcbiAgICBzdHlsZToge1xuICAgICAgY29sb3I6IFwiI2M0YjlmZVwiXG4gICAgfVxuICB9LCB7XG4gICAgdHlwZXM6IFtcImJvb2xlYW5cIiwgXCJzdHJpbmdcIiwgXCJlbnRpdHlcIiwgXCJ1cmxcIiwgXCJhdHRyLXZhbHVlXCIsIFwia2V5d29yZFwiLCBcImNvbnRyb2xcIiwgXCJkaXJlY3RpdmVcIiwgXCJ1bml0XCIsIFwic3RhdGVtZW50XCIsIFwicmVnZXhcIiwgXCJhdC1ydWxlXCIsIFwicGxhY2Vob2xkZXJcIiwgXCJ2YXJpYWJsZVwiXSxcbiAgICBzdHlsZToge1xuICAgICAgY29sb3I6IFwiI2ZmY2M5OVwiXG4gICAgfVxuICB9LCB7XG4gICAgdHlwZXM6IFtcImRlbGV0ZWRcIl0sXG4gICAgc3R5bGU6IHtcbiAgICAgIHRleHREZWNvcmF0aW9uTGluZTogXCJsaW5lLXRocm91Z2hcIlxuICAgIH1cbiAgfSwge1xuICAgIHR5cGVzOiBbXCJpbnNlcnRlZFwiXSxcbiAgICBzdHlsZToge1xuICAgICAgdGV4dERlY29yYXRpb25MaW5lOiBcInVuZGVybGluZVwiXG4gICAgfVxuICB9LCB7XG4gICAgdHlwZXM6IFtcIml0YWxpY1wiXSxcbiAgICBzdHlsZToge1xuICAgICAgZm9udFN0eWxlOiBcIml0YWxpY1wiXG4gICAgfVxuICB9LCB7XG4gICAgdHlwZXM6IFtcImltcG9ydGFudFwiLCBcImJvbGRcIl0sXG4gICAgc3R5bGU6IHtcbiAgICAgIGZvbnRXZWlnaHQ6IFwiYm9sZFwiXG4gICAgfVxuICB9LCB7XG4gICAgdHlwZXM6IFtcImltcG9ydGFudFwiXSxcbiAgICBzdHlsZToge1xuICAgICAgY29sb3I6IFwiI2M0YjlmZVwiXG4gICAgfVxuICB9XVxufTtcblxuZXhwb3J0IGRlZmF1bHQgdGhlbWU7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBIaWdobGlnaHQsIHtkZWZhdWx0UHJvcHN9IGZyb20gXCJwcmlzbS1yZWFjdC1yZW5kZXJlclwiO1xyXG5cclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgICBjb2RlOiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IERlbW86IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPiA9IChwcm9wcykgPT4ge1xyXG5cclxuICAgIGNvbnN0IGNvZGUgPSAoXHJcbiAgICAgICAgPEhpZ2hsaWdodCB7Li4uZGVmYXVsdFByb3BzfSBjb2RlPXtwcm9wcy5jb2RlfSBsYW5ndWFnZT1cImpzeFwiPlxyXG4gICAgICAgICAgICB7KHtjbGFzc05hbWUsIHN0eWxlLCB0b2tlbnMsIGdldExpbmVQcm9wcywgZ2V0VG9rZW5Qcm9wc30pID0+IChcclxuICAgICAgICAgICAgICAgIDxwcmUgY2xhc3NOYW1lPXtjbGFzc05hbWV9IHN0eWxlPXtzdHlsZX0+XHJcbiAgICAgICAgICAgICAge3Rva2Vucy5tYXAoKGxpbmUsIGkpID0+IChcclxuICAgICAgICAgICAgICAgICAgPGRpdiB7Li4uZ2V0TGluZVByb3BzKHtsaW5lLCBrZXk6IGl9KX0+XHJcbiAgICAgICAgICAgICAgICAgICAgICB7bGluZS5tYXAoKHRva2VuLCBrZXkpID0+IChcclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiB7Li4uZ2V0VG9rZW5Qcm9wcyh7dG9rZW4sIGtleX0pfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgKSl9XHJcbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICkpfVxyXG4gICAgICAgICAgICA8L3ByZT5cclxuICAgICAgICAgICAgKX1cclxuICAgICAgICA8L0hpZ2hsaWdodD5cclxuICAgICk7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZXhhbXBsZVwiPlxyXG4gICAgICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIHtjb2RlfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBEZW1vOyIsImltcG9ydCBSZWFjdCwge0ZyYWdtZW50fSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBEZW1vIGZyb20gJy4uLy4uL2RlbW8nO1xyXG5cclxuZXhwb3J0IGNvbnN0IEFzc2VtYmx5MSA9ICgpID0+IHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPEZyYWdtZW50PlxyXG4gICAgICAgICAgICA8RGVtbyBjb2RlPXtyZXF1aXJlKCchIXJhdy1sb2FkZXIhLi9idXR0b24uYXNzZW1ibHkxLnRzeCcpLmRlZmF1bHR9PlxyXG4gICAgICAgICAgICA8L0RlbW8+XHJcbiAgICAgICAgPC9GcmFnbWVudD5cclxuICAgICk7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBBc3NlbWJseTIgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxGcmFnbWVudD5cclxuICAgICAgICAgICAgPERlbW8gY29kZT17cmVxdWlyZSgnISFyYXctbG9hZGVyIS4vYnV0dG9uLmFzc2VtYmx5Mi50c3gnKS5kZWZhdWx0fT5cclxuICAgICAgICAgICAgPC9EZW1vPlxyXG4gICAgICAgIDwvRnJhZ21lbnQ+XHJcbiAgICApO1xyXG59O1xyXG5leHBvcnQgY29uc3QgQXNzZW1ibHkzID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8RnJhZ21lbnQ+XHJcbiAgICAgICAgICAgIDxEZW1vIGNvZGU9e3JlcXVpcmUoJyEhcmF3LWxvYWRlciEuL2J1dHRvbi5hc3NlbWJseS50c3gnKS5kZWZhdWx0fT5cclxuICAgICAgICAgICAgPC9EZW1vPlxyXG4gICAgICAgIDwvRnJhZ21lbnQ+XHJcbiAgICApO1xyXG59O1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7c2NvcGVkQ2xhc3NNYWtlcn0gZnJvbSBcIi4uL2hlbHBlcnMvY2xhc3Nlc1wiO1xyXG5cclxuXHJcbmludGVyZmFjZSAgUHJvcHMgZXh0ZW5kcyBSZWFjdC5IdG1sSFRNTEF0dHJpYnV0ZXM8SFRNTEVsZW1lbnQ+e31cclxuY29uc3QgIHNjID1zY29wZWRDbGFzc01ha2VyKFwiZ3UtbGF5b3V0XCIpXHJcbmNvbnN0ICBBc2lkZTpSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz49KHByb3BzKT0+e1xyXG4gICAgY29uc3QgIHtjbGFzc05hbWUsLi4ucmVzdH09cHJvcHNcclxuICAgIHJldHVybihcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c2MoJ2FzaWRlJyx7ZXh0cmE6Y2xhc3NOYW1lfSl9IHsuLi5yZXN0fT5cclxuICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgIClcclxufVxyXG5leHBvcnQgIGRlZmF1bHQgIEFzaWRlO1xyXG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCB7c2NvcGVkQ2xhc3NNYWtlcn0gZnJvbSBcIi4uL2hlbHBlcnMvY2xhc3Nlc1wiO1xyXG5cclxuXHJcbmludGVyZmFjZSAgUHJvcHMgZXh0ZW5kcyBSZWFjdC5IdG1sSFRNTEF0dHJpYnV0ZXM8SFRNTEVsZW1lbnQ+e31cclxuY29uc3QgIHNjID1zY29wZWRDbGFzc01ha2VyKFwiZ3UtbGF5b3V0XCIpXHJcbmNvbnN0ICBIZWFkZXI6UmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+PShwcm9wcyk9PntcclxuICAgIGNvbnN0ICB7Y2xhc3NOYW1lLC4uLnJlc3R9PXByb3BzXHJcbiAgICByZXR1cm4oXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3NjKCdoZWFkZXInLHtleHRyYTpjbGFzc05hbWV9KX0gey4uLnJlc3R9PlxyXG4gICAgICAgICAgICB7cHJvcHMuY2hpbGRyZW59XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn1cclxuZXhwb3J0ICBkZWZhdWx0ICBIZWFkZXI7XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IHtzY29wZWRDbGFzc01ha2VyfSBmcm9tIFwiLi4vaGVscGVycy9jbGFzc2VzXCI7XHJcblxyXG5cclxuaW50ZXJmYWNlICBQcm9wcyBleHRlbmRzIFJlYWN0Lkh0bWxIVE1MQXR0cmlidXRlczxIVE1MRWxlbWVudD57fVxyXG5jb25zdCAgc2MgPXNjb3BlZENsYXNzTWFrZXIoXCJndS1sYXlvdXRcIilcclxuY29uc3QgIENvbnRlbnQ6UmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+PShwcm9wcyk9PntcclxuICAgIGNvbnN0ICB7Y2xhc3NOYW1lLC4uLnJlc3R9PXByb3BzXHJcbiAgICByZXR1cm4oXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3NjKCdjb250ZW50Jyx7ZXh0cmE6Y2xhc3NOYW1lfSl9IHsuLi5yZXN0fT5cclxuICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxyXG5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufVxyXG5leHBvcnQgIGRlZmF1bHQgIENvbnRlbnQ7IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQge3Njb3BlZENsYXNzTWFrZXJ9IGZyb20gXCIuLi9oZWxwZXJzL2NsYXNzZXNcIjtcclxuXHJcblxyXG5pbnRlcmZhY2UgIFByb3BzIGV4dGVuZHMgUmVhY3QuSHRtbEhUTUxBdHRyaWJ1dGVzPEhUTUxFbGVtZW50Pnt9XHJcbmNvbnN0ICBzYyA9c2NvcGVkQ2xhc3NNYWtlcihcImd1LWxheW91dFwiKVxyXG5jb25zdCAgRm9vdGVyOlJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPj0ocHJvcHMpPT57XHJcbiAgICBjb25zdCAge2NsYXNzTmFtZSwuLi5yZXN0fT1wcm9wc1xyXG4gICAgcmV0dXJuKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzYygnZm9vdGVyJyx7ZXh0cmE6Y2xhc3NOYW1lfSl9IHsuLi5yZXN0fT5cclxuICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxyXG5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufVxyXG5leHBvcnQgIGRlZmF1bHQgIEZvb3RlcjtcclxuIiwiaW1wb3J0IFJlYWN0LCB7UmVhY3RFbGVtZW50fSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7c2NvcGVkQ2xhc3NNYWtlcn0gZnJvbSBcIi4uL2hlbHBlcnMvY2xhc3Nlc1wiO1xyXG5pbXBvcnQgIFwiLi9sYXlvdXQuc2Nzc1wiXHJcbmltcG9ydCBBc2lkZSBmcm9tICcuL2FzaWRlJztcclxuXHJcbmludGVyZmFjZSAgUHJvcHMgZXh0ZW5kcyBSZWFjdC5IdG1sSFRNTEF0dHJpYnV0ZXM8SFRNTEVsZW1lbnQ+e31cclxuY29uc3QgIHNjID1zY29wZWRDbGFzc01ha2VyKFwiZ3UtbGF5b3V0XCIpXHJcbmNvbnN0ICBMYXlvdXQ6UmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+PShwcm9wcyk9PntcclxuICAgIGNvbnN0IHtjbGFzc05hbWUsIC4uLnJlc3R9ID0gcHJvcHM7XHJcbiAgICBjb25zdCBjaGlsZHJlbiA9IHByb3BzLmNoaWxkcmVuIGFzIEFycmF5PFJlYWN0RWxlbWVudD47XHJcbiAgICBjb25zdCBoYXNBc2lkZSA9ICdsZW5ndGgnIGluIGNoaWxkcmVuICYmXHJcbiAgICAgICAgY2hpbGRyZW4ucmVkdWNlKChyZXN1bHQsIG5vZGUpID0+IHJlc3VsdCB8fCBub2RlLnR5cGUgPT09IEFzaWRlLCBmYWxzZSlcclxuICAgIHJldHVybihcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c2MoeycnOiB0cnVlLCBoYXNBc2lkZX0sIHtleHRyYTogY2xhc3NOYW1lfSl9IHsuLi5yZXN0fT5cclxuICAgICAgICAgICAge3Byb3BzLmNoaWxkcmVufVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgIGRlZmF1bHQgIExheW91dDtcclxuZXhwb3J0ICB7IExheW91dH1cclxuZXhwb3J0ICB7ZGVmYXVsdCBhcyBIZWFkZXJ9IGZyb20gJy4vaGVhZGVyJ1xyXG5leHBvcnQgIHtkZWZhdWx0IGFzIENvbnRlbnR9IGZyb20gJy4vY29udGVudCdcclxuZXhwb3J0ICB7ZGVmYXVsdCBhcyBGb290ZXJ9IGZyb20gJy4vZm9vdGVyJ1xyXG5leHBvcnQgIHtkZWZhdWx0IGFzIEFzaWRlfSBmcm9tIFwiLi9hc2lkZVwiXHJcblxyXG5cclxuXHJcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBJY29uIGZyb20gXCIuL2ljb25cIjtcclxuXHJcblxyXG5jb25zdCBJY29uRXhhbXBsZTE6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8SWNvbiBuYW1lPVwicXFcIj48L0ljb24+XHJcbiAgICAgICAgICAgIDxJY29uIG5hbWU9XCJiYWlkdVwiPjwvSWNvbj5cclxuICAgICAgICAgICAgPEljb24gbmFtZT1cIndlY2hhbFwiPjwvSWNvbj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBJY29uRXhhbXBsZTE7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuXHJcbmNvbnN0IEljb25FeGFtcGxlMjogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIGV4YW1wbGUgMlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEljb25FeGFtcGxlMjsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7SW5wdXRIVE1MQXR0cmlidXRlc30gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgY2xhc3NlcyBmcm9tICcuLi9oZWxwZXJzL2NsYXNzZXMnO1xyXG5pbXBvcnQgJy4vaW5wdXQuc2Nzcyc7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMgZXh0ZW5kcyBJbnB1dEhUTUxBdHRyaWJ1dGVzPEhUTUxJbnB1dEVsZW1lbnQ+IHtcclxuXHJcbn1cclxuXHJcbmNvbnN0IElucHV0OiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAocHJvcHMpID0+IHtcclxuICAgIGNvbnN0IHtjbGFzc05hbWUsIC4uLnJlc3R9ID0gcHJvcHM7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxpbnB1dCBjbGFzc05hbWU9e2NsYXNzZXMoJ2Z1aS1pbnB1dCcsIGNsYXNzTmFtZSl9XHJcbiAgICAgICAgICAgICAgIHsuLi5yZXN0fS8+XHJcbiAgICApO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBJbnB1dDsiLCJcclxuLypcclxuICogVE9ETzpcclxuICogMS4g5pSv5oyB5a2Q5a2X5q6157yW6L6R77yI5a2Q6KGo5Y2V77yJXHJcbiAqIDIuIOaUr+aMgeabtOWkmueahCB0eXBlIC8g6Ieq5a6a5LmJ55qEIGlucHV0XHJcbiAqIDMuIOaUr+aMgeaJi+acuuerr1xyXG4gKi9cclxuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQge1JlYWN0RnJhZ21lbnR9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IElucHV0IGZyb20gJy4uL2lucHV0L2lucHV0JztcclxuaW1wb3J0IGNsYXNzZXMgZnJvbSAnLi4vaGVscGVycy9jbGFzc2VzJztcclxuaW1wb3J0ICcuL2Zvcm0uc2Nzcyc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIEZvcm1WYWx1ZSB7XHJcbiAgICBbSzogc3RyaW5nXTogYW55XHJcbn1cclxuXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgICB2YWx1ZTogRm9ybVZhbHVlO1xyXG4gICAgZmllbGRzOiBBcnJheTx7IG5hbWU6IHN0cmluZywgbGFiZWw6IHN0cmluZywgaW5wdXQ6IHsgdHlwZTogc3RyaW5nIH0gfT47XHJcbiAgICBidXR0b25zOiBSZWFjdEZyYWdtZW50O1xyXG4gICAgb25TdWJtaXQ6IFJlYWN0LkZvcm1FdmVudEhhbmRsZXI8SFRNTEZvcm1FbGVtZW50PjtcclxuICAgIG9uQ2hhbmdlOiAodmFsdWU6IEZvcm1WYWx1ZSkgPT4gdm9pZDtcclxuICAgIGVycm9yczogeyBbSzogc3RyaW5nXTogc3RyaW5nW10gfTtcclxuICAgIGVycm9yc0Rpc3BsYXlNb2RlPzogJ2ZpcnN0JyB8ICdhbGwnO1xyXG4gICAgdHJhbnNmb3JtRXJyb3I/OiAobWVzc2FnZTogc3RyaW5nKSA9PiBzdHJpbmc7XHJcbn1cclxuXHJcbmNvbnN0IEZvcm06IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPiA9IChwcm9wcykgPT4ge1xyXG4gICAgY29uc3QgZm9ybURhdGEgPSBwcm9wcy52YWx1ZTtcclxuICAgIGNvbnN0IG9uU3VibWl0OiBSZWFjdC5Gb3JtRXZlbnRIYW5kbGVyPEhUTUxGb3JtRWxlbWVudD4gPSAoZSkgPT4ge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBwcm9wcy5vblN1Ym1pdChlKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBvbklucHV0Q2hhbmdlID0gKG5hbWU6IHN0cmluZywgdmFsdWU6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGNvbnN0IG5ld0Zvcm1WYWx1ZSA9IHsuLi5mb3JtRGF0YSwgW25hbWVdOiB2YWx1ZX07XHJcbiAgICAgICAgcHJvcHMub25DaGFuZ2UobmV3Rm9ybVZhbHVlKTtcclxuICAgIH07XHJcbiAgICBjb25zdCB0cmFuc2Zvcm1FcnJvciA9IChtZXNzYWdlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBjb25zdCBtYXA6IGFueSA9IHtcclxuICAgICAgICAgICAgcmVxdWlyZWQ6ICflv4XloasnLFxyXG4gICAgICAgICAgICBtaW5MZW5ndGg6ICflpKrnn60nLFxyXG4gICAgICAgICAgICBtYXhMZW5ndGg6ICflpKrplb8nLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIHByb3BzLnRyYW5zZm9ybUVycm9yICYmIHByb3BzLnRyYW5zZm9ybUVycm9yKG1lc3NhZ2UpIHx8IG1hcFttZXNzYWdlXSB8fCAn5pyq55+l6ZSZ6K+vJztcclxuICAgIH07XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxmb3JtIG9uU3VibWl0PXtvblN1Ym1pdH0+XHJcbiAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJmdWktZm9ybS10YWJsZVwiPlxyXG4gICAgICAgICAgICAgICAgPHRib2R5PlxyXG4gICAgICAgICAgICAgICAge3Byb3BzLmZpZWxkcy5tYXAoZiA9PlxyXG4gICAgICAgICAgICAgICAgICAgIDx0ciBjbGFzc05hbWU9e2NsYXNzZXMoJ2Z1aS1mb3JtLXRyJyl9IGtleT17Zi5uYW1lfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImZ1aS1mb3JtLXRkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJmdWktZm9ybS1sYWJlbFwiPntmLmxhYmVsfTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC90ZD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImZ1aS1mb3JtLXRkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SW5wdXQgY2xhc3NOYW1lPVwiZnVpLWZvcm0taW5wdXRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU9e2YuaW5wdXQudHlwZX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17Zm9ybURhdGFbZi5uYW1lXXx8XCJcIn1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUpID0+IG9uSW5wdXRDaGFuZ2UoZi5uYW1lLCBlLnRhcmdldC52YWx1ZSl9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJmdWktZm9ybS1lcnJvclwiPntcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wcy5lcnJvcnNbZi5uYW1lXSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwcm9wcy5lcnJvcnNEaXNwbGF5TW9kZSA9PT0gJ2ZpcnN0JyA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2Zvcm1FcnJvciEocHJvcHMuZXJyb3JzW2YubmFtZV1bMF0pIDogcHJvcHMuZXJyb3JzW2YubmFtZV0ubWFwKHRyYW5zZm9ybUVycm9yISkuam9pbigpKSA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPiZuYnNwOzwvc3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPC90cj5cclxuICAgICAgICAgICAgICAgICl9XHJcbiAgICAgICAgICAgICAgICA8dHIgY2xhc3NOYW1lPVwiZnVpLWZvcm0tdHJcIj5cclxuICAgICAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiZnVpLWZvcm0tdGRcIi8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImZ1aS1mb3JtLXRkXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtwcm9wcy5idXR0b25zfVxyXG4gICAgICAgICAgICAgICAgICAgIDwvdGQ+XHJcbiAgICAgICAgICAgICAgICA8L3RyPlxyXG4gICAgICAgICAgICAgICAgPC90Ym9keT5cclxuICAgICAgICAgICAgPC90YWJsZT5cclxuICAgICAgICA8L2Zvcm0+XHJcbiAgICApO1xyXG59O1xyXG5cclxuRm9ybS5kZWZhdWx0UHJvcHMgPSB7XHJcbiAgICBlcnJvcnNEaXNwbGF5TW9kZTogJ2ZpcnN0JyxcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEZvcm07IiwiaW1wb3J0IHtGb3JtVmFsdWV9IGZyb20gJy4vZm9ybSc7XHJcblxyXG5pbnRlcmZhY2UgRm9ybVJ1bGUge1xyXG4gICAga2V5OiBzdHJpbmc7XHJcbiAgICByZXF1aXJlZD86IGJvb2xlYW47XHJcbiAgICBtaW5MZW5ndGg/OiBudW1iZXI7XHJcbiAgICBtYXhMZW5ndGg/OiBudW1iZXI7XHJcbiAgICBwYXR0ZXJuPzogUmVnRXhwO1xyXG4gICAgdmFsaWRhdG9yPzogKHZhbHVlOiBzdHJpbmcpID0+IFByb21pc2U8c3RyaW5nPlxyXG59XHJcblxyXG50eXBlIEZvcm1SdWxlcyA9IEFycmF5PEZvcm1SdWxlPlxyXG5cclxuZnVuY3Rpb24gaXNFbXB0eSh2YWx1ZTogYW55KSB7XHJcbiAgICByZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gJyc7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBub0Vycm9yKGVycm9yczogYW55KSB7XHJcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZXJyb3JzKS5sZW5ndGggPT09IDA7XHJcbn1cclxuXHJcbnR5cGUgT25lRXJyb3IgPSBzdHJpbmcgfCBQcm9taXNlPHN0cmluZz47XHJcblxyXG5jb25zdCBWYWxpZGF0b3IgPSAoZm9ybVZhbHVlOiBGb3JtVmFsdWUsIHJ1bGVzOiBGb3JtUnVsZXMsIGNhbGxiYWNrOiAoZXJyb3JzOiBhbnkpID0+IHZvaWQpOiB2b2lkID0+IHtcclxuICAgIGxldCBlcnJvcnM6IHsgW2tleTogc3RyaW5nXTogT25lRXJyb3JbXSB9ID0ge307XHJcbiAgICBjb25zdCBhZGRFcnJvciA9IChrZXk6IHN0cmluZywgZXJyb3I6IE9uZUVycm9yKSA9PiB7XHJcbiAgICAgICAgaWYgKGVycm9yc1trZXldID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgZXJyb3JzW2tleV0gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXJyb3JzW2tleV0ucHVzaChlcnJvcik7XHJcbiAgICB9O1xyXG4gICAgcnVsZXMubWFwKHJ1bGUgPT4ge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gZm9ybVZhbHVlW3J1bGUua2V5XTtcclxuICAgICAgICBpZiAocnVsZS52YWxpZGF0b3IpIHtcclxuICAgICAgICAgICAgY29uc3QgcHJvbWlzZSA9IHJ1bGUudmFsaWRhdG9yKHZhbHVlKTtcclxuICAgICAgICAgICAgYWRkRXJyb3IocnVsZS5rZXksIHByb21pc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocnVsZS5yZXF1aXJlZCAmJiBpc0VtcHR5KHZhbHVlKSkge1xyXG4gICAgICAgICAgICBhZGRFcnJvcihydWxlLmtleSwgJ3JlcXVpcmVkJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChydWxlLm1pbkxlbmd0aCAmJiAhaXNFbXB0eSh2YWx1ZSkgJiYgdmFsdWUhLmxlbmd0aCA8IHJ1bGUubWluTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGFkZEVycm9yKHJ1bGUua2V5LCAnbWluTGVuZ3RoJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChydWxlLm1heExlbmd0aCAmJiAhaXNFbXB0eSh2YWx1ZSkgJiYgdmFsdWUhLmxlbmd0aCA+IHJ1bGUubWF4TGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGFkZEVycm9yKHJ1bGUua2V5LCAnbWF4TGVuZ3RoJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChydWxlLnBhdHRlcm4pIHtcclxuICAgICAgICAgICAgaWYgKCEocnVsZS5wYXR0ZXJuLnRlc3QodmFsdWUpKSkge1xyXG4gICAgICAgICAgICAgICAgYWRkRXJyb3IocnVsZS5rZXksICdwYXR0ZXJuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIGZ1bmN0aW9uIGhhc0Vycm9yKGl0ZW06IFtzdHJpbmcsIHVuZGVmaW5lZF0gfCBbc3RyaW5nLCBzdHJpbmddKTogaXRlbSBpcyBbc3RyaW5nLCBzdHJpbmddIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIGl0ZW1bMV0gPT09ICdzdHJpbmcnO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZmxhdHRlbkVycm9ycyA9IGZsYXQoT2JqZWN0LmtleXMoZXJyb3JzKS5tYXAoXHJcbiAgICAgICAga2V5ID0+IGVycm9yc1trZXldLm1hcDxbc3RyaW5nLCBPbmVFcnJvcl0+KGVycm9yID0+IFtrZXksIGVycm9yXSkpXHJcbiAgICApO1xyXG4gICAgY29uc3QgbmV3UHJvbWlzZXMgPSBmbGF0dGVuRXJyb3JzLm1hcChcclxuICAgICAgICAoW2tleSwgcHJvbWlzZU9yU3RyaW5nXSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBwcm9taXNlID0gKHByb21pc2VPclN0cmluZyBpbnN0YW5jZW9mIFByb21pc2UgPyBwcm9taXNlT3JTdHJpbmcgOiBQcm9taXNlLnJlamVjdChwcm9taXNlT3JTdHJpbmcpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbjxbc3RyaW5nLCB1bmRlZmluZWRdLCBbc3RyaW5nLCBzdHJpbmddPigoKSA9PiBba2V5LCB1bmRlZmluZWRdLCAocmVhc29uKSA9PiBba2V5LCByZWFzb25dKTtcclxuICAgICAgICB9XHJcbiAgICApO1xyXG4gICAgUHJvbWlzZS5hbGwobmV3UHJvbWlzZXMpLnRoZW4ocmVzdWx0cyA9PiB7XHJcbiAgICAgICAgY2FsbGJhY2soemlwKHJlc3VsdHMuZmlsdGVyPFtzdHJpbmcsIHN0cmluZ10+KGhhc0Vycm9yKSkpO1xyXG4gICAgfSk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IFZhbGlkYXRvcjtcclxuXHJcbi8v5pWw57uE5bmz5pGK5Ye95pWwXHJcbmZ1bmN0aW9uIGZsYXQ8VD4oYXJyYXk6IEFycmF5PFQgfCBUW10+KSB7XHJcbiAgICBjb25zdCByZXN1bHQ6IFRbXSA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGlmIChhcnJheVtpXSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKC4uLmFycmF5W2ldIGFzIFRbXSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2goYXJyYXlbaV0gYXMgVCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufVxyXG5cclxuZnVuY3Rpb24gemlwKGt2TGlzdDogQXJyYXk8W3N0cmluZywgc3RyaW5nXT4pIHtcclxuICAgIGNvbnN0IHJlc3VsdDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmdbXSB9ID0ge307XHJcbiAgICBrdkxpc3QubWFwKChba2V5LCB2YWx1ZV0pID0+IHtcclxuICAgICAgICByZXN1bHRba2V5XSA9IHJlc3VsdFtrZXldIHx8IFtdO1xyXG4gICAgICAgIHJlc3VsdFtrZXldLnB1c2godmFsdWUpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG4vLyBmdW5jdGlvbiBmcm9tRW50cmllcyhhcnJheTogQXJyYXk8W3N0cmluZywgc3RyaW5nW11dPikge1xyXG4vLyAgIGNvbnN0IHJlc3VsdDogeyBba2V5OiBzdHJpbmddOiBzdHJpbmdbXSB9ID0ge307XHJcbi8vICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xyXG4vLyAgICAgcmVzdWx0W2FycmF5W2ldWzBdXSA9IGFycmF5W2ldWzFdO1xyXG4vLyAgIH1cclxuLy8gICByZXR1cm4gcmVzdWx0O1xyXG4vLyB9IiwiaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGUgLEZyYWdtZW50fSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IEZvcm0se0Zvcm1WYWx1ZX0gZnJvbSBcIi4vZm9ybVwiO1xyXG5pbXBvcnQgVmFsaWRhdG9yLCB7bm9FcnJvcn0gZnJvbSAnLi92YWxpZGF0b3InO1xyXG5pbXBvcnQgQnV0dG9uc3MgZnJvbSAnLi4vYnV0dG9uL2J1dHRvbic7XHJcblxyXG5cclxuY29uc3QgdXNlcm5hbWVzID0gWydmcmFuaycsICdqYWNrJywgJ2ZyYW5rZnJhbmsnLCAnYWxpY2UnLCAnYm9iJ107XHJcbmNvbnN0IGNoZWNrVXNlck5hbWUgPSAodXNlcm5hbWU6IHN0cmluZywgc3VjY2VlZDogRnVuY3Rpb24sIGZhaWw6ICgpID0+IHZvaWQpID0+IHtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCfmiJHnjrDlnKjnn6XpgZPnlKjmiLflkI3mmK/lkKblrZjlnKgnKTtcclxuICAgICAgICBpZiAodXNlcm5hbWVzLmluZGV4T2YodXNlcm5hbWUpID49IDApIHtcclxuICAgICAgICAgICAgZmFpbCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHN1Y2NlZWQoKTtcclxuICAgICAgICB9XHJcbiAgICB9LCAyMDAwKTtcclxufTtcclxuXHJcbmNvbnN0IEZvcm1FeGFtcGxlOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudCA9ICgpID0+e1xyXG4gICAgY29uc3QgW2Zvcm1EYXRhLCBzZXRGb3JtRGF0YV0gPSB1c2VTdGF0ZTxGb3JtVmFsdWU+KHtcclxuICAgICAgICB1c2VybmFtZTogJycsXHJcbiAgICAgICAgcGFzc3dvcmQ6ICcnXHJcbiAgICB9KTtcclxuICAgIGNvbnN0IFtmaWVsZHNdPXVzZVN0YXRlKFtcclxuXHJcbiAgICAgICAge25hbWU6ICd1c2VybmFtZScsIGxhYmVsOiAn5aS05YOPJywgaW5wdXQ6IHt0eXBlOiAndGV4dCd9fSxcclxuICAgICAgICB7bmFtZTogJ3Bhc3N3b3JkJywgbGFiZWw6ICflr4bnoIEnLCBpbnB1dDoge3R5cGU6ICdwYXNzd29yZCd9fSxcclxuICAgIF0pO1xyXG4gICAgY29uc3QgW2Vycm9ycywgc2V0RXJyb3JzXSA9IHVzZVN0YXRlKHt9KTtcclxuICAgIGNvbnN0IHZhbGlkYXRvciA9ICh1c2VybmFtZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlPHN0cmluZz4oKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICBjaGVja1VzZXJOYW1lKHVzZXJuYW1lLCByZXNvbHZlLCAoKSA9PiByZWplY3QoJ3VuaXF1ZScpKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBjb25zdCBvblN1Ym1pdCA9IChlOiBSZWFjdC5Gb3JtRXZlbnQ8SFRNTEZvcm1FbGVtZW50PikgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJ1bGVzID0gW1xyXG4gICAgICAgICAgICB7a2V5OiAndXNlcm5hbWUnLCByZXF1aXJlZDogdHJ1ZX0sXHJcbiAgICAgICAgICAgIHtrZXk6ICd1c2VybmFtZScsIG1pbkxlbmd0aDogOCwgbWF4TGVuZ3RoOiAxNn0sXHJcbiAgICAgICAgICAgIHtrZXk6ICd1c2VybmFtZScsIHZhbGlkYXRvcn0sXHJcbiAgICAgICAgICAgIHtrZXk6ICd1c2VybmFtZScsIHZhbGlkYXRvcn0sXHJcbiAgICAgICAgICAgIHtrZXk6ICd1c2VybmFtZScsIHBhdHRlcm46IC9eW0EtWmEtejAtOV0rJC99LFxyXG4gICAgICAgICAgICB7a2V5OiAncGFzc3dvcmQnLCByZXF1aXJlZDogdHJ1ZX0sXHJcbiAgICAgICAgICAgIHtrZXk6ICdwYXNzd29yZCcsIHZhbGlkYXRvcn0sXHJcbiAgICAgICAgICAgIHtrZXk6ICdwYXNzd29yZCcsIHZhbGlkYXRvcn0sXHJcbiAgICAgICAgXTtcclxuICAgICAgICBWYWxpZGF0b3IoZm9ybURhdGEsIHJ1bGVzLCAoZXJyb3JzKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9ycyk7XHJcbiAgICAgICAgICAgIHNldEVycm9ycyhlcnJvcnMpO1xyXG4gICAgICAgICAgICBpZiAobm9FcnJvcihlcnJvcnMpKSB7XHJcbiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBjb25zdCB0cmFuc2Zvcm1FcnJvciA9IChtZXNzYWdlOiBzdHJpbmcpID0+IHtcclxuICAgICAgICBjb25zdCBtYXA6IGFueSA9IHtcclxuICAgICAgICAgICAgdW5pcXVlOiAndXNlcm5hbWUgaXMgdGFrZW4nLFxyXG4gICAgICAgICAgICByZXF1aXJlZDogJ3JlcXVpcmVkJyxcclxuICAgICAgICAgICAgbWluTGVuZ3RoOiAndG9vIHNob3J0JyxcclxuICAgICAgICAgICAgbWF4TGVuZ3RoOiAndG9vIGxvbmcnLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIG1hcFttZXNzYWdlXTtcclxuICAgIH07XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8Rm9ybSB2YWx1ZT17Zm9ybURhdGF9XHJcbiAgICAgICAgICAgICAgICAgIGZpZWxkcz17ZmllbGRzfVxyXG4gICAgICAgICAgICAgICAgICBidXR0b25zPXtcclxuICAgICAgICAgICAgICAgICAgICAgIDxGcmFnbWVudD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uc3MgdHlwZT1cInN1Ym1pdFwiIGxldmVsPVwiaW1wb3J0YW50XCI+5o+Q5LqkPC9CdXR0b25zcz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uc3M+6L+U5ZuePC9CdXR0b25zcz5cclxuICAgICAgICAgICAgICAgICAgICAgIDwvRnJhZ21lbnQ+XHJcbiAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgZXJyb3JzPXtlcnJvcnN9XHJcbiAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybUVycm9yPXt0cmFuc2Zvcm1FcnJvcn1cclxuICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhuZXdWYWx1ZSkgPT4gc2V0Rm9ybURhdGEobmV3VmFsdWUpfVxyXG4gICAgICAgICAgICAgICAgICBvblN1Ym1pdD17b25TdWJtaXR9XHJcbiAgICAgICAgICAgIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRm9ybUV4YW1wbGU7IiwiaW1wb3J0IFJlYWN0LCB7RnJhZ21lbnR9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IERlbW8gZnJvbSAnLi4vLi4vZGVtbyc7XHJcbmNvbnN0IEZvcm1EZW1vID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8RnJhZ21lbnQ+XHJcbiAgICAgICAgICAgIDxEZW1vIGNvZGU9e3JlcXVpcmUoJyEhcmF3LWxvYWRlciEuL2Zvcm0uZXhhbXBsZScpLmRlZmF1bHR9PlxyXG4gICAgICAgICAgICA8L0RlbW8+XHJcbiAgICAgICAgPC9GcmFnbWVudD5cclxuICAgICk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IEZvcm1EZW1vXHJcbiIsImltcG9ydCBSZWFjdCwge3VzZVN0YXRlfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IElucHV0IGZyb20gXCIuL2lucHV0XCI7XHJcbmNvbnN0IElucHV0RXhhbXBsZTogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBbdmFsdWUsIHNldHZhbHVlXSA9IHVzZVN0YXRlKCfkvaDlpb0nKVxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8SW5wdXQgdmFsdWU9e3ZhbHVlfSBvbkNoYW5nZT17XHJcbiAgICAgICAgICAgICAgICAoZXZlbnQ6IHsgdGFyZ2V0OiB7IHZhbHVlOiBSZWFjdC5TZXRTdGF0ZUFjdGlvbjxzdHJpbmc+OyB9OyB9KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzZXR2YWx1ZShldmVudC50YXJnZXQudmFsdWUpXHJcbiAgICAgICAgICAgIH19Lz5cclxuICAgICAgICAgICAgPGRpdj57dmFsdWV9PC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgSW5wdXRFeGFtcGxlOyIsImltcG9ydCBSZWFjdCwge0ZyYWdtZW50fSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBEZW1vIGZyb20gJy4uLy4uL2RlbW8nO1xyXG5cclxuZXhwb3J0IGNvbnN0IElucHV0RGVtbyA9ICgpID0+IHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPEZyYWdtZW50PlxyXG4gICAgICAgICAgICA8RGVtbyBjb2RlPXtyZXF1aXJlKCchIXJhdy1sb2FkZXIhLi9pbnB1dC5leGFtcGxlLnRzeCcpLmRlZmF1bHR9PlxyXG4gICAgICAgICAgICA8L0RlbW8+XHJcbiAgICAgICAgPC9GcmFnbWVudD5cclxuICAgICk7XHJcbn07XHJcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICAgIG5hbWU6IHN0cmluZyxcclxuICAgIHN0YWdlOiBzdHJpbmdcclxufVxyXG5pbnRlcmZhY2UgUHJvcG9zZXMge1xyXG4gICAgc3RhZ2U6IHN0cmluZ1xyXG59XHJcbmZ1bmN0aW9uIFpoaWZ1KHByb3BzOiBQcm9wcykge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICB7cHJvcHMubmFtZX0tLS0tLXtwcm9wcy5zdGFnZX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufVxyXG5jb25zdCB3aXRoWmhpZnU9IChDb21wOiAocHJvcHM6IFByb3BzKSA9PiBKU1guRWxlbWVudCk9PntcclxuICAgIGNvbnN0IG5hbWU6c3RyaW5nPVwi6auY6Zi257uE5Lu2XCJcclxuICAgIHJldHVybiAocHJvcHM6UHJvcG9zZXMpID0+IDxDb21wIHsuLi5wcm9wc30gbmFtZT17bmFtZX0vPlxyXG59XHJcbmNvbnN0IE5ld1poaWhhbj13aXRoWmhpZnUoWmhpZnUpXHJcblxyXG5jb25zdCBIb2M6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPiA9KHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxOZXdaaGloYW4gc3RhZ2U9XCJyZWFjdFwiIC8+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBIb2NcclxuXHJcbiIsImltcG9ydCB7IHNjb3BlZENsYXNzTWFrZXIgfSBmcm9tIFwiLi4vaGVscGVycy9jbGFzc2VzXCI7XHJcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFwiLi90cmVlLnNjc3NcIlxyXG5leHBvcnQgaW50ZXJmYWNlIFNvdXJjZURhdGFJdGVtIHtcclxuICAgIHRleHQ6IHN0cmluZztcclxuICAgIHZhbHVlOiBzdHJpbmc7XHJcbiAgICBjaGlsZHJlbj86IFNvdXJjZURhdGFJdGVtW107XHJcblxyXG59XHJcbnR5cGUgUHJvcHMgPSB7XHJcbiAgICBzb3VyY2VEYXRhOiBTb3VyY2VEYXRhSXRlbVtdLFxyXG4gICAgLy8g56ys5LiA5Liq5piv5L2g54K55Ye76YKj5LiqIO+8jOesrOS6jOS4quaYr+WFs+mXrei/mOaYr+W8gOWQr+eahFxyXG4gICAgb25DaGFuZ2U6IChpdGVtOiBTb3VyY2VEYXRhSXRlbSwgYm9vbDogYm9vbGVhbikgPT4gdm9pZDtcclxufSAmIChBIHwgQilcclxuXHJcbnR5cGUgQSA9IHsgc2VsZWN0ZWQ6IHN0cmluZ1tdLCBtdWx0aXBsZTogdHJ1ZSB9XHJcbnR5cGUgQiA9IHsgc2VsZWN0ZWQ6IHN0cmluZywgbXVsdGlwbGU6IGZhbHNlIH1cclxuXHJcbmNvbnN0IHNjdyA9IHNjb3BlZENsYXNzTWFrZXIoJ2FuZHMtdHJlZScpXHJcblxyXG5jb25zdCBUcmVlOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICAvLyDpgJLlvZLmuLLmn5PmlbDmja5cclxuICAgIGNvbnN0IHJlbmRlckl0ZW0gPSAoXHJcbiAgICAgICAgaXRlbTogU291cmNlRGF0YUl0ZW0sXHJcbiAgICAgICAgc2VsZWN0ZWQ6IHN0cmluZ1tdLFxyXG4gICAgICAgIG9uQ2hhbmdlOiAoaXRlbTogU291cmNlRGF0YUl0ZW0sIGJvb2w6IGJvb2xlYW4pID0+IHZvaWQsXHJcblxyXG4gICAgICAgIGxldmVsID0gMSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGNsYXNzZXMgPSB7XHJcbiAgICAgICAgICAgIFsnbGV2ZWwtJyArIGxldmVsXTogdHJ1ZSxcclxuICAgICAgICAgICAgJ2l0ZW0nOiB0cnVlXHJcbiAgICAgICAgfTtcclxuICAgICAgICAvLyDmjInnhaflsYLnuqfnvKnov5tcclxuICAgICAgICByZXR1cm4gPGRpdiBrZXk9e2l0ZW0udmFsdWV9IGNsYXNzTmFtZT17c2N3KGNsYXNzZXMpfT5cclxuXHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8bGFiZWwgaHRtbEZvcj1cIlwiIGNsYXNzTmFtZT17c2N3KFwidGV4dFwiKX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiIG9uQ2hhbmdlPXsoZSkgPT4gb25DaGFuZ2UoaXRlbSwgZS50YXJnZXQuY2hlY2tlZCl9IGNoZWNrZWQ9e3NlbGVjdGVkLmluZGV4T2YoaXRlbS52YWx1ZSkgPj0gMH0gLz5cclxuICAgICAgICAgICAgICAgIDwvbGFiZWw+XHJcbiAgICAgICAgICAgICAgICB7aXRlbS50ZXh0fTwvZGl2PlxyXG4gICAgICAgICAgICB7aXRlbS5jaGlsZHJlbj8ubWFwKHN1YiA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVuZGVySXRlbShzdWIsIHNlbGVjdGVkLCBvbkNoYW5nZSwgbGV2ZWwgKyAxKVxyXG4gICAgICAgICAgICB9KX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgIH1cclxuXHJcbiAgICBpZiAocHJvcHMubXVsdGlwbGUpIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgey8qIHtQcm9wcy5zb3VyY2VEYXRhWzBdLnRleHR9ICovfVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BzLnNvdXJjZURhdGE/Lm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlbmRlckl0ZW0oaXRlbSwgcHJvcHMuc2VsZWN0ZWQsIHByb3BzLm9uQ2hhbmdlKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICApO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICA8ZGl2PuacquWujOaIkFxyXG5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgKVxyXG4gICAgfVxyXG5cclxufTtcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBUcmVlIiwiZnVuY3Rpb24gc2Nyb2xsYmFyV2lkdGgoKXtcclxuICAgIGNvbnN0IGRpdj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG5cclxuXHJcbiAgICBkaXYuc3R5bGUucG9zaXRpb249XCJhYnNvbHV0ZVwiO1xyXG4gICAgZGl2LnN0eWxlLnRvcD1kaXYuc3R5bGUubGVmdD1cIi05OTlweFwiO1xyXG4gICAgZGl2LnN0eWxlLndpZHRoPWRpdi5zdHlsZS5oZWlnaHQ9JzEwMHB4J1xyXG4gICAgZGl2LnN0eWxlLm92ZXJmbG93PSdzY3JvbGwnO1xyXG5cclxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZGl2KVxyXG4gICAgY29uc3Qgd2lkdGggPWRpdi5vZmZzZXRXaWR0aC1kaXYuY2xpZW50V2lkdGhcclxuICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlQ2hpbGQoZGl2KVxyXG4gICAgcmV0dXJuIHdpZHRoXHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IHNjcm9sbGJhcldpZHRoIiwiaW1wb3J0IFJlYWN0LCB7IEhUTUxBdHRyaWJ1dGVzLCBNb3VzZUV2ZW50SGFuZGxlciwgVG91Y2hFdmVudEhhbmRsZXIsIFVJRXZlbnRIYW5kbGVyLCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0ICcuL3Njcm9sbC5zY3NzJ1xyXG5pbXBvcnQgc2Nyb2xsYmFyV2lkdGggZnJvbSAnLi9zY3JvbGxiYXItd2lkdGgnICBcclxuaW50ZXJmYWNlIFByb3BzIGV4dGVuZHMgSFRNTEF0dHJpYnV0ZXM8SFRNTEVsZW1lbnQ+IHtcclxuXHJcbn1cclxuXHJcbmNvbnN0IFNjcm9sbDogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKHByb3BzKSA9PiB7XHJcbiAgICBjb25zdCB7IGNoaWxkcmVuLCAuLi5yZXN0IH0gPSBwcm9wcztcclxuICAgIGNvbnN0IFtiYXJIZWlnaHRzLHNldEJhckhlaWdodF09dXNlU3RhdGUoMClcclxuICAgIGNvbnN0IFtiYXJUb3AsX3NldEJhclRvcF09dXNlU3RhdGUoMCk7ICAgXHJcbiAgICBjb25zdCBbdHJhbnNsYXRlWSxzZXRUcmFuc2xhdGVZXT11c2VTdGF0ZSgwKVxyXG4gICAgbGV0IGZpcnN0WT11c2VSZWYoMClcclxuICAgIGxldCBmaXJzdEJhclRvcFJlZj11c2VSZWYoMClcclxuICAgIGxldCBkcmFnZ2luZ1JlZj11c2VSZWYoZmFsc2UpXHJcbiAgICBsZXQgbGFzdFlSZWY9dXNlUmVmKDApXHJcblxyXG4gICAgLy8g5o6n5Yi25rua5Yqo5p2h5LiN6LaF5Ye65LiK5LiL5paHXHJcbiAgICBjb25zdCBzZXRCYXJUb3A9KG51bWJlcnM6IG51bWJlcik9PntcclxuICAgICAgICBpZihudW1iZXJzPDApe3JldHVybn1cclxuICAgICAgICBjb25zdCB7Y3VycmVudH09Y29uc3RhaW5lclJlZjtcclxuICAgICAgICBjb25zdCBzY3JvbGxIZWlnaHQ9Y3VycmVudCEuc2Nyb2xsSGVpZ2h0XHJcbiAgICAgICAgY29uc3Qgdmlld2hlaWdodD1jdXJyZW50IS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5oZWlnaHRcclxuICAgICAgICBjb25zdCBtYXhCYXJUb3A9KHNjcm9sbEhlaWdodC12aWV3aGVpZ2h0KSp2aWV3aGVpZ2h0L3Njcm9sbEhlaWdodDtcclxuICAgICAgICBpZihudW1iZXJzPm1heEJhclRvcCl7cmV0dXJufVxyXG4gICAgICAgIF9zZXRCYXJUb3AobnVtYmVycylcclxuICAgIH1cclxuICAgIGNvbnN0IG9uU2Nyb2xsOlVJRXZlbnRIYW5kbGVyID0gKGUpPT57XHJcbiAgICAgICAgY29uc3Qge2N1cnJlbnR9PWNvbnN0YWluZXJSZWY7XHJcbiAgICAgICAgY29uc3Qgc2Nyb2xsSGVpZ2h0PWN1cnJlbnQhLnNjcm9sbEhlaWdodFxyXG4gICAgICAgIGNvbnN0IHZpZXdoZWlnaHQ9Y3VycmVudCEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0XHJcbiAgICAgICAgY29uc3Qgc2Nyb2xsVG9wPWN1cnJlbnQhLnNjcm9sbFRvcDtcclxuICAgICAgICBzZXRCYXJUb3Aoc2Nyb2xsVG9wICogdmlld2hlaWdodC9zY3JvbGxIZWlnaHQpXHJcbiAgICB9XHJcbiAgICBjb25zdCBjb25zdGFpbmVyUmVmPXVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbClcclxuICAgIHVzZUVmZmVjdCgoKT0+e1xyXG4gICAgICAgIGNvbnN0IHNjcm9sbGhlaWdodD1jb25zdGFpbmVyUmVmLmN1cnJlbnQhLnNjcm9sbEhlaWdodDtcclxuICAgICAgICBjb25zdCB2aWV3aGVpZ2h0PWNvbnN0YWluZXJSZWYuY3VycmVudCEuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0XHJcbiAgICAgICAgY29uc3QgYmFyaGVpZ2h0PXZpZXdoZWlnaHQqIHZpZXdoZWlnaHQgLyBzY3JvbGxoZWlnaHRcclxuICAgICAgICBzZXRCYXJIZWlnaHQoYmFyaGVpZ2h0KVxyXG4gICAgfSxbXSlcclxuICAgIGNvbnN0IG9uc2VsZWN0PShlOkV2ZW50KT0+e1xyXG4gICAgICAgIGlmKGRyYWdnaW5nUmVmLmN1cnJlbnQpe2UucHJldmVudERlZmF1bHQoKX1cclxuICAgIH1cclxuXHJcblxyXG4gICAgdXNlRWZmZWN0KCgpPT57XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJyxvbk1vdXNlTW92ZUJhcik7XHJcbiAgICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsb25Nb3VzZVVwQmFyKTtcclxuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdzZWxlY3RzdGFydCcsb25zZWxlY3QpXHJcbiAgICAgICAgcmV0dXJuICgpPT57XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsb25Nb3VzZU1vdmVCYXIpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJyxvbk1vdXNlVXBCYXIpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdzZWxlY3RzdGFydCcsb25zZWxlY3QpXHJcbiAgICAgICAgfVxyXG4gICAgfSxbXSlcclxuICAgXHJcbiAgICBjb25zdCBvbk1vdXNlVXBCYXI9KCk9PntcclxuICAgICAgICBkcmFnZ2luZ1JlZi5jdXJyZW50PWZhbHNlXHJcbiAgICB9XHJcbiAgICAvLyDpvKDmoIfngrnlh7vlvIDlp4vnp7vliqhcclxuICAgIGNvbnN0IG9uTW91c2VEb3duQmFyOk1vdXNlRXZlbnRIYW5kbGVyPShlKT0+e1xyXG4gICAgICAgIGRyYWdnaW5nUmVmLmN1cnJlbnQ9dHJ1ZVxyXG4gICAgICAgIGZpcnN0WS5jdXJyZW50PWUuY2xpZW50WVxyXG4gICAgICAgIGZpcnN0QmFyVG9wUmVmLmN1cnJlbnQ9YmFyVG9wXHJcbiAgICB9XHJcbiAgICAvLyDpvKDmoIfnp7vliqjorqHnrpfpq5jluqZcclxuICAgIGNvbnN0IG9uTW91c2VNb3ZlQmFyPShlOk1vdXNlRXZlbnQpPT57XHJcbiAgICAgICAgaWYoZHJhZ2dpbmdSZWYuY3VycmVudCl7XHJcbiAgICAgICAgICAgIGNvbnN0ICBkZWx0YT1lLmNsaWVudFktZmlyc3RZLmN1cnJlbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IG5ld0JhclRvcD1maXJzdEJhclRvcFJlZi5jdXJyZW50K2RlbHRhXHJcbiAgICAgICAgICAgIHNldEJhclRvcChuZXdCYXJUb3ApIFxyXG4gICAgICAgICAgICBjb25zdCBzY3JvbGxIZWlnaHQ9Y29uc3RhaW5lclJlZi5jdXJyZW50IS5zY3JvbGxIZWlnaHRcclxuICAgICAgICAgICAgY29uc3Qgdmlld2hlaWdodD1jb25zdGFpbmVyUmVmLmN1cnJlbnQhLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmhlaWdodFxyXG4gICAgICAgICAgICBjb25zdGFpbmVyUmVmLmN1cnJlbnQhLnNjcm9sbFRvcD1uZXdCYXJUb3AqIHNjcm9sbEhlaWdodC92aWV3aGVpZ2h0XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3Qgb25Ub3VjaE1vdmU6VG91Y2hFdmVudEhhbmRsZXI9KGUpPT57XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIGNvbnN0IGRlbHRhWSA9IGUudG91Y2hlc1swXS5jbGllbnRZLWxhc3RZUmVmLmN1cnJlbnRcclxuICAgICAgICBpZihkZWx0YVk+MCl7XHJcbiAgICAgICAgICAgIHNldFRyYW5zbGF0ZVkodHJhbnNsYXRlWStkZWx0YVkpXHJcbiAgICAgICAgfWVsc2V7XHJcblxyXG4gICAgICAgIH1cclxuICAgICAgICBsYXN0WVJlZi5jdXJyZW50PWUudG91Y2hlc1swXS5jbGllbnRZXHJcbiAgICB9XHJcbiAgICBjb25zdCBvblRvdWNoU3RhcnQ6VG91Y2hFdmVudEhhbmRsZXI9KGUpPT57XHJcbiAgICAgICAgICAgbGFzdFlSZWYuY3VycmVudD1lLnRvdWNoZXNbMF0uY2xpZW50WVxyXG4gICAgfVxyXG4gICAgY29uc3Qgb25Ub3VjaEVuZDpUb3VjaEV2ZW50SGFuZGxlcj0oKT0+e1xyXG4gICAgICAgIHNldFRyYW5zbGF0ZVkoMClcclxuICAgIH0gICBcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZnVpLXNjcm9sbFwiIHsuLi5yZXN0fSAgICA+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZnVpLXNjcm9sbC1pbm5lclwiIHN0eWxlPXt7cmlnaHQ6LXNjcm9sbGJhcldpZHRoKCl9fVxyXG4gICAgICAgICAgICAgICAgcmVmPXtjb25zdGFpbmVyUmVmfVxyXG4gICAgICAgICAgICAgICAgb25Ub3VjaE1vdmU9e29uVG91Y2hNb3ZlfVxyXG4gICAgICAgICAgICAgICAgb25Ub3VjaFN0YXJ0PXtvblRvdWNoU3RhcnR9XHJcbiAgICAgICAgICAgICAgICBvblNjcm9sbD17b25TY3JvbGx9XHJcbiAgICAgICAgICAgICAgICBvblRvdWNoRW5kPXtvblRvdWNoRW5kfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICA+IHtjaGlsZHJlbn08L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZnVpLXNjcm9sbC10cmFja1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZnVpLXNjcm9sbC1iYXJcIiBzdHlsZT17e2hlaWdodDpiYXJIZWlnaHRzLHRvcDpiYXJUb3B9fVxyXG4gICAgICAgICAgICAgICAgICAgIG9uTW91c2VEb3duPXtvbk1vdXNlRG93bkJhcn1cclxuICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgID48L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG5cclxufTtcclxuZXhwb3J0IGRlZmF1bHQgU2Nyb2xsIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgXCIuL2Nob2ljZS5zY3NzXCI7XHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgICB2aXNpYmxlOiBzdHJpbmdbXTtcclxuICAgIGNob2ljZWRhdGE6IHN0cmluZ1tdO1xyXG4gICAgYm9vbDogQm9vbGVhbjtcclxuICAgIG9uQ2xpY2tzdzooaXRlbTpzdHJpbmdbXSk9PnZvaWRcclxufVxyXG5cclxuXHJcbmNvbnN0IENob2ljZTogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKHByb3BzKSA9PiB7XHJcbiAgICAvLyDljZXpgInlh73mlbBcclxuICAgIGNvbnN0IHNpbmdsZUNob2ljZSA9IChpdGVtOiBzdHJpbmcsIGluZGV4OiBudW1iZXIpID0+IHtcclxuICAgICAgICByZXR1cm4gPGRpdiBrZXk9e2luZGV4fSBjbGFzc05hbWU9e2l0ZW0gPT09IHByb3BzLnZpc2libGVbMF0gPyAnY2hvaWNlIGFjdGl2ZScgOiAnY2hvaWNlJ30gb25DbGljaz17KCkgPT4gcHJvcHMub25DbGlja3N3KGNhbGN1bGF0aW9ucyhpdGVtKSl9ID57aXRlbX08L2Rpdj5cclxuICAgIH1cclxuICAgIC8vIOWkmumAiVxyXG4gICAgY29uc3QgbXVsdGlwbGVDaG9pY2UgPSAoaXRlbTogc3RyaW5nLCBpbmRleDogbnVtYmVyKSA9PiB7XHJcblxyXG5cclxuICAgICAgICByZXR1cm4gPGRpdiBrZXk9e2luZGV4fSBjbGFzc05hbWU9eyBwcm9wcy52aXNpYmxlLmluZGV4T2YoaXRlbSkhPT0tMSA/ICdjaG9pY2UgYWN0aXZlJyA6ICdjaG9pY2UgJ30gb25DbGljaz17KCkgPT4gcHJvcHMub25DbGlja3N3KGNhbGN1bGF0aW9uKGl0ZW0pKX0gPntpdGVtfTwvZGl2PlxyXG4gICAgfVxyXG4vLyDljZVcclxuICAgIGNvbnN0IGNhbGN1bGF0aW9ucz0oaXRlbTpzdHJpbmcpPT57XHJcbiAgICAgICAgaWYocHJvcHMudmlzaWJsZVswXT09PWl0ZW0pe1xyXG4gICAgICAgICAgICByZXR1cm4gW11cclxuICAgICAgICB9ZWxzZXsgIFxyXG4gICAgICAgICAgICByZXR1cm4gW2l0ZW1dXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOWkmlxyXG4gICAgY29uc3QgY2FsY3VsYXRpb249KGl0ZW06c3RyaW5nKT0+e1xyXG4gICAgICAgICBjb25zdCBkYWVjOiBzdHJpbmdbXSA9IFsuLi5wcm9wcy52aXNpYmxlXVxyXG4gICAgICBcclxuICAgICAgICBpZiAoZGFlYy5pbmRleE9mKGl0ZW0pID09IC0xKSB7XHJcbiAgICAgICAgICAgIGlmKHByb3BzLnZpc2libGUubGVuZ3RoPjIpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGFlYy5wdXNoKGl0ZW0pXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgZGFlYy5zcGxpY2UoZGFlYy5pbmRleE9mKGl0ZW0pLCAxKTsgXHJcbiAgICAgICAgfVxyXG4gICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGRhZWNcclxuICAgIH1cclxuXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNob2ljZS1ib2R5XCI+XHJcbiAgICAgICAgICAgIHtwcm9wcy5jaG9pY2VkYXRhLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghcHJvcHMuYm9vbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWNlemAiVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzaW5nbGVDaG9pY2UoaXRlbSwgaW5kZXgpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIOWkmumAiVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtdWx0aXBsZUNob2ljZShpdGVtLCBpbmRleClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH0pfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IENob2ljZSIsImltcG9ydCBSZWFjdCwgeyBEcmFnRXZlbnRIYW5kbGVyLCB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VNZW1vLCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBcIi4vZHJhZ3B1bGwuc2Nzc1wiXHJcblxyXG5pbnRlcmZhY2UgTGlzdEl0ZW0ge1xyXG4gICAgaWQ6IG51bWJlcixcclxuICAgIHRpdGxlOiBzdHJpbmcsXHJcbiAgICB1c2VybmFtZTogc3RyaW5nLFxyXG4gICAgcG9pbnQ6IG51bWJlclxyXG59XHJcbmNvbnN0IGRyYWdQdWxsOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudCA9ICgpID0+IHtcclxuXHJcbiAgICBjb25zdCBkcmFnSXRlbVJlZiA9IHVzZVJlZjxMaXN0SXRlbT4oKTtcclxuICAgIGNvbnN0IGRyb3BBcmVhUmVmID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKTtcclxuICAgIC8vICDmr4/ooYzlpJrlsJHliJdcclxuICAgIGNvbnN0IENPTFVNTiA9IDE7XHJcbiAgICAvLyAg5q+P5Liq5YWD57Sg5a695bqmXHJcbiAgICBjb25zdCBXSURUSCA9IDExMDtcclxuICAgIC8vICDmr4/kuKrlhYPntKDpq5jluqZcclxuICAgIGNvbnN0IEhFSUdIVCA9IDMwO1xyXG4gICAgLy8gIOavj+S4quWFg+e0oOW3puWPsyBwYWRkaW5nXHJcbiAgICBjb25zdCBJTUFHRV9QQURESU5HID0gMDtcclxuXHJcbiAgICAvLyDnp4vlpKnmmK/lvbHlk43mg4Xnu6rlpJrlj5jnmoTlraPoioLvvIzml7bogIzlv6vkuZDvvIzml7bogIzmgrLlh4lcclxuICAgIGNvbnN0IFt0YXNrcywgc2V0VGFza3NdID0gdXNlU3RhdGUoW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEsXHJcblxyXG4gICAgICAgICAgICB0aXRsZTogXCLluorliY3mmI7mnIjlhYlcIixcclxuICAgICAgICAgICAgdXNlcm5hbWU6IFwiMDAwMGZmXCIsXHJcbiAgICAgICAgICAgIHBvaW50OiAxMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMixcclxuXHJcbiAgICAgICAgICAgIHRpdGxlOiBcIueWkeaYr+WcsOS4iumcnFwiLFxyXG4gICAgICAgICAgICB1c2VybmFtZTogXCJjYzAwY2NcIixcclxuICAgICAgICAgICAgcG9pbnQ6IDIwXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAzLFxyXG5cclxuICAgICAgICAgICAgdGl0bGU6IFwi5Li+5aS05pyb5piO5pyIXCIsXHJcbiAgICAgICAgICAgIHVzZXJuYW1lOiBcIjk5MDBmZlwiLFxyXG4gICAgICAgICAgICBwb2ludDogMzBcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDQsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcIuS9juWktOaAneaVheS5oVwiLFxyXG4gICAgICAgICAgICB1c2VybmFtZTogXCJmZjAwMzNcIixcclxuICAgICAgICAgICAgcG9pbnQ6IDQwXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiA1LFxyXG4gICAgICAgICAgICB0aXRsZTogXCLmnY7nmb1cIixcclxuICAgICAgICAgICAgdXNlcm5hbWU6IFwiZmYwMGNjXCIsXHJcbiAgICAgICAgICAgIHBvaW50OiA0MFxyXG4gICAgICAgIH1cclxuICAgIF0pXHJcblxyXG4gICBcclxuXHJcblxyXG4gICAgY29uc3Qgc29ydGVkTGlzdCA9IHVzZU1lbW8oKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiB0YXNrcy5zbGljZSgpLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGEuaWQgLSBiLmlkO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgW3Rhc2tzXSk7XHJcblxyXG4gICAgY29uc3QgbGlzdEhlaWdodCA9IHVzZU1lbW8oKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHNpemUgPSB0YXNrcy5sZW5ndGg7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbChzaXplIC8gQ09MVU1OKSAqIEhFSUdIVDtcclxuICAgIH0sIFt0YXNrc10pO1xyXG5cclxuXHJcbiAgICBmdW5jdGlvbiBpc0VxdWFsQnk8VD4oYTogVFtdLCBiOiBUW10sIGtleToga2V5b2YgVCkge1xyXG4gICAgICAgIGNvbnN0IGFMaXN0ID0gYS5tYXAoKGl0ZW0pID0+IGl0ZW1ba2V5XSlcclxuICAgICAgICBjb25zdCBiTGlzdCA9IGIubWFwKChpdGVtKSA9PiBpdGVtW2tleV0pXHJcbiAgICAgICAgbGV0IGZsYWcgPSB0cnVlO1xyXG4gICAgICAgIGFMaXN0LmZvckVhY2goKGksIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChpICE9PSBiTGlzdFtpbmRleF0pIHtcclxuICAgICAgICAgICAgICAgIGZsYWcgPSBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuICAgICAgICByZXR1cm4gZmxhZ1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOWwhuafkOS4quWFg+e0oOaPkuWFpeWIsOaVsOe7hOS4reeahOafkOS4quS9jee9rlxyXG4gICAgZnVuY3Rpb24gaW5zZXJ0QmVmb3JlPFQ+KGxpc3Q6IFRbXSwgZnJvbTogVCwgdG8/OiBUKTogVFtdIHtcclxuICAgICAgICBjb25zdCBjb3B5ID0gWy4uLmxpc3RdO1xyXG4gICAgICAgIGNvbnN0IGZyb21JbmRleCA9IGNvcHkuaW5kZXhPZihmcm9tKVxyXG4gICAgICAgIGlmIChmcm9tID09PSB0bykge1xyXG4gICAgICAgICAgICByZXR1cm4gY29weTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29weS5zcGxpY2UoZnJvbUluZGV4LCAxKTtcclxuICAgICAgICBjb25zdCBuZXdUb0luZGV4ID0gdG8gPyBjb3B5LmluZGV4T2YodG8pIDogLTFcclxuICAgICAgICBpZiAodG8gJiYgbmV3VG9JbmRleCA+PSAwKSB7XHJcbiAgICAgICAgICAgIGNvcHkuc3BsaWNlKG5ld1RvSW5kZXgsIDAsIGZyb20pXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8g5rKh5pyJdG/miJbogIV0b+S4jeWcqOW6j+WIl+iOieWwhuWFg+e0oOenu+WKqOWIsOacq+WwvlxyXG4gICAgICAgICAgICBjb3B5LnB1c2goZnJvbSlcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNvcHlcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB1cGRhdGVMaXN0ID0gdXNlQ2FsbGJhY2soKGNsaWVudFg6IG51bWJlciwgY2xpZW50WTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgLy8g5pa55rOV6L+U5Zue5YWD57Sg55qE5aSn5bCP5Y+K5YW255u45a+55LqO6KeG5Y+j55qE5L2N572u44CCXHJcbiAgICAgICAgY29uc3QgZHJvcFJlY3QgPSBkcm9wQXJlYVJlZi5jdXJyZW50Py5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgICAgIGlmIChkcm9wUmVjdCkge1xyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXRYID0gY2xpZW50WCAtIGRyb3BSZWN0LmxlZnRcclxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0WSA9IGNsaWVudFkgLSBkcm9wUmVjdC50b3BcclxuICAgICAgICAgICAgY29uc3QgZHJhZ0l0ZW0gPSBkcmFnSXRlbVJlZi5jdXJyZW50O1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhvZmZzZXRYLG9mZnNldFksZHJvcFJlY3Qud2lkdGgpO1xyXG4gICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAhZHJhZ0l0ZW0gfHwgb2Zmc2V0WCA8IDAgfHxcclxuICAgICAgICAgICAgICAgIG9mZnNldFggPiBkcm9wUmVjdC53aWR0aCB8fFxyXG4gICAgICAgICAgICAgICAgb2Zmc2V0WSA8IDAgfHxcclxuICAgICAgICAgICAgICAgIG9mZnNldFkgPiBkcm9wUmVjdC5oZWlnaHRcclxuICAgICAgICAgICAgKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgY29sID0gTWF0aC5mbG9vcihvZmZzZXRYIC8gV0lEVEgpXHJcbiAgICAgICAgICAgIGNvbnN0IHJvdyA9IE1hdGguZmxvb3Iob2Zmc2V0WSAvIEhFSUdIVClcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnRJbmRleCA9IHJvdyAqIENPTFVNTiArIGNvbFxyXG4gICAgICAgICAgICBjb25zdCBmcm9tSW5kZXggPSB0YXNrcy5pbmRleE9mKGRyYWdJdGVtKVxyXG4gICAgICAgICAgICBpZiAoZnJvbUluZGV4IDwgY3VycmVudEluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50SW5kZXgrK1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRJdGVtID0gdGFza3NbY3VycmVudEluZGV4XVxyXG4gICAgICAgICAgICBjb25zdCBvcmRlcmVkID0gaW5zZXJ0QmVmb3JlKHRhc2tzLCBkcmFnSXRlbSwgY3VycmVudEl0ZW0pXHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKGlzRXF1YWxCeShvcmRlcmVkLCB0YXNrcywgXCJpZFwiKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgc2V0VGFza3Mob3JkZXJlZClcclxuXHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgfSwgW3Rhc2tzXSk7XHJcblxyXG4gICAgY29uc3QgaGFuZGxlRHJhZ092ZXIgPSB1c2VDYWxsYmFjaygoZTogUmVhY3QuRHJhZ0V2ZW50PEhUTUxEaXZFbGVtZW50PikgPT4ge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgIHVwZGF0ZUxpc3QoZS5jbGllbnRYLCBlLmNsaWVudFkpXHJcbiAgICB9LCBbdXBkYXRlTGlzdF0pXHJcblxyXG5cclxuXHJcbiAgICAvLyDnlKjmiLflvIDlp4vmi5bliqjlhYPntKDml7bop6blj5FcclxuICAgIGNvbnN0IGhhbmRsZURyYWdTdGFydCA9IChlOiBSZWFjdC5EcmFnRXZlbnQ8SFRNTExJRWxlbWVudD4sIGRhdGE6IExpc3RJdGVtKSA9PiB7XHJcblxyXG5cclxuICAgICAgICBkcmFnSXRlbVJlZi5jdXJyZW50ID0gZGF0YVxyXG4gICAgICAgIGNvbnN0IGxlID0gZHJvcEFyZWFSZWYuY3VycmVudD8ucXVlcnlTZWxlY3RvcihgW2RhdGEtaWQ9XCIke2RhdGEuaWR9XCJdYClcclxuICAgICAgICBpZiAobGUpIHtcclxuICAgICAgICAgICAgbGUuY2xhc3NMaXN0LmFkZChcImRyYWdnaW5nSXRlbVwiKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcbiAgICAvLyDmi5bliqjnu5PmnZ9cclxuICAgIGNvbnN0IGhhbmRsZURyYWdFbmQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGRyYWdJdGVtUmVmLmN1cnJlbnRcclxuICAgICAgICBpZiAoZGF0YSkge1xyXG4gICAgICAgICAgICBjb25zdCBsZSA9IGRyb3BBcmVhUmVmLmN1cnJlbnQ/LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLWlkPVwiJHtkYXRhLmlkfVwiXWApXHJcbiAgICAgICAgICAgIGlmIChsZSkge1xyXG4gICAgICAgICAgICAgICAgbGUuY2xhc3NMaXN0LnJlbW92ZShcImRyYWdnaW5nSXRlbVwiKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRyYWdJdGVtUmVmLmN1cnJlbnQgPSB1bmRlZmluZWRcclxuICAgICAgICB9XHJcbiAgICB9LCBbXSlcclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZHJhZ3B1bGxcIlxyXG4gICAgICAgICAgICByZWY9e2Ryb3BBcmVhUmVmfVxyXG4gICAgICAgICAgICBzdHlsZT17eyB3aWR0aDogQ09MVU1OICogKFdJRFRIICsgSU1BR0VfUEFERElORykgKyBJTUFHRV9QQURESU5HIH19XHJcbiAgICAgICAgICAgIG9uRHJhZ0VuZD17aGFuZGxlRHJhZ0VuZH1cclxuICAgICAgICAgICAgb25EcmFnT3Zlcj17aGFuZGxlRHJhZ092ZXJ9XHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgICA8dWxcclxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT0nbGlzdCdcclxuICAgICAgICAgICAgICAgIHN0eWxlPXt7IGhlaWdodDogbGlzdEhlaWdodCB9fVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICB7LyogPGRpdiBjbGFzc05hbWU9XCJkcmFncHVsbC10aXRsZVwiPumdmeWknOaAnTwvZGl2PiAqL31cclxuICAgICAgICAgICAgICAgIHtzb3J0ZWRMaXN0Lm1hcCgoaXRlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGFza3MuZmluZEluZGV4KChpKSA9PiBpID09PSBpdGVtKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByb3cgPSBNYXRoLmZsb29yKGluZGV4IC8gQ09MVU1OKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb2wgPSBpbmRleCAlIENPTFVNTjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gPGxpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cIml0ZW1cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2l0ZW0uaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZT17e1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBIRUlHSFQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBjb2wgKiAoV0lEVEggKyBJTUFHRV9QQURESU5HKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcDogcm93ICogSEVJR0hULFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogYDAgJHtJTUFHRV9QQURESU5HfXB4YCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS1pZD17aXRlbS5pZH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgb25EcmFnU3RhcnQ9eyhlKSA9PiBoYW5kbGVEcmFnU3RhcnQoZSwgaXRlbSl9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgID57aXRlbS50aXRsZX08L2xpPlxyXG4gICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBkcmFnUHVsbFxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZU1lbW8sIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW50ZXJmYWNlIExpc3RJdGVtIHtcclxuICAgIGlkOiBudW1iZXIsXHJcbiAgICB0aXRsZTogc3RyaW5nLFxyXG4gICAgdXNlcm5hbWU6IHN0cmluZyxcclxuICAgIHBvaW50OiBudW1iZXJcclxufVxyXG5cclxuY29uc3QgZHJhZ1NsaWRlOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudCA9ICgpID0+IHtcclxuXHJcbiAgICBsZXQgY2xpZW50SGVpZ2h0WSA9IG51bGxcclxuICAgIGxldCBjbGllbnRXZWlnaHRYID0gbnVsbFxyXG5cclxuICAgIGNvbnN0IFtsdVh1biwgc2V0THVYdW5dID0gdXNlU3RhdGUoW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEsXHJcblxyXG4gICAgICAgICAgICB0aXRsZTogXCLov5DkuqTljY7nm5bmrLLkvZXmsYLvvIzmnKrmlaLnv7vouqvlt7LnorDlpLTjgIJcIixcclxuICAgICAgICAgICAgdXNlcm5hbWU6IFwi5a62546uXCIsXHJcbiAgICAgICAgICAgIHBvaW50OiAxMFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZDogMixcclxuXHJcbiAgICAgICAgICAgIHRpdGxlOiBcIuegtOW4vemBruminOi/h+mXueW4gu+8jOa8j+iIuei9vemFkuazm+S4rea1geOAglwiLFxyXG4gICAgICAgICAgICB1c2VybmFtZTogXCLlrrbnjq5cIixcclxuICAgICAgICAgICAgcG9pbnQ6IDIwXHJcbiAgICAgICAgfVxyXG4gICAgICAgICxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyLFxyXG5cclxuICAgICAgICAgICAgdGl0bGU6IFwi5qiq55yJ5Ya35a+55Y2D5aSr5oyH77yM5L+v6aaW55SY5Li65a265a2Q54mb44CCXCIsXHJcbiAgICAgICAgICAgIHVzZXJuYW1lOiBcIuWutueOrlwiLFxyXG4gICAgICAgICAgICBwb2ludDogMjBcclxuICAgICAgICB9XHJcbiAgICAgICAgLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDIsXHJcblxyXG4gICAgICAgICAgICB0aXRsZTogXCLourLov5vlsI/mpbzmiJDkuIDnu5/vvIznrqHku5blhqzlpI/kuI7mmKXnp4vjgIJcIixcclxuICAgICAgICAgICAgdXNlcm5hbWU6IFwi5a62546uXCIsXHJcbiAgICAgICAgICAgIHBvaW50OiAyMFxyXG4gICAgICAgIH1cclxuXHJcbiAgICBdKVxyXG5cclxuXHJcbiAgICBjb25zdCBbY2VsZWJyaXR5LCBzZXRjZWxlYnJpdHldID0gdXNlU3RhdGUoW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWQ6IDEsXHJcbiAgICAgICAgICAgIHRpdGxlOiBcIuWFtuWunuWcsOS4iuacrOayoeaciei3r++8jOi1sOeahOS6uuWkmuS6hu+8jOS5n+S+v+aIkOS6hui3r+OAglwiLFxyXG4gICAgICAgICAgICB1c2VybmFtZTogXCLlrrbnjq5cIixcclxuICAgICAgICAgICAgcG9pbnQ6IDYwXHJcbiAgICAgICAgfVxyXG4gICAgICAgICxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlkOiAyLFxyXG4gICAgICAgICAgICB0aXRsZTogXCLmiJHlrrbpl6jliY3mnInkuKTmo7XmoJHvvIzkuIDmo7XmmK/mnqPmoJHvvIzlj6bkuIDmo7XkuZ/mmK/mnqPmoJHjgIJcIixcclxuICAgICAgICAgICAgdXNlcm5hbWU6IFwi5a62546uXCIsXHJcbiAgICAgICAgICAgIHBvaW50OiA4MFxyXG4gICAgICAgIH1cclxuICAgIF0pXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgLy8g55So5oi35byA5aeL5ouW5Yqo5YWD57Sg5pe26Kem5Y+RXHJcbiAgICBjb25zdCBoYW5kbGVEcmFnU3RhcnQgPSAoZTogUmVhY3QuRHJhZ0V2ZW50PEhUTUxMSUVsZW1lbnQ+LCBkYXRhOiBMaXN0SXRlbSkgPT4ge1xyXG4gICAgfVxyXG4gICAgLy8g5ouW5Yqo55So5oi35a6M5oiQ5YWD57Sg5ouW5Yqo5ZCO6Kem5Y+RXHJcbiAgICBjb25zdCBjYW5jZWxTZWxlY3QgPSAoZTogYW55KSA9PiB7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKGUsICfnlKjmiLflrozmiJDlhYPntKDmi5bliqjlkI7op6blj5EnKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgdXBkYXRlTGlzdCA9IHVzZUNhbGxiYWNrKChjbGllbnRYOiBudW1iZXIsIGNsaWVudFk6IG51bWJlcikgPT4ge1xyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG4gICAgfSwgW2x1WHVuXSlcclxuICAgIGNvbnN0IGhhbmRsZURyYWdPdmVyID0gdXNlQ2FsbGJhY2soKGU6IFJlYWN0LkRyYWdFdmVudDxIVE1MVUxpc3RFbGVtZW50PikgPT4ge1xyXG5cclxuICAgIH0sIFt1cGRhdGVMaXN0XSlcclxuICAgIC8vIDwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLeeItuWuueWZqOS6i+S7tj5cclxuICAgIC8vIOaLluWKqOi/h+eoi+S4re+8jOmHiuaUvum8oOagh+inpuWPkeS6i+S7tlxyXG4gICAgY29uc3QgaGFuZGxlRHJvcCA9IChlOiBhbnkpID0+IHtcclxuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgY29uc29sZS5sb2coZSwgXCLmi5bliqjov4fnqIvkuK3vvIzph4rmlL7pvKDmoIfop6blj5Hkuovku7ZcIik7XHJcblxyXG4gICAgfVxyXG4gICAgLy8g5b2T6KKr6byg5qCH5ouW5Yqo55qE5a+56LGh6L+b5YWl5YW25a655Zmo6IyD5Zu05YaF5pe26Kem5Y+R5q2k5LqL5Lu2XHJcbiAgICBjb25zdCBoYW5kbGVEcmFnRW50ZXIgPSAoZTogYW55KSA9PiB7XHJcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICBjb25zb2xlLmxvZyhlLmNsaWVudFgpO1xyXG5cclxuXHJcblxyXG5cclxuICAgIH1cclxuICAgIC8vIOW9k+iiq+m8oOagh+aLluWKqOeahOWvueixoeemu+W8gOWFtuWuueWZqOiMg+WbtOWGheaXtuinpuWPkeatpOS6i+S7tlxyXG4gICAgY29uc3QgaGFuZGxlRHJhZ0xlYXZlID0gKGU6IGFueSkgPT4ge1xyXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICBjb25zb2xlLmxvZyhlLCBcIuW9k+iiq+m8oOagh+aLluWKqOeahOWvueixoSDnprvlvIAg5YW25a655Zmo6IyD5Zu05YaFXCIpO1xyXG5cclxuICAgIH1cclxuICAgIC8vIOW9k+afkOiiq+aLluWKqOeahOWvueixoeWcqOWPpuS4gOWvueixoeWuueWZqOiMg+WbtOWGheaLluWKqOaXtuinpuWPkeatpOS6i+S7tlxyXG4gICAgY29uc3Qgb25EcmFnT3ZlciA9ICgpID0+IHtcclxuXHJcbiAgICB9XHJcbiAgICBjb25zdCBoYW5kbGVEcmFnRW50ZXJzID0gKCkgPT4ge1xyXG4gICAgICAgIC8vIGNvbnN0IGRhZWMgPSBbLi4uY2VsZWJyaXR5XTtcclxuICAgICAgICAvLyAgZGFlYy5wdXNoKHtcclxuICAgICAgICAvLyAgICAgaWQ6IDEsXHJcbiAgICAgICAgLy8gICAgIHRpdGxlOiBcIuWFtuWunuWcsOS4iuacrOayoeaciei3r++8jOi1sOeahOS6uuWkmuS6hu+8jOS5n+S+v+aIkOS6hui3r+OAglwiLFxyXG4gICAgICAgIC8vICAgICB1c2VybmFtZTogXCLlrrbnjq5cIixcclxuICAgICAgICAvLyAgICAgcG9pbnQ6IDYwXHJcbiAgICAgICAgLy8gfSlcclxuICAgICAgICAvLyBzZXRjZWxlYnJpdHkoZGFlYylcclxuXHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXY+XHJcblxyXG4gICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwibHV4dW4tbGlzdFwiXHJcbiAgICAgICAgICAgICAgICBvbkRyb3A9e2hhbmRsZURyb3B9XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gb25EcmFnTGVhdmU9e2hhbmRsZURyYWdMZWF2ZX1cclxuICAgICAgICAgICAgICAgIG9uRHJhZ092ZXI9e2hhbmRsZURyYWdPdmVyfVxyXG5cclxuICAgICAgICAgICAgPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkcmFncHVsbC10aXRsZVwiPumygei/hTwvZGl2PlxyXG4gICAgICAgICAgICAgICAge2x1WHVuLm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gPGxpIGRyYWdnYWJsZT1cInRydWVcIiBpZD17YCR7aXRlbS5pZH1gfSBjbGFzc05hbWU9XCJkcmFncHVsbC1saVwiIG9uRHJhZ1N0YXJ0PXsoZSkgPT4gaGFuZGxlRHJhZ1N0YXJ0KGUsIGl0ZW0pfSBrZXk9e2luZGV4fT57aXRlbS50aXRsZX08L2xpPlxyXG4gICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgIDwvdWw+XHJcblxyXG5cclxuICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cImx1eHVuLWxpc3RcIlxyXG5cclxuICAgICAgICAgICAgICAgIG9uRHJhZ0VudGVyPXtoYW5kbGVEcmFnRW50ZXJzfVxyXG4gICAgICAgICAgICA+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRyYWdwdWxsLXRpdGxlXCI+5ZGo5qCR5Lq6PC9kaXY+XHJcbiAgICAgICAgICAgICAgICB7Y2VsZWJyaXR5Lm1hcCgoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gPGxpIGNsYXNzTmFtZT1cImRyYWdwdWxsLXRpdGxlXCIgZHJhZ2dhYmxlPVwidHJ1ZVwiIGtleT17aW5kZXh9PntpdGVtLnRpdGxlfTwvbGk+XHJcbiAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgPC91bD5cclxuXHJcblxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgZHJhZ1NsaWRlXHJcblxyXG4iLCJpbXBvcnQgUmVhY3QsIHsgRnVuY3Rpb25Db21wb25lbnQsIHVzZUVmZmVjdCwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcclxuaW1wb3J0IFwiLi9jaXR5U2VsZWN0LnNjc3NcIlxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG5cclxufVxyXG5jb25zdCBDaXR5U2VsZWN0OiBGdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAocHJvcHMpID0+IHtcclxuICAgIGNvbnN0IFtkaWFsb2dWaXNpYmxlLCBzZXREaWFsb2dWaXNibGVdID0gdXNlU3RhdGU8Qm9vbGVhbj4oZmFsc2UpXHJcbiAgICBjb25zdCBvbkNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgIHNldERpYWxvZ1Zpc2JsZSh0cnVlKVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IG9uQ2xpY2s9e29uQ2xpY2t9Pntwcm9wcy5jaGlsZHJlbn08L2Rpdj5cclxuICAgICAgICAgICAge2RpYWxvZ1Zpc2libGUgJiYgPERpYWxvZyBvbkNsb3NlPXsoKSA9PiB7IHNldERpYWxvZ1Zpc2JsZShmYWxzZSkgfX0+PC9EaWFsb2c+fVxyXG5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBDaXR5U2VsZWN0XHJcbmNvbnN0IERpYWxvZzogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQ8eyBvbkNsb3NlOiAoKSA9PiB2b2lkIH0+ID0gKHByb3BzKSA9PiB7XHJcbiAgICByZXR1cm4gUmVhY3RET00uY3JlYXRlUG9ydGFsKChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZnVpLWNpdHlTZWxlY3QtZGlhbG9nJyBvbkNsaWNrPXtwcm9wcy5vbkNsb3NlfT5cclxuICAgICAgICAgICAgPGhlYWRlciA+IFxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaWNvblwiPiZsdDs8L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8c3Bhbj7pgInmi6nln47luII8L3NwYW4+XHJcbiAgICAgICAgICAgIDwvaGVhZGVyPlxyXG5cclxuICAgICAgICAgICAgPEN1cnJlbnRMb2NhdGlvbj48L0N1cnJlbnRMb2NhdGlvbj5cclxuICAgICAgICAgICAgPGgyPuWFqOmDqOWfjuW4gjwvaDI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPSdjaXR5SW5kZXgnPkFiY2Q8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NpdHlMaXN0Jz7miYDmnInln47luII8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICksIGRvY3VtZW50LmJvZHkpXHJcblxyXG59XHJcblxyXG5jb25zdCBDdXJyZW50TG9jYXRpb246IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gICAgY29uc3QgW2NpdHksIHNldENpdHldID0gdXNlU3RhdGU8c3RyaW5nPihcIuWKoOi9veS4rS4uLlwiKVxyXG4gICAgdXNlRWZmZWN0KCgpPT57XHJcbiAgICAgICAgY29uc3QgeGhyID1uZXcgWE1MSHR0cFJlcXVlc3QoKVxyXG4gICAgICAgIHhoci5vcGVuKCBcImdldFwiLCdodHRwOi8vaXAtYXBpLmNvbS9qc29uLz9sYW5nPXpoLUNOJylcclxuICAgICAgICB4aHIub25sb2FkPSgpPT57XHJcbiAgICAgICAgICAgIGNvbnN0IHN0cmluZyA9eGhyLnJlc3BvbnNlVGV4dDtcclxuICAgICAgICAgICAgY29uc3Qgb2JqID1KU09OLnBhcnNlKHN0cmluZyk7XHJcbiAgICAgICAgICAgIGNvbnN0IGM9b2JqLmNpdHk7XHJcbiAgICAgICAgICAgIHNldENpdHkoYylcclxuICAgICAgICB9O1xyXG4gICAgICAgIHhoci5vbmVycm9yPSgpPT57XHJcbiAgICAgICAgICAgIHNldENpdHkoJ+acquefpScpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHhoci5zZW5kKCk7XHJcbiAgICB9LFtdKVxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImN1cnJlbnRDaXR5XCI+XHJcbiAgICAgICAgICAgIOW9k+WJjeWfjuW4gjp7Y2l0eX1cclxuICAgICAgICA8L2Rpdj5cclxuICAgIClcclxuXHJcbn1cclxuIiwiaW1wb3J0IFJlYWN0LCB7IEZ1bmN0aW9uQ29tcG9uZW50LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgUmVhY3RET00gZnJvbSBcInJlYWN0LWRvbVwiO1xyXG5pbXBvcnQgQ2l0eVNlbGVjdCBmcm9tIFwiLi9jaXR5U2VsZWN0XCI7XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG5cclxufVxyXG5jb25zdCBDaXR5U2VsZWN0RXhhbXBsZTogRnVuY3Rpb25Db21wb25lbnQ8UHJvcHM+ID0gKHByb3BzKSA9PiB7XHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPGRpdj48aDI+56ys5LiA5Liq5L6L5a2QPC9oMj5cclxuICAgICAgICAgICAgICAgIDxDaXR5U2VsZWN0PumAieaLqeWfjuW4gjwvQ2l0eVNlbGVjdD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IENpdHlTZWxlY3RFeGFtcGxlIiwiaW1wb3J0IFJlYWN0LCB7IEZ1bmN0aW9uQ29tcG9uZW50LCB1c2VFZmZlY3QsIHVzZVJlZiwgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW50ZXJmYWNlIFByb3BzIHtcclxuXHJcbn1cclxuY29uc3QgQWN0aW9uU2hlZXQ6IEZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPiA9IChwcm9wcykgPT4ge1xyXG4gICAgY29uc3QgW2hpZGUsIHNldGhpZGVdID0gdXNlU3RhdGUoZmFsc2UpXHJcblxyXG4gICAgY29uc3QgW2RhdGFzZXQsIHNldGRhdGFzZXRdID0gdXNlU3RhdGUoWyfnrKzkuIAnLCBcIuesrOS6jFwiLCBcImRpc2hhblwiXSlcclxuICAgIGNvbnN0IGRpdlJlZiA9IHVzZVJlZjxIVE1MRGl2RWxlbWVudD4obnVsbClcclxuICAgIGNvbnN0IGRpdlJlZnN3ID0gdXNlUmVmPEhUTUxEaXZFbGVtZW50PihudWxsKVxyXG4gICAgY29uc3Qgb25jbGlja3MgPSAoaXRlbTogYW55KSA9PiB7XHJcbiAgICAgICAgY29uc29sZS5sb2coaXRlbSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHVzZVVwZGF0ZSA9IChkZXA6IGFueSwgZm46ICgpID0+IHZvaWQpID0+IHtcclxuICAgICAgICBjb25zdCBbY291bnQsIHNldENvdW50XSA9IHVzZVN0YXRlKDApXHJcbiAgICAgICAgdXNlRWZmZWN0KCgpID0+IHsgc2V0Q291bnQoeCA9PiB4ICsgMSkgfSwgW2RlcF0pXHJcbiAgICAgICAgdXNlRWZmZWN0KCgpID0+IHsgaWYgKGNvdW50ID4gMSkgeyBmbigpIH0gfSwgW2NvdW50XSlcclxuICAgIH1cclxuICAgIHVzZVVwZGF0ZShoaWRlLCAoKSA9PiB7XHJcbiAgICAgICAgaWYgKGhpZGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCLmiZPlvIBcIik7XHJcbiAgICAgICAgICAgIGlmICghZGl2UmVmLmN1cnJlbnR8fCFkaXZSZWZzdy5jdXJyZW50KSB7IHJldHVybiB9XHJcbiAgICAgICAgICAgIGRpdlJlZnN3LmN1cnJlbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yPSdyZ2JhKDIxNiwgMjE2LCAyMTYsIDApJ1xyXG4gICAgICAgICAgICBkaXZSZWYuY3VycmVudC5zdHlsZS5oZWlnaHQgPSBcImF1dG9cIjtcclxuICAgICAgICAgICAgZGl2UmVmc3cuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgICAgICAgICBjb25zdCB7IGhlaWdodCB9ID0gZGl2UmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuICAgICAgICAgICAgZGl2UmVmLmN1cnJlbnQuc3R5bGUuaGVpZ2h0ID0gXCIwcHhcIjtcclxuICAgICAgICAgICAgZGl2UmVmLmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuICAgICAgICAgICAgZGl2UmVmLmN1cnJlbnQuc3R5bGUuaGVpZ2h0ID0gaGVpZ2h0ICsgXCJweFwiXHJcbiAgICAgICAgICAgIGRpdlJlZnN3LmN1cnJlbnQuc3R5bGUuYmFja2dyb3VuZENvbG9yPSdyZ2JhKDIxNiwgMjE2LCAyMTYsIC41KSdcclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCLlhbPpl61cIik7XHJcbiAgICAgICAgICAgIGlmICghZGl2UmVmLmN1cnJlbnR8fCFkaXZSZWZzdy5jdXJyZW50KSB7IHJldHVybiB9XHJcbiAgICAgICAgICAgIGNvbnN0IHsgaGVpZ2h0IH0gPSBkaXZSZWYuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgICAgICAgICBkaXZSZWYuY3VycmVudC5zdHlsZS5oZWlnaHQgPSBoZWlnaHQrXCJweFwiO1xyXG4gICAgICAgICAgICBkaXZSZWYuY3VycmVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgICAgICAgICBkaXZSZWYuY3VycmVudC5zdHlsZS5oZWlnaHQgPSBcIjBweFwiO1xyXG4gICAgICAgICAgICBkaXZSZWZzdy5jdXJyZW50LnN0eWxlLmJhY2tncm91bmRDb2xvcj0ncmdiYSgyMTYsIDIxNiwgMjE2LCAuNSknXHJcbiAgICAgICAgICAgIGRpdlJlZnN3LmN1cnJlbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KClcclxuICAgICAgICAgICAgZGl2UmVmc3cuY3VycmVudC5zdHlsZS5iYWNrZ3JvdW5kQ29sb3I9J3JnYmEoMjE2LCAyMTYsIDIxNiwgMCknXHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJBY3Rpb25cIj5cclxuICAgICAgICAgICAgPGgyPuesrOS4gOS4quS+i+WtkDwvaDI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYWN0aW9uc2hlZXRcIiBvbkNsaWNrPXsoKSA9PiBzZXRoaWRlKHRydWUpfT5cclxuICAgICAgICAgICAgICAgIDxkaXY+5Z+656GA55So5Y+RPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PuOAizwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiByZWY9e2RpdlJlZnN3fSBjbGFzc05hbWU9e2hpZGUgPyBcImFjdGlvbnNoZWV0LWRpYWxvZ1wiIDogXCJub25lXCJ9IG9uQ2xpY2s9eygpID0+IHNldGhpZGUoZmFsc2UpXHJcbiAgICAgICAgICAgIH0+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nZGlhbG9nLXonIHJlZj17ZGl2UmVmfT5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRpYWxvZy1oZWFkXCIgPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAge2RhdGFzZXQubWFwKChpdGVtKSA9PiAoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRpYWxvZ1wiIGtleT17aXRlbX0gb25DbGljaz17KCkgPT4geyBvbmNsaWNrcyhpdGVtKSB9fT4ge2l0ZW19PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICkpfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2RpYWxvZy1xdXgnIG9uQ2xpY2s9eygpID0+IHNldGhpZGUoZmFsc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgfT5cclxuICAgICAgICAgICAgICAgICAgICAgICAg5Y+W5raIXHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgQWN0aW9uU2hlZXQiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFwiLi90YWIuc2Nzc1wiXHJcblxyXG5cclxuY29uc3QgVGFiOiBhbnkgPSAocHJvcHM6IGFueSkgPT4ge1xyXG4gICAgY29uc29sZS5sb2cocHJvcHMpO1xyXG5cclxuICAgIGNvbnN0IFtjdXJyZW50SW5kZXgsIHNldGN1cnJlbnRJbmRleF0gPSB1c2VTdGF0ZTxudW1iZXI+KDApO1xyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YWJzXCI+XHJcbiAgICAgICAgICAgICAgICB7UmVhY3QuQ2hpbGRyZW4ubWFwKHByb3BzLmNoaWxkcmVuLCAoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gPGRpdiBvbkNsaWNrPXsoKSA9PiB7IHNldGN1cnJlbnRJbmRleChpbmRleCkgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjdXJyZW50SW5kZXggPT09IGluZGV4ID8gXCJzZWxlY3QgYm94c3dcIiA6IFwiIHNlbGVjdCBcIn0+e2l0ZW0/LnByb3BzLnRpdGxlfTwvZGl2PlxyXG4gICAgICAgICAgICAgICAgfSl9XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwidGFicy1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICB7UmVhY3QuQ2hpbGRyZW4ubWFwKHByb3BzLmNoaWxkcmVuLCAoaXRlbSwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gPGRpdiBvbkNsaWNrPXsoKSA9PiB7IHNldGN1cnJlbnRJbmRleChpbmRleCkgfX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPXtjdXJyZW50SW5kZXggPT09IGluZGV4ID8gXCJ0YWJzLWNvbnRlbnQtc2VsZWN0XCIgOiBcIm5vbmVcIn0+e2l0ZW19PC9kaXY+XHJcbiAgICAgICAgICAgICAgICB9KX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgIClcclxuXHJcbn1cclxuXHJcblRhYi5UYWJQYW5lID0gKHByb3BzMTogYW55KSA9PiB7XHJcblxyXG4gICAgY29uc29sZS5sb2cocHJvcHMxKTtcclxuXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2Pntwcm9wczF9PC9kaXY+XHJcbiAgICApXHJcbn1cclxuXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVGFiIiwiXHJcbmltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuXHJcbmltcG9ydCBcIi4vdGFibGUuc2Nzc1wiXHJcblxyXG5jb25zdCBUYWJsZXM6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PFByb3BzPiA9ICgpID0+IHtcclxuICAgIC8vIGNvbnN0IFtkaXNwbGF5LCBzZXRkaXNwbGF5XSA9IHVzZVN0YXRlKFsxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxLCAxXSlcclxuICAgIC8vIGNvbnN0IG9uZGV4ID0gKGU6IGFueSwgaW5kZXg6IGFueSkgPT4ge1xyXG4gICAgLy8gICAgIGlmIChlLnRhcmdldC5pbm5lclRleHQgPT0gXCLlsZXlvIBcIikge1xyXG5cclxuICAgIC8vICAgICAgICAgaWYgKGRpc3BsYXlbaW5kZXhdID09PSAxKSB7XHJcblxyXG4gICAgLy8gICAgICAgICAgICAgZGlzcGxheVtpbmRleF0gPSAwXHJcbiAgICAvLyAgICAgICAgICAgICBjb25zdCBsaXN0ID0gWy4uLmRpc3BsYXldXHJcbiAgICAvLyAgICAgICAgICAgICBzZXRkaXNwbGF5KGxpc3QpXHJcbiAgICAvLyAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAvLyAgICAgICAgICAgICBkaXNwbGF5W2luZGV4XSA9IDFcclxuICAgIC8vICAgICAgICAgICAgIGNvbnN0IGxpc3QgPSBbLi4uZGlzcGxheV1cclxuICAgIC8vICAgICAgICAgICAgIHNldGRpc3BsYXkobGlzdClcclxuXHJcbiAgICAvLyAgICAgICAgIH1cclxuXHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gfVxyXG4gICAgLy8gY29uc3QgW2RhdGEsIHNldERhdGFdID0gdXNlU3RhdGUoW10pO1xyXG4gICAgLy8gdXNlRWZmZWN0KCgpID0+IHtcclxuICAgIC8vICAgICBhc3luY0ZldGNoKCk7XHJcbiAgICAvLyB9LCBbXSk7XHJcbiAgICAvLyBjb25zdCBhc3luY0ZldGNoID0gKCkgPT4ge1xyXG4gICAgLy8gICAgIGZldGNoKCdodHRwczovL2d3LmFsaXBheW9iamVjdHMuY29tL29zL2Jtdy1wcm9kLzU1NDI0YTczLTdjYjgtNGY3OS1iNjBkLTNhYjYyN2FjNTY5OC5qc29uJylcclxuICAgIC8vICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiByZXNwb25zZS5qc29uKCkpXHJcbiAgICAvLyAgICAgICAgIC50aGVuKChqc29uKSA9PiBzZXREYXRhKGpzb24pKVxyXG4gICAgLy8gICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XHJcbiAgICAvLyAgICAgICAgICAgICBjb25zb2xlLmxvZygnZmV0Y2ggZGF0YSBmYWlsZWQnLCBlcnJvcik7XHJcbiAgICAvLyAgICAgICAgIH0pO1xyXG4gICAgLy8gfTtcclxuICAgIC8vIGNvbnN0IHRocmV0bSA9IChpdGVtOiBhbnkpID0+IHtcclxuICAgIC8vICAgICByZXR1cm4gPHRoIGNsYXNzTmFtZT1cInRhYmxlLXRoXCIga2V5PXtpdGVtLmtleX0+e2l0ZW0udGl0bGV9PC90aD5cclxuICAgIC8vIH1cclxuICAgIC8vIGNvbnN0IG9uSW1wb3J0RXhjZWwgPSAoZmlsZTogYW55KSA9PiB7XHJcbiAgICAvLyAgICAgLy8g6I635Y+W5LiK5Lyg55qE5paH5Lu25a+56LGhXHJcbiAgICAvLyAgICAgY29uc3QgeyBmaWxlcyB9ID0gZmlsZS50YXJnZXQ7XHJcbiAgICAvLyAgICAgLy8g6YCa6L+HRmlsZVJlYWRlcuWvueixoeivu+WPluaWh+S7tlxyXG4gICAgLy8gICAgIGNvbnN0IGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgLy8gICAgIGZpbGVSZWFkZXIub25sb2FkID0gZXZlbnQgPT4ge1xyXG4gICAgLy8gICAgICAgICB0cnkge1xyXG4gICAgLy8gICAgICAgICAgICAgY29uc3Qgc3NzID0gZXZlbnQudGFyZ2V0Py5yZXN1bHQ7XHJcbiAgICAvLyAgICAgICAgICAgICAvLyDku6Xkuozov5vliLbmtYHmlrnlvI/or7vlj5blvpfliLDmlbTku71leGNlbOihqOagvOWvueixoVxyXG4gICAgLy8gICAgICAgICAgICAgY29uc3Qgd29ya2Jvb2sgPSBYTFNYLnJlYWQoc3NzLCB7IHR5cGU6ICdiaW5hcnknIH0pO1xyXG4gICAgLy8gICAgICAgICAgICAgbGV0IGRhdGE6IGFueSA9IFtdOyAvLyDlrZjlgqjojrflj5bliLDnmoTmlbDmja5cclxuICAgIC8vICAgICAgICAgICAgIC8vIOmBjeWOhuavj+W8oOW3peS9nOihqOi/m+ihjOivu+WPlu+8iOi/memHjOm7mOiupOWPquivu+WPluesrOS4gOW8oOihqO+8iVxyXG4gICAgLy8gICAgICAgICAgICAgZm9yIChjb25zdCBzaGVldCBpbiB3b3JrYm9vay5TaGVldHMpIHtcclxuICAgIC8vICAgICAgICAgICAgICAgICBpZiAod29ya2Jvb2suU2hlZXRzLmhhc093blByb3BlcnR5KHNoZWV0KSkge1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAvLyDliKnnlKggc2hlZXRfdG9fanNvbiDmlrnms5XlsIYgZXhjZWwg6L2s5oiQIGpzb24g5pWw5o2uXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhLmNvbmNhdChYTFNYLnV0aWxzLnNoZWV0X3RvX2pzb24od29ya2Jvb2suU2hlZXRzW3NoZWV0XSkpO1xyXG4gICAgLy8gICAgICAgICAgICAgICAgICAgICAvLyBicmVhazsgLy8g5aaC5p6c5Y+q5Y+W56ys5LiA5byg6KGo77yM5bCx5Y+W5raI5rOo6YeK6L+Z6KGMXHJcbiAgICAvLyAgICAgICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgfVxyXG4gICAgLy8gICAgICAgICAgICAgY29uc29sZS5sb2coZGF0YSk7XHJcbiAgICAvLyAgICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgIC8vICAgICAgICAgICAgIC8vIOi/memHjOWPr+S7peaKm+WHuuaWh+S7tuexu+Wei+mUmeivr+S4jeato+ehrueahOebuOWFs+aPkOekulxyXG4gICAgLy8gICAgICAgICAgICAgY29uc29sZS5sb2coJ+aWh+S7tuexu+Wei+S4jeato+ehricpO1xyXG4gICAgLy8gICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgLy8gICAgICAgICB9XHJcbiAgICAvLyAgICAgfTtcclxuICAgIC8vICAgICAvLyDku6Xkuozov5vliLbmlrnlvI/miZPlvIDmlofku7ZcclxuICAgIC8vICAgICBmaWxlUmVhZGVyLnJlYWRBc0JpbmFyeVN0cmluZyhmaWxlc1swXSk7XHJcbiAgICAvLyB9XHJcblxyXG4gXHJcbiAgIFxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInRhYmxlc1wiID5cclxuICAgICAgICAgICBcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuXHJcblxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcblxyXG5pbnRlcmZhY2UgUHJvcHMge1xyXG4gICAgZGF0YVNvdXJjZXc/OiBhbnksXHJcbiAgICBjb2x1bW5zPzogYW55LFxyXG4gICAgZG9tZTogYW55XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFRhYmxlczsiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZVJlZHVjZXIgfSBmcm9tICdyZWFjdCc7XHJcbmludGVyZmFjZSBzdGF0ZXh3IHtcclxuICAgIHVzZXI6IHN0cmluZyxcclxuICAgIGJvb2tzOiBzdHJpbmcsXHJcbiAgICBtb3ZpZXM6IHN0cmluZ1xyXG59XHJcbi8vIOeKtuaAgeWtmOWCqFxyXG5jb25zdCBzdG9yZSA9IHtcclxuICAgIHVzZXI6IFwiXCIsLy/kv6Hmga9cclxuICAgIGJvb2tzOiBcIlwiLC8v5Lmm57GNXHJcbiAgICBtb3ZpZXM6IFwiXCIgLy/nlLXlvbFcclxufVxyXG5pbnRlcmZhY2UgQWN0aW9uIHtcclxuICAgIHR5cGU6IHN0cmluZyxcclxuICAgIFtrZXk6IHN0cmluZ106IHN0cmluZztcclxufVxyXG5cclxuY29uc3QgcmVkdWNlciA9IChzdGF0ZTogc3RhdGV4dywgYWN0aW9uOiBBY3Rpb24pID0+IHtcclxuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcclxuICAgICAgICBjYXNlIFwic2V0VXNlclwiOlxyXG4gICAgICAgICAgICByZXR1cm4geyAuLi5zdGF0ZSwgdXNlcjogYWN0aW9uLnVzZXIgfVxyXG4gICAgICAgIGNhc2UgXCJzZXRCb29rXCI6XHJcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBib29rczogYWN0aW9uLmJvb2tzIH1cclxuICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoKVxyXG4gICAgfVxyXG5cclxufVxyXG5cclxuXHJcbmludGVyZmFjZSBDb250ZXh0UHJvcHMge1xyXG4gICAgc3RhdGU6IHN0YXRleHc7XHJcbiAgICBkaXNwYXRjaDogUmVhY3QuRGlzcGF0Y2g8QWN0aW9uPjtcclxufVxyXG5cclxuY29uc3QgQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoe30gYXMgQ29udGV4dFByb3BzKVxyXG5cclxuXHJcbmNvbnN0IFJlZHV4eHdzID0gKCkgPT4ge1xyXG4gICAgY29uc3QgW3N0YXRlLCBkaXNwYXRjaF0gPSB1c2VSZWR1Y2VyKHJlZHVjZXIsIHN0b3JlKVxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17eyBzdGF0ZSwgZGlzcGF0Y2ggfX0+XHJcbiAgICAgICAgICAgIDxVc2VyPjwvVXNlcj5cclxuICAgICAgICAgICAgPEJvb2tzPjwvQm9va3M+XHJcbiAgICAgICAgICAgIDxNb292aWVzPjwvTW9vdmllcz5cclxuICAgICAgICA8L0NvbnRleHQuUHJvdmlkZXI+XHJcbiAgICApXHJcblxyXG59O1xyXG5cclxuY29uc3QgVXNlciA9ICgpID0+IHtcclxuICAgIGNvbnN0IHsgc3RhdGUsIGRpc3BhdGNoIH0gPSB1c2VDb250ZXh0KENvbnRleHQpXHJcbiAgICBjb25zdCBkc2FkdyA9ICgpID0+IHtcclxuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6IFwic2V0VXNlclwiLCB1c2VyOiAnYmFpamlhd2VpJyB9KVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIDxkaXY+XHJcbiAgICAgICAgPGgxIG9uQ2xpY2s9e2RzYWR3fT7miJHnmoTkv6Hmga88L2gxPlxyXG4gICAgICAgIDxoMT5uYW1lOntzdGF0ZT8udXNlcn08L2gxPlxyXG4gICAgPC9kaXY+XHJcbn1cclxuY29uc3QgQm9va3MgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxoMT7miJHnmoTkuabnsY08L2gxPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcbmNvbnN0IE1vb3ZpZXMgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxoMT7miJHnmoTnlLXlvbE8L2gxPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgUmVkdXh4d3M7IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5leHBvcnQgaW50ZXJmYWNlIE9wdGlvblByb3BzIHtcclxuICAgIHZhbHVlOiBzdHJpbmcgfCBudW1iZXJcclxuICAgIGNoZWNrZWRWYWx1ZT86IGFueVxyXG4gICAgb25DbGljaz86IChjaGVja2VkVmFsdWU6IGFueSwgZTogUmVhY3QuTW91c2VFdmVudCkgPT4gYW55XHJcbiAgICByYWRpb1N0eWxlPzogJ3JhZGlvJyB8ICdidXR0b24nXHJcbiAgICBkaXNhYmxlZD86IGJvb2xlYW5cclxuICAgIHZlcnRpY2FsPzogYm9vbGVhblxyXG4gICAgY2xhc3NOYW1lPzogc3RyaW5nXHJcbiAgICBzdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXNcclxufVxyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuICAgIHZhbHVlPzogYW55XHJcbiAgICBkZWZhdWx0VmFsdWU/OiBhbnlcclxuICAgIG9uQ2hhbmdlPzogKGNoZWNrZWRWYWx1ZTogYW55LCBlOiBSZWFjdC5Nb3VzZUV2ZW50KSA9PiBhbnlcclxuICAgIHZlcnRpY2FsPzogYm9vbGVhblxyXG4gICAgcmFkaW9TdHlsZT86ICdyYWRpbycgfCAnYnV0dG9uJ1xyXG4gICAgY2xhc3NOYW1lPzogc3RyaW5nXHJcbiAgICBzdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXNcclxuXHJcbn1cclxuXHJcbmNvbnN0IFJhZGlvOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAocHJvcHMpID0+IHtcclxuXHJcbiAgICBjb25zdCBbY2hlY2tlZFZhbHVldywgc2V0Y2hlY2tlZFZhbHVlXSA9IHVzZVN0YXRlKHByb3BzLmRlZmF1bHRWYWx1ZSk7XHJcbiAgICBjb25zdCBoYW5kbGVDbGljazogKGNoZWNrZWRWYWx1ZTogYW55LCBlOiBSZWFjdC5Nb3VzZUV2ZW50KSA9PiBhbnkgPSAoXHJcbiAgICAgICAgY2hlY2tlZFZhbHVlLFxyXG4gICAgICAgIGVcclxuICAgICkgPT4ge1xyXG4gICAgICAgIGlmIChjaGVja2VkVmFsdWUgIT09IGNoZWNrZWRWYWx1ZXcpIHtcclxuICAgICAgICAgICAgc2V0Y2hlY2tlZFZhbHVlKGNoZWNrZWRWYWx1ZSlcclxuICAgICAgICAgICAgaWYgKHByb3BzLm9uQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICBwcm9wcy5vbkNoYW5nZShjaGVja2VkVmFsdWUsIGUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCByZW5kZXJDaGlsZHJlbiA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCB7IHJhZGlvU3R5bGUgPSBcInJhZGlvXCIsIHZlcnRpY2FsID0gZmFsc2UsIGNoaWxkcmVuIH0gPSBwcm9wc1xyXG4gICAgICAgIHJldHVybiBSZWFjdC5DaGlsZHJlbi5tYXAoXHJcbiAgICAgICAgICAgIGNoaWxkcmVuLFxyXG4gICAgICAgICAgICAoY2hpbGQ6IFJlYWN0LlJlYWN0RWxlbWVudDxPcHRpb25Qcm9wcz4pID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBSZWFjdC5jbG9uZUVsZW1lbnQoY2hpbGQsIHtcclxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrOiBoYW5kbGVDbGljayxcclxuICAgICAgICAgICAgICAgICAgICBjaGVja2VkVmFsdWU6IGNoZWNrZWRWYWx1ZXcsXHJcbiAgICAgICAgICAgICAgICAgICAgcmFkaW9TdHlsZSxcclxuICAgICAgICAgICAgICAgICAgICB2ZXJ0aWNhbFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIClcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17XCJ4dWUtcmFkaW9cIiArIFwiIFwiICsgW3Byb3BzLmNsYXNzTmFtZV19IHN0eWxlPXtwcm9wcy5zdHlsZX0+XHJcbiAgICAgICAge3JlbmRlckNoaWxkcmVuKCl9XHJcbiAgICA8L2Rpdj5cclxufVxyXG5leHBvcnQgZGVmYXVsdCBSYWRpb1xyXG5cclxuXHJcbiIsImNvbnN0IHByZWZpeCA9IFwieHVlXCI7XHJcblxyXG5mdW5jdGlvbiBjbGFzc1N5bGUoY29tcG9uZW50TmFtZTogc3RyaW5nLCAuLi5hcmdzOiBhbnkpOiBzdHJpbmcge1xyXG4gIGNvbnN0IGNsYXNzTmFtZSA9IG5ldyBBcnJheTxzdHJpbmc+KCk7XHJcbiAgYXJncy5mb3JFYWNoKChhcmc6IGFueSkgPT4ge1xyXG4gICAgaWYgKHR5cGVvZiBhcmcgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgY2xhc3NOYW1lLnB1c2goXHJcbiAgICAgICAgYCR7cHJlZml4fS0ke2NvbXBvbmVudE5hbWUudG9Mb3dlckNhc2UoKX0ke2FyZyAmJiBcIi1cIiArIGFyZ31gXHJcbiAgICAgICk7XHJcbiAgICB9IGVsc2UgaWYgKGFyZyBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgIGFyZy5mb3JFYWNoKHN0ciA9PiB0eXBlb2Ygc3RyID09PSBcInN0cmluZ1wiICYmIGNsYXNzTmFtZS5wdXNoKHN0cikpO1xyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYXJnID09PSBcIm9iamVjdFwiICYmICEoYXJnIGluc3RhbmNlb2YgQXJyYXkpKSB7XHJcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIGFyZykge1xyXG4gICAgICAgIGlmIChhcmcuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBhcmdba2V5XSkge1xyXG4gICAgICAgICAgY2xhc3NOYW1lLnB1c2goa2V5KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9KTtcclxuICByZXR1cm4gY2xhc3NOYW1lLmZpbHRlcih2ID0+IHYpLmpvaW4oXCIgXCIpO1xyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzc1N5bGU7XHJcbiIsIlxyXG5pbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0IH0gZnJvbSBcInJlYWN0XCJcclxuaW1wb3J0IFwiLi9TdHlsZS9pbmRleC5zY3NzXCJcclxuaW1wb3J0IGNsYXNzU3lsZSBmcm9tIFwiLi4vdXRpbHMvY2xhc3NTeWxlXCJcclxuaW1wb3J0ICogYXMgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnXHJcbmludGVyZmFjZSBQcm9wcyB7XHJcbiAgdmFsdWU6IGFueVxyXG4gIGNoZWNrZWRWYWx1ZT86IGFueVxyXG4gIG9uQ2xpY2s/OiAoY2hlY2tlZFZhbHVlOiBhbnksIGU6IFJlYWN0Lk1vdXNlRXZlbnQpID0+IGFueVxyXG4gIHJhZGlvU3R5bGU/OiAncmFkaW8nIHwgJ2J1dHRvbidcclxuICBkaXNhYmxlZD86IGJvb2xlYW5cclxuICB2ZXJ0aWNhbD86IGJvb2xlYW5cclxuICBjbGFzc05hbWU/OiBzdHJpbmdcclxuICBzdHlsZT86IFJlYWN0LkNTU1Byb3BlcnRpZXNcclxufVxyXG5cclxuY29uc3QgT3B0aW9uOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAocHJvcHM6IGFueSkgPT4ge1xyXG5cclxuXHJcblxyXG5cclxuICBjb25zdCBwcm9wVHlwZXMgPSB7XHJcbiAgICB2YWx1ZTogUHJvcFR5cGVzLmFueS5pc1JlcXVpcmVkLFxyXG4gICAgY2hlY2tlZFZhbHVlOiBQcm9wVHlwZXMuYW55LFxyXG4gICAgb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXHJcbiAgICByYWRpb1N0eWxlOiBQcm9wVHlwZXMub25lT2YoWydyYWRpbycsICdidXR0b24nXSksXHJcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXHJcbiAgICB2ZXJ0aWNhbDogUHJvcFR5cGVzLmJvb2xcclxuICB9XHJcblxyXG4gIGNvbnN0IHsgY2hlY2tlZFZhbHVlLCByYWRpb1N0eWxlLCBkaXNhYmxlZCwgdmVydGljYWwsIHZhbHVlLCBjaGlsZHJlbiB9ID0gcHJvcHNcclxuXHJcbiAgY29uc3QgZGlzcGxheU5hbWUgPSAnT3B0aW9uJ1xyXG5cclxuXHJcbiAgY29uc3QgaGFuZGxlQ2xpY2s6IFJlYWN0Lk1vdXNlRXZlbnRIYW5kbGVyID0gZSA9PiB7XHJcbiAgICBjb25zdCB7IHZhbHVlLCBvbkNsaWNrLCBkaXNhYmxlZCB9ID0gcHJvcHNcclxuICAgIGlmIChkaXNhYmxlZCB8fCAhb25DbGljaykge1xyXG4gICAgICByZXR1cm5cclxuICAgIH1cclxuICAgIG9uQ2xpY2sodmFsdWUsIGUpXHJcbiAgfVxyXG5cclxuXHJcblxyXG4gIGNvbnN0IG9wdGlvbkNsYXNzTmFtZSA9IGNsYXNzU3lsZShkaXNwbGF5TmFtZSwgJycsIFtyYWRpb1N0eWxlICsgJy1zdHlsZSddLCB7XHJcbiAgICBjaGVja2VkOiB2YWx1ZSA9PT0gY2hlY2tlZFZhbHVlLFxyXG4gICAgZGlzYWJsZWQsXHJcbiAgICB2ZXJ0aWNhbFxyXG4gIH0pXHJcblxyXG4gIHJldHVybiByYWRpb1N0eWxlID09PSAncmFkaW8nID8gKFxyXG4gICAgPGxhYmVsIGNsYXNzTmFtZT17b3B0aW9uQ2xhc3NOYW1lfSBvbkNsaWNrPXtoYW5kbGVDbGlja30+XHJcbiAgICAgIDxzcGFuIGNsYXNzTmFtZT1cImxhYmVsLWRvdFwiIC8+XHJcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwibGFiZWwtdGV4dFwiPntjaGlsZHJlbn08L2Rpdj5cclxuICAgIDwvbGFiZWw+XHJcbiAgKSA6IChcclxuICAgIDxsYWJlbCBjbGFzc05hbWU9e29wdGlvbkNsYXNzTmFtZX0gb25DbGljaz17aGFuZGxlQ2xpY2t9PlxyXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImxhYmVsLXRleHRcIj57Y2hpbGRyZW59PC9kaXY+XHJcbiAgICA8L2xhYmVsPlxyXG4gIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBPcHRpb24iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCB7IHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgY2xhc3NTeWxlIGZyb20gXCIuLi91dGlscy9jbGFzc1N5bGVcIjtcclxuaW1wb3J0IFwiLi9zdHlsZS9zd2l0Y2guc2Nzc1wiO1xyXG5cclxuXHJcblxyXG5cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3dpdGNoUHJvcHMge1xyXG4gICAgY2hlY2tlZD86IGJvb2xlYW5cclxuICAgIGRlZmF1bHRDaGVja2VkPzogYm9vbGVhblxyXG4gICAgc2l6ZT86ICdzbWFsbCcgfCAnZGVmYXVsdCdcclxuICAgIG9uQ2hhbmdlPzogKGNoZWNrZWQ6IGJvb2xlYW4sIGU6IFJlYWN0Lk1vdXNlRXZlbnQpID0+IGFueVxyXG4gICAgZGlzYWJsZWQ/OiBib29sZWFuXHJcbiAgICBjbGFzc05hbWU/OiBzdHJpbmdcclxuICAgIHN0eWxlPzogUmVhY3QuQ1NTUHJvcGVydGllc1xyXG59XHJcblxyXG5jb25zdCBTd2l0Y2g6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50PFN3aXRjaFByb3BzPiA9IChwcm9wcykgPT4ge1xyXG4gICAgLy8g6I635Y+W5Y+C5pWwXHJcbiAgICBjb25zdCB7IHNpemUsIGRpc2FibGVkLCBzdHlsZSwgY2xhc3NOYW1lLCBvbkNoYW5nZSB9ID0gcHJvcHNcclxuICAgIGNvbnN0IFtkZXJpdmVkQ2hlY2tlZCwgc2V0ZGVyaXZlZENoZWNrZWRdID0gdXNlU3RhdGUocHJvcHMuZGVmYXVsdENoZWNrZWQpO1xyXG4gICAgLy8g5YWz6Zet5omT5byA5LqL5Lu2XHJcbiAgICBjb25zdCBoYW5kbGVDbGljazogUmVhY3QuTW91c2VFdmVudEhhbmRsZXIgPSBlID0+IHtcclxuICAgICAgICBpZiAoZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOWPluWPjVxyXG4gICAgICAgIHNldGRlcml2ZWRDaGVja2VkKCFkZXJpdmVkQ2hlY2tlZClcclxuICAgICAgICBpZiAob25DaGFuZ2UpIHtcclxuICAgICAgICAgICAgb25DaGFuZ2UoIWRlcml2ZWRDaGVja2VkLCBlKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8g57G75ZCN57uf5LiA5aSE55CGXHJcbiAgICBjb25zdCBzd2l0Y2hDbGFzc05hbWUgPSBjbGFzc1N5bGUoJ1N3aXRjaCcsICcnLCBbY2xhc3NOYW1lLCBzaXplXSwge1xyXG4gICAgICAgIGNoZWNrZWQ6IGRlcml2ZWRDaGVja2VkLCAvL+aYr+WQpuaJk+W8gCBcclxuICAgICAgICBkaXNhYmxlZC8v5piv5ZCm56aB55SoXHJcbiAgICB9KVxyXG5cclxuICAgIHJldHVybiA8ZGl2PlxyXG4gICAgICAgIDxzcGFuXHJcbiAgICAgICAgICAgIGNsYXNzTmFtZT17c3dpdGNoQ2xhc3NOYW1lfVxyXG4gICAgICAgICAgICBvbkNsaWNrPXtoYW5kbGVDbGlja31cclxuICAgICAgICAgICAgc3R5bGU9e3N0eWxlfVxyXG4gICAgICAgID5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPXtjbGFzc1N5bGUoJ1N3aXRjaCcsICdjb3JlJyl9IC8+XHJcbiAgICAgICAgPC9zcGFuPlxyXG5cclxuICAgIDwvZGl2PlxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IFN3aXRjaCIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0ICogYXMgUmVhY3RET00gZnJvbSAncmVhY3QtZG9tJztcclxuaW1wb3J0IHsgSGFzaFJvdXRlciBhcyBSb3V0ZXIsIFJvdXRlLCBOYXZMaW5rIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XHJcbmltcG9ydCBEaWFsb2dFeGFtcGxlIGZyb20gJy4vbGliL2RpYWxvZy9kaWFsb2cuZXhhbXBsZSc7XHJcbmltcG9ydCBCdXR0b25FeGFtcGxlIGZyb20gJy4vbGliL2J1dHRvbi9idXR0b24uZXhhbXBsZSc7XHJcbmltcG9ydCBMYXlvdXRFeGFtcGxlIGZyb20gJy4vbGliL2xheW91dC9sYXlvdXQuZXhhbXBsZSc7XHJcbmltcG9ydCB7IExheW91dCwgSGVhZGVyLCBBc2lkZSwgQ29udGVudCwgRm9vdGVyIH0gZnJvbSBcIi4vbGliL2xheW91dC9sYXlvdXRcIlxyXG5pbXBvcnQgJy4vZXhhbXBsZS5zY3NzJztcclxuaW1wb3J0IEljb25EZW1vIGZyb20gJy4vbGliL2ljb24vaWNvbi5kZW1vJztcclxuLy8gY29uc3QgZ2l0PSByZXF1aXJlKCcuL2xpYi9pY29ucy9HaXRIdWIucG5nJyk7XHJcbmltcG9ydCBHYW5ZYW5nIGZyb20gXCIuL2xpYi9ndWFudy9ndWFud2FuZ1wiO1xyXG5pbXBvcnQgVXBkYXRlTG9nIGZyb20gXCIuL2xpYi9ndWFudy9VcGRhdGVMb2dcIjtcclxuaW1wb3J0IHsgbW9kYWwgfSBmcm9tIFwiLi9saWIvZGlhbG9nL2RpYWxvZ1wiO1xyXG5pbXBvcnQgQnV0dG9uc3MgZnJvbSBcIi4vbGliL2J1dHRvbi9idXR0b25cIjtcclxuaW1wb3J0IEZvcm1FeGFtcGxlIGZyb20gXCIuL2xpYi9mb3JtL2Zvcm0uYXNzZW1ibHlcIjtcclxuaW1wb3J0IElucHV0RXhhbXBsZSBmcm9tICcuL2xpYi9pbnB1dC9pbnB1dCBhc3NlbWJseTEnXHJcbmltcG9ydCBIb2MgZnJvbSBcIi4vbGliL2d1YW53L0hPQ1wiO1xyXG5pbXBvcnQgVHJlZUV4YW1wbGUgZnJvbSAnLi9saWIvdHJlZS90cmVlLmV4YW1wbGUnO1xyXG5pbXBvcnQgU2Nyb2xsIGZyb20gJy4vbGliL3Njcm9sbC9zY3JvbGwuZXhhbXBsZSdcclxuaW1wb3J0IE11bHRpcGxlQ2hvaWNlIGZyb20gXCIuL2xpYi9jaG9pY2UvY2hvaWNlLmV4YW1wbGVcIlxyXG5pbXBvcnQgZHJhZ1B1bGwgZnJvbSBcIi4vbGliL2RyYWdQdWxsL2RyYWcuZXhhbXBsZVwiXHJcbmltcG9ydCBjaXR5c2VsZWN0IGZyb20gXCIuL2xpYi9jaXR5U2VsZWN0L2NpdHlTZWxlY3QuZXhhbXBpZVwiXHJcbmltcG9ydCBhY3Rpb25zaGVldCBmcm9tIFwiLi9saWIvYWN0aW9uU2hlZXQvYWN0aW9uc2hlZXQuZXhhbXBsZVwiXHJcbmltcG9ydCBUYWJFeGFtcGxlIGZyb20gXCIuL2xpYi9UYWIvdGFiLmV4YW1wbGVcIlxyXG5pbXBvcnQgVGFibGVzRXhhbXBsZSBmcm9tIFwiLi9saWIvdGFibGUvdGFibGUuZXhhbXBsZVwiXHJcbmltcG9ydCBSZWR1eEV4YW1wbGUgZnJvbSBcIi4vbGliL1JlZHV4L2luZGV4XCJcclxuaW1wb3J0IFJhZGlvRXhhbXBsZSBmcm9tIFwiLi9saWIvcmFkaW8vcmFkaW9cIlxyXG5pbXBvcnQgQWN0aXZpdHlFeGFtcGxlIGZyb20gXCIuL2xpYi9hY3Rpdml0eS9hY3Rpdml0eVwiXHJcbmltcG9ydCBsb25nTGlzdCBmcm9tIFwiLi9saWIvbG9uZ0xpc3QvbG9uZ0xpc3QuZXhhbXBsZVwiXHJcbmltcG9ydCBTd2l0Y2hFeGFtcGxlIGZyb20gXCIuL2xpYi9zd2l0Y2gvc3dpdGNoLmV4YW1wbGVcIlxyXG5jb25zdCBvcGVuTW9kYWwgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBjbG9zZSA9IG1vZGFsKFxyXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYW5kcy1oZWFkXCI+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYW5kcy1tYW5jaHVcIj5cclxuXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbmRzLWxhbnpob3UtaW1nXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwibGliL2ljb25zL3d4LnBuZ1wiIGFsdD1cIuW+ruS/oVwiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCJsaWIvaWNvbnMvemZiLnBuZ1wiIGFsdD1cIuaUr+S7mOWunVwiIC8+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8QnV0dG9uc3Mgb25DbGljaz17KCkgPT4gY2xvc2UoKX0+5YWz6ZetPC9CdXR0b25zcz5cclxuICAgICAgICA8L2Rpdj4pO1xyXG59O1xyXG5cclxuUmVhY3RET00ucmVuZGVyKFxyXG4gICAgPFJvdXRlcj5cclxuICAgICAgICA8TGF5b3V0IGNsYXNzTmFtZT1cInNpdGUtcGFnZVwiPlxyXG4gICAgICAgICAgICA8SGVhZGVyIGNsYXNzTmFtZT1cInNpdGUtaGVhZGVyXCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImxvZ29cIj5cclxuICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cImxvZ28ucG5nXCIgd2lkdGg9XCI0OFwiIGhlaWdodD1cIjQ4XCIgYWx0PVwibG9nb1wiIC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+QW5kczwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJnaXRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8YSBocmVmPVwiaHR0cHM6Ly9naXRodWIuY29tL2JhaWppYS13ZWkvZnJhbmstdGV4dFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz0nLi9saWIvaWNvbnMvR2l0SHViLnBuZycgd2lkdGg9XCIyMFwiIGhlaWdodD1cIjIwXCIgYWx0PVwiZ2l0aHViXCIgLz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgR2l0SHViXHJcbiAgICAgICAgICAgICAgICAgICAgPC9hPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvSGVhZGVyPlxyXG5cclxuICAgICAgICAgICAgPExheW91dD5cclxuICAgICAgICAgICAgICAgIDxBc2lkZSBjbGFzc05hbWU9XCJzaXRlLWFzaWRlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayB0bz1cIi9nYW5naW5nXCI+5a6J6KOFPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayB0bz1cIi91cGRhdGVkXCI+5pu05paw5pel5b+XPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwic2l0ZS1hc2lkZS1sYW56aG91XCI+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICAgICAgPGgyPue7hOS7tjwvaDI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayB0bz1cIi9pY29uXCI+SWNvbjwvTmF2TGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdkxpbmsgdG89XCIvYnV0dG9uXCI+QnV0dG9uIOaMiemSrjwvTmF2TGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdkxpbmsgdG89XCIvZGlhbG9nXCI+5a+56K+d5qGGPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayB0bz1cIi9sYXlvdXRcIj7luIPlsYA8L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRvPVwiL2Zvcm1cIj7ooajljZU8L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayB0bz1cIi90cmVlXCI+5qCR5b2i57uE5Lu2PC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdkxpbmsgdG89XCIvaW5wdXRcIj7ovpPlhaXmoYY8L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRvPVwiL3Njcm9sbFwiPua7muWKqOadoTwvTmF2TGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdkxpbmsgdG89XCIvY2hvaWNlXCI+6YCJ5oup5ZmoPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdkxpbmsgdG89XCIvaG9jXCI+6I2J56i/57uD5LmgPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayB0bz1cIi9kcmFncHVsbFwiPuaLluaLvTwvTmF2TGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdkxpbmsgdG89XCIvY2l0eXNlbGVjdFwiPuWfjuW4gue7hOS7tjwvTmF2TGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRvPVwiL2FjdGlvbnNoZWV0XCI+5Yqo5L2c6Z2i5p2/PC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayB0bz1cIi90YWJleGFtcGxlXCI+VGFiczwvTmF2TGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPE5hdkxpbmsgdG89XCIvdGFibGVzXCI+VGFibGVzIOihqOagvDwvTmF2TGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRvPVwiL3JlZHV4XCI+UmVkdXg8L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRvPVwiL3JhZGlvXCI+UmFkaW88L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayB0bz1cIi9zd2l0Y2hcIj5Td2l0Y2g8L05hdkxpbms+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxOYXZMaW5rIHRvPVwiL2FjdGl2aXR5XCI+5rS75YqoPC9OYXZMaW5rPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8TmF2TGluayB0bz1cIi9sb25nTGlzdFwiPkxvbmcgbGlzdDwvTmF2TGluaz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgPC91bD5cclxuICAgICAgICAgICAgICAgIDwvQXNpZGU+XHJcbiAgICAgICAgICAgICAgICA8Q29udGVudD5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9pY29uXCIgY29tcG9uZW50PXtJY29uRGVtb30gLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9idXR0b25cIiBjb21wb25lbnQ9e0J1dHRvbkV4YW1wbGV9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvZGlhbG9nXCIgY29tcG9uZW50PXtEaWFsb2dFeGFtcGxlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2xheW91dFwiIGNvbXBvbmVudD17TGF5b3V0RXhhbXBsZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9nYW5naW5nXCIgY29tcG9uZW50PXtHYW5ZYW5nfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3VwZGF0ZWRcIiBjb21wb25lbnQ9e1VwZGF0ZUxvZ30gLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9mb3JtXCIgY29tcG9uZW50PXtGb3JtRXhhbXBsZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9pbnB1dFwiIGNvbXBvbmVudD17SW5wdXRFeGFtcGxlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2hvY1wiIGNvbXBvbmVudD17SG9jfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3RyZWVcIiBjb21wb25lbnQ9e1RyZWVFeGFtcGxlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3Njcm9sbFwiIGNvbXBvbmVudD17U2Nyb2xsfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2Nob2ljZVwiIGNvbXBvbmVudD17TXVsdGlwbGVDaG9pY2V9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvZHJhZ3B1bGxcIiBjb21wb25lbnQ9e2RyYWdQdWxsfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL2NpdHlzZWxlY3RcIiBjb21wb25lbnQ9e2NpdHlzZWxlY3R9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvYWN0aW9uc2hlZXRcIiBjb21wb25lbnQ9e2FjdGlvbnNoZWV0fSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3RhYmV4YW1wbGVcIiBjb21wb25lbnQ9e1RhYkV4YW1wbGV9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvdGFibGVzXCIgY29tcG9uZW50PXtUYWJsZXNFeGFtcGxlfSAvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPVwiL3JlZHV4XCIgY29tcG9uZW50PXtSZWR1eEV4YW1wbGV9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvUmFkaW9cIiBjb21wb25lbnQ9e1JhZGlvRXhhbXBsZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9zd2l0Y2hcIiBjb21wb25lbnQ9e1N3aXRjaEV4YW1wbGV9IC8+XHJcbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9XCIvYWN0aXZpdHlcIiBjb21wb25lbnQ9e0FjdGl2aXR5RXhhbXBsZX0gLz5cclxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD1cIi9sb25nTGlzdFwiIGNvbXBvbmVudD17bG9uZ0xpc3R9IC8+XHJcbiAgICAgICAgICAgICAgICA8L0NvbnRlbnQ+XHJcbiAgICAgICAgICAgIDwvTGF5b3V0PlxyXG4gICAgICAgICAgICA8Rm9vdGVyIGNsYXNzTmFtZT1cInNpdGUtZm9vdGVyXCI+XHJcbiAgICAgICAgICAgICAgICAmY29weTsg55m95a62546uXHJcbiAgICAgICAgICAgIDwvRm9vdGVyPlxyXG4gICAgICAgIDwvTGF5b3V0PlxyXG4gICAgPC9Sb3V0ZXI+XHJcbiAgICAsIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNyb290JykpOyIsImltcG9ydCBJY29uRXhhbXBsZTEgZnJvbSAnLi9pY29uLmV4YW1wbGUuMSc7XHJcbmltcG9ydCBSZWFjdCwge0ZyYWdtZW50fSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCBEZW1vIGZyb20gJy4uLy4uL2RlbW8nO1xyXG5pbXBvcnQgSWNvbkV4YW1wbGUyIGZyb20gJy4vaWNvbi5leGFtcGxlLjInO1xyXG5cclxuY29uc3QgSWNvbkRlbW8gPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxGcmFnbWVudD5cclxuICAgICAgICAgICAgPERlbW8gY29kZT17cmVxdWlyZSgnISFyYXctbG9hZGVyIS4vaWNvbi5leGFtcGxlLjEudHN4JykuZGVmYXVsdH0+XHJcbiAgICAgICAgICAgICAgICA8SWNvbkV4YW1wbGUxLz5cclxuICAgICAgICAgICAgPC9EZW1vPlxyXG4gICAgICAgICAgICA8RGVtbyBjb2RlPXtyZXF1aXJlKCchIXJhdy1sb2FkZXIhLi9pY29uLmV4YW1wbGUuMi50c3gnKS5kZWZhdWx0fT5cclxuICAgICAgICAgICAgICAgIDxJY29uRXhhbXBsZTIvPlxyXG4gICAgICAgICAgICA8L0RlbW8+XHJcbiAgICAgICAgPC9GcmFnbWVudD5cclxuICAgICk7XHJcbn07XHJcblxyXG5leHBvcnQgZGVmYXVsdCBJY29uRGVtbzsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgQnV0dG9uc3N0IGZyb20gJy4vYnV0dG9uLmFzc2VtYmx5MSdcclxuLy8gaW1wb3J0IEJ1dHRvbkV4YW1wbGUxIGZyb20gJy4vYnV0dG9uLmFzc2VtYmx5Mic7XHJcbi8vIGltcG9ydCBCdXR0b25FeGFtcGxlMiBmcm9tICcuL2J1dHRvbi5hc3NlbWJseSc7XHJcbmltcG9ydCAnLi9idXR0b24uZXhhbXBsZS5zY3NzJ1xyXG5pbXBvcnQgeyBBc3NlbWJseTEsfSAgZnJvbSAnLi9idXR0b24uZGVtbyc7XHJcblxyXG5jb25zdCBCdXR0b25FeGFtcGxlOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudCA9ICgpID0+IHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2FuZHMtaGVhZGVyJz5cclxuICAgICAgICAgICAgICAgIDxoMT5CdXR0b27mjInpkq48L2gxPlxyXG4gICAgICAgICAgICAgICAgPHA+5oyJ6ZKu55So5LqO5byA5aeL5LiA5Liq5Y2z5pe25pON5L2cPC9wPlxyXG4gICAgICAgICAgICAgICAgPGgyPuS9leaXtuS9v+eUqDwvaDI+XHJcbiAgICAgICAgICAgICAgICA8cD7moIforrDkuobkuIDkuKrvvIjmiJblsIHoo4XkuIDnu4TvvInmk43kvZzlkb3ku6TvvIzlk43lupTnlKjmiLfngrnlh7vooYzkuLrvvIzop6blj5Hnm7jlupTnmoTkuJrliqHpgLvovpE8L3A+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFuZHMtaGVhZGVyLWNvbnRlbnRcIj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYW5kcy1jb250ZW50LWxlZnRcIj5cclxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uc3N0PjwvQnV0dG9uc3N0PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYW5kcy1jb250ZW50LWxlZnQtdGV4dFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgIDxwPlxyXG4gICAgICAgICAgICAgICAgICAgICAgIDwvcD5cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbmRzLWNvbnRlbnQtcmlnaHRcIj5cclxuICAgICAgICAgICAgICAgICA8QXNzZW1ibHkxLz5cclxuICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcblxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKTtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbkV4YW1wbGU7IiwiaW1wb3J0IFJlYWN0LCB7dXNlU3RhdGV9IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IERpYWxvZywge2FsZXJ0LCBjb25maXJtLCBtb2RhbH0gZnJvbSAnLi9kaWFsb2cnO1xyXG5pbXBvcnQgQnV0dG9uc3MgZnJvbSBcIi4uL2J1dHRvbi9idXR0b25cIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcclxuICAgIGNvbnN0IFt4LCBzZXRYXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IFt5LCBzZXRZXSA9IHVzZVN0YXRlKGZhbHNlKTtcclxuICAgIGNvbnN0IG9wZW5Nb2RhbCA9ICgpID0+IHtcclxuICAgICAgICBjb25zdCBjbG9zZSA9IG1vZGFsKDxoMT7lvLnnqpflhoXlrrlcclxuICAgICAgICAgICAgPEJ1dHRvbnNzIG9uQ2xpY2s9eygpID0+IGNsb3NlKCl9Pum7mOiupOWFs+mXrTwvQnV0dG9uc3M+XHJcbiAgICAgICAgPC9oMT4pO1xyXG4gICAgfTtcclxuXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGRpdj7ln7rnoYDnlKjms5U8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxCdXR0b25zcyBvbkNsaWNrPXtvcGVuTW9kYWx9PuaPkOekujwvQnV0dG9uc3M+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxkaXY+5Z+656GA55So5rOVMjwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPEJ1dHRvbnNzIG9uQ2xpY2s9eygpID0+IGFsZXJ0KCcxJyl9PuW8ueeqlzwvQnV0dG9uc3M+XHJcbiAgICAgICAgICAgICAgICA8QnV0dG9uc3Mgb25DbGljaz17KCkgPT4gY29uZmlybSgnMScsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygn5L2g54K55Ye75LqGeWVzJyk7XHJcbiAgICAgICAgICAgICAgICB9LCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ+S9oOeCueWHu+S6hm5vJyk7XHJcbiAgICAgICAgICAgICAgICB9KX0+56Gu5a6a5Y+W5raIXHJcbiAgICAgICAgICAgICAgICA8L0J1dHRvbnNzPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2PuWfuuehgOeUqOazlTM8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxCdXR0b25zcyBvbkNsaWNrPXsoKSA9PiBzZXRYKCF4KX0+Y2xpY2s8L0J1dHRvbnNzPlxyXG4gICAgICAgICAgICAgICAgPERpYWxvZyB2aXNpYmxlPXt4fSBidXR0b25zPXtcclxuICAgICAgICAgICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxCdXR0b25zcyBvbkNsaWNrPXsoKSA9PiB7c2V0WChmYWxzZSk7fX0gbGV2ZWw9XCJpbXBvcnRhbnRcIj7noa7lrpo8L0J1dHRvbnNzPixcclxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbnNzIG9uQ2xpY2s9eygpID0+IHtzZXRYKGZhbHNlKTt9fT7lj5bmtog8L0J1dHRvbnNzPlxyXG4gICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgIH0gb25DbG9zZT17KCkgPT4ge3NldFgoZmFsc2UpO319PlxyXG4gICAgICAgICAgICAgICAgICAgIDxzdHJvbmc+aGk8L3N0cm9uZz5cclxuICAgICAgICAgICAgICAgIDwvRGlhbG9nPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuXHJcblxyXG4gICAgICAgICAgICA8ZGl2IHN0eWxlPXt7cG9zaXRpb246ICdyZWxhdGl2ZScsIHpJbmRleDogOX19PlxyXG4gICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICDpga7nvanlsYLngrnlh7vlhbPpl61cclxuICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPEJ1dHRvbnNzIG9uQ2xpY2s9eygpID0+IHNldFkoIXkpfT5jbGljazwvQnV0dG9uc3M+XHJcbiAgICAgICAgICAgICAgICA8RGlhbG9nIHZpc2libGU9e3l9IGNsb3NlT25DbGlja01hc2s9e3RydWV9IGJ1dHRvbnM9e1xyXG4gICAgICAgICAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbnNzIG9uQ2xpY2s9eygpID0+IHtzZXRZKGZhbHNlKTt9fT7lj5bmtog8L0J1dHRvbnNzPixcclxuICAgICAgICAgICAgICAgICAgICAgICAgPEJ1dHRvbnNzIGxldmVsPVwiaW1wb3J0YW50XCIgb25DbGljaz17KCkgPT4ge3NldFkoZmFsc2UpO319PuehruWumjwvQnV0dG9uc3M+XHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfSBvbkNsb3NlPXsoKSA9PiB7c2V0WShmYWxzZSk7fX0+XHJcbiAgICAgICAgICAgICAgICAgICAgPHN0cm9uZz5oaTwvc3Ryb25nPlxyXG4gICAgICAgICAgICAgICAgPC9EaWFsb2c+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IExheW91dCBmcm9tICcuL2xheW91dCc7XHJcbmltcG9ydCBIZWFkZXIgZnJvbSAnLi9oZWFkZXInO1xyXG5pbXBvcnQgQ29udGVudCBmcm9tICcuL2NvbnRlbnQnO1xyXG5pbXBvcnQgRm9vdGVyIGZyb20gJy4vZm9vdGVyJztcclxuaW1wb3J0IEFzaWRlIGZyb20gJy4vYXNpZGUnO1xyXG5pbXBvcnQgJy4vbGF5b3V0LmV4YW1wbGUuc2Nzcyc7XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGgxPuesrOS4gOS4quS+i+WtkDwvaDE+XHJcbiAgICAgICAgICAgICAgICA8TGF5b3V0IHN0eWxlPXt7aGVpZ2h0OiA1MDAsIHdpZHRoOiA1MDB9fSBjbGFzc05hbWU9XCJoaVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxIZWFkZXIgY2xhc3NOYW1lPVwieFwiPmhlYWRlcjwvSGVhZGVyPlxyXG4gICAgICAgICAgICAgICAgICAgIDxDb250ZW50IGNsYXNzTmFtZT1cInlcIj5jb250ZW50PC9Db250ZW50PlxyXG4gICAgICAgICAgICAgICAgICAgIDxGb290ZXIgY2xhc3NOYW1lPVwieFwiPmZvb3RlcjwvRm9vdGVyPlxyXG4gICAgICAgICAgICAgICAgPC9MYXlvdXQ+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGgxPuesrOS6jOS4quS+i+WtkDwvaDE+XHJcbiAgICAgICAgICAgICAgICA8TGF5b3V0IHN0eWxlPXt7aGVpZ2h0OiA1MDAsIHdpZHRoOiA1MDB9fSBjbGFzc05hbWU9XCJoaVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxIZWFkZXIgY2xhc3NOYW1lPVwieFwiPmhlYWRlcjwvSGVhZGVyPlxyXG4gICAgICAgICAgICAgICAgICAgIDxMYXlvdXQ+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxBc2lkZSBjbGFzc05hbWU9XCJ6XCI+YXNpZGU8L0FzaWRlPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29udGVudCBjbGFzc05hbWU9XCJ5XCI+Y29udGVudDwvQ29udGVudD5cclxuICAgICAgICAgICAgICAgICAgICA8L0xheW91dD5cclxuICAgICAgICAgICAgICAgICAgICA8Rm9vdGVyIGNsYXNzTmFtZT1cInhcIj5mb290ZXI8L0Zvb3Rlcj5cclxuICAgICAgICAgICAgICAgIDwvTGF5b3V0PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgIDxoMT7nrKzkuInkuKrkvovlrZA8L2gxPlxyXG4gICAgICAgICAgICAgICAgPExheW91dCBzdHlsZT17e2hlaWdodDogNTAwLCB3aWR0aDogNTAwfX0gY2xhc3NOYW1lPVwiaGlcIj5cclxuICAgICAgICAgICAgICAgICAgICA8SGVhZGVyIGNsYXNzTmFtZT1cInhcIj5oZWFkZXI8L0hlYWRlcj5cclxuICAgICAgICAgICAgICAgICAgICA8TGF5b3V0PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Q29udGVudCBjbGFzc05hbWU9XCJ5XCI+Y29udGVudDwvQ29udGVudD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEFzaWRlIGNsYXNzTmFtZT1cInpcIj5hc2lkZTwvQXNpZGU+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9MYXlvdXQ+XHJcbiAgICAgICAgICAgICAgICAgICAgPEZvb3RlciBjbGFzc05hbWU9XCJ4XCI+Zm9vdGVyPC9Gb290ZXI+XHJcbiAgICAgICAgICAgICAgICA8L0xheW91dD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8aDE+56ys5Zub5Liq5L6L5a2QPC9oMT5cclxuICAgICAgICAgICAgICAgIDxMYXlvdXQgc3R5bGU9e3toZWlnaHQ6IDUwMCwgd2lkdGg6IDUwMH19IGNsYXNzTmFtZT1cImhpXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPEFzaWRlIGNsYXNzTmFtZT1cInpcIj5hc2lkZTwvQXNpZGU+XHJcbiAgICAgICAgICAgICAgICAgICAgPExheW91dD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPEhlYWRlciBjbGFzc05hbWU9XCJ4XCI+aGVhZGVyPC9IZWFkZXI+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxDb250ZW50IGNsYXNzTmFtZT1cInlcIj5jb250ZW50PC9Db250ZW50PlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8Rm9vdGVyIGNsYXNzTmFtZT1cInhcIj5mb290ZXI8L0Zvb3Rlcj5cclxuICAgICAgICAgICAgICAgICAgICA8L0xheW91dD5cclxuICAgICAgICAgICAgICAgIDwvTGF5b3V0PlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgJy4vZ3Vhbndhbmcuc2NzcydcclxuXHJcbmNvbnN0IEd1YW5XYW5nOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudCA9ICgpID0+IHtcclxuXHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICAgICAgPGgyPk5QTeWuieijhTwvaDI+XHJcbiAgICAgICAgICAgICAgICA8cD7mjqjojZDkvb/nlKggbnBtIOadpeWuieijhe+8jOS6q+WPl+eUn+aAgeWciOWSjOW3peWFt+W4puadpeeahOS+v+WIqe+8jOabtOWlveWcsOWSjCB3ZWJwYWNrIOmFjeWQiOS9v+eUqO+8jOW9k+eEtu+8jOaIkeS7rOS5n+aOqOiNkOS9v+eUqCBFUzIwMTXjgII8L3A+XHJcbiAgICAgICAgICAgICAgICA8cHJlIGNsYXNzTmFtZT1cImFuZHMtZ3VhbndhblwiPiQgbnBtIGluc3RhbGwgYW5kcy1qaWF3ZWkgLS1zYXZlPC9wcmU+XHJcbiAgICAgICAgICAgICAgICA8cD7lpoLmnpzmgqjkvb/nlKjkuoYgTlBNIOWuieijhe+8jOW5tuS9v+eUqCB3ZWJwYWNrIOS9nOS4uuaehOW7uuW3peWFt++8jOivt+e7p+e7remYheivu+W/q+mAn+S4iuaJi+eroOiKguOAgjwvcD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgR3Vhbldhbmc7IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0ICcuL2d1YW53YW5nLnNjc3MnXHJcbmNvbnN0IFVwZGF0ZUxvZzogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICA8aDI+5pu05paw5pel5b+XPC9oMj5cclxuICAgICAgICAgICAgICAgIDxoMz4xLjAuMi42PC9oMz5cclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgMjAyMS8zLzIwXHJcbiAgICAgICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIOihqOWNlemqjOivgeWujOaIkOW+heS8mOWMllxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAg5L+u5aSNIOW4g+WxgOe7hOS7tueahOaKpemUmeOAglxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG5cclxuICAgICAgICAgICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2NyaXRpYyc+XHJcbiAgICAgICAgICAgICAgICA8aDI+5pu05paw5pel5b+XPC9oMj5cclxuICAgICAgICAgICAgICAgIDxoMz4xLjAuMi41PC9oMz5cclxuICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgMjAyMS8zLzE1XHJcbiAgICAgICAgICAgICAgICAgICAgPHVsPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICDmlrDlop5kb2PphY3nva7mlofku7ZcclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9saT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGxpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAg5oyJ6ZKu5qC35byP57yW5YaZXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDxsaT5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIOaJk+WMhemDqOe9suWujOaIkFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8bGk+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICDkv67lpI0g5biD5bGA57uE5Lu255qE5oql6ZSZ44CCXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbGk+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIDwvdWw+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuXHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVXBkYXRlTG9nOyIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0ICcuL2lucHV0YXNzZW1ibHkxLnNjc3MnXHJcbmltcG9ydCBGb3JtRXhhbW9sZSBmcm9tICcuL2Zvcm0uZXhhbXBsZSdcclxuaW1wb3J0IEZvcm1EZW1vICBmcm9tICcuL2Zvcm0uZGVtbydcclxuY29uc3QgRm9ybUV4YW1wbGU6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT0nYW5kcy1oZWFkZXInPlxyXG5cclxuICAgICAgICAgICAgICAgIDxoMj7ln7rmnKzkvb/nlKg8L2gyPlxyXG4gICAgICAgICAgICAgICAgPHA+5Lyg5YWl5qCh6aqM6KeE5YiZ44CCPC9wPlxyXG4gICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbmRzLWhlYWRlci1jb250ZW50XCI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFuZHMtY29udGVudC1sZWZ0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPEZvcm1FeGFtb2xlLz5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFuZHMtY29udGVudC1sZWZ0LXRleHRcIj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8L3A+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYW5kcy1jb250ZW50LXJpZ2h0XCIgPlxyXG4gICAgICAgICAgICAgICAgICAgIDxGb3JtRGVtbyAvPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgRm9ybUV4YW1wbGU7IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgJy4vaW5wdXRhc3NlbWJseTEuc2NzcydcclxuaW1wb3J0IElucHV0ZXhhbXBsZSBmcm9tICcuL2lucHV0LmV4YW1wbGUnXHJcbmltcG9ydCB7SW5wdXREZW1vfSAgZnJvbSAnLi9pbnB1dC5kZW1vJ1xyXG5jb25zdCBCdXR0b25FeGFtcGxlOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudCA9ICgpID0+IHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2FuZHMtaGVhZGVyJz5cclxuXHJcbiAgICAgICAgICAgICAgICA8aDI+5Z+65pys5L2/55SoPC9oMj5cclxuICAgICAgICAgICAgICAgIDxwPumAmui/h+m8oOagh+aIlumUruebmOi+k+WFpeWGheWuue+8jOaYr+acgOWfuuehgOeahOihqOWNleWfn+eahOWMheijheOAgjwvcD5cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYW5kcy1oZWFkZXItY29udGVudFwiPlxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJhbmRzLWNvbnRlbnQtbGVmdFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dGV4YW1wbGUvPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYW5kcy1jb250ZW50LWxlZnQtdGV4dFwiPlxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8cD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9wPlxyXG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImFuZHMtY29udGVudC1yaWdodFwiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxJbnB1dERlbW8vPlxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIDwvZGl2PlxyXG5cclxuXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgQnV0dG9uRXhhbXBsZTsiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IFRyZWUsIHsgU291cmNlRGF0YUl0ZW0gfSBmcm9tIFwiLi90cmVlXCI7XHJcbmNvbnN0IFRyZWVFeGFtcGxlOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudCA9ICgpID0+IHtcclxuICAgIGNvbnN0IFthcnJheSwgc2V0QXJyYXldID0gdXNlU3RhdGUoW3tcclxuICAgICAgICB0ZXh0OiAn5LiA6IGM5LitJyxcclxuICAgICAgICB2YWx1ZTogXCIxXCIsXHJcbiAgICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGV4dDogXCLkuIDnm7TnlKgxLjFcIiwgdmFsdWU6IFwiMS4xXCIsIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0ZXh0OiBcIuS4gOebtOeUqDEuMS4xXCIsIHZhbHVlOiBcIjEuMS4xXCIgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IHRleHQ6IFwi5LiA55u055SoMS4xLjJcIiwgdmFsdWU6ICcxLjEuMicgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IHRleHQ6IFwi5LiA55u055SoMS4xLjNcIiwgdmFsdWU6ICcxLjEuMycgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IHRleHQ6IFwi5LiA55u055SoMS4xLjRcIiwgdmFsdWU6ICcxLjEuNCcgfSxcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeyB0ZXh0OiBcIuS4gOebtOeUqDEuMlwiLCB2YWx1ZTogJzEuMicgfSxcclxuICAgICAgICAgICAgeyB0ZXh0OiBcIuS4gOebtOeUqDEuM1wiLCB2YWx1ZTogJzEuMycgfSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdGV4dDogXCLkuIDnm7TnlKgxLjRcIiwgdmFsdWU6ICcxLjQnLCBjaGlsZHJlbjogW1xyXG4gICAgICAgICAgICAgICAgICAgIHsgdGV4dDogXCLkuIDnm7TnlKgxLjQuMVwiLCB2YWx1ZTogXCIxLjQuMVwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0ZXh0OiBcIuS4gOebtOeUqDEuNC4yXCIsIHZhbHVlOiAnMS40LjInIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0ZXh0OiBcIuS4gOebtOeUqDEuNC4zXCIsIHZhbHVlOiAnMS40LjMnIH0sXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIuS4gOebtOeUqDEuNC40XCIsIHZhbHVlOiAnMS40LjQnLCBjaGlsZHJlbjogW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeyB0ZXh0OiBcIuS4gOebtOeUqDEuNC40LjFcIiwgdmFsdWU6IFwiMS40LjQuMVwiIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRleHQ6IFwi5LiA55u055SoMS40LjQuMlwiLCB2YWx1ZTogJzEuNC40LjInIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRleHQ6IFwi5LiA55u055SoMS40LjQuM1wiLCB2YWx1ZTogJzEuNC40LjMnIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRleHQ6IFwi5LiA55u055SoMS40LjQuNFwiLCB2YWx1ZTogJzEuNC40LjQnIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICBdXHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHRleHQ6ICfkuozogYzkuK0nLFxyXG4gICAgICAgIHZhbHVlOiBcIjJcIixcclxuICAgICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICB0ZXh0OiBcIuS6jOebtOeUqDFcIiwgdmFsdWU6IFwiMi4xXCIsIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXh0OiBcIuS6jOebtOeUqDIuMS4xXCIsIHZhbHVlOiBcIjIuMS4xXCIsIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IHRleHQ6IFwi5LqM55u055SoMi4xLjFcIiwgdmFsdWU6IFwiMi4xLjFcIiB9LFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IFwi5LqM55u055SoMlwiLCB2YWx1ZTogJzIuMicsIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0ZXh0OiBcIuS6jOebtOeUqDIuMi4xXCIsIHZhbHVlOiBcIjIuMi4xXCIgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IFwi5LqM55u055SoM1wiLCB2YWx1ZTogJzIuMycsIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0ZXh0OiBcIuS6jOebtOeUqDIuMy4xXCIsIHZhbHVlOiBcIjIuMy4xXCIgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IFwi5LqM55u055SoNFwiLCB2YWx1ZTogJzIuNCcsIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgeyB0ZXh0OiBcIuS6jOebtOeUqDIuNC4xXCIsIHZhbHVlOiBcIjIuNC4xXCIgfSxcclxuXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgIF1cclxuICAgIH1cclxuICAgIF0pO1xyXG4gICAgY29uc3QgW3NlbGVjdGVkVmFsdWVzLCBzZXRzZWxlY3RlZFZhbHVlc10gPSB1c2VTdGF0ZTxhbnk+KFtdKVxyXG5cclxuICAgIGNvbnN0IG9uQ2hhbmdlID0gKGl0ZW06IFNvdXJjZURhdGFJdGVtLCBib29sOiBib29sZWFuKSA9PiB7XHJcbiAgICAgICAgLy8g5aaC5p6c6L+Z5LiqaXRlbeaYr+etieS6jnRydWXor7TmmI7kvaDmg7Pmiorov5nkuKppdGVt6YCJ5LitXHJcbiAgICAgICAgaWYgKGJvb2wgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgc2V0c2VsZWN0ZWRWYWx1ZXMoWy4uLnNlbGVjdGVkVmFsdWVzLCBpdGVtLnZhbHVlXSlcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzZXRzZWxlY3RlZFZhbHVlcyhzZWxlY3RlZFZhbHVlcy5maWx0ZXIoKHZhbHVlOiBzdHJpbmcpID0+IHZhbHVlICE9IGl0ZW0udmFsdWUpKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgPGgxPuWxleekuuaVsOaNrjwvaDE+XHJcbiAgICAgICAgICAgIDxUcmVlIG11bHRpcGxlPXt0cnVlfSBzb3VyY2VEYXRhPXthcnJheX0gb25DaGFuZ2U9e29uQ2hhbmdlfSBzZWxlY3RlZD17c2VsZWN0ZWRWYWx1ZXN9PjwvVHJlZT5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICk7XHJcbn07XHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVHJlZUV4YW1wbGUiLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBTY3JvbGwgZnJvbSBcIi4vc2Nyb2xsXCI7XHJcblxyXG5cclxuY29uc3QgU2Nyb2xsRXhhbXBsZTogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQgPSAoKSA9PiB7XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8aDI+56ys5LiA5Liq5L6L5a2QPC9oMj5cclxuICAgICAgICAgICAgPFNjcm9sbCBzdHlsZT17e2hlaWdodDo0MDB9fT5cclxuICAgICAgICAgICAgICAgIDxwPjE8L3A+XHJcbiAgICAgICAgICAgICAgICA8cD4yPC9wPlxyXG4gICAgICAgICAgICAgICAgPHA+MTwvcD5cclxuICAgICAgICAgICAgICAgIDxwPjE8L3A+XHJcbiAgICAgICAgICAgICAgICA8cD4zPC9wPlxyXG4gICAgICAgICAgICAgICAgPHA+NDwvcD5cclxuICAgICAgICAgICAgICAgIDxwPjU8L3A+XHJcbiAgICAgICAgICAgICAgICA8cD42PC9wPlxyXG4gICAgICAgICAgICAgICAgPHA+NzwvcD5cclxuICAgICAgICAgICAgICAgIDxwPjE8L3A+XHJcbiAgICAgICAgICAgICAgICA8cD4yPC9wPlxyXG4gICAgICAgICAgICAgICAgPHA+MzwvcD5cclxuICAgICAgICAgICAgICAgIDxwPjE1PC9wPlxyXG4gICAgICAgICAgICAgICAgPHA+MTE8L3A+XHJcbiAgICAgICAgICAgICAgICA8cD4zMTwvcD5cclxuICAgICAgICAgICAgICAgIDxwPjEzPC9wPlxyXG4gICAgICAgICAgICAgICAgPHA+MTQ8L3A+XHJcbiAgICAgICAgICAgICAgICA8cD4xNjwvcD5cclxuICAgICAgICAgICAgICAgIDxwPjE3PC9wPlxyXG4gICAgICAgICAgICAgICAgPHA+MTg8L3A+XHJcbiAgICAgICAgICAgICAgICA8cD4xNDwvcD5cclxuICAgICAgICAgICAgICAgIDxwPjExPC9wPlxyXG4gICAgICAgICAgICAgICAgPHA+MTI8L3A+XHJcbiAgICAgICAgICAgIDwvU2Nyb2xsPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IFNjcm9sbEV4YW1wbGUiLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUgfSBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IENob2ljZSBmcm9tIFwiLi9jaG9pY2VcIjtcclxuXHJcbmNvbnN0IE11bHRpcGxlQ2hvaWNlOiBSZWFjdC5GdW5jdGlvbkNvbXBvbmVudCA9ICgpID0+IHtcclxuXHJcbiAgICBjb25zdCBbYXJyZGF0YXdzLCBzZXRhcnJkYXRhd3NdID0gdXNlU3RhdGU8c3RyaW5nW10+KFsn6ZKf56a7J10pXHJcbiAgICBjb25zdCBbYXJyZGF0YV0gPSB1c2VTdGF0ZShbJ+elnuWtkCcsICflsIblhpsnLCAn5b+D5rW3JywgJ+mSn+emuycsICflhazlrZAnLCAn6IOh5qGDJ10pXHJcblxyXG5cclxuICAgIGNvbnN0IFthcnJkYXRhd3NzLCBzZXRhcnJkYXRhd3NzXSA9IHVzZVN0YXRlPHN0cmluZ1tdPihbXSlcclxuICAgIGNvbnN0IFthcnJkYXRhc10gPSB1c2VTdGF0ZShbJ+elnuWtkCcsICflsIblhpsnLCAn5YWs5a2QJywgJ+iDoeahgycsICflv4PmtbcnLCAn6ZKf56a7J10pXHJcblxyXG5cclxuICAgXHJcblxyXG5cclxuICAgIFxyXG4gICAgLy8g5Y2VXHJcbiAgICBjb25zdCBvbkNsaWNrc3cgPSAoaXRlbTogc3RyaW5nW10pID0+IHtcclxuICAgICAgICBzZXRhcnJkYXRhd3MoaXRlbSlcclxuICAgIH1cclxuICAgIC8vIOWkmlxyXG4gICAgY29uc3Qgb25DbGlja3N3cyA9IChpdGVtOiBzdHJpbmdbXSkgPT4ge1xyXG4gICAgICAgIHNldGFycmRhdGF3c3MoaXRlbSlcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgIDxkaXY+5Y2V6YCJPC9kaXY+XHJcbiAgICAgICAgICAgIDxDaG9pY2UgdmlzaWJsZT17YXJyZGF0YXdzfSBjaG9pY2VkYXRhPXthcnJkYXRhfSBib29sPXtmYWxzZX0gb25DbGlja3N3PXtvbkNsaWNrc3d9PjwvQ2hvaWNlPlxyXG4gICAgICAgICAgICA8ZGl2PuWkmumAiTwvZGl2PlxyXG4gICAgICAgICAgICA8Q2hvaWNlIHZpc2libGU9e2FycmRhdGF3c3N9IGNob2ljZWRhdGE9e2FycmRhdGFzfSBib29sPXt0cnVlfSBvbkNsaWNrc3c9e29uQ2xpY2tzd3N9PjwvQ2hvaWNlPlxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgIClcclxufVxyXG5leHBvcnQgZGVmYXVsdCBNdWx0aXBsZUNob2ljZSIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcclxuaW1wb3J0IERyYWdwdWxsIGZyb20gXCIuL2RyYWdwdWxsXCJcclxuaW1wb3J0IERyYWdTbGlkZSBmcm9tIFwiLi9kcmFnU2xpZGVcIlxyXG5jb25zdCBkcmFnUHVsbHM6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8ZGl2PlxyXG4gICAgICAgICAgICA8RHJhZ3B1bGw+PC9EcmFncHVsbD5cclxuICAgICAgICAgICAgPGRpdj7mu5Hliqg8L2Rpdj5cclxuICAgICAgICAgICAgPERyYWdTbGlkZT48L0RyYWdTbGlkZT5cclxuXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICApO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBkcmFnUHVsbHNcclxuXHJcbiIsImltcG9ydCBSZWFjdCwgeyBGdW5jdGlvbkNvbXBvbmVudH0gZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBBY3Rpb25TaGVldCBmcm9tIFwiLi9hY3Rpb25TaGVldFwiO1xyXG5pbXBvcnQgXCIuL2FjdGlvblNoZWV0LnNjc3NcIlxyXG5cclxuaW50ZXJmYWNlIFByb3BzIHtcclxuXHJcbn1cclxuY29uc3QgQWN0aW9uU2hlZXRFeGFtcGxlOiBGdW5jdGlvbkNvbXBvbmVudDxQcm9wcz4gPSAocHJvcHMpID0+IHtcclxuXHJcblxyXG5yZXR1cm4gKFxyXG4gICAgPD5cclxuICAgICAgICA8QWN0aW9uU2hlZXQ+PC9BY3Rpb25TaGVldD5cclxuICAgIDwvPlxyXG4pXHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgQWN0aW9uU2hlZXRFeGFtcGxlIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xyXG5pbXBvcnQgVGFiIGZyb20gXCIuL3RhYlwiO1xyXG5jb25zdCBUYWJFeGFtcGxlID0gKCkgPT4ge1xyXG5cclxuXHJcbiAgICAvLyBjb25zb2xlLmxvZyhPYmplY3Qua2V5cyhmc3cpKTtcclxuXHJcblxyXG5cclxuICAgIHJldHVybiAoXHJcbiAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAg56ys5LiA5Liq5L6L5a2QXHJcblxyXG4gICAgICAgICAgICB7LyogPGJ1dHRvbiBvbkNsaWNrPXtvbmNsaWtkZX0+IOafpeecizwvYnV0dG9uPiAqL31cclxuICAgICAgICAgICAgey8qIDxUYWI+XHJcbiAgICAgICAgICAgICAgICA8VGFiLlRhYlBhbmUgdGl0bGU9XCLmsLTmnpxcIj7oj6DokJ08L1RhYi5UYWJQYW5lPlxyXG4gICAgICAgICAgICAgICAgPFRhYi5UYWJQYW5lIHRpdGxlPVwi6JSs6I+cXCI+6buE55OcPC9UYWIuVGFiUGFuZT5cclxuICAgICAgICAgICAgICAgIDxUYWIuVGFiUGFuZSB0aXRsZT1cIuWutuWFt1wiPuakheWtkDwvVGFiLlRhYlBhbmU+XHJcbiAgICAgICAgICAgIDwvVGFiPiAqL31cclxuXHJcbiAgICAgICAgICAgIDxUYWI+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IHRpdGxlPVwi5rC05p6cXCI+6I+g6JCdPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IHRpdGxlPVwi6JSs6I+cXCI+6buE55OcPC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IHRpdGxlPVwi5a625YW3XCI+5qSF5a2QPC9kaXY+XHJcbiAgICAgICAgICAgIDwvVGFiPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgKVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUYWJFeGFtcGxlIiwiaW1wb3J0IEljb24gZnJvbSBcIi4uL2ljb24vaWNvblwiO1xyXG5pbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XHJcbmltcG9ydCBUYWJsZXMgZnJvbSBcIi4vdGFibGVcIjtcclxuXHJcbmNvbnN0IFRhYmxlRXhhbXBsZTogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBkYXRhU291cmNlID0gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAga2V5OiAxLFxyXG4gICAgICAgICAgICBuYW1lOiAn5LiJ5LiK5oKg5LqaJyxcclxuICAgICAgICAgICAgYWdlOiAzMixcclxuICAgICAgICAgICAgYWRkcmVzOiAn6KW/5rmW5Yy65rmW5bqV5YWs5ZutMeWPtycsXHJcbiAgICAgICAgICAgIGNpczoxMCxcclxuICAgICAgICAgICAgYmF4b2RpOjE4LFxyXG4gICAgICAgICAgICBiYW9kaToxMDAsXHJcbiAgICAgICAgICAgIHNhZDogXCLlsZXlvIBcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBrZXk6IDIsXHJcbiAgICAgICAgICAgIG5hbWU6ICfmoaXmnKzmnInoj5wnLFxyXG4gICAgICAgICAgICBhZ2U6IDQyLFxyXG4gICAgICAgICBcclxuICAgICAgICAgICAgYWRkcmVzOiAn6KW/5rmW5Yy65rmW5bqV5YWs5ZutMuWPtycsXHJcbiAgICAgICAgICAgIGNpczoxMCxcclxuICAgICAgICAgICAgYmFvZGk6MjMwLFxyXG4gICAgICAgICAgICBiYXhvZGk6MTgsXHJcbiAgICAgICAgICAgIHNhZDogXCLlsZXlvIBcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBrZXk6IDMsXHJcbiAgICAgICAgICAgIG5hbWU6ICfms6LlpJrph47nu5PooaMnLFxyXG4gICAgICAgICAgICBhZ2U6IDMyLFxyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgICBhZGRyZXM6ICfopb/muZbljLrmuZblupXlhazlm6015Y+3JyxcclxuICAgICAgICAgICAgY2lzOjEwLFxyXG4gICAgICAgICAgICBiYW9kaToxMzAsXHJcbiAgICAgICAgICAgIGJheG9kaToxOCxcclxuICAgICAgICAgICAgc2FkOiBcIuWxleW8gFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGtleTogNCxcclxuICAgICAgICAgICAgbmFtZTogJ+iKseazvemmmeiPnCcsXHJcbiAgICAgICAgICAgIGFnZTogMzIsXHJcbiAgICAgICAgICAgIGFkZHJlczogJ+ilv+a5luWMuua5luW6leWFrOWbrTblj7cnLFxyXG4gICAgICAgICAgICBjaXM6MTYsXHJcbiAgICAgICAgICAgIGJhb2RpOjE5MCxcclxuICAgICAgICAgICAgYmF4b2RpOjE4LFxyXG4gICAgICAgICAgICBzYWQ6IFwi5bGV5byAXCJcclxuICAgICAgICB9LFxyXG4gICAgXTtcclxuXHJcbiAgICBjb25zdCBjb2x1bW5zID0gW1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGl0bGU6ICfml7bpl7QnLFxyXG4gICAgICAgICAgICBkYXRhSW5kZXg6ICduYW1lJyxcclxuICAgICAgICAgICAga2V5OiAnbmFtZScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAn5ZCN56ewJyxcclxuICAgICAgICAgICAgZGF0YUluZGV4OiAnbmFtZXgnLFxyXG4gICAgICAgICAgICBrZXk6ICduYW1lJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGl0bGU6ICfnsbvliKsnLFxyXG4gICAgICAgICAgICBkYXRhSW5kZXg6ICdhZ2UnLFxyXG4gICAgICAgICAgICBrZXk6ICdhZ2UnLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aXRsZTogJ+aYn+e6pycsXHJcbiAgICAgICAgICAgIGRhdGFJbmRleDogJ3podXpoaScsXHJcbiAgICAgICAgICAgIGtleTogJ3podXpoaScsXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHRpdGxlOiAn5oC75qyh5pWwJyxcclxuICAgICAgICAgICAgZGF0YUluZGV4OiAnemhhbmthaScsXHJcbiAgICAgICAgICAgIGtleTogJ3poYW5rYWknLFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0aXRsZTogJ+S/neW6leasoeaVsCcsXHJcbiAgICAgICAgICAgIGRhdGFJbmRleDogJ3poYW5rYWknLFxyXG4gICAgICAgICAgICBrZXk6ICd6aGFua2FpJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgdGl0bGU6ICflsZXlvIAnLFxyXG4gICAgICAgICAgICBkYXRhSW5kZXg6ICd6aGFua2FpJyxcclxuICAgICAgICAgICAga2V5OiAnemhhbmthaVgnLFxyXG4gICAgICAgIH0sXHJcbiAgICBdO1xyXG5cclxuXHJcbiAgICBjb25zdCB4ID0gKCkgPT4ge1xyXG4gICAgICAgIHJldHVybiA8ZGl2PlxyXG5cclxuICAgICAgICAgICAgPEljb24gbmFtZT1cInFxXCI+PC9JY29uPlxyXG4gICAgICAgICAgICA8SWNvbiBuYW1lPVwiYmFpZHVcIj48L0ljb24+XHJcbiAgICAgICAgICAgIDxJY29uIG5hbWU9XCJ3ZWNoYWxcIj48L0ljb24+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIChcclxuICAgICAgICA8PlxyXG4gICAgICAgICAgICA8ZGl2PuesrOS4gOS4quS+i+WtkDwvZGl2PlxyXG4gICAgICAgICAgICA8VGFibGVzXHJcbiAgICAgICAgICAgICAgICBkb21lPSB7eH0gXHJcbiAgICAgICAgICAgICAgICBkYXRhU291cmNldz17ZGF0YVNvdXJjZX1cclxuICAgICAgICAgICAgICAgIGNvbHVtbnM9e2NvbHVtbnN9PlxyXG4gICAgICAgICAgICA8L1RhYmxlcz5cclxuICAgICAgICA8Lz5cclxuICAgIClcclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgVGFibGVFeGFtcGxlIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgUmFkaW8gZnJvbSAnLi9pbmRleCc7XHJcbmltcG9ydCBPcHRpb24gZnJvbSAnLi9PcHRpb24nO1xyXG5cclxuY29uc3QgUmFkaW9FeGFtcGxlID0gKCkgPT4ge1xyXG5cclxuICAgIGNvbnN0IGhhbmRsZUNoYW5nZT0odmFsdWU6YW55KT0+e1xyXG4gICAgICAgIGNvbnNvbGUubG9nKHZhbHVlK1wiMVwiKTsgICBcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gPGRpdj5cclxuICAgICAgICA8aDE+5oiR55qE5L+h5oGvPC9oMT5cclxuICAgICAgICA8UmFkaW8gZGVmYXVsdFZhbHVlPVwiYXBwbGVcIiAgb25DaGFuZ2U9eyh2YWx1ZSkgID0+IGhhbmRsZUNoYW5nZSh2YWx1ZSl9PlxyXG4gICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiYXBwbGVcIj5BcHBsZTwvT3B0aW9uPlxyXG4gICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwib3JhbmdlXCI+T3JhbmdlPC9PcHRpb24+XHJcbiAgICAgICAgICAgIDxPcHRpb24gdmFsdWU9XCJwZWFyXCI+UGVhcjwvT3B0aW9uPlxyXG4gICAgICAgICAgICA8T3B0aW9uIHZhbHVlPVwiZGlzYWJsZWRcIiBkaXNhYmxlZD17dHJ1ZX0+RGlzYWJsZWQ8L09wdGlvbj5cclxuICAgICAgICA8L1JhZGlvPlxyXG4gICAgPC9kaXY+XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgUmFkaW9FeGFtcGxlIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgU3dpdGNoIGZyb20gJy4vc3dpdGNoJztcclxuXHJcbmNvbnN0IFN3aXRjaEV4YW1wbGUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBoYW5kbGVPbkNoYW5nZSA9IChjaGVja2VkOiBhbnkpID0+IHtcclxuICAgICAgICBjb25zb2xlLmxvZyhjaGVja2VkKTtcclxuICAgIH1cclxuICAgIHJldHVybiA8ZGl2PlxyXG4gICAgICAgIDxoMT7miJHnmoTkv6Hmga/lvIDlhbM8L2gxPlxyXG4gICAgICAgIDxTd2l0Y2ggb25DaGFuZ2U9eyhjaGVja2VkOiBhbnkpID0+IGhhbmRsZU9uQ2hhbmdlKGNoZWNrZWQpfSBzaXplPVwic21hbGxcIi8+XHJcbiAgICAgICAgPFN3aXRjaCAgIGRpc2FibGVkPXt0cnVlfSAvPlxyXG4gICAgICAgIDxTd2l0Y2ggb25DaGFuZ2U9eyhjaGVja2VkOiBhbnkpID0+IGhhbmRsZU9uQ2hhbmdlKGNoZWNrZWQpfSAgZGlzYWJsZWQ9e3RydWV9IC8+XHJcbiAgICAgICAgPFN3aXRjaCBvbkNoYW5nZT17KGNoZWNrZWQ6IGFueSkgPT4gaGFuZGxlT25DaGFuZ2UoY2hlY2tlZCl9ICBkaXNhYmxlZD17dHJ1ZX0gZGVmYXVsdENoZWNrZWQ9e3RydWV9IC8+XHJcbiAgICA8L2Rpdj5cclxufVxyXG5leHBvcnQgZGVmYXVsdCBTd2l0Y2hFeGFtcGxlIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnO1xyXG5pbXBvcnQgXCIuL2FjdGl2aXR5LnNjc3NcIlxyXG5cclxuY29uc3QgQWN0aXZpdHlFeGFtcGxlID0gKCkgPT4ge1xyXG5cclxuXHJcblxyXG4gICAgdmFyIGxpc3QgPSA4Oy8v5a6r5qC85pWw6YePXHJcbiAgICB2YXIgY291bnQgPSAwOy8v6L2s5ZyI5Yid5aeL5YC8XHJcbiAgICB2YXIgdG90YWxDb3VudCA9IDc7Ly/ovazliqjnmoTmgLvlnIjmlbBcclxuICAgIHZhciBzcGVlZCA9IDEwMDA7Ly/ovazlnIjpgJ/luqbvvIzotorlpKfotormhaJcclxuICAgIHZhciBtaW5TcGVlZCA9IDUwMDtcclxuICAgIHZhciB0aW1lcjogTm9kZUpTLlRpbWVvdXQ7XHJcbiAgICB2YXIgaW5kZXggPSAzOy8v5oyH5a6a6L2s5Yiw5ZOq5Liq5aWW5ZOBXHJcbiAgICBjb25zdCBbaXNDbGljaywgc2V0aXNDbGlja10gPSB1c2VTdGF0ZSh0cnVlKTtcclxuICAgIC8vIGNvbnN0IFtpc0NsaWNrLCBzZXRpc0NsaWNrXSA9IHVzZVN0YXRlKHRydWUpO1xyXG4gICAgbGV0IGFsaTogYW55ID0gbnVsbDtcclxuICAgIGxldCB3ZWl6aGkgPSAwXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgICAgIHZhciBsb3R0ZXJ5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvdHRlcnknKTtcclxuICAgICAgICAvLyB2YXIgcHJpemUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJpemUnKTtcclxuICAgICAgICBhbGkgPSBsb3R0ZXJ5Py5xdWVyeVNlbGVjdG9yQWxsKCdsaScpO1xyXG4gICAgfSwgW10pXHJcblxyXG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChpc0NsaWNrKSB7XHJcbiAgICAgICAgICAgIGNvdW50ID0gMDtcclxuICAgICAgICAgICAgcm9sbCgpO1xyXG4gICAgICAgICAgICAvLyBzZXRpc0NsaWNrKGZhbHNlKVxyXG5cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc29sZS5sb2coXCLlvIDlp4vmir3lpZZcIik7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHJvbGwgPSAoKSA9PiB7XHJcbiAgICAgICAgc3BlZWQgPSBzcGVlZCAtIDEwMFxyXG4gICAgICAgIGlmIChzcGVlZCA8PSAxMDApIHtcclxuICAgICAgICAgICAgc3BlZWQgPSAxMDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8v5q+P5qyh6LCD55So6YO95Y675o6J5YWo6YOoYWN0aXZl57G75ZCNXHJcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBhbGkubGVuZ3RoOyBqKyspIHtcclxuICAgICAgICAgICAgYWxpW2pdLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZXMnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2VpemhpKytcclxuICAgICAgICBpZiAod2VpemhpID09PSBhbGkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHdlaXpoaSA9IDBcclxuICAgICAgICAgICAgY291bnQrKztcclxuICAgICAgICB9XHJcbiAgICAgICAgYWxpW3dlaXpoaV0uY2xhc3NMaXN0LmFkZCgnYWN0aXZlcycpOy8v5re75Yqg5Y+Y6Imy57G75ZCNXHJcbiAgICAgICAgaWYgKGNvdW50ID49IHRvdGFsQ291bnQgJiYgd2VpemhpID09PSBpbmRleCkge1xyXG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xyXG4gICAgICAgICAgICBzZXRpc0NsaWNrKHRydWUpXHJcbiAgICAgICAgICAgIHNwZWVkID0gbWluU3BlZWQ7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coc3BlZWQsIGNvdW50KTtcclxuICAgICAgICAgICAgdGltZXIgPSBzZXRUaW1lb3V0KHJvbGwsIHNwZWVkKTsvL+S4jea7oei2s+adoeS7tuaXtuiwg+eUqOWumuaXtuWZqFxyXG4gICAgICAgICAgICAvL+acgOWQjuS4gOWciOWHj+mAn1xyXG4gICAgICAgICAgICBpZiAoY291bnQgPj0gdG90YWxDb3VudCAtIDEgfHwgc3BlZWQgPD0gMTAwKSB7XHJcbiAgICAgICAgICAgICAgICBzcGVlZCArPSAzMDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuXHJcbiAgICByZXR1cm4gPGRpdj5cclxuICAgICAgICA8aDE+5oiR55qE5rS75YqoPC9oMT5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImx1Y2t5RHJhd1wiPlxyXG4gICAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwibG90dGVyeVwiPlxyXG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzTmFtZT1cImFjdGl2ZXNcIj4xPC9saT5cclxuICAgICAgICAgICAgICAgIDxsaSA+MjwvbGk+XHJcbiAgICAgICAgICAgICAgICA8bGkgPjM8L2xpPlxyXG4gICAgICAgICAgICAgICAgPGxpID40PC9saT5cclxuICAgICAgICAgICAgICAgIDxsaSA+NTwvbGk+XHJcbiAgICAgICAgICAgICAgICA8bGk+NjwvbGk+XHJcbiAgICAgICAgICAgICAgICA8bGk+NzwvbGk+XHJcbiAgICAgICAgICAgICAgICA8bGk+ODwvbGk+XHJcbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRveFwiIG9uQ2xpY2s9e2hhbmRsZUNoYW5nZX0+54K55Ye75oq95aWWPC9kaXY+XHJcbiAgICAgICAgICAgIDwvdWw+XHJcblxyXG4gICAgICAgIDwvZGl2PlxyXG5cclxuICAgIDwvZGl2PlxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IEFjdGl2aXR5RXhhbXBsZSIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcclxuaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VSZWYgfSBmcm9tICdyZWFjdCc7XHJcbmltcG9ydCAnLi9sb25nTGlzdC5zY3NzJ1xyXG5cclxuY29uc3QgTG9uZ0xpc3Q6IFJlYWN0LkZ1bmN0aW9uQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gICAgY29uc3QgdmlzaWJsZUxpc3QgPSBBcnJheS5mcm9tKHsgbGVuZ3RoOiAxMDAgfSwgKHYsIGspID0+IGspO1xyXG4gICAgLy8gY29uc3QgaXRlbUhlaWdodCA9IDMwXHJcbiAgICAvLyBjb25zdCB0b2FsaGVnaHQgPSB2aXNpYmxlTGlzdC5sZW5ndGggKiBpdGVtSGVpZ2h0XHJcblxyXG5cclxuICAgIGxldCBwYW5lbDogYW55ID0gdXNlUmVmKClcclxuICAgIGxldCBjb250YWluZXI6IGFueSA9IHVzZVJlZigpXHJcblxyXG4gICAgY29uc3Qgb25TY3JvbGwgPSAoZTphbnkpID0+IHtcclxuICAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xyXG4gICAgIFxyXG4gICAgfSwgW10pXHJcbiAgICByZXR1cm4gPGRpdj5cclxuICAgICAgICA8aDE+5oiR55qE5L+h5oGv5byA5YWzPC9oMT5cclxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lcnNcIiBvblNjcm9sbD17b25TY3JvbGx9IHJlZj17Y29udGFpbmVyfT5cclxuICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIHt2aXNpYmxlTGlzdC5tYXAoKGl0ZW06IGFueSwgaW5kZXg6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT0naXRlbXMnIGtleT17aW5kZXh9PntpbmRleH08L2Rpdj5cclxuICAgICAgICAgICAgICAgIH0pfVxyXG4gICAgICAgICAgIFxyXG4gICAgICAgIDwvZGl2ID5cclxuICAgIDwvZGl2ID5cclxufVxyXG5leHBvcnQgZGVmYXVsdCBMb25nTGlzdCJdLCJuYW1lcyI6WyJtYXAiLCJ3ZWJwYWNrQ29udGV4dCIsInJlcSIsImlkIiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm8iLCJlIiwiRXJyb3IiLCJjb2RlIiwia2V5cyIsIk9iamVjdCIsInJlc29sdmUiLCJtb2R1bGUiLCJleHBvcnRzIiwicHVzaCIsInVzZVNvdXJjZU1hcCIsImxpc3QiLCJ0b1N0cmluZyIsInRoaXMiLCJpdGVtIiwiY29udGVudCIsInNvdXJjZU1hcCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImNvbmNhdCIsImpvaW4iLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwidHlwZSIsIktOT1dOX1NUQVRJQ1MiLCJuYW1lIiwicHJvdG90eXBlIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJndW1lbnRzIiwiYXJpdHkiLCJNRU1PX1NUQVRJQ1MiLCJjb21wYXJlIiwiVFlQRV9TVEFUSUNTIiwiZ2V0U3RhdGljcyIsImNvbXBvbmVudCIsImlzTWVtbyIsIkZvcndhcmRSZWYiLCJyZW5kZXIiLCJNZW1vIiwiZGVmaW5lUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwia2V5IiwiZGVzY3JpcHRvciIsImhhc093blByb3BlcnR5IiwicHJvcElzRW51bWVyYWJsZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwidG9PYmplY3QiLCJ2YWwiLCJUeXBlRXJyb3IiLCJhc3NpZ24iLCJ0ZXN0MSIsIlN0cmluZyIsInRlc3QyIiwiZnJvbUNoYXJDb2RlIiwibiIsInRlc3QzIiwic3BsaXQiLCJmb3JFYWNoIiwibGV0dGVyIiwiZXJyIiwic2hvdWxkVXNlTmF0aXZlIiwidGFyZ2V0IiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsInMiLCJjYWxsIiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJlbXB0eUZ1bmN0aW9uIiwiZW1wdHlGdW5jdGlvbldpdGhSZXNldCIsInJlc2V0V2FybmluZ0NhY2hlIiwic2hpbSIsInByb3BzIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwibG9jYXRpb24iLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiaXNSZXF1aXJlZCIsIlJlYWN0UHJvcFR5cGVzIiwiYXJyYXkiLCJiaWdpbnQiLCJib29sIiwiZnVuYyIsIm51bWJlciIsIm9iamVjdCIsInN0cmluZyIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJlbGVtZW50IiwiZWxlbWVudFR5cGUiLCJpbnN0YW5jZU9mIiwibm9kZSIsIm9iamVjdE9mIiwib25lT2YiLCJvbmVPZlR5cGUiLCJzaGFwZSIsImV4YWN0IiwiY2hlY2tQcm9wVHlwZXMiLCJQcm9wVHlwZXMiLCJhYSIsIm0iLCJyIiwieSIsImEiLCJiIiwiYyIsImJhIiwiU2V0IiwiY2EiLCJkYSIsImVhIiwiYWRkIiwiZmEiLCJ3aW5kb3ciLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJoYSIsImlhIiwiamEiLCJrYSIsIkIiLCJkIiwiZiIsImciLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsIkQiLCJ0b0xvd2VyQ2FzZSIsIm9hIiwicGEiLCJ0b1VwcGVyQ2FzZSIsInFhIiwic2xpY2UiLCJtYSIsImlzTmFOIiwibmEiLCJ0ZXN0IiwibGEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInJlcGxhY2UiLCJ4bGlua0hyZWYiLCJyYSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwic2EiLCJ0YSIsInVhIiwid2EiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIlN5bWJvbCIsImZvciIsIkUiLCJNYSIsIkthIiwiaXRlcmF0b3IiLCJMYSIsIk5hIiwic3RhY2siLCJ0cmltIiwibWF0Y2giLCJPYSIsIlBhIiwicHJlcGFyZVN0YWNrVHJhY2UiLCJzZXQiLCJSZWZsZWN0IiwiY29uc3RydWN0IiwiayIsImgiLCJRYSIsInRhZyIsIl9yZW5kZXIiLCJSYSIsIiQkdHlwZW9mIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiU2EiLCJUYSIsIm5vZGVOYW1lIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiY29uc3RydWN0b3IiLCJnZXQiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwidmFsdWUiLCJYYSIsImFjdGl2ZUVsZW1lbnQiLCJib2R5IiwiWWEiLCJkZWZhdWx0Q2hlY2tlZCIsImRlZmF1bHRWYWx1ZSIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIlphIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIiRhIiwiYWIiLCJiYiIsImNiIiwib3duZXJEb2N1bWVudCIsImViIiwiY2hpbGRyZW4iLCJDaGlsZHJlbiIsImRiIiwiZmIiLCJvcHRpb25zIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJoYiIsIkFycmF5IiwiaXNBcnJheSIsImliIiwiamIiLCJ0ZXh0Q29udGVudCIsImtiIiwibGIiLCJtYiIsIm5iIiwib2IiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJ2YWx1ZU9mIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiYXBwZW5kQ2hpbGQiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwicGIiLCJsYXN0Q2hpbGQiLCJub2RlVHlwZSIsIm5vZGVWYWx1ZSIsInFiIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJyYiIsInNiIiwidGIiLCJzdHlsZSIsImluZGV4T2YiLCJzZXRQcm9wZXJ0eSIsImNoYXJBdCIsInN1YnN0cmluZyIsInViIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImlucHV0Iiwia2V5Z2VuIiwibGluayIsIm1ldGEiLCJwYXJhbSIsInRyYWNrIiwid2JyIiwidmIiLCJ3YiIsImlzIiwieGIiLCJzcmNFbGVtZW50IiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwieWIiLCJ6YiIsIkFiIiwiQmIiLCJDYiIsInN0YXRlTm9kZSIsIkRiIiwiRWIiLCJGYiIsIkdiIiwiSGIiLCJJYiIsIkpiIiwiS2IiLCJMYiIsIk1iIiwiT2IiLCJQYiIsIlFiIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJSYiIsImwiLCJhcHBseSIsIm9uRXJyb3IiLCJTYiIsIlRiIiwiVWIiLCJWYiIsIldiIiwiWGIiLCJaYiIsImFsdGVybmF0ZSIsInJldHVybiIsImZsYWdzIiwiJGIiLCJtZW1vaXplZFN0YXRlIiwiZGVoeWRyYXRlZCIsImFjIiwiY2MiLCJjaGlsZCIsInNpYmxpbmciLCJjdXJyZW50IiwiYmMiLCJkYyIsImVjIiwiZmMiLCJnYyIsImhjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJtYyIsIm5jIiwiTWFwIiwib2MiLCJwYyIsInFjIiwicmMiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwibmF0aXZlRXZlbnQiLCJ0YXJnZXRDb250YWluZXJzIiwic2MiLCJkZWxldGUiLCJwb2ludGVySWQiLCJ0YyIsInZjIiwid2MiLCJsYW5lUHJpb3JpdHkiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJjb250YWluZXJJbmZvIiwieGMiLCJ5YyIsInNoaWZ0IiwiemMiLCJBYyIsIkJjIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiQ2MiLCJEYyIsIkVjIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiRmMiLCJHYyIsIkhjIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIkljIiwiSmMiLCJLYyIsIkxjIiwiTWMiLCJOYyIsIk9jIiwiUGMiLCJRYyIsInVuc3RhYmxlX25vdyIsIkYiLCJSYyIsIlVjIiwicGVuZGluZ0xhbmVzIiwiZXhwaXJlZExhbmVzIiwic3VzcGVuZGVkTGFuZXMiLCJwaW5nZWRMYW5lcyIsIlZjIiwiZW50YW5nbGVkTGFuZXMiLCJlbnRhbmdsZW1lbnRzIiwiV2MiLCJYYyIsIlljIiwiWmMiLCIkYyIsImV2ZW50VGltZXMiLCJNYXRoIiwiY2x6MzIiLCJiZCIsImNkIiwibG9nIiwiTE4yIiwiZGQiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImVkIiwiZmQiLCJnZCIsImhkIiwiYmluZCIsInVjIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJzdG9wUHJvcGFnYXRpb24iLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJEYXRlIiwibm93IiwiaXNUcnVzdGVkIiwidGQiLCJ1ZCIsInZpZXciLCJkZXRhaWwiLCJ2ZCIsIkFkIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJjdHJsS2V5Iiwic2hpZnRLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInpkIiwiYnV0dG9uIiwiYnV0dG9ucyIsInJlbGF0ZWRUYXJnZXQiLCJmcm9tRWxlbWVudCIsInRvRWxlbWVudCIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsIkJkIiwiRGQiLCJkYXRhVHJhbnNmZXIiLCJGZCIsIkhkIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIklkIiwiY2xpcGJvYXJkRGF0YSIsIkpkIiwiTGQiLCJkYXRhIiwiTWQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiTmQiLCJPZCIsIkFsdCIsIkNvbnRyb2wiLCJNZXRhIiwiU2hpZnQiLCJQZCIsIlFkIiwicmVwZWF0IiwibG9jYWxlIiwid2hpY2giLCJSZCIsIlRkIiwid2lkdGgiLCJoZWlnaHQiLCJwcmVzc3VyZSIsInRhbmdlbnRpYWxQcmVzc3VyZSIsInRpbHRYIiwidGlsdFkiLCJ0d2lzdCIsInBvaW50ZXJUeXBlIiwiaXNQcmltYXJ5IiwiVmQiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwiWGQiLCJZZCIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJkb2N1bWVudE1vZGUiLCJjZSIsImRlIiwiZWUiLCJmZSIsImdlIiwiaGUiLCJpZSIsImxlIiwiY29sb3IiLCJkYXRlIiwiZGF0ZXRpbWUiLCJlbWFpbCIsIm1vbnRoIiwicGFzc3dvcmQiLCJyYW5nZSIsInNlYXJjaCIsInRlbCIsInRleHQiLCJ0aW1lIiwidXJsIiwid2VlayIsIm1lIiwibmUiLCJvZSIsImV2ZW50IiwibGlzdGVuZXJzIiwicGUiLCJxZSIsInJlIiwic2UiLCJ0ZSIsInVlIiwidmUiLCJ3ZSIsInhlIiwieWUiLCJ6ZSIsIm9uaW5wdXQiLCJBZSIsImRldGFjaEV2ZW50IiwiQmUiLCJDZSIsImF0dGFjaEV2ZW50IiwiRGUiLCJFZSIsIkZlIiwiSGUiLCJJZSIsIkplIiwiS2UiLCJMZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiTWUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTmUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiT2UiLCJjb250ZW50RWRpdGFibGUiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0IiwiZW5kIiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImRlZmF1bHRWaWV3IiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yT2Zmc2V0IiwiZm9jdXNOb2RlIiwiZm9jdXNPZmZzZXQiLCJWZSIsIldlIiwiWGUiLCJZZSIsIlplIiwiWWIiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwiRyIsIiRlIiwiaGFzIiwiYWYiLCJiZiIsInJhbmRvbSIsImNmIiwiZGYiLCJjYXB0dXJlIiwicGFzc2l2ZSIsIk5iIiwieCIsInciLCJ6IiwidSIsInEiLCJ0IiwidiIsImVmIiwiZmYiLCJwYXJlbnRXaW5kb3ciLCJnZiIsImhmIiwiSiIsIksiLCJRIiwiTCIsImplIiwiY2hhciIsImtlIiwidW5zaGlmdCIsImpmIiwia2YiLCJsZiIsIm1mIiwiYXV0b0ZvY3VzIiwibmYiLCJfX2h0bWwiLCJvZiIsInNldFRpbWVvdXQiLCJwZiIsImNsZWFyVGltZW91dCIsInFmIiwicmYiLCJzZiIsInByZXZpb3VzU2libGluZyIsInRmIiwidmYiLCJ3ZiIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJIIiwiSSIsIkNmIiwiTSIsIk4iLCJEZiIsIkVmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRmYiLCJHZiIsIkhmIiwiSWYiLCJnZXRDaGlsZENvbnRleHQiLCJKZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJPZiIsIlBmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJRZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiUmYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJTZiIsIlRmIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJVZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiVmYiLCJXZiIsIlhmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJZZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlpmIiwiJGYiLCJhZyIsImJnIiwiY2ciLCJkZyIsIk8iLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwibGciLCJtZyIsIm5nIiwib2ciLCJwZyIsInFnIiwicmciLCJfY3VycmVudFZhbHVlIiwic2ciLCJjaGlsZExhbmVzIiwidGciLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsInVnIiwidmciLCJjb250ZXh0Iiwib2JzZXJ2ZWRCaXRzIiwibmV4dCIsInJlc3BvbmRlcnMiLCJ3ZyIsInhnIiwidXBkYXRlUXVldWUiLCJiYXNlU3RhdGUiLCJmaXJzdEJhc2VVcGRhdGUiLCJsYXN0QmFzZVVwZGF0ZSIsInNoYXJlZCIsInBlbmRpbmciLCJlZmZlY3RzIiwieWciLCJ6ZyIsImV2ZW50VGltZSIsImxhbmUiLCJwYXlsb2FkIiwiY2FsbGJhY2siLCJBZyIsIkJnIiwiQ2ciLCJBIiwicCIsIkMiLCJEZyIsIkVnIiwiRmciLCJDb21wb25lbnQiLCJyZWZzIiwiR2ciLCJLZyIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkhnIiwiSWciLCJKZyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlRm9yY2VVcGRhdGUiLCJMZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiTWciLCJzdGF0ZSIsInVwZGF0ZXIiLCJOZyIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk9nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJQZyIsIlFnIiwicmVmIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsIlJnIiwiU2ciLCJsYXN0RWZmZWN0IiwibmV4dEVmZmVjdCIsImZpcnN0RWZmZWN0IiwiaW5kZXgiLCJUZyIsIlVnIiwibW9kZSIsIlZnIiwiaW1wbGVtZW50YXRpb24iLCJXZyIsIlhnIiwiZG9uZSIsIllnIiwiWmciLCIkZyIsImFoIiwiYmgiLCJjaCIsImRoIiwiZWgiLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwiZmgiLCJnaCIsImhoIiwiUCIsImloIiwibWVtb2l6ZWRQcm9wcyIsInJldmVhbE9yZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGVuZGluZ1Byb3BzIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInVoIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJ2aCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJ3aCIsInhoIiwiUiIsIlMiLCJUIiwieWgiLCJ6aCIsIkFoIiwiQmgiLCJDaCIsIkRoIiwiRWgiLCJGaCIsIkdoIiwiSGgiLCJiYXNlUXVldWUiLCJxdWV1ZSIsIkloIiwiSmgiLCJLaCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsIkxoIiwiTWgiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJtdXRhYmxlUmVhZExhbmVzIiwiTmgiLCJVIiwidXNlU3RhdGUiLCJnZXRTbmFwc2hvdCIsInN1YnNjcmliZSIsInVzZUVmZmVjdCIsInNldFNuYXBzaG90IiwiT2giLCJQaCIsIlFoIiwiUmgiLCJjcmVhdGUiLCJkZXN0cm95IiwiZGVwcyIsIlNoIiwiVGgiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwicmVhZENvbnRleHQiLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwidXNlTGF5b3V0RWZmZWN0IiwidXNlTWVtbyIsInVzZVJlZHVjZXIiLCJ1c2VSZWYiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlT3BhcXVlSWRlbnRpZmllciIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsInVmIiwiZWkiLCJSZWFjdEN1cnJlbnRPd25lciIsImZpIiwiZ2kiLCJoaSIsImlpIiwiamkiLCJraSIsImxpIiwibWkiLCJiYXNlTGFuZXMiLCJuaSIsIm9pIiwicGkiLCJVTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnREaWRVcGRhdGUiLCJxaSIsInJpIiwicGVuZGluZ0NvbnRleHQiLCJCaSIsIkRpIiwiRWkiLCJzaSIsInJldHJ5TGFuZSIsInRpIiwiZmFsbGJhY2siLCJ1bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFjayIsInVpIiwidW5zdGFibGVfZXhwZWN0ZWRMb2FkVGltZSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJpc0JhY2t3YXJkcyIsInJlbmRlcmluZyIsInJlbmRlcmluZ1N0YXJ0VGltZSIsImxhc3QiLCJ0YWlsIiwidGFpbE1vZGUiLCJBaSIsIkZpIiwiR2kiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwib25DbGljayIsIm9uY2xpY2siLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJWIiwiSGkiLCJJaSIsIlciLCJKaSIsIktpIiwiTGkiLCJNaSIsIm1lc3NhZ2UiLCJOaSIsImNvbnNvbGUiLCJlcnJvciIsIk9pIiwiV2Vha01hcCIsIlBpIiwiUWkiLCJSaSIsIlNpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJUaSIsImNvbXBvbmVudFN0YWNrIiwiVWkiLCJXZWFrU2V0IiwiVmkiLCJXaSIsIlhpIiwiX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUiLCJZaSIsIlppIiwiJGkiLCJmb2N1cyIsImFqIiwiZGlzcGxheSIsImJqIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImNqIiwiZGoiLCJlaiIsImZqIiwiZ2oiLCJoaiIsImluc2VydEJlZm9yZSIsIl9yZWFjdFJvb3RDb250YWluZXIiLCJpaiIsImpqIiwia2oiLCJsaiIsInRoZW4iLCJtaiIsIm5qIiwiY2VpbCIsIm9qIiwicGoiLCJYIiwiWSIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIkluZmluaXR5Iiwid2oiLCJjayIsIloiLCJ4aiIsInlqIiwiemoiLCJBaiIsIkJqIiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiSWoiLCJKaiIsIlNjIiwiS2oiLCJMaiIsIk1qIiwiY2FsbGJhY2tOb2RlIiwiZXhwaXJhdGlvblRpbWVzIiwiY2FsbGJhY2tQcmlvcml0eSIsIlRjIiwiTmoiLCJPaiIsIlBqIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiVWoiLCJ0aW1lb3V0SGFuZGxlIiwiV2oiLCJYaiIsInBpbmdDYWNoZSIsIllqIiwiWmoiLCJ2YSIsImFrIiwiYmsiLCJkayIsInJhbmdlQ291bnQiLCJmb2N1c2VkRWxlbSIsInNlbGVjdGlvblJhbmdlIiwiZWsiLCJtaW4iLCJleHRlbmQiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJsZWZ0Iiwic2Nyb2xsTGVmdCIsInRvcCIsInNjcm9sbFRvcCIsIm9uQ29tbWl0RmliZXJSb290IiwiZmsiLCJnayIsImlrIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsImprIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImtrIiwibGsiLCJtayIsIm5rIiwib2siLCJxayIsImh5ZHJhdGlvbk9wdGlvbnMiLCJtdXRhYmxlU291cmNlcyIsIl9pbnRlcm5hbFJvb3QiLCJyayIsInRrIiwiaGFzQXR0cmlidXRlIiwic2siLCJ1ayIsImhrIiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwidW5tb3VudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwiVmoiLCJ2ayIsIkV2ZW50cyIsIndrIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJidW5kbGVUeXBlIiwidmVyc2lvbiIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJ4ayIsInJlbmRlcmVyQ29uZmlnIiwib3ZlcnJpZGVIb29rU3RhdGUiLCJvdmVycmlkZUhvb2tTdGF0ZURlbGV0ZVBhdGgiLCJvdmVycmlkZUhvb2tTdGF0ZVJlbmFtZVBhdGgiLCJvdmVycmlkZVByb3BzIiwib3ZlcnJpZGVQcm9wc0RlbGV0ZVBhdGgiLCJvdmVycmlkZVByb3BzUmVuYW1lUGF0aCIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwieWsiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJjaGVja0RDRSIsInBlcmZvcm1hbmNlIiwiTWVzc2FnZUNoYW5uZWwiLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZmxvb3IiLCJwb3J0MiIsInBvcnQxIiwib25tZXNzYWdlIiwicG9zdE1lc3NhZ2UiLCJwb3AiLCJzb3J0SW5kZXgiLCJzdGFydFRpbWUiLCJleHBpcmF0aW9uVGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJBc3luY01vZGUiLCJDb25jdXJyZW50TW9kZSIsIkNvbnRleHRDb25zdW1lciIsIkNvbnRleHRQcm92aWRlciIsIkVsZW1lbnQiLCJGcmFnbWVudCIsIkxhenkiLCJQb3J0YWwiLCJQcm9maWxlciIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsImFyciIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJwYXRoIiwiUmVnRXhwIiwiZ3JvdXBzIiwicHJlZml4IiwiZGVsaW1pdGVyIiwib3B0aW9uYWwiLCJwYXJ0aWFsIiwiYXN0ZXJpc2siLCJwYXR0ZXJuIiwiYXR0YWNoS2V5cyIsInJlZ2V4cFRvUmVnZXhwIiwicGFydHMiLCJhcnJheVRvUmVnZXhwIiwidG9rZW5zVG9SZWdFeHAiLCJwYXJzZSIsInN0cmluZ1RvUmVnZXhwIiwiY29tcGlsZSIsInN0ciIsInRva2Vuc1RvRnVuY3Rpb24iLCJQQVRIX1JFR0VYUCIsInJlcyIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJleGVjIiwiZXNjYXBlZCIsImdyb3VwIiwibW9kaWZpZXIiLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsInN1YnN0ciIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsImNoYXJDb2RlQXQiLCJtYXRjaGVzIiwib2JqIiwib3B0cyIsImVuY29kZSIsInByZXR0eSIsInRva2VuIiwic2VnbWVudCIsImoiLCJzZW5zaXRpdmUiLCJzdHJpY3QiLCJyb3V0ZSIsImVuZHNXaXRoRGVsaW1pdGVyIiwic2V0U3RhdGUiLCJmb3JjZVVwZGF0ZSIsIl9fc2VsZiIsIl9fc291cmNlIiwiZXNjYXBlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJkZWZhdWx0IiwiSXNTb21lUmVuZGVyZXJBY3RpbmciLCJjb3VudCIsInRvQXJyYXkiLCJvbmx5IiwiUHVyZUNvbXBvbmVudCIsImNsb25lRWxlbWVudCIsImNyZWF0ZUNvbnRleHQiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIm1lbW8iLCJ0cmFuc2Zvcm0iLCJ1bmRlZmluZWQiLCJsb2NhbHMiLCJmbiIsInN0eWxlc0luRG9tIiwiaXNPbGRJRSIsImFsbCIsImF0b2IiLCJnZXRUYXJnZXQiLCJwYXJlbnQiLCJxdWVyeVNlbGVjdG9yIiwiZ2V0RWxlbWVudCIsInN0eWxlVGFyZ2V0IiwiY29udGVudERvY3VtZW50IiwiaGVhZCIsInNpbmdsZXRvbiIsInNpbmdsZXRvbkNvdW50ZXIiLCJzdHlsZXNJbnNlcnRlZEF0VG9wIiwiZml4VXJscyIsImFkZFN0eWxlc1RvRG9tIiwic3R5bGVzIiwiZG9tU3R5bGUiLCJhZGRTdHlsZSIsImxpc3RUb1N0eWxlcyIsIm5ld1N0eWxlcyIsInBhcnQiLCJjc3MiLCJtZWRpYSIsImluc2VydFN0eWxlRWxlbWVudCIsImluc2VydEludG8iLCJsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCIsImluc2VydEF0IiwiYmVmb3JlIiwicmVtb3ZlU3R5bGVFbGVtZW50IiwiaWR4Iiwic3BsaWNlIiwiY3JlYXRlU3R5bGVFbGVtZW50IiwiYXR0cnMiLCJub25jZSIsImFkZEF0dHJzIiwiZWwiLCJ1cGRhdGUiLCJyZW1vdmUiLCJyZXN1bHQiLCJzdHlsZUluZGV4IiwiYXBwbHlUb1NpbmdsZXRvblRhZyIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsInJldm9rZU9iamVjdFVSTCIsIkJsb2IiLCJyZWwiLCJjcmVhdGVMaW5rRWxlbWVudCIsInVwZGF0ZUxpbmsiLCJhcHBseVRvVGFnIiwibmV3T2JqIiwiREVCVUciLCJuZXdMaXN0IiwibWF5UmVtb3ZlIiwidGV4dFN0b3JlIiwicmVwbGFjZVRleHQiLCJyZXBsYWNlbWVudCIsImZpbHRlciIsIkJvb2xlYW4iLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImNzc05vZGUiLCJjaGlsZE5vZGVzIiwiYXV0b0ZpeFVybHMiLCJjb252ZXJ0VG9BYnNvbHV0ZVVybHMiLCJibG9iIiwib2xkU3JjIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJuZXdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCIkMSIsIlNwcml0ZVN5bWJvbCIsInZpZXdCb3giLCJ0aGlzJDEiLCJwcm9wIiwiY3JlYXRlQ29tbW9uanNNb2R1bGUiLCJzZWxmIiwiZGVlcG1lcmdlIiwiaXNNZXJnZWFibGVPYmplY3QiLCJlbXB0eVRhcmdldCIsImNsb25lSWZOZWNlc3NhcnkiLCJvcHRpb25zQXJndW1lbnQiLCJjbG9uZSIsImRlZmF1bHRBcnJheU1lcmdlIiwiZGVzdGluYXRpb24iLCJtZXJnZU9iamVjdCIsImFycmF5TWVyZ2UiLCJyZWR1Y2UiLCJwcmV2IiwiZmFjdG9yeSIsIm5hbWVzcGFjZXNfMSIsInN2ZyIsInVyaSIsInhsaW5rIiwiZGVmYXVsdEF0dHJzIiwid3JhcEluU3ZnU3RyaW5nIiwiYXR0cmlidXRlcyIsImF0dHIiLCJvYmplY3RUb0F0dHJzU3RyaW5nIiwiQnJvd3NlclNwcml0ZVN5bWJvbCIsIlNwcml0ZVN5bWJvbCQkMSIsIl9fcHJvdG9fXyIsInByb3RvdHlwZUFjY2Vzc29ycyIsImNyZWF0ZUZyb21FeGlzdGluZ05vZGUiLCJnZXRBdHRyaWJ1dGUiLCJvdXRlckhUTUwiLCJtb3VudCIsIm1vdW50VGFyZ2V0IiwiaGFzSW1wb3J0Tm9kZSIsImltcG9ydE5vZGUiLCJkb2MiLCJET01QYXJzZXIiLCJwYXJzZUZyb21TdHJpbmciLCJkZWZpbmVQcm9wZXJ0aWVzIiwic3ZnJDEiLCJ4bGluayQxIiwiZGVmYXVsdENvbmZpZyIsIlNwcml0ZSIsImNvbmZpZyIsImV4aXN0aW5nIiwiZmluZCIsInN0cmluZ2lmaWVkU3ltYm9scyIsImRlZmF1bHRDb25maWckMSIsImF1dG9Db25maWd1cmUiLCJtb3VudFRvIiwic3luY1VybHNXaXRoQmFzZVRhZyIsImxpc3RlbkxvY2F0aW9uQ2hhbmdlRXZlbnQiLCJsb2NhdGlvbkNoYW5nZUV2ZW50IiwibG9jYXRpb25DaGFuZ2VBbmd1bGFyRW1pdHRlciIsInVzYWdlc1RvVXBkYXRlIiwibW92ZUdyYWRpZW50c091dHNpZGVTeW1ib2wiLCJhcnJheUZyb20iLCJhcnJheUxpa2UiLCJicm93c2VyIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiZ2V0VXJsV2l0aG91dEZyYWdtZW50IiwiZXZlbnROYW1lIiwiYW5ndWxhciIsInJ1biIsIiRyb290U2NvcGUiLCIkb24iLCJvbGRVcmwiLCJjcmVhdGVFdmVudCIsImluaXRDdXN0b21FdmVudCIsImRpc3BhdGNoRXZlbnQiLCJzZWxlY3RvciIsInhMaW5rTlMiLCJ4TGlua0F0dHJOYW1lIiwic3BlY2lhbFVybENoYXJzUGF0dGVybiIsImVuY29kZXIiLCJzcHJpdGUiLCJhdHRMaXN0IiwiYXR0U2VsZWN0b3IiLCJ1cGRhdGVVcmxzIiwicmVmZXJlbmNlcyIsInN0YXJ0c1dpdGgiLCJyZXBsYWNlV2l0aCIsIm5vZGVzIiwibWF0Y2hlciIsInN0YXJ0c1dpdGhFbmNvZGVkIiwicmVwbGFjZVdpdGhFbmNvZGVkIiwibG9jYWxOYW1lIiwiYWNjIiwiYXJyYXlmaWVkIiwibWF0Y2hlZCIsInVwZGF0ZVJlZmVyZW5jZXMiLCJCcm93c2VyU3ByaXRlIiwiU3ByaXRlJCQxIiwiY2ZnIiwiZW1pdHRlciIsIm9uIiwiaGFuZGxlciIsIm9mZiIsImVtaXQiLCJldnQiLCJfZW1pdHRlciIsIl9hdXRvQ29uZmlndXJlIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJoYW5kbGVMb2NhdGlvbkNoYW5nZSIsIl9oYW5kbGVMb2NhdGlvbkNoYW5nZSIsInNwcml0ZU5vZGUiLCJzeW1ib2xOb2RlIiwidXBkYXRlZE5vZGVzIiwiaXNOZXdTeW1ib2wiLCJhdHRhY2giLCJwcmVwZW5kIiwibW91bnROb2RlIiwidXNhZ2VzIiwicmVhZHkkMSIsImRlZmluaXRpb24iLCJmbnMiLCJoYWNrIiwiZG9TY3JvbGwiLCJkb21Db250ZW50TG9hZGVkIiwibG9hZGVkIiwicmVhZHlTdGF0ZSIsInNwcml0ZU5vZGVJZCIsImxvYWRTcHJpdGUiLCJnZXRFbGVtZW50QnlJZCIsInJlcXVpcmVDb250ZXh0IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZ2V0dGVyIiwiX19lc01vZHVsZSIsImdsb2JhbFRoaXMiLCJGdW5jdGlvbiIsInRvU3RyaW5nVGFnIiwiX3NldFByb3RvdHlwZU9mIiwic2V0UHJvdG90eXBlT2YiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImlzQWJzb2x1dGUiLCJzcGxpY2VPbmUiLCJjb25kaXRpb24iLCJhZGRMZWFkaW5nU2xhc2giLCJzdHJpcExlYWRpbmdTbGFzaCIsInN0cmlwQmFzZW5hbWUiLCJoYXNCYXNlbmFtZSIsInN0cmlwVHJhaWxpbmdTbGFzaCIsImNyZWF0ZVBhdGgiLCJoYXNoIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJ1cCIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwicHJvbXB0Iiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsIm5vdGlmeUxpc3RlbmVycyIsIl9sZW4iLCJhcmdzIiwiX2tleSIsImNhblVzZURPTSIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJIYXNoQ2hhbmdlRXZlbnQkMSIsIkhhc2hQYXRoQ29kZXJzIiwiaGFzaGJhbmciLCJlbmNvZGVQYXRoIiwiZGVjb2RlUGF0aCIsIm5vc2xhc2giLCJzbGFzaCIsInN0cmlwSGFzaCIsImdldEhhc2hQYXRoIiwicmVwbGFjZUhhc2hQYXRoIiwiY3JlYXRlSGFzaEhpc3RvcnkiLCJnbG9iYWxIaXN0b3J5IiwiaGlzdG9yeSIsIl9wcm9wcyIsIl9wcm9wcyRnZXRVc2VyQ29uZmlybSIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiYmFzZW5hbWUiLCJfSGFzaFBhdGhDb2RlcnMkaGFzaFQiLCJnZXRET01Mb2NhdGlvbiIsInRyYW5zaXRpb25NYW5hZ2VyIiwibmV4dFN0YXRlIiwiZm9yY2VOZXh0UG9wIiwiaWdub3JlUGF0aCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsImZyb21JbmRleCIsImRlbHRhIiwiZ28iLCJyZXZlcnRQb3AiLCJoYW5kbGVQb3AiLCJpbml0aWFsTG9jYXRpb24iLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJpc0Jsb2NrZWQiLCJjcmVhdGVIcmVmIiwiYmFzZVRhZyIsInB1c2hIYXNoUGF0aCIsInByZXZJbmRleCIsIm5leHRQYXRocyIsImdvQmFjayIsImdvRm9yd2FyZCIsImJsb2NrIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiTUFYX1NJR05FRF8zMV9CSVRfSU5UIiwiY29tbW9uanNHbG9iYWwiLCJjcmVhdGVFdmVudEVtaXR0ZXIiLCJoYW5kbGVycyIsIm5ld1ZhbHVlIiwiY2hhbmdlZEJpdHMiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiX0NvbXBvbmVudCIsIl90aGlzIiwiX3Byb3RvIiwiX3JlZiIsIm5leHRQcm9wcyIsIm9sZFZhbHVlIiwiX0NvbXBvbmVudDIiLCJfdGhpczIiLCJvblVwZGF0ZSIsIl9wcm90bzIiLCJleGNsdWRlZCIsInNvdXJjZUtleXMiLCJjcmVhdGVOYW1lZENvbnRleHQiLCJoaXN0b3J5Q29udGV4dCIsIlJvdXRlciIsIl9SZWFjdCRDb21wb25lbnQiLCJfaXNNb3VudGVkIiwiX3BlbmRpbmdMb2NhdGlvbiIsInN0YXRpY0NvbnRleHQiLCJjb21wdXRlUm9vdE1hdGNoIiwicGFyYW1zIiwiaXNFeGFjdCIsImNhY2hlJDEiLCJjYWNoZUNvdW50JDEiLCJtYXRjaFBhdGgiLCJfb3B0aW9ucyIsIl9vcHRpb25zJGV4YWN0IiwiX29wdGlvbnMkc3RyaWN0IiwiX29wdGlvbnMkc2Vuc2l0aXZlIiwiX2NvbXBpbGVQYXRoIiwiY2FjaGVLZXkiLCJwYXRoQ2FjaGUiLCJyZWdleHAiLCJjb21waWxlUGF0aCQxIiwidmFsdWVzIiwiUm91dGUiLCJjb250ZXh0JDEiLCJjb21wdXRlZE1hdGNoIiwiX3RoaXMkcHJvcHMiLCJpc0VtcHR5Q2hpbGRyZW4iLCJIYXNoUm91dGVyIiwicmVzb2x2ZVRvTG9jYXRpb24iLCJub3JtYWxpemVUb0xvY2F0aW9uIiwiZm9yd2FyZFJlZlNoaW0iLCJMaW5rQW5jaG9yIiwiZm9yd2FyZGVkUmVmIiwiaW5uZXJSZWYiLCJuYXZpZ2F0ZSIsIl9vbkNsaWNrIiwicmVzdCIsImV4IiwiaXNNb2RpZmllZEV2ZW50IiwiTGluayIsIl9yZWYyIiwiX3JlZjIkY29tcG9uZW50IiwiaXNEdXBsaWNhdGVOYXZpZ2F0aW9uIiwiZm9yd2FyZFJlZlNoaW0kMSIsImZvcndhcmRSZWYkMSIsIk5hdkxpbmsiLCJfcmVmJGFyaWFDdXJyZW50IiwiYXJpYUN1cnJlbnQiLCJfcmVmJGFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwiY2xhc3NOYW1lUHJvcCIsImNsYXNzTmFtZSIsImlzQWN0aXZlUHJvcCIsImxvY2F0aW9uUHJvcCIsInN0eWxlUHJvcCIsImVzY2FwZWRQYXRoIiwiY2xhc3NuYW1lcyIsImpvaW5DbGFzc25hbWVzIiwiX19hc3NpZ24iLCJfX3Jlc3QiLCJfX3JlYWQiLCJhciIsIl9fc3ByZWFkQXJyYXkiLCJwYWNrIiwibmFtZXMiLCJzY29wZWRDbGFzc01ha2VyIiwiZW50cmllcyIsImt2IiwiZXh0cmEiLCJyZXN0UHJvcHMiLCJsZXZlbCIsIkRpYWxvZyIsInZpc2libGUiLCJjbG9zZU9uQ2xpY2tNYXNrIiwib25DbG9zZSIsImFmdGVyQ2xvc2UiLCJjbG9zZSIsImRpdiIsImFwcGVuZCIsIlByaXNtIiwibGFuZyIsInVuaXF1ZUlkIiwicGxhaW5UZXh0R3JhbW1hciIsIl8iLCJ1dGlsIiwiVG9rZW4iLCJhbGlhcyIsIm9iaklkIiwiZGVlcENsb25lIiwidmlzaXRlZCIsImdldExhbmd1YWdlIiwicGFyZW50RWxlbWVudCIsInNldExhbmd1YWdlIiwibGFuZ3VhZ2UiLCJjbGFzc0xpc3QiLCJkZWZhdWx0QWN0aXZhdGlvbiIsIm5vIiwibGFuZ3VhZ2VzIiwicGxhaW4iLCJwbGFpbnRleHQiLCJ0eHQiLCJyZWRlZiIsImluc2lkZSIsImluc2VydCIsInJvb3QiLCJncmFtbWFyIiwicmV0IiwibmV3VG9rZW4iLCJvbGQiLCJERlMiLCJwcm9wZXJ0eSIsInByb3BlcnR5VHlwZSIsInBsdWdpbnMiLCJoaWdobGlnaHQiLCJlbnYiLCJob29rcyIsInRva2VuaXplIiwidG9rZW5MaXN0IiwiTGlua2VkTGlzdCIsImFkZEFmdGVyIiwibWF0Y2hHcmFtbWFyIiwiY2FsbGJhY2tzIiwibWF0Y2hlZFN0ciIsIm1hdGNoUGF0dGVybiIsInBvcyIsImxvb2tiZWhpbmQiLCJsYXN0SW5kZXgiLCJsb29rYmVoaW5kTGVuZ3RoIiwic3RhcnROb2RlIiwic3RhcnRQb3MiLCJyZW1hdGNoIiwicGF0dGVybnMiLCJjYXVzZSIsInBhdHRlcm5PYmoiLCJncmVlZHkiLCJnbG9iYWwiLCJjdXJyZW50Tm9kZSIsInJlYWNoIiwicmVtb3ZlQ291bnQiLCJtYXRjaFN0ciIsImFmdGVyIiwicmVtb3ZlRnJvbSIsInJlbW92ZVJhbmdlIiwibmVzdGVkUmVtYXRjaCIsIm5ld05vZGUiLCJjbGFzc2VzIiwiYWxpYXNlcyIsInByaXNtIiwibWFya3VwIiwiaW5jbHVkZWRDZGF0YUluc2lkZSIsImRlZiIsImF0dHJOYW1lIiwiaHRtbCIsIm1hdGhtbCIsInhtbCIsInNzbWwiLCJhdG9tIiwicnNzIiwiZW52VmFycyIsImNvbW1hbmRBZnRlckhlcmVkb2MiLCJpbnNpZGVTdHJpbmciLCJiYXNoIiwiZW50aXR5IiwidmFyaWFibGUiLCJ0b0JlQ29waWVkIiwic2hlbGwiLCJjbGlrZSIsImtleXdvcmQiLCJtb2ROYW1lIiwiY3BwIiwiYWRkSW5saW5lZCIsImFkZEF0dHJpYnV0ZSIsInNlbGVjdG9ySW5zaWRlIiwidW5pdCIsImphdmFzY3JpcHQiLCJyZWdleCIsImpzIiwic3BhY2UiLCJicmFjZXMiLCJzcHJlYWQiLCJqc3giLCJzdHJpbmdpZnlUb2tlbiIsIndhbGtUb2tlbnMiLCJvcGVuZWRUYWdzIiwibm90VGFnTm9yQnJhY2UiLCJvcGVuZWRCcmFjZXMiLCJwbGFpblRleHQiLCJ3aXRoSWQiLCJtYXliZUNsYXNzTmFtZVRva2VucyIsInRlbXBsYXRlU3RyaW5nIiwidGVtcGxhdGVMaXRlcmFsUGF0dGVybiIsImludGVycG9sYXRpb25PYmplY3QiLCJpbnRlcnBvbGF0aW9uUHVuY3R1YXRpb25PYmplY3QiLCJpbnRlcnBvbGF0aW9uUGF0dGVybiIsImNyZWF0ZVRlbXBsYXRlIiwiZ2V0UGxhY2Vob2xkZXIiLCJjb3VudGVyIiwidG9rZW5pemVXaXRoSG9va3MiLCJ0b2tlbml6ZUludGVycG9sYXRpb25FeHByZXNzaW9uIiwiZXhwcmVzc2lvbiIsInRlbXBHcmFtbWFyIiwidG9rZW5pemVFbWJlZGRlZCIsIl90b2tlbnMiLCJwbGFjZWhvbGRlckNvdW50ZXIiLCJwbGFjZWhvbGRlck1hcCIsImVtYmVkZGVkVG9rZW5zIiwicGxhY2Vob2xkZXIiLCJpbnRlcnBvbGF0aW9uRXhwcmVzc2lvbiIsInBsYWNlaG9sZGVycyIsIm1pZGRsZSIsImFmdGVyVG9rZW5zIiwic3VwcG9ydGVkTGFuZ3VhZ2VzIiwic3RyaW5nQ29udGVudCIsImZpbmRUZW1wbGF0ZVN0cmluZ3MiLCJlbWJlZGRlZCIsImNvbW1lbnQiLCJpbnRlcnBvbGF0aW9uIiwiY29mZmVlc2NyaXB0IiwiY29mZmVlIiwiZGlmZiIsIlBSRUZJWEVTIiwiZ2l0IiwiZ3JhcGhxbCIsIm1hcmtkb3duIiwidmFsaWRUb2tlbnMiLCJjdXJyZW50SW5kZXgiLCJzdGFydFRva2VuIiwiaW5wdXRWYXJpYWJsZXMiLCJpc1Rva2VuVHlwZSIsImdldFRva2VuIiwiZGVmaW5pdGlvbkVuZCIsImZpbmRDbG9zaW5nQnJhY2tldCIsImFkZEFsaWFzIiwibXV0YXRpb25FbmQiLCJ2YXJUb2tlbiIsInR5cGVzIiwib3BlbiIsInN0YWNrSGVpZ2h0IiwiYnVpbGRQbGFjZWhvbGRlcnMiLCJwbGFjZWhvbGRlclBhdHRlcm4iLCJyZXBsYWNlRmlsdGVyIiwidG9rZW5TdGFjayIsInRva2VuaXplUGxhY2Vob2xkZXJzIiwiaGFuZGxlYmFycyIsInB1bmN0dWF0aW9uIiwiaGJzIiwianNvbiIsIndlYm1hbmlmZXN0IiwibGVzcyIsIm1ha2VmaWxlIiwiaW5uZXIiLCJjcmVhdGVJbmxpbmUiLCJ0YWJsZUNlbGwiLCJ0YWJsZVJvdyIsInRhYmxlTGluZSIsInlhbWwiLCJjb2RlTGFuZyIsImNvZGVCbG9jayIsImNscyIsInRhZ1BhdHRlcm4iLCJwYXJzZUludCIsIk51bWJlciIsImZyb21Db2RlUG9pbnQiLCJLTk9XTl9FTlRJVFlfTkFNRVMiLCJhdXRvbG9hZGVyIiwibG9hZExhbmd1YWdlcyIsImVsZSIsIm9iamVjdGl2ZWMiLCJvYmpjIiwib2NhbWwiLCJweXRob24iLCJweSIsInJlYXNvbiIsImZ1bmN0aW9uIiwic2FzcyIsImF0cnVsZSIsIm9wZXJhdG9yIiwiaW1wb3J0YW50Iiwic2NzcyIsInNxbCIsInN0eWx1cyIsInR5cGVzY3JpcHQiLCJ0eXBlSW5zaWRlIiwidHMiLCJ0c3giLCJ3YXNtIiwiYW5jaG9yT3JBbGlhcyIsInByb3BlcnRpZXMiLCJwbGFpbktleSIsImNyZWF0ZVZhbHVlUGF0dGVybiIsInltbCIsInRoZW1lIiwiYmFja2dyb3VuZENvbG9yIiwidGV4dERlY29yYXRpb25MaW5lIiwiZm9udFN0eWxlIiwiX2RlZmluZVByb3BlcnR5Iiwid3JpdGFibGUiLCJuZXdsaW5lUmUiLCJub3JtYWxpemVFbXB0eUxpbmVzIiwibGluZSIsImVtcHR5IiwiYXBwZW5kVHlwZXMiLCJ0eXBlc1NpemUiLCJ0aGVtZVRvRGljdCIsInRoZW1lRGljdCIsInRoZW1lRW50cnkiLCJpbmNsdWRlcyIsImFjY1N0eWxlIiwib2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlIiwiSGlnaGxpZ2h0IiwibGVuIiwicHJldlRoZW1lIiwicHJldkxhbmd1YWdlIiwib3V0cHV0IiwiZ2V0VGhlbWVEaWN0IiwiYmFzZVN0eWxlIiwidHlwZVN0eWxlcyIsImdldFN0eWxlRm9yVG9rZW4iLCJ0eXBlQXJyU3RhY2siLCJ0b2tlbkFyclN0YWNrIiwidG9rZW5BcnJJbmRleFN0YWNrIiwidG9rZW5BcnJTaXplU3RhY2siLCJzdGFja0luZGV4IiwiY3VycmVudExpbmUiLCJzcGxpdEJ5TmV3bGluZXMiLCJuZXdsaW5lQ291bnQiLCJpJDEiLCJub3JtYWxpemVUb2tlbnMiLCJnZXRMaW5lUHJvcHMiLCJnZXRUb2tlblByb3BzIiwiQXNzZW1ibHkxIiwiTGF5b3V0IiwiaGFzQXNpZGUiLCJGb3JtIiwiZm9ybURhdGEiLCJ0cmFuc2Zvcm1FcnJvciIsInJlcXVpcmVkIiwibWluTGVuZ3RoIiwibWF4TGVuZ3RoIiwib25TdWJtaXQiLCJmaWVsZHMiLCJsYWJlbCIsIm9uQ2hhbmdlIiwibmV3Rm9ybVZhbHVlIiwiZXJyb3JzIiwiZXJyb3JzRGlzcGxheU1vZGUiLCJpc0VtcHR5IiwidXNlcm5hbWVzIiwidXNlcm5hbWUiLCJzZXRGb3JtRGF0YSIsInNldEVycm9ycyIsInZhbGlkYXRvciIsIlByb21pc2UiLCJyZWplY3QiLCJzdWNjZWVkIiwiZmFpbCIsImNoZWNrVXNlck5hbWUiLCJ1bmlxdWUiLCJmb3JtVmFsdWUiLCJydWxlcyIsImFkZEVycm9yIiwiaGFzRXJyb3IiLCJydWxlIiwicHJvbWlzZSIsIm5ld1Byb21pc2VzIiwiZmxhdCIsInByb21pc2VPclN0cmluZyIsInJlc3VsdHMiLCJrdkxpc3QiLCJub0Vycm9yIiwic2V0dmFsdWUiLCJJbnB1dERlbW8iLCJDb21wIiwiTmV3WmhpaGFuIiwic3RhZ2UiLCJzY3ciLCJyZW5kZXJJdGVtIiwiaHRtbEZvciIsInN1YiIsInNvdXJjZURhdGEiLCJwb3NpdGlvbiIsIm92ZXJmbG93Iiwib2Zmc2V0V2lkdGgiLCJjbGllbnRXaWR0aCIsImJhckhlaWdodHMiLCJzZXRCYXJIZWlnaHQiLCJiYXJUb3AiLCJfc2V0QmFyVG9wIiwidHJhbnNsYXRlWSIsInNldFRyYW5zbGF0ZVkiLCJmaXJzdFkiLCJmaXJzdEJhclRvcFJlZiIsImRyYWdnaW5nUmVmIiwibGFzdFlSZWYiLCJzZXRCYXJUb3AiLCJudW1iZXJzIiwiY29uc3RhaW5lclJlZiIsInNjcm9sbEhlaWdodCIsInZpZXdoZWlnaHQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzY3JvbGxoZWlnaHQiLCJvbnNlbGVjdCIsIm9uTW91c2VNb3ZlQmFyIiwib25Nb3VzZVVwQmFyIiwibmV3QmFyVG9wIiwicmlnaHQiLCJvblRvdWNoTW92ZSIsIm9uVG91Y2hTdGFydCIsIm9uU2Nyb2xsIiwib25Ub3VjaEVuZCIsIm9uTW91c2VEb3duIiwiY2hvaWNlZGF0YSIsIm9uQ2xpY2tzdyIsImRhZWMiLCJjYWxjdWxhdGlvbiIsIm11bHRpcGxlQ2hvaWNlIiwiY2FsY3VsYXRpb25zIiwic2luZ2xlQ2hvaWNlIiwiZHJhZ0l0ZW1SZWYiLCJkcm9wQXJlYVJlZiIsInRpdGxlIiwicG9pbnQiLCJ0YXNrcyIsInNldFRhc2tzIiwic29ydGVkTGlzdCIsInNvcnQiLCJsaXN0SGVpZ2h0IiwidXBkYXRlTGlzdCIsImFMaXN0IiwiYkxpc3QiLCJmbGFnIiwiZHJvcFJlY3QiLCJvZmZzZXRYIiwib2Zmc2V0WSIsImRyYWdJdGVtIiwiY3VycmVudEl0ZW0iLCJvcmRlcmVkIiwiY29weSIsIm5ld1RvSW5kZXgiLCJoYW5kbGVEcmFnT3ZlciIsImhhbmRsZURyYWdFbmQiLCJDT0xVTU4iLCJvbkRyYWdFbmQiLCJvbkRyYWdPdmVyIiwiZmluZEluZGV4Iiwicm93IiwiZHJhZ2dhYmxlIiwicGFkZGluZyIsIm9uRHJhZ1N0YXJ0IiwiaGFuZGxlRHJhZ1N0YXJ0IiwibHVYdW4iLCJjZWxlYnJpdHkiLCJvbkRyb3AiLCJvbkRyYWdFbnRlciIsImRpYWxvZ1Zpc2libGUiLCJzZXREaWFsb2dWaXNibGUiLCJDdXJyZW50TG9jYXRpb24iLCJjaXR5Iiwic2V0Q2l0eSIsInhociIsIlhNTEh0dHBSZXF1ZXN0Iiwib25sb2FkIiwicmVzcG9uc2VUZXh0Iiwib25lcnJvciIsInNlbmQiLCJoaWRlIiwic2V0aGlkZSIsImRhdGFzZXQiLCJkaXZSZWYiLCJkaXZSZWZzdyIsImRlcCIsInNldENvdW50IiwidXNlVXBkYXRlIiwib25jbGlja3MiLCJUYWIiLCJzZXRjdXJyZW50SW5kZXgiLCJUYWJQYW5lIiwicHJvcHMxIiwic3RvcmUiLCJ1c2VyIiwiYm9va3MiLCJtb3ZpZXMiLCJyZWR1Y2VyIiwiQ29udGV4dCIsIlVzZXIiLCJCb29rcyIsIk1vb3ZpZXMiLCJjaGVja2VkVmFsdWV3Iiwic2V0Y2hlY2tlZFZhbHVlIiwiaGFuZGxlQ2xpY2siLCJjaGVja2VkVmFsdWUiLCJyYWRpb1N0eWxlIiwidmVydGljYWwiLCJyZW5kZXJDaGlsZHJlbiIsImFyZyIsIm9wdGlvbkNsYXNzTmFtZSIsImRlcml2ZWRDaGVja2VkIiwic2V0ZGVyaXZlZENoZWNrZWQiLCJzd2l0Y2hDbGFzc05hbWUiLCJzcmMiLCJhbHQiLCJzZXRYIiwic2V0WSIsInllcyIsInNlbGVjdGVkVmFsdWVzIiwic2V0c2VsZWN0ZWRWYWx1ZXMiLCJhcnJkYXRhd3MiLCJzZXRhcnJkYXRhd3MiLCJhcnJkYXRhIiwiYXJyZGF0YXdzcyIsInNldGFycmRhdGF3c3MiLCJhcnJkYXRhcyIsImRvbWUiLCJkYXRhU291cmNldyIsImFnZSIsImFkZHJlcyIsImNpcyIsImJheG9kaSIsImJhb2RpIiwic2FkIiwiZGF0YUluZGV4IiwiaGFuZGxlQ2hhbmdlIiwiaGFuZGxlT25DaGFuZ2UiLCJ0aW1lciIsInNwZWVkIiwiaXNDbGljayIsInNldGlzQ2xpY2siLCJhbGkiLCJ3ZWl6aGkiLCJsb3R0ZXJ5Iiwicm9sbCIsInRvdGFsQ291bnQiLCJ2aXNpYmxlTGlzdCIsImNvbnRhaW5lciJdLCJzb3VyY2VSb290IjoiIn0=